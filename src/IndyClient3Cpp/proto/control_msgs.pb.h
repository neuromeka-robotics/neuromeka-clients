// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_msgs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "shared_msgs.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_control_5fmsgs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_control_5fmsgs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[174]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fmsgs_2eproto;
namespace IndyFramework {
namespace Protobuf {
namespace Control {
class AMotionStopReq;
class AMotionStopReqDefaultTypeInternal;
extern AMotionStopReqDefaultTypeInternal _AMotionStopReq_default_instance_;
class AMotionStopRes;
class AMotionStopResDefaultTypeInternal;
extern AMotionStopResDefaultTypeInternal _AMotionStopRes_default_instance_;
class AMoveCReq;
class AMoveCReqDefaultTypeInternal;
extern AMoveCReqDefaultTypeInternal _AMoveCReq_default_instance_;
class AMoveCRes;
class AMoveCResDefaultTypeInternal;
extern AMoveCResDefaultTypeInternal _AMoveCRes_default_instance_;
class AMoveCTReq;
class AMoveCTReqDefaultTypeInternal;
extern AMoveCTReqDefaultTypeInternal _AMoveCTReq_default_instance_;
class AMoveCTRes;
class AMoveCTResDefaultTypeInternal;
extern AMoveCTResDefaultTypeInternal _AMoveCTRes_default_instance_;
class AMoveJReq;
class AMoveJReqDefaultTypeInternal;
extern AMoveJReqDefaultTypeInternal _AMoveJReq_default_instance_;
class AMoveJRes;
class AMoveJResDefaultTypeInternal;
extern AMoveJResDefaultTypeInternal _AMoveJRes_default_instance_;
class AMoveJTReq;
class AMoveJTReqDefaultTypeInternal;
extern AMoveJTReqDefaultTypeInternal _AMoveJTReq_default_instance_;
class AMoveJTRes;
class AMoveJTResDefaultTypeInternal;
extern AMoveJTResDefaultTypeInternal _AMoveJTRes_default_instance_;
class AMoveLReq;
class AMoveLReqDefaultTypeInternal;
extern AMoveLReqDefaultTypeInternal _AMoveLReq_default_instance_;
class AMoveLRes;
class AMoveLResDefaultTypeInternal;
extern AMoveLResDefaultTypeInternal _AMoveLRes_default_instance_;
class AMoveLTReq;
class AMoveLTReqDefaultTypeInternal;
extern AMoveLTReqDefaultTypeInternal _AMoveLTReq_default_instance_;
class AMoveLTRes;
class AMoveLTResDefaultTypeInternal;
extern AMoveLTResDefaultTypeInternal _AMoveLTRes_default_instance_;
class AWaitIOReq;
class AWaitIOReqDefaultTypeInternal;
extern AWaitIOReqDefaultTypeInternal _AWaitIOReq_default_instance_;
class AWaitIORes;
class AWaitIOResDefaultTypeInternal;
extern AWaitIOResDefaultTypeInternal _AWaitIORes_default_instance_;
class AWaitProgressReq;
class AWaitProgressReqDefaultTypeInternal;
extern AWaitProgressReqDefaultTypeInternal _AWaitProgressReq_default_instance_;
class AWaitProgressRes;
class AWaitProgressResDefaultTypeInternal;
extern AWaitProgressResDefaultTypeInternal _AWaitProgressRes_default_instance_;
class AWaitRadiusReq;
class AWaitRadiusReqDefaultTypeInternal;
extern AWaitRadiusReqDefaultTypeInternal _AWaitRadiusReq_default_instance_;
class AWaitRadiusRes;
class AWaitRadiusResDefaultTypeInternal;
extern AWaitRadiusResDefaultTypeInternal _AWaitRadiusRes_default_instance_;
class AWaitTimeReq;
class AWaitTimeReqDefaultTypeInternal;
extern AWaitTimeReqDefaultTypeInternal _AWaitTimeReq_default_instance_;
class AWaitTimeRes;
class AWaitTimeResDefaultTypeInternal;
extern AWaitTimeResDefaultTypeInternal _AWaitTimeRes_default_instance_;
class AWaitTrajReq;
class AWaitTrajReqDefaultTypeInternal;
extern AWaitTrajReqDefaultTypeInternal _AWaitTrajReq_default_instance_;
class AWaitTrajRes;
class AWaitTrajResDefaultTypeInternal;
extern AWaitTrajResDefaultTypeInternal _AWaitTrajRes_default_instance_;
class BrakeReq;
class BrakeReqDefaultTypeInternal;
extern BrakeReqDefaultTypeInternal _BrakeReq_default_instance_;
class BrakeRes;
class BrakeResDefaultTypeInternal;
extern BrakeResDefaultTypeInternal _BrakeRes_default_instance_;
class CalculateCurrentPoseRelReq;
class CalculateCurrentPoseRelReqDefaultTypeInternal;
extern CalculateCurrentPoseRelReqDefaultTypeInternal _CalculateCurrentPoseRelReq_default_instance_;
class CalculateCurrentPoseRelRes;
class CalculateCurrentPoseRelResDefaultTypeInternal;
extern CalculateCurrentPoseRelResDefaultTypeInternal _CalculateCurrentPoseRelRes_default_instance_;
class CalculateRelativePoseReq;
class CalculateRelativePoseReqDefaultTypeInternal;
extern CalculateRelativePoseReqDefaultTypeInternal _CalculateRelativePoseReq_default_instance_;
class CalculateRelativePoseRes;
class CalculateRelativePoseResDefaultTypeInternal;
extern CalculateRelativePoseResDefaultTypeInternal _CalculateRelativePoseRes_default_instance_;
class CheckAproachRetractValidReq;
class CheckAproachRetractValidReqDefaultTypeInternal;
extern CheckAproachRetractValidReqDefaultTypeInternal _CheckAproachRetractValidReq_default_instance_;
class CheckAproachRetractValidRes;
class CheckAproachRetractValidResDefaultTypeInternal;
extern CheckAproachRetractValidResDefaultTypeInternal _CheckAproachRetractValidRes_default_instance_;
class DirectTeachingModeReq;
class DirectTeachingModeReqDefaultTypeInternal;
extern DirectTeachingModeReqDefaultTypeInternal _DirectTeachingModeReq_default_instance_;
class DirectTeachingModeRes;
class DirectTeachingModeResDefaultTypeInternal;
extern DirectTeachingModeResDefaultTypeInternal _DirectTeachingModeRes_default_instance_;
class GetAIReq;
class GetAIReqDefaultTypeInternal;
extern GetAIReqDefaultTypeInternal _GetAIReq_default_instance_;
class GetAIRes;
class GetAIResDefaultTypeInternal;
extern GetAIResDefaultTypeInternal _GetAIRes_default_instance_;
class GetAOReq;
class GetAOReqDefaultTypeInternal;
extern GetAOReqDefaultTypeInternal _GetAOReq_default_instance_;
class GetAORes;
class GetAOResDefaultTypeInternal;
extern GetAOResDefaultTypeInternal _GetAORes_default_instance_;
class GetAutoServoOffReq;
class GetAutoServoOffReqDefaultTypeInternal;
extern GetAutoServoOffReqDefaultTypeInternal _GetAutoServoOffReq_default_instance_;
class GetAutoServoOffRes;
class GetAutoServoOffResDefaultTypeInternal;
extern GetAutoServoOffResDefaultTypeInternal _GetAutoServoOffRes_default_instance_;
class GetCollPolicyReq;
class GetCollPolicyReqDefaultTypeInternal;
extern GetCollPolicyReqDefaultTypeInternal _GetCollPolicyReq_default_instance_;
class GetCollPolicyRes;
class GetCollPolicyResDefaultTypeInternal;
extern GetCollPolicyResDefaultTypeInternal _GetCollPolicyRes_default_instance_;
class GetCollSensLevelReq;
class GetCollSensLevelReqDefaultTypeInternal;
extern GetCollSensLevelReqDefaultTypeInternal _GetCollSensLevelReq_default_instance_;
class GetCollSensLevelRes;
class GetCollSensLevelResDefaultTypeInternal;
extern GetCollSensLevelResDefaultTypeInternal _GetCollSensLevelRes_default_instance_;
class GetCollSensParamReq;
class GetCollSensParamReqDefaultTypeInternal;
extern GetCollSensParamReqDefaultTypeInternal _GetCollSensParamReq_default_instance_;
class GetCollSensParamRes;
class GetCollSensParamResDefaultTypeInternal;
extern GetCollSensParamResDefaultTypeInternal _GetCollSensParamRes_default_instance_;
class GetCollTuningParamReq;
class GetCollTuningParamReqDefaultTypeInternal;
extern GetCollTuningParamReqDefaultTypeInternal _GetCollTuningParamReq_default_instance_;
class GetCollTuningParamRes;
class GetCollTuningParamResDefaultTypeInternal;
extern GetCollTuningParamResDefaultTypeInternal _GetCollTuningParamRes_default_instance_;
class GetCoreDataReq;
class GetCoreDataReqDefaultTypeInternal;
extern GetCoreDataReqDefaultTypeInternal _GetCoreDataReq_default_instance_;
class GetCoreDataRes;
class GetCoreDataResDefaultTypeInternal;
extern GetCoreDataResDefaultTypeInternal _GetCoreDataRes_default_instance_;
class GetDIReq;
class GetDIReqDefaultTypeInternal;
extern GetDIReqDefaultTypeInternal _GetDIReq_default_instance_;
class GetDIRes;
class GetDIResDefaultTypeInternal;
extern GetDIResDefaultTypeInternal _GetDIRes_default_instance_;
class GetDOReq;
class GetDOReqDefaultTypeInternal;
extern GetDOReqDefaultTypeInternal _GetDOReq_default_instance_;
class GetDORes;
class GetDOResDefaultTypeInternal;
extern GetDOResDefaultTypeInternal _GetDORes_default_instance_;
class GetEL5001Req;
class GetEL5001ReqDefaultTypeInternal;
extern GetEL5001ReqDefaultTypeInternal _GetEL5001Req_default_instance_;
class GetEL5001Res;
class GetEL5001ResDefaultTypeInternal;
extern GetEL5001ResDefaultTypeInternal _GetEL5001Res_default_instance_;
class GetEL5101Req;
class GetEL5101ReqDefaultTypeInternal;
extern GetEL5101ReqDefaultTypeInternal _GetEL5101Req_default_instance_;
class GetEL5101Res;
class GetEL5101ResDefaultTypeInternal;
extern GetEL5101ResDefaultTypeInternal _GetEL5101Res_default_instance_;
class GetEndAIReq;
class GetEndAIReqDefaultTypeInternal;
extern GetEndAIReqDefaultTypeInternal _GetEndAIReq_default_instance_;
class GetEndAIRes;
class GetEndAIResDefaultTypeInternal;
extern GetEndAIResDefaultTypeInternal _GetEndAIRes_default_instance_;
class GetEndAOReq;
class GetEndAOReqDefaultTypeInternal;
extern GetEndAOReqDefaultTypeInternal _GetEndAOReq_default_instance_;
class GetEndAORes;
class GetEndAOResDefaultTypeInternal;
extern GetEndAOResDefaultTypeInternal _GetEndAORes_default_instance_;
class GetEndDIReq;
class GetEndDIReqDefaultTypeInternal;
extern GetEndDIReqDefaultTypeInternal _GetEndDIReq_default_instance_;
class GetEndDIRes;
class GetEndDIResDefaultTypeInternal;
extern GetEndDIResDefaultTypeInternal _GetEndDIRes_default_instance_;
class GetEndDOReq;
class GetEndDOReqDefaultTypeInternal;
extern GetEndDOReqDefaultTypeInternal _GetEndDOReq_default_instance_;
class GetEndDORes;
class GetEndDOResDefaultTypeInternal;
extern GetEndDOResDefaultTypeInternal _GetEndDORes_default_instance_;
class GetFricCompReq;
class GetFricCompReqDefaultTypeInternal;
extern GetFricCompReqDefaultTypeInternal _GetFricCompReq_default_instance_;
class GetFricCompRes;
class GetFricCompResDefaultTypeInternal;
extern GetFricCompResDefaultTypeInternal _GetFricCompRes_default_instance_;
class GetIODataReq;
class GetIODataReqDefaultTypeInternal;
extern GetIODataReqDefaultTypeInternal _GetIODataReq_default_instance_;
class GetIODataRes;
class GetIODataResDefaultTypeInternal;
extern GetIODataResDefaultTypeInternal _GetIODataRes_default_instance_;
class GetImpedanceControlGainReq;
class GetImpedanceControlGainReqDefaultTypeInternal;
extern GetImpedanceControlGainReqDefaultTypeInternal _GetImpedanceControlGainReq_default_instance_;
class GetImpedanceControlGainRes;
class GetImpedanceControlGainResDefaultTypeInternal;
extern GetImpedanceControlGainResDefaultTypeInternal _GetImpedanceControlGainRes_default_instance_;
class GetJointControlGainReq;
class GetJointControlGainReqDefaultTypeInternal;
extern GetJointControlGainReqDefaultTypeInternal _GetJointControlGainReq_default_instance_;
class GetJointControlGainRes;
class GetJointControlGainResDefaultTypeInternal;
extern GetJointControlGainResDefaultTypeInternal _GetJointControlGainRes_default_instance_;
class GetMotionDataReq;
class GetMotionDataReqDefaultTypeInternal;
extern GetMotionDataReqDefaultTypeInternal _GetMotionDataReq_default_instance_;
class GetMotionDataRes;
class GetMotionDataResDefaultTypeInternal;
extern GetMotionDataResDefaultTypeInternal _GetMotionDataRes_default_instance_;
class GetMountPosReq;
class GetMountPosReqDefaultTypeInternal;
extern GetMountPosReqDefaultTypeInternal _GetMountPosReq_default_instance_;
class GetMountPosRes;
class GetMountPosResDefaultTypeInternal;
extern GetMountPosResDefaultTypeInternal _GetMountPosRes_default_instance_;
class GetPalletPointListReq;
class GetPalletPointListReqDefaultTypeInternal;
extern GetPalletPointListReqDefaultTypeInternal _GetPalletPointListReq_default_instance_;
class GetPalletPointListRes;
class GetPalletPointListResDefaultTypeInternal;
extern GetPalletPointListResDefaultTypeInternal _GetPalletPointListRes_default_instance_;
class GetRTControlDataReq;
class GetRTControlDataReqDefaultTypeInternal;
extern GetRTControlDataReqDefaultTypeInternal _GetRTControlDataReq_default_instance_;
class GetRTControlDataRes;
class GetRTControlDataResDefaultTypeInternal;
extern GetRTControlDataResDefaultTypeInternal _GetRTControlDataRes_default_instance_;
class GetSafetyLimitConfigReq;
class GetSafetyLimitConfigReqDefaultTypeInternal;
extern GetSafetyLimitConfigReqDefaultTypeInternal _GetSafetyLimitConfigReq_default_instance_;
class GetSafetyLimitConfigRes;
class GetSafetyLimitConfigResDefaultTypeInternal;
extern GetSafetyLimitConfigResDefaultTypeInternal _GetSafetyLimitConfigRes_default_instance_;
class GetSafetyStopConfigReq;
class GetSafetyStopConfigReqDefaultTypeInternal;
extern GetSafetyStopConfigReqDefaultTypeInternal _GetSafetyStopConfigReq_default_instance_;
class GetSafetyStopConfigRes;
class GetSafetyStopConfigResDefaultTypeInternal;
extern GetSafetyStopConfigResDefaultTypeInternal _GetSafetyStopConfigRes_default_instance_;
class GetStateDataReq;
class GetStateDataReqDefaultTypeInternal;
extern GetStateDataReqDefaultTypeInternal _GetStateDataReq_default_instance_;
class GetStateDataRes;
class GetStateDataResDefaultTypeInternal;
extern GetStateDataResDefaultTypeInternal _GetStateDataRes_default_instance_;
class GetSystemInfoDataReq;
class GetSystemInfoDataReqDefaultTypeInternal;
extern GetSystemInfoDataReqDefaultTypeInternal _GetSystemInfoDataReq_default_instance_;
class GetSystemInfoDataRes;
class GetSystemInfoDataResDefaultTypeInternal;
extern GetSystemInfoDataResDefaultTypeInternal _GetSystemInfoDataRes_default_instance_;
class GetTaskControlGainReq;
class GetTaskControlGainReqDefaultTypeInternal;
extern GetTaskControlGainReqDefaultTypeInternal _GetTaskControlGainReq_default_instance_;
class GetTaskControlGainRes;
class GetTaskControlGainResDefaultTypeInternal;
extern GetTaskControlGainResDefaultTypeInternal _GetTaskControlGainRes_default_instance_;
class GetToolPropertyReq;
class GetToolPropertyReqDefaultTypeInternal;
extern GetToolPropertyReqDefaultTypeInternal _GetToolPropertyReq_default_instance_;
class GetToolPropertyRes;
class GetToolPropertyResDefaultTypeInternal;
extern GetToolPropertyResDefaultTypeInternal _GetToolPropertyRes_default_instance_;
class GetViolationDataReq;
class GetViolationDataReqDefaultTypeInternal;
extern GetViolationDataReqDefaultTypeInternal _GetViolationDataReq_default_instance_;
class GetViolationDataRes;
class GetViolationDataResDefaultTypeInternal;
extern GetViolationDataResDefaultTypeInternal _GetViolationDataRes_default_instance_;
class InverseKinematicsReq;
class InverseKinematicsReqDefaultTypeInternal;
extern InverseKinematicsReqDefaultTypeInternal _InverseKinematicsReq_default_instance_;
class InverseKinematicsRes;
class InverseKinematicsResDefaultTypeInternal;
extern InverseKinematicsResDefaultTypeInternal _InverseKinematicsRes_default_instance_;
class MoveSJReq;
class MoveSJReqDefaultTypeInternal;
extern MoveSJReqDefaultTypeInternal _MoveSJReq_default_instance_;
class MoveSJRes;
class MoveSJResDefaultTypeInternal;
extern MoveSJResDefaultTypeInternal _MoveSJRes_default_instance_;
class MoveSJTReq;
class MoveSJTReqDefaultTypeInternal;
extern MoveSJTReqDefaultTypeInternal _MoveSJTReq_default_instance_;
class MoveSJTRes;
class MoveSJTResDefaultTypeInternal;
extern MoveSJTResDefaultTypeInternal _MoveSJTRes_default_instance_;
class MoveSLReq;
class MoveSLReqDefaultTypeInternal;
extern MoveSLReqDefaultTypeInternal _MoveSLReq_default_instance_;
class MoveSLRes;
class MoveSLResDefaultTypeInternal;
extern MoveSLResDefaultTypeInternal _MoveSLRes_default_instance_;
class MoveSLTReq;
class MoveSLTReqDefaultTypeInternal;
extern MoveSLTReqDefaultTypeInternal _MoveSLTReq_default_instance_;
class MoveSLTRes;
class MoveSLTResDefaultTypeInternal;
extern MoveSLTResDefaultTypeInternal _MoveSLTRes_default_instance_;
class MoveSpiralReq;
class MoveSpiralReqDefaultTypeInternal;
extern MoveSpiralReqDefaultTypeInternal _MoveSpiralReq_default_instance_;
class MoveSpiralRes;
class MoveSpiralResDefaultTypeInternal;
extern MoveSpiralResDefaultTypeInternal _MoveSpiralRes_default_instance_;
class PauseReq;
class PauseReqDefaultTypeInternal;
extern PauseReqDefaultTypeInternal _PauseReq_default_instance_;
class PauseRes;
class PauseResDefaultTypeInternal;
extern PauseResDefaultTypeInternal _PauseRes_default_instance_;
class RebootReq;
class RebootReqDefaultTypeInternal;
extern RebootReqDefaultTypeInternal _RebootReq_default_instance_;
class RebootRes;
class RebootResDefaultTypeInternal;
extern RebootResDefaultTypeInternal _RebootRes_default_instance_;
class RecoverReq;
class RecoverReqDefaultTypeInternal;
extern RecoverReqDefaultTypeInternal _RecoverReq_default_instance_;
class RecoverRes;
class RecoverResDefaultTypeInternal;
extern RecoverResDefaultTypeInternal _RecoverRes_default_instance_;
class ResumeReq;
class ResumeReqDefaultTypeInternal;
extern ResumeReqDefaultTypeInternal _ResumeReq_default_instance_;
class ResumeRes;
class ResumeResDefaultTypeInternal;
extern ResumeResDefaultTypeInternal _ResumeRes_default_instance_;
class ServoReq;
class ServoReqDefaultTypeInternal;
extern ServoReqDefaultTypeInternal _ServoReq_default_instance_;
class ServoRes;
class ServoResDefaultTypeInternal;
extern ServoResDefaultTypeInternal _ServoRes_default_instance_;
class SetAIReq;
class SetAIReqDefaultTypeInternal;
extern SetAIReqDefaultTypeInternal _SetAIReq_default_instance_;
class SetAIRes;
class SetAIResDefaultTypeInternal;
extern SetAIResDefaultTypeInternal _SetAIRes_default_instance_;
class SetAOReq;
class SetAOReqDefaultTypeInternal;
extern SetAOReqDefaultTypeInternal _SetAOReq_default_instance_;
class SetAORes;
class SetAOResDefaultTypeInternal;
extern SetAOResDefaultTypeInternal _SetAORes_default_instance_;
class SetAutoServoOffReq;
class SetAutoServoOffReqDefaultTypeInternal;
extern SetAutoServoOffReqDefaultTypeInternal _SetAutoServoOffReq_default_instance_;
class SetAutoServoOffRes;
class SetAutoServoOffResDefaultTypeInternal;
extern SetAutoServoOffResDefaultTypeInternal _SetAutoServoOffRes_default_instance_;
class SetCollPolicyReq;
class SetCollPolicyReqDefaultTypeInternal;
extern SetCollPolicyReqDefaultTypeInternal _SetCollPolicyReq_default_instance_;
class SetCollPolicyRes;
class SetCollPolicyResDefaultTypeInternal;
extern SetCollPolicyResDefaultTypeInternal _SetCollPolicyRes_default_instance_;
class SetCollSensLevelReq;
class SetCollSensLevelReqDefaultTypeInternal;
extern SetCollSensLevelReqDefaultTypeInternal _SetCollSensLevelReq_default_instance_;
class SetCollSensLevelRes;
class SetCollSensLevelResDefaultTypeInternal;
extern SetCollSensLevelResDefaultTypeInternal _SetCollSensLevelRes_default_instance_;
class SetCollSensParamReq;
class SetCollSensParamReqDefaultTypeInternal;
extern SetCollSensParamReqDefaultTypeInternal _SetCollSensParamReq_default_instance_;
class SetCollSensParamRes;
class SetCollSensParamResDefaultTypeInternal;
extern SetCollSensParamResDefaultTypeInternal _SetCollSensParamRes_default_instance_;
class SetCommandSpeedRatioReq;
class SetCommandSpeedRatioReqDefaultTypeInternal;
extern SetCommandSpeedRatioReqDefaultTypeInternal _SetCommandSpeedRatioReq_default_instance_;
class SetCommandSpeedRatioRes;
class SetCommandSpeedRatioResDefaultTypeInternal;
extern SetCommandSpeedRatioResDefaultTypeInternal _SetCommandSpeedRatioRes_default_instance_;
class SetDIReq;
class SetDIReqDefaultTypeInternal;
extern SetDIReqDefaultTypeInternal _SetDIReq_default_instance_;
class SetDIRes;
class SetDIResDefaultTypeInternal;
extern SetDIResDefaultTypeInternal _SetDIRes_default_instance_;
class SetDOReq;
class SetDOReqDefaultTypeInternal;
extern SetDOReqDefaultTypeInternal _SetDOReq_default_instance_;
class SetDORes;
class SetDOResDefaultTypeInternal;
extern SetDOResDefaultTypeInternal _SetDORes_default_instance_;
class SetEndAIReq;
class SetEndAIReqDefaultTypeInternal;
extern SetEndAIReqDefaultTypeInternal _SetEndAIReq_default_instance_;
class SetEndAIRes;
class SetEndAIResDefaultTypeInternal;
extern SetEndAIResDefaultTypeInternal _SetEndAIRes_default_instance_;
class SetEndAOReq;
class SetEndAOReqDefaultTypeInternal;
extern SetEndAOReqDefaultTypeInternal _SetEndAOReq_default_instance_;
class SetEndAORes;
class SetEndAOResDefaultTypeInternal;
extern SetEndAOResDefaultTypeInternal _SetEndAORes_default_instance_;
class SetEndDIReq;
class SetEndDIReqDefaultTypeInternal;
extern SetEndDIReqDefaultTypeInternal _SetEndDIReq_default_instance_;
class SetEndDIRes;
class SetEndDIResDefaultTypeInternal;
extern SetEndDIResDefaultTypeInternal _SetEndDIRes_default_instance_;
class SetEndDOReq;
class SetEndDOReqDefaultTypeInternal;
extern SetEndDOReqDefaultTypeInternal _SetEndDOReq_default_instance_;
class SetEndDORes;
class SetEndDOResDefaultTypeInternal;
extern SetEndDOResDefaultTypeInternal _SetEndDORes_default_instance_;
class SetFricCompReq;
class SetFricCompReqDefaultTypeInternal;
extern SetFricCompReqDefaultTypeInternal _SetFricCompReq_default_instance_;
class SetFricCompRes;
class SetFricCompResDefaultTypeInternal;
extern SetFricCompResDefaultTypeInternal _SetFricCompRes_default_instance_;
class SetImpedanceControlGainReq;
class SetImpedanceControlGainReqDefaultTypeInternal;
extern SetImpedanceControlGainReqDefaultTypeInternal _SetImpedanceControlGainReq_default_instance_;
class SetImpedanceControlGainRes;
class SetImpedanceControlGainResDefaultTypeInternal;
extern SetImpedanceControlGainResDefaultTypeInternal _SetImpedanceControlGainRes_default_instance_;
class SetJointControlGainReq;
class SetJointControlGainReqDefaultTypeInternal;
extern SetJointControlGainReqDefaultTypeInternal _SetJointControlGainReq_default_instance_;
class SetJointControlGainRes;
class SetJointControlGainResDefaultTypeInternal;
extern SetJointControlGainResDefaultTypeInternal _SetJointControlGainRes_default_instance_;
class SetMountPosReq;
class SetMountPosReqDefaultTypeInternal;
extern SetMountPosReqDefaultTypeInternal _SetMountPosReq_default_instance_;
class SetMountPosRes;
class SetMountPosResDefaultTypeInternal;
extern SetMountPosResDefaultTypeInternal _SetMountPosRes_default_instance_;
class SetProgramStateReq;
class SetProgramStateReqDefaultTypeInternal;
extern SetProgramStateReqDefaultTypeInternal _SetProgramStateReq_default_instance_;
class SetProgramStateRes;
class SetProgramStateResDefaultTypeInternal;
extern SetProgramStateResDefaultTypeInternal _SetProgramStateRes_default_instance_;
class SetRefFramePlanarReq;
class SetRefFramePlanarReqDefaultTypeInternal;
extern SetRefFramePlanarReqDefaultTypeInternal _SetRefFramePlanarReq_default_instance_;
class SetRefFramePlanarRes;
class SetRefFramePlanarResDefaultTypeInternal;
extern SetRefFramePlanarResDefaultTypeInternal _SetRefFramePlanarRes_default_instance_;
class SetRefFrameReq;
class SetRefFrameReqDefaultTypeInternal;
extern SetRefFrameReqDefaultTypeInternal _SetRefFrameReq_default_instance_;
class SetRefFrameRes;
class SetRefFrameResDefaultTypeInternal;
extern SetRefFrameResDefaultTypeInternal _SetRefFrameRes_default_instance_;
class SetSafetyLimitConfigReq;
class SetSafetyLimitConfigReqDefaultTypeInternal;
extern SetSafetyLimitConfigReqDefaultTypeInternal _SetSafetyLimitConfigReq_default_instance_;
class SetSafetyLimitConfigRes;
class SetSafetyLimitConfigResDefaultTypeInternal;
extern SetSafetyLimitConfigResDefaultTypeInternal _SetSafetyLimitConfigRes_default_instance_;
class SetSafetyStopConfigReq;
class SetSafetyStopConfigReqDefaultTypeInternal;
extern SetSafetyStopConfigReqDefaultTypeInternal _SetSafetyStopConfigReq_default_instance_;
class SetSafetyStopConfigRes;
class SetSafetyStopConfigResDefaultTypeInternal;
extern SetSafetyStopConfigResDefaultTypeInternal _SetSafetyStopConfigRes_default_instance_;
class SetSpeedRatioReq;
class SetSpeedRatioReqDefaultTypeInternal;
extern SetSpeedRatioReqDefaultTypeInternal _SetSpeedRatioReq_default_instance_;
class SetSpeedRatioRes;
class SetSpeedRatioResDefaultTypeInternal;
extern SetSpeedRatioResDefaultTypeInternal _SetSpeedRatioRes_default_instance_;
class SetTaskControlGainReq;
class SetTaskControlGainReqDefaultTypeInternal;
extern SetTaskControlGainReqDefaultTypeInternal _SetTaskControlGainReq_default_instance_;
class SetTaskControlGainRes;
class SetTaskControlGainResDefaultTypeInternal;
extern SetTaskControlGainResDefaultTypeInternal _SetTaskControlGainRes_default_instance_;
class SetToolFrameReq;
class SetToolFrameReqDefaultTypeInternal;
extern SetToolFrameReqDefaultTypeInternal _SetToolFrameReq_default_instance_;
class SetToolFrameRes;
class SetToolFrameResDefaultTypeInternal;
extern SetToolFrameResDefaultTypeInternal _SetToolFrameRes_default_instance_;
class SetToolPropertyReq;
class SetToolPropertyReqDefaultTypeInternal;
extern SetToolPropertyReqDefaultTypeInternal _SetToolPropertyReq_default_instance_;
class SetToolPropertyRes;
class SetToolPropertyResDefaultTypeInternal;
extern SetToolPropertyResDefaultTypeInternal _SetToolPropertyRes_default_instance_;
class SimulationModeReq;
class SimulationModeReqDefaultTypeInternal;
extern SimulationModeReqDefaultTypeInternal _SimulationModeReq_default_instance_;
class SimulationModeRes;
class SimulationModeResDefaultTypeInternal;
extern SimulationModeResDefaultTypeInternal _SimulationModeRes_default_instance_;
class StopReq;
class StopReqDefaultTypeInternal;
extern StopReqDefaultTypeInternal _StopReq_default_instance_;
class StopRes;
class StopResDefaultTypeInternal;
extern StopResDefaultTypeInternal _StopRes_default_instance_;
}  // namespace Control
}  // namespace Protobuf
}  // namespace IndyFramework
PROTOBUF_NAMESPACE_OPEN
template<> ::IndyFramework::Protobuf::Control::AMotionStopReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMotionStopReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMotionStopRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMotionStopRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMoveCReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMoveCReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMoveCRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMoveCRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMoveCTReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMoveCTReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMoveCTRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMoveCTRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMoveJReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMoveJReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMoveJRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMoveJRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMoveJTReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMoveJTReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMoveJTRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMoveJTRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMoveLReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMoveLReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMoveLRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMoveLRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMoveLTReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMoveLTReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AMoveLTRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AMoveLTRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AWaitIOReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AWaitIOReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AWaitIORes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AWaitIORes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AWaitProgressReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AWaitProgressReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AWaitProgressRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AWaitProgressRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AWaitRadiusReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AWaitRadiusReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AWaitRadiusRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AWaitRadiusRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AWaitTimeReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AWaitTimeReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AWaitTimeRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AWaitTimeRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AWaitTrajReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AWaitTrajReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::AWaitTrajRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::AWaitTrajRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::BrakeReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::BrakeReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::BrakeRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::BrakeRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::CalculateRelativePoseReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::CalculateRelativePoseRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::DirectTeachingModeReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::DirectTeachingModeReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::DirectTeachingModeRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::DirectTeachingModeRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetAIReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetAIReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetAIRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetAIRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetAOReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetAOReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetAORes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetAORes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetAutoServoOffReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetAutoServoOffReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetAutoServoOffRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetAutoServoOffRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetCollPolicyReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetCollPolicyReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetCollPolicyRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetCollPolicyRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetCollSensLevelReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetCollSensLevelReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetCollSensLevelRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetCollSensLevelRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetCollSensParamReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetCollSensParamReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetCollSensParamRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetCollSensParamRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetCollTuningParamReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetCollTuningParamReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetCollTuningParamRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetCollTuningParamRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetCoreDataReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetCoreDataReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetCoreDataRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetCoreDataRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetDIReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetDIReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetDIRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetDIRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetDOReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetDOReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetDORes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetDORes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetEL5001Req* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetEL5001Req>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetEL5001Res* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetEL5001Res>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetEL5101Req* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetEL5101Req>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetEL5101Res* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetEL5101Res>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetEndAIReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetEndAIReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetEndAIRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetEndAIRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetEndAOReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetEndAOReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetEndAORes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetEndAORes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetEndDIReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetEndDIReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetEndDIRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetEndDIRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetEndDOReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetEndDOReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetEndDORes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetEndDORes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetFricCompReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetFricCompReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetFricCompRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetFricCompRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetIODataReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetIODataReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetIODataRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetIODataRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetJointControlGainReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetJointControlGainReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetJointControlGainRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetJointControlGainRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetMotionDataReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetMotionDataReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetMotionDataRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetMotionDataRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetMountPosReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetMountPosReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetMountPosRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetMountPosRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetPalletPointListReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetPalletPointListReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetPalletPointListRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetPalletPointListRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetRTControlDataReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetRTControlDataReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetRTControlDataRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetRTControlDataRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetStateDataReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetStateDataReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetStateDataRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetStateDataRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetSystemInfoDataReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetSystemInfoDataRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetTaskControlGainReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetTaskControlGainReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetTaskControlGainRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetTaskControlGainRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetToolPropertyReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetToolPropertyReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetToolPropertyRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetToolPropertyRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetViolationDataReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetViolationDataReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::GetViolationDataRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::GetViolationDataRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::InverseKinematicsReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::InverseKinematicsReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::InverseKinematicsRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::InverseKinematicsRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::MoveSJReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::MoveSJReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::MoveSJRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::MoveSJRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::MoveSJTReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::MoveSJTReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::MoveSJTRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::MoveSJTRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::MoveSLReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::MoveSLReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::MoveSLRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::MoveSLRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::MoveSLTReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::MoveSLTReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::MoveSLTRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::MoveSLTRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::MoveSpiralReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::MoveSpiralReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::MoveSpiralRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::MoveSpiralRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::PauseReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::PauseReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::PauseRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::PauseRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::RebootReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::RebootReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::RebootRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::RebootRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::RecoverReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::RecoverReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::RecoverRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::RecoverRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::ResumeReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::ResumeReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::ResumeRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::ResumeRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::ServoReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::ServoReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::ServoRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::ServoRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetAIReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetAIReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetAIRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetAIRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetAOReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetAOReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetAORes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetAORes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetAutoServoOffReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetAutoServoOffReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetAutoServoOffRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetAutoServoOffRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetCollPolicyReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetCollPolicyReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetCollPolicyRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetCollPolicyRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetCollSensLevelReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetCollSensLevelReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetCollSensLevelRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetCollSensLevelRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetCollSensParamReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetCollSensParamReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetCollSensParamRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetCollSensParamRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetDIReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetDIReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetDIRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetDIRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetDOReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetDOReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetDORes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetDORes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetEndAIReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetEndAIReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetEndAIRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetEndAIRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetEndAOReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetEndAOReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetEndAORes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetEndAORes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetEndDIReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetEndDIReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetEndDIRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetEndDIRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetEndDOReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetEndDOReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetEndDORes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetEndDORes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetFricCompReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetFricCompReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetFricCompRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetFricCompRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetJointControlGainReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetJointControlGainReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetJointControlGainRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetJointControlGainRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetMountPosReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetMountPosReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetMountPosRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetMountPosRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetProgramStateReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetProgramStateReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetProgramStateRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetProgramStateRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetRefFramePlanarReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetRefFramePlanarRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetRefFrameReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetRefFrameReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetRefFrameRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetRefFrameRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetSpeedRatioReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetSpeedRatioReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetSpeedRatioRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetSpeedRatioRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetTaskControlGainReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetTaskControlGainReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetTaskControlGainRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetTaskControlGainRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetToolFrameReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetToolFrameReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetToolFrameRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetToolFrameRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetToolPropertyReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetToolPropertyReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SetToolPropertyRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SetToolPropertyRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SimulationModeReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SimulationModeReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::SimulationModeRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::SimulationModeRes>(Arena*);
template<> ::IndyFramework::Protobuf::Control::StopReq* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::StopReq>(Arena*);
template<> ::IndyFramework::Protobuf::Control::StopRes* Arena::CreateMaybeMessage<::IndyFramework::Protobuf::Control::StopRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IndyFramework {
namespace Protobuf {
namespace Control {

// ===================================================================

class AMoveJReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMoveJReq) */ {
 public:
  AMoveJReq();
  virtual ~AMoveJReq();

  AMoveJReq(const AMoveJReq& from);
  AMoveJReq(AMoveJReq&& from) noexcept
    : AMoveJReq() {
    *this = ::std::move(from);
  }

  inline AMoveJReq& operator=(const AMoveJReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMoveJReq& operator=(AMoveJReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMoveJReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMoveJReq* internal_default_instance() {
    return reinterpret_cast<const AMoveJReq*>(
               &_AMoveJReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AMoveJReq* other);
  friend void swap(AMoveJReq& a, AMoveJReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMoveJReq* New() const final {
    return CreateMaybeMessage<AMoveJReq>(nullptr);
  }

  AMoveJReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMoveJReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMoveJReq& from);
  void MergeFrom(const AMoveJReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMoveJReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMoveJReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float jpos = 1;
  int jpos_size() const;
  void clear_jpos();
  static const int kJposFieldNumber = 1;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_jpos();

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  void clear_blending_type();
  static const int kBlendingTypeFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::BlendingType blending_type() const;
  void set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value);

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::JointBaseType base_type() const;
  void set_base_type(::IndyFramework::Protobuf::Shared::JointBaseType value);

  // float blending_radius = 5;
  void clear_blending_radius();
  static const int kBlendingRadiusFieldNumber = 5;
  float blending_radius() const;
  void set_blending_radius(float value);

  // float vel = 7;
  void clear_vel();
  static const int kVelFieldNumber = 7;
  float vel() const;
  void set_vel(float value);

  // float acc = 8;
  void clear_acc();
  static const int kAccFieldNumber = 8;
  float acc() const;
  void set_acc(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMoveJReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > jpos_;
  mutable std::atomic<int> _jpos_cached_byte_size_;
  int blending_type_;
  int base_type_;
  float blending_radius_;
  float vel_;
  float acc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMoveJRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMoveJRes) */ {
 public:
  AMoveJRes();
  virtual ~AMoveJRes();

  AMoveJRes(const AMoveJRes& from);
  AMoveJRes(AMoveJRes&& from) noexcept
    : AMoveJRes() {
    *this = ::std::move(from);
  }

  inline AMoveJRes& operator=(const AMoveJRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMoveJRes& operator=(AMoveJRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMoveJRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMoveJRes* internal_default_instance() {
    return reinterpret_cast<const AMoveJRes*>(
               &_AMoveJRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AMoveJRes* other);
  friend void swap(AMoveJRes& a, AMoveJRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMoveJRes* New() const final {
    return CreateMaybeMessage<AMoveJRes>(nullptr);
  }

  AMoveJRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMoveJRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMoveJRes& from);
  void MergeFrom(const AMoveJRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMoveJRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMoveJRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMoveJRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMoveJTReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMoveJTReq) */ {
 public:
  AMoveJTReq();
  virtual ~AMoveJTReq();

  AMoveJTReq(const AMoveJTReq& from);
  AMoveJTReq(AMoveJTReq&& from) noexcept
    : AMoveJTReq() {
    *this = ::std::move(from);
  }

  inline AMoveJTReq& operator=(const AMoveJTReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMoveJTReq& operator=(AMoveJTReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMoveJTReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMoveJTReq* internal_default_instance() {
    return reinterpret_cast<const AMoveJTReq*>(
               &_AMoveJTReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AMoveJTReq* other);
  friend void swap(AMoveJTReq& a, AMoveJTReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMoveJTReq* New() const final {
    return CreateMaybeMessage<AMoveJTReq>(nullptr);
  }

  AMoveJTReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMoveJTReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMoveJTReq& from);
  void MergeFrom(const AMoveJTReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMoveJTReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMoveJTReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float jpos = 1;
  int jpos_size() const;
  void clear_jpos();
  static const int kJposFieldNumber = 1;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_jpos();

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  void clear_blending_type();
  static const int kBlendingTypeFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::BlendingType blending_type() const;
  void set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value);

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::JointBaseType base_type() const;
  void set_base_type(::IndyFramework::Protobuf::Shared::JointBaseType value);

  // float blending_radius = 5;
  void clear_blending_radius();
  static const int kBlendingRadiusFieldNumber = 5;
  float blending_radius() const;
  void set_blending_radius(float value);

  // float time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMoveJTReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > jpos_;
  mutable std::atomic<int> _jpos_cached_byte_size_;
  int blending_type_;
  int base_type_;
  float blending_radius_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMoveJTRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMoveJTRes) */ {
 public:
  AMoveJTRes();
  virtual ~AMoveJTRes();

  AMoveJTRes(const AMoveJTRes& from);
  AMoveJTRes(AMoveJTRes&& from) noexcept
    : AMoveJTRes() {
    *this = ::std::move(from);
  }

  inline AMoveJTRes& operator=(const AMoveJTRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMoveJTRes& operator=(AMoveJTRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMoveJTRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMoveJTRes* internal_default_instance() {
    return reinterpret_cast<const AMoveJTRes*>(
               &_AMoveJTRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AMoveJTRes* other);
  friend void swap(AMoveJTRes& a, AMoveJTRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMoveJTRes* New() const final {
    return CreateMaybeMessage<AMoveJTRes>(nullptr);
  }

  AMoveJTRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMoveJTRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMoveJTRes& from);
  void MergeFrom(const AMoveJTRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMoveJTRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMoveJTRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMoveJTRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMoveLReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMoveLReq) */ {
 public:
  AMoveLReq();
  virtual ~AMoveLReq();

  AMoveLReq(const AMoveLReq& from);
  AMoveLReq(AMoveLReq&& from) noexcept
    : AMoveLReq() {
    *this = ::std::move(from);
  }

  inline AMoveLReq& operator=(const AMoveLReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMoveLReq& operator=(AMoveLReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMoveLReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMoveLReq* internal_default_instance() {
    return reinterpret_cast<const AMoveLReq*>(
               &_AMoveLReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AMoveLReq* other);
  friend void swap(AMoveLReq& a, AMoveLReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMoveLReq* New() const final {
    return CreateMaybeMessage<AMoveLReq>(nullptr);
  }

  AMoveLReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMoveLReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMoveLReq& from);
  void MergeFrom(const AMoveLReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMoveLReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMoveLReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos = 1;
  int tpos_size() const;
  void clear_tpos();
  static const int kTposFieldNumber = 1;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos();

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  void clear_blending_type();
  static const int kBlendingTypeFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::BlendingType blending_type() const;
  void set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value);

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::TaskBaseType base_type() const;
  void set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value);

  // float blending_radius = 5;
  void clear_blending_radius();
  static const int kBlendingRadiusFieldNumber = 5;
  float blending_radius() const;
  void set_blending_radius(float value);

  // float vel = 6;
  void clear_vel();
  static const int kVelFieldNumber = 6;
  float vel() const;
  void set_vel(float value);

  // float acc = 7;
  void clear_acc();
  static const int kAccFieldNumber = 7;
  float acc() const;
  void set_acc(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMoveLReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos_;
  mutable std::atomic<int> _tpos_cached_byte_size_;
  int blending_type_;
  int base_type_;
  float blending_radius_;
  float vel_;
  float acc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMoveLRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMoveLRes) */ {
 public:
  AMoveLRes();
  virtual ~AMoveLRes();

  AMoveLRes(const AMoveLRes& from);
  AMoveLRes(AMoveLRes&& from) noexcept
    : AMoveLRes() {
    *this = ::std::move(from);
  }

  inline AMoveLRes& operator=(const AMoveLRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMoveLRes& operator=(AMoveLRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMoveLRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMoveLRes* internal_default_instance() {
    return reinterpret_cast<const AMoveLRes*>(
               &_AMoveLRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AMoveLRes* other);
  friend void swap(AMoveLRes& a, AMoveLRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMoveLRes* New() const final {
    return CreateMaybeMessage<AMoveLRes>(nullptr);
  }

  AMoveLRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMoveLRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMoveLRes& from);
  void MergeFrom(const AMoveLRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMoveLRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMoveLRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMoveLRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMoveLTReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMoveLTReq) */ {
 public:
  AMoveLTReq();
  virtual ~AMoveLTReq();

  AMoveLTReq(const AMoveLTReq& from);
  AMoveLTReq(AMoveLTReq&& from) noexcept
    : AMoveLTReq() {
    *this = ::std::move(from);
  }

  inline AMoveLTReq& operator=(const AMoveLTReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMoveLTReq& operator=(AMoveLTReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMoveLTReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMoveLTReq* internal_default_instance() {
    return reinterpret_cast<const AMoveLTReq*>(
               &_AMoveLTReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AMoveLTReq* other);
  friend void swap(AMoveLTReq& a, AMoveLTReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMoveLTReq* New() const final {
    return CreateMaybeMessage<AMoveLTReq>(nullptr);
  }

  AMoveLTReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMoveLTReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMoveLTReq& from);
  void MergeFrom(const AMoveLTReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMoveLTReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMoveLTReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos = 1;
  int tpos_size() const;
  void clear_tpos();
  static const int kTposFieldNumber = 1;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos();

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  void clear_blending_type();
  static const int kBlendingTypeFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::BlendingType blending_type() const;
  void set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value);

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::TaskBaseType base_type() const;
  void set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value);

  // float blending_radius = 5;
  void clear_blending_radius();
  static const int kBlendingRadiusFieldNumber = 5;
  float blending_radius() const;
  void set_blending_radius(float value);

  // float time = 6;
  void clear_time();
  static const int kTimeFieldNumber = 6;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMoveLTReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos_;
  mutable std::atomic<int> _tpos_cached_byte_size_;
  int blending_type_;
  int base_type_;
  float blending_radius_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMoveLTRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMoveLTRes) */ {
 public:
  AMoveLTRes();
  virtual ~AMoveLTRes();

  AMoveLTRes(const AMoveLTRes& from);
  AMoveLTRes(AMoveLTRes&& from) noexcept
    : AMoveLTRes() {
    *this = ::std::move(from);
  }

  inline AMoveLTRes& operator=(const AMoveLTRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMoveLTRes& operator=(AMoveLTRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMoveLTRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMoveLTRes* internal_default_instance() {
    return reinterpret_cast<const AMoveLTRes*>(
               &_AMoveLTRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AMoveLTRes* other);
  friend void swap(AMoveLTRes& a, AMoveLTRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMoveLTRes* New() const final {
    return CreateMaybeMessage<AMoveLTRes>(nullptr);
  }

  AMoveLTRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMoveLTRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMoveLTRes& from);
  void MergeFrom(const AMoveLTRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMoveLTRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMoveLTRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMoveLTRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMoveCReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMoveCReq) */ {
 public:
  AMoveCReq();
  virtual ~AMoveCReq();

  AMoveCReq(const AMoveCReq& from);
  AMoveCReq(AMoveCReq&& from) noexcept
    : AMoveCReq() {
    *this = ::std::move(from);
  }

  inline AMoveCReq& operator=(const AMoveCReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMoveCReq& operator=(AMoveCReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMoveCReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMoveCReq* internal_default_instance() {
    return reinterpret_cast<const AMoveCReq*>(
               &_AMoveCReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AMoveCReq* other);
  friend void swap(AMoveCReq& a, AMoveCReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMoveCReq* New() const final {
    return CreateMaybeMessage<AMoveCReq>(nullptr);
  }

  AMoveCReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMoveCReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMoveCReq& from);
  void MergeFrom(const AMoveCReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMoveCReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMoveCReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos0 = 1;
  int tpos0_size() const;
  void clear_tpos0();
  static const int kTpos0FieldNumber = 1;
  float tpos0(int index) const;
  void set_tpos0(int index, float value);
  void add_tpos0(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos0() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos0();

  // repeated float tpos1 = 2;
  int tpos1_size() const;
  void clear_tpos1();
  static const int kTpos1FieldNumber = 2;
  float tpos1(int index) const;
  void set_tpos1(int index, float value);
  void add_tpos1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos1();

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  void clear_blending_type();
  static const int kBlendingTypeFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::BlendingType blending_type() const;
  void set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value);

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::TaskBaseType base_type() const;
  void set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value);

  // float blending_radius = 5;
  void clear_blending_radius();
  static const int kBlendingRadiusFieldNumber = 5;
  float blending_radius() const;
  void set_blending_radius(float value);

  // float angle = 6;
  void clear_angle();
  static const int kAngleFieldNumber = 6;
  float angle() const;
  void set_angle(float value);

  // .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
  void clear_setting_type();
  static const int kSettingTypeFieldNumber = 13;
  ::IndyFramework::Protobuf::Shared::CircularSettingType setting_type() const;
  void set_setting_type(::IndyFramework::Protobuf::Shared::CircularSettingType value);

  // .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
  void clear_move_type();
  static const int kMoveTypeFieldNumber = 14;
  ::IndyFramework::Protobuf::Shared::CircularMovingType move_type() const;
  void set_move_type(::IndyFramework::Protobuf::Shared::CircularMovingType value);

  // float vel = 15;
  void clear_vel();
  static const int kVelFieldNumber = 15;
  float vel() const;
  void set_vel(float value);

  // float acc = 16;
  void clear_acc();
  static const int kAccFieldNumber = 16;
  float acc() const;
  void set_acc(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMoveCReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos0_;
  mutable std::atomic<int> _tpos0_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos1_;
  mutable std::atomic<int> _tpos1_cached_byte_size_;
  int blending_type_;
  int base_type_;
  float blending_radius_;
  float angle_;
  int setting_type_;
  int move_type_;
  float vel_;
  float acc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMoveCRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMoveCRes) */ {
 public:
  AMoveCRes();
  virtual ~AMoveCRes();

  AMoveCRes(const AMoveCRes& from);
  AMoveCRes(AMoveCRes&& from) noexcept
    : AMoveCRes() {
    *this = ::std::move(from);
  }

  inline AMoveCRes& operator=(const AMoveCRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMoveCRes& operator=(AMoveCRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMoveCRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMoveCRes* internal_default_instance() {
    return reinterpret_cast<const AMoveCRes*>(
               &_AMoveCRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AMoveCRes* other);
  friend void swap(AMoveCRes& a, AMoveCRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMoveCRes* New() const final {
    return CreateMaybeMessage<AMoveCRes>(nullptr);
  }

  AMoveCRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMoveCRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMoveCRes& from);
  void MergeFrom(const AMoveCRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMoveCRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMoveCRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMoveCRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMoveCTReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMoveCTReq) */ {
 public:
  AMoveCTReq();
  virtual ~AMoveCTReq();

  AMoveCTReq(const AMoveCTReq& from);
  AMoveCTReq(AMoveCTReq&& from) noexcept
    : AMoveCTReq() {
    *this = ::std::move(from);
  }

  inline AMoveCTReq& operator=(const AMoveCTReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMoveCTReq& operator=(AMoveCTReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMoveCTReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMoveCTReq* internal_default_instance() {
    return reinterpret_cast<const AMoveCTReq*>(
               &_AMoveCTReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(AMoveCTReq* other);
  friend void swap(AMoveCTReq& a, AMoveCTReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMoveCTReq* New() const final {
    return CreateMaybeMessage<AMoveCTReq>(nullptr);
  }

  AMoveCTReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMoveCTReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMoveCTReq& from);
  void MergeFrom(const AMoveCTReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMoveCTReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMoveCTReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos0 = 1;
  int tpos0_size() const;
  void clear_tpos0();
  static const int kTpos0FieldNumber = 1;
  float tpos0(int index) const;
  void set_tpos0(int index, float value);
  void add_tpos0(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos0() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos0();

  // repeated float tpos1 = 2;
  int tpos1_size() const;
  void clear_tpos1();
  static const int kTpos1FieldNumber = 2;
  float tpos1(int index) const;
  void set_tpos1(int index, float value);
  void add_tpos1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos1();

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  void clear_blending_type();
  static const int kBlendingTypeFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::BlendingType blending_type() const;
  void set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value);

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::TaskBaseType base_type() const;
  void set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value);

  // float blending_radius = 5;
  void clear_blending_radius();
  static const int kBlendingRadiusFieldNumber = 5;
  float blending_radius() const;
  void set_blending_radius(float value);

  // float angle = 6;
  void clear_angle();
  static const int kAngleFieldNumber = 6;
  float angle() const;
  void set_angle(float value);

  // float time = 21;
  void clear_time();
  static const int kTimeFieldNumber = 21;
  float time() const;
  void set_time(float value);

  // .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
  void clear_setting_type();
  static const int kSettingTypeFieldNumber = 13;
  ::IndyFramework::Protobuf::Shared::CircularSettingType setting_type() const;
  void set_setting_type(::IndyFramework::Protobuf::Shared::CircularSettingType value);

  // .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
  void clear_move_type();
  static const int kMoveTypeFieldNumber = 14;
  ::IndyFramework::Protobuf::Shared::CircularMovingType move_type() const;
  void set_move_type(::IndyFramework::Protobuf::Shared::CircularMovingType value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMoveCTReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos0_;
  mutable std::atomic<int> _tpos0_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos1_;
  mutable std::atomic<int> _tpos1_cached_byte_size_;
  int blending_type_;
  int base_type_;
  float blending_radius_;
  float angle_;
  float time_;
  int setting_type_;
  int move_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMoveCTRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMoveCTRes) */ {
 public:
  AMoveCTRes();
  virtual ~AMoveCTRes();

  AMoveCTRes(const AMoveCTRes& from);
  AMoveCTRes(AMoveCTRes&& from) noexcept
    : AMoveCTRes() {
    *this = ::std::move(from);
  }

  inline AMoveCTRes& operator=(const AMoveCTRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMoveCTRes& operator=(AMoveCTRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMoveCTRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMoveCTRes* internal_default_instance() {
    return reinterpret_cast<const AMoveCTRes*>(
               &_AMoveCTRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(AMoveCTRes* other);
  friend void swap(AMoveCTRes& a, AMoveCTRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMoveCTRes* New() const final {
    return CreateMaybeMessage<AMoveCTRes>(nullptr);
  }

  AMoveCTRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMoveCTRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMoveCTRes& from);
  void MergeFrom(const AMoveCTRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMoveCTRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMoveCTRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMoveCTRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AWaitIOReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AWaitIOReq) */ {
 public:
  AWaitIOReq();
  virtual ~AWaitIOReq();

  AWaitIOReq(const AWaitIOReq& from);
  AWaitIOReq(AWaitIOReq&& from) noexcept
    : AWaitIOReq() {
    *this = ::std::move(from);
  }

  inline AWaitIOReq& operator=(const AWaitIOReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AWaitIOReq& operator=(AWaitIOReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AWaitIOReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AWaitIOReq* internal_default_instance() {
    return reinterpret_cast<const AWaitIOReq*>(
               &_AWaitIOReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(AWaitIOReq* other);
  friend void swap(AWaitIOReq& a, AWaitIOReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AWaitIOReq* New() const final {
    return CreateMaybeMessage<AWaitIOReq>(nullptr);
  }

  AWaitIOReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AWaitIOReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AWaitIOReq& from);
  void MergeFrom(const AWaitIOReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AWaitIOReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AWaitIOReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
  int di_list_size() const;
  void clear_di_list();
  static const int kDiListFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_di_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_di_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& di_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_di_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      di_list() const;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 2;
  int do_list_size() const;
  void clear_do_list();
  static const int kDoListFieldNumber = 2;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      do_list() const;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_di_list = 3;
  int end_di_list_size() const;
  void clear_end_di_list();
  static const int kEndDiListFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_end_di_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_end_di_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& end_di_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_end_di_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      end_di_list() const;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_do_list = 4;
  int end_do_list_size() const;
  void clear_end_do_list();
  static const int kEndDoListFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_end_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_end_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& end_do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_end_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      end_do_list() const;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 6;
  int set_do_list_size() const;
  void clear_set_do_list();
  static const int kSetDoListFieldNumber = 6;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_set_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_set_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& set_do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_set_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      set_do_list() const;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 7;
  int set_end_do_list_size() const;
  void clear_set_end_do_list();
  static const int kSetEndDoListFieldNumber = 7;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_set_end_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_set_end_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& set_end_do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_set_end_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      set_end_do_list() const;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 8;
  int set_ao_list_size() const;
  void clear_set_ao_list();
  static const int kSetAoListFieldNumber = 8;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_set_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_set_ao_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& set_ao_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_set_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      set_ao_list() const;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 9;
  int set_end_ao_list_size() const;
  void clear_set_end_ao_list();
  static const int kSetEndAoListFieldNumber = 9;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_set_end_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_set_end_ao_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& set_end_ao_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_set_end_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      set_end_ao_list() const;

  // int32 conjunction = 5;
  void clear_conjunction();
  static const int kConjunctionFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 conjunction() const;
  void set_conjunction(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AWaitIOReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > di_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > end_di_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > end_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > set_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > set_end_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > set_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > set_end_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 conjunction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AWaitIORes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AWaitIORes) */ {
 public:
  AWaitIORes();
  virtual ~AWaitIORes();

  AWaitIORes(const AWaitIORes& from);
  AWaitIORes(AWaitIORes&& from) noexcept
    : AWaitIORes() {
    *this = ::std::move(from);
  }

  inline AWaitIORes& operator=(const AWaitIORes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AWaitIORes& operator=(AWaitIORes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AWaitIORes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AWaitIORes* internal_default_instance() {
    return reinterpret_cast<const AWaitIORes*>(
               &_AWaitIORes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(AWaitIORes* other);
  friend void swap(AWaitIORes& a, AWaitIORes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AWaitIORes* New() const final {
    return CreateMaybeMessage<AWaitIORes>(nullptr);
  }

  AWaitIORes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AWaitIORes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AWaitIORes& from);
  void MergeFrom(const AWaitIORes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AWaitIORes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AWaitIORes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AWaitIORes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AWaitTimeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AWaitTimeReq) */ {
 public:
  AWaitTimeReq();
  virtual ~AWaitTimeReq();

  AWaitTimeReq(const AWaitTimeReq& from);
  AWaitTimeReq(AWaitTimeReq&& from) noexcept
    : AWaitTimeReq() {
    *this = ::std::move(from);
  }

  inline AWaitTimeReq& operator=(const AWaitTimeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AWaitTimeReq& operator=(AWaitTimeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AWaitTimeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AWaitTimeReq* internal_default_instance() {
    return reinterpret_cast<const AWaitTimeReq*>(
               &_AWaitTimeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(AWaitTimeReq* other);
  friend void swap(AWaitTimeReq& a, AWaitTimeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AWaitTimeReq* New() const final {
    return CreateMaybeMessage<AWaitTimeReq>(nullptr);
  }

  AWaitTimeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AWaitTimeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AWaitTimeReq& from);
  void MergeFrom(const AWaitTimeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AWaitTimeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AWaitTimeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  int set_do_list_size() const;
  void clear_set_do_list();
  static const int kSetDoListFieldNumber = 2;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_set_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_set_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& set_do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_set_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      set_do_list() const;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  int set_end_do_list_size() const;
  void clear_set_end_do_list();
  static const int kSetEndDoListFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_set_end_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_set_end_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& set_end_do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_set_end_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      set_end_do_list() const;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  int set_ao_list_size() const;
  void clear_set_ao_list();
  static const int kSetAoListFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_set_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_set_ao_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& set_ao_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_set_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      set_ao_list() const;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  int set_end_ao_list_size() const;
  void clear_set_end_ao_list();
  static const int kSetEndAoListFieldNumber = 5;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_set_end_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_set_end_ao_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& set_end_ao_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_set_end_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      set_end_ao_list() const;

  // float time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AWaitTimeReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > set_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > set_end_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > set_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > set_end_ao_list_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AWaitTimeRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AWaitTimeRes) */ {
 public:
  AWaitTimeRes();
  virtual ~AWaitTimeRes();

  AWaitTimeRes(const AWaitTimeRes& from);
  AWaitTimeRes(AWaitTimeRes&& from) noexcept
    : AWaitTimeRes() {
    *this = ::std::move(from);
  }

  inline AWaitTimeRes& operator=(const AWaitTimeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AWaitTimeRes& operator=(AWaitTimeRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AWaitTimeRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AWaitTimeRes* internal_default_instance() {
    return reinterpret_cast<const AWaitTimeRes*>(
               &_AWaitTimeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(AWaitTimeRes* other);
  friend void swap(AWaitTimeRes& a, AWaitTimeRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AWaitTimeRes* New() const final {
    return CreateMaybeMessage<AWaitTimeRes>(nullptr);
  }

  AWaitTimeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AWaitTimeRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AWaitTimeRes& from);
  void MergeFrom(const AWaitTimeRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AWaitTimeRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AWaitTimeRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AWaitTimeRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AWaitProgressReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AWaitProgressReq) */ {
 public:
  AWaitProgressReq();
  virtual ~AWaitProgressReq();

  AWaitProgressReq(const AWaitProgressReq& from);
  AWaitProgressReq(AWaitProgressReq&& from) noexcept
    : AWaitProgressReq() {
    *this = ::std::move(from);
  }

  inline AWaitProgressReq& operator=(const AWaitProgressReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AWaitProgressReq& operator=(AWaitProgressReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AWaitProgressReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AWaitProgressReq* internal_default_instance() {
    return reinterpret_cast<const AWaitProgressReq*>(
               &_AWaitProgressReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(AWaitProgressReq* other);
  friend void swap(AWaitProgressReq& a, AWaitProgressReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AWaitProgressReq* New() const final {
    return CreateMaybeMessage<AWaitProgressReq>(nullptr);
  }

  AWaitProgressReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AWaitProgressReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AWaitProgressReq& from);
  void MergeFrom(const AWaitProgressReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AWaitProgressReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AWaitProgressReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  int set_do_list_size() const;
  void clear_set_do_list();
  static const int kSetDoListFieldNumber = 2;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_set_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_set_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& set_do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_set_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      set_do_list() const;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  int set_end_do_list_size() const;
  void clear_set_end_do_list();
  static const int kSetEndDoListFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_set_end_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_set_end_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& set_end_do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_set_end_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      set_end_do_list() const;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  int set_ao_list_size() const;
  void clear_set_ao_list();
  static const int kSetAoListFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_set_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_set_ao_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& set_ao_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_set_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      set_ao_list() const;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  int set_end_ao_list_size() const;
  void clear_set_end_ao_list();
  static const int kSetEndAoListFieldNumber = 5;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_set_end_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_set_end_ao_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& set_end_ao_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_set_end_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      set_end_ao_list() const;

  // int32 progress = 1;
  void clear_progress();
  static const int kProgressFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 progress() const;
  void set_progress(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AWaitProgressReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > set_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > set_end_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > set_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > set_end_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AWaitProgressRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AWaitProgressRes) */ {
 public:
  AWaitProgressRes();
  virtual ~AWaitProgressRes();

  AWaitProgressRes(const AWaitProgressRes& from);
  AWaitProgressRes(AWaitProgressRes&& from) noexcept
    : AWaitProgressRes() {
    *this = ::std::move(from);
  }

  inline AWaitProgressRes& operator=(const AWaitProgressRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AWaitProgressRes& operator=(AWaitProgressRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AWaitProgressRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AWaitProgressRes* internal_default_instance() {
    return reinterpret_cast<const AWaitProgressRes*>(
               &_AWaitProgressRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(AWaitProgressRes* other);
  friend void swap(AWaitProgressRes& a, AWaitProgressRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AWaitProgressRes* New() const final {
    return CreateMaybeMessage<AWaitProgressRes>(nullptr);
  }

  AWaitProgressRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AWaitProgressRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AWaitProgressRes& from);
  void MergeFrom(const AWaitProgressRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AWaitProgressRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AWaitProgressRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AWaitProgressRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AWaitTrajReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AWaitTrajReq) */ {
 public:
  AWaitTrajReq();
  virtual ~AWaitTrajReq();

  AWaitTrajReq(const AWaitTrajReq& from);
  AWaitTrajReq(AWaitTrajReq&& from) noexcept
    : AWaitTrajReq() {
    *this = ::std::move(from);
  }

  inline AWaitTrajReq& operator=(const AWaitTrajReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AWaitTrajReq& operator=(AWaitTrajReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AWaitTrajReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AWaitTrajReq* internal_default_instance() {
    return reinterpret_cast<const AWaitTrajReq*>(
               &_AWaitTrajReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(AWaitTrajReq* other);
  friend void swap(AWaitTrajReq& a, AWaitTrajReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AWaitTrajReq* New() const final {
    return CreateMaybeMessage<AWaitTrajReq>(nullptr);
  }

  AWaitTrajReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AWaitTrajReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AWaitTrajReq& from);
  void MergeFrom(const AWaitTrajReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AWaitTrajReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AWaitTrajReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  int set_do_list_size() const;
  void clear_set_do_list();
  static const int kSetDoListFieldNumber = 2;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_set_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_set_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& set_do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_set_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      set_do_list() const;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  int set_end_do_list_size() const;
  void clear_set_end_do_list();
  static const int kSetEndDoListFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_set_end_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_set_end_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& set_end_do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_set_end_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      set_end_do_list() const;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  int set_ao_list_size() const;
  void clear_set_ao_list();
  static const int kSetAoListFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_set_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_set_ao_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& set_ao_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_set_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      set_ao_list() const;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  int set_end_ao_list_size() const;
  void clear_set_end_ao_list();
  static const int kSetEndAoListFieldNumber = 5;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_set_end_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_set_end_ao_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& set_end_ao_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_set_end_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      set_end_ao_list() const;

  // .IndyFramework.Protobuf.Shared.TrajCondition traj_condition = 1;
  void clear_traj_condition();
  static const int kTrajConditionFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::TrajCondition traj_condition() const;
  void set_traj_condition(::IndyFramework::Protobuf::Shared::TrajCondition value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AWaitTrajReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > set_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > set_end_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > set_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > set_end_ao_list_;
  int traj_condition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AWaitTrajRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AWaitTrajRes) */ {
 public:
  AWaitTrajRes();
  virtual ~AWaitTrajRes();

  AWaitTrajRes(const AWaitTrajRes& from);
  AWaitTrajRes(AWaitTrajRes&& from) noexcept
    : AWaitTrajRes() {
    *this = ::std::move(from);
  }

  inline AWaitTrajRes& operator=(const AWaitTrajRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AWaitTrajRes& operator=(AWaitTrajRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AWaitTrajRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AWaitTrajRes* internal_default_instance() {
    return reinterpret_cast<const AWaitTrajRes*>(
               &_AWaitTrajRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(AWaitTrajRes* other);
  friend void swap(AWaitTrajRes& a, AWaitTrajRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AWaitTrajRes* New() const final {
    return CreateMaybeMessage<AWaitTrajRes>(nullptr);
  }

  AWaitTrajRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AWaitTrajRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AWaitTrajRes& from);
  void MergeFrom(const AWaitTrajRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AWaitTrajRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AWaitTrajRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AWaitTrajRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMotionStopReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMotionStopReq) */ {
 public:
  AMotionStopReq();
  virtual ~AMotionStopReq();

  AMotionStopReq(const AMotionStopReq& from);
  AMotionStopReq(AMotionStopReq&& from) noexcept
    : AMotionStopReq() {
    *this = ::std::move(from);
  }

  inline AMotionStopReq& operator=(const AMotionStopReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMotionStopReq& operator=(AMotionStopReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMotionStopReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMotionStopReq* internal_default_instance() {
    return reinterpret_cast<const AMotionStopReq*>(
               &_AMotionStopReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(AMotionStopReq* other);
  friend void swap(AMotionStopReq& a, AMotionStopReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMotionStopReq* New() const final {
    return CreateMaybeMessage<AMotionStopReq>(nullptr);
  }

  AMotionStopReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMotionStopReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMotionStopReq& from);
  void MergeFrom(const AMotionStopReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMotionStopReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMotionStopReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMotionStopReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AMotionStopRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AMotionStopRes) */ {
 public:
  AMotionStopRes();
  virtual ~AMotionStopRes();

  AMotionStopRes(const AMotionStopRes& from);
  AMotionStopRes(AMotionStopRes&& from) noexcept
    : AMotionStopRes() {
    *this = ::std::move(from);
  }

  inline AMotionStopRes& operator=(const AMotionStopRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMotionStopRes& operator=(AMotionStopRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMotionStopRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMotionStopRes* internal_default_instance() {
    return reinterpret_cast<const AMotionStopRes*>(
               &_AMotionStopRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(AMotionStopRes* other);
  friend void swap(AMotionStopRes& a, AMotionStopRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AMotionStopRes* New() const final {
    return CreateMaybeMessage<AMotionStopRes>(nullptr);
  }

  AMotionStopRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMotionStopRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMotionStopRes& from);
  void MergeFrom(const AMotionStopRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMotionStopRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AMotionStopRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AMotionStopRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AWaitRadiusReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AWaitRadiusReq) */ {
 public:
  AWaitRadiusReq();
  virtual ~AWaitRadiusReq();

  AWaitRadiusReq(const AWaitRadiusReq& from);
  AWaitRadiusReq(AWaitRadiusReq&& from) noexcept
    : AWaitRadiusReq() {
    *this = ::std::move(from);
  }

  inline AWaitRadiusReq& operator=(const AWaitRadiusReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AWaitRadiusReq& operator=(AWaitRadiusReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AWaitRadiusReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AWaitRadiusReq* internal_default_instance() {
    return reinterpret_cast<const AWaitRadiusReq*>(
               &_AWaitRadiusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(AWaitRadiusReq* other);
  friend void swap(AWaitRadiusReq& a, AWaitRadiusReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AWaitRadiusReq* New() const final {
    return CreateMaybeMessage<AWaitRadiusReq>(nullptr);
  }

  AWaitRadiusReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AWaitRadiusReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AWaitRadiusReq& from);
  void MergeFrom(const AWaitRadiusReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AWaitRadiusReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AWaitRadiusReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  int set_do_list_size() const;
  void clear_set_do_list();
  static const int kSetDoListFieldNumber = 2;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_set_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_set_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& set_do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_set_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      set_do_list() const;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  int set_end_do_list_size() const;
  void clear_set_end_do_list();
  static const int kSetEndDoListFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_set_end_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_set_end_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& set_end_do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_set_end_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      set_end_do_list() const;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  int set_ao_list_size() const;
  void clear_set_ao_list();
  static const int kSetAoListFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_set_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_set_ao_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& set_ao_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_set_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      set_ao_list() const;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  int set_end_ao_list_size() const;
  void clear_set_end_ao_list();
  static const int kSetEndAoListFieldNumber = 5;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_set_end_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_set_end_ao_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& set_end_ao_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_set_end_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      set_end_ao_list() const;

  // int32 radius = 1;
  void clear_radius();
  static const int kRadiusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 radius() const;
  void set_radius(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AWaitRadiusReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > set_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > set_end_do_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > set_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > set_end_ao_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class AWaitRadiusRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.AWaitRadiusRes) */ {
 public:
  AWaitRadiusRes();
  virtual ~AWaitRadiusRes();

  AWaitRadiusRes(const AWaitRadiusRes& from);
  AWaitRadiusRes(AWaitRadiusRes&& from) noexcept
    : AWaitRadiusRes() {
    *this = ::std::move(from);
  }

  inline AWaitRadiusRes& operator=(const AWaitRadiusRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline AWaitRadiusRes& operator=(AWaitRadiusRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AWaitRadiusRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AWaitRadiusRes* internal_default_instance() {
    return reinterpret_cast<const AWaitRadiusRes*>(
               &_AWaitRadiusRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(AWaitRadiusRes* other);
  friend void swap(AWaitRadiusRes& a, AWaitRadiusRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AWaitRadiusRes* New() const final {
    return CreateMaybeMessage<AWaitRadiusRes>(nullptr);
  }

  AWaitRadiusRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AWaitRadiusRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AWaitRadiusRes& from);
  void MergeFrom(const AWaitRadiusRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AWaitRadiusRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.AWaitRadiusRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.AWaitRadiusRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveSJReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.MoveSJReq) */ {
 public:
  MoveSJReq();
  virtual ~MoveSJReq();

  MoveSJReq(const MoveSJReq& from);
  MoveSJReq(MoveSJReq&& from) noexcept
    : MoveSJReq() {
    *this = ::std::move(from);
  }

  inline MoveSJReq& operator=(const MoveSJReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSJReq& operator=(MoveSJReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveSJReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveSJReq* internal_default_instance() {
    return reinterpret_cast<const MoveSJReq*>(
               &_MoveSJReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(MoveSJReq* other);
  friend void swap(MoveSJReq& a, MoveSJReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveSJReq* New() const final {
    return CreateMaybeMessage<MoveSJReq>(nullptr);
  }

  MoveSJReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveSJReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveSJReq& from);
  void MergeFrom(const MoveSJReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSJReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.MoveSJReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.MoveSJPoint points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::MoveSJPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSJPoint >*
      mutable_points();
  const ::IndyFramework::Protobuf::Shared::MoveSJPoint& points(int index) const;
  ::IndyFramework::Protobuf::Shared::MoveSJPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSJPoint >&
      points() const;

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  void clear_blending_type();
  static const int kBlendingTypeFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::BlendingType blending_type() const;
  void set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value);

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::JointBaseType base_type() const;
  void set_base_type(::IndyFramework::Protobuf::Shared::JointBaseType value);

  // float acc = 22;
  void clear_acc();
  static const int kAccFieldNumber = 22;
  float acc() const;
  void set_acc(float value);

  // float blending_radius = 5;
  void clear_blending_radius();
  static const int kBlendingRadiusFieldNumber = 5;
  float blending_radius() const;
  void set_blending_radius(float value);

  // float vel = 21;
  void clear_vel();
  static const int kVelFieldNumber = 21;
  float vel() const;
  void set_vel(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.MoveSJReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSJPoint > points_;
  int blending_type_;
  int base_type_;
  float acc_;
  float blending_radius_;
  float vel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveSJRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.MoveSJRes) */ {
 public:
  MoveSJRes();
  virtual ~MoveSJRes();

  MoveSJRes(const MoveSJRes& from);
  MoveSJRes(MoveSJRes&& from) noexcept
    : MoveSJRes() {
    *this = ::std::move(from);
  }

  inline MoveSJRes& operator=(const MoveSJRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSJRes& operator=(MoveSJRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveSJRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveSJRes* internal_default_instance() {
    return reinterpret_cast<const MoveSJRes*>(
               &_MoveSJRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(MoveSJRes* other);
  friend void swap(MoveSJRes& a, MoveSJRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveSJRes* New() const final {
    return CreateMaybeMessage<MoveSJRes>(nullptr);
  }

  MoveSJRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveSJRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveSJRes& from);
  void MergeFrom(const MoveSJRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSJRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.MoveSJRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.MoveSJRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveSLReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.MoveSLReq) */ {
 public:
  MoveSLReq();
  virtual ~MoveSLReq();

  MoveSLReq(const MoveSLReq& from);
  MoveSLReq(MoveSLReq&& from) noexcept
    : MoveSLReq() {
    *this = ::std::move(from);
  }

  inline MoveSLReq& operator=(const MoveSLReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSLReq& operator=(MoveSLReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveSLReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveSLReq* internal_default_instance() {
    return reinterpret_cast<const MoveSLReq*>(
               &_MoveSLReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(MoveSLReq* other);
  friend void swap(MoveSLReq& a, MoveSLReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveSLReq* New() const final {
    return CreateMaybeMessage<MoveSLReq>(nullptr);
  }

  MoveSLReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveSLReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveSLReq& from);
  void MergeFrom(const MoveSLReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSLReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.MoveSLReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.MoveSLPoint points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::MoveSLPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSLPoint >*
      mutable_points();
  const ::IndyFramework::Protobuf::Shared::MoveSLPoint& points(int index) const;
  ::IndyFramework::Protobuf::Shared::MoveSLPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSLPoint >&
      points() const;

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  void clear_blending_type();
  static const int kBlendingTypeFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::BlendingType blending_type() const;
  void set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value);

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::TaskBaseType base_type() const;
  void set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value);

  // float rot_acc = 24;
  void clear_rot_acc();
  static const int kRotAccFieldNumber = 24;
  float rot_acc() const;
  void set_rot_acc(float value);

  // float blending_radius = 5;
  void clear_blending_radius();
  static const int kBlendingRadiusFieldNumber = 5;
  float blending_radius() const;
  void set_blending_radius(float value);

  // float disp_vel = 21;
  void clear_disp_vel();
  static const int kDispVelFieldNumber = 21;
  float disp_vel() const;
  void set_disp_vel(float value);

  // float disp_acc = 22;
  void clear_disp_acc();
  static const int kDispAccFieldNumber = 22;
  float disp_acc() const;
  void set_disp_acc(float value);

  // float rot_vel = 23;
  void clear_rot_vel();
  static const int kRotVelFieldNumber = 23;
  float rot_vel() const;
  void set_rot_vel(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.MoveSLReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSLPoint > points_;
  int blending_type_;
  int base_type_;
  float rot_acc_;
  float blending_radius_;
  float disp_vel_;
  float disp_acc_;
  float rot_vel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveSLRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.MoveSLRes) */ {
 public:
  MoveSLRes();
  virtual ~MoveSLRes();

  MoveSLRes(const MoveSLRes& from);
  MoveSLRes(MoveSLRes&& from) noexcept
    : MoveSLRes() {
    *this = ::std::move(from);
  }

  inline MoveSLRes& operator=(const MoveSLRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSLRes& operator=(MoveSLRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveSLRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveSLRes* internal_default_instance() {
    return reinterpret_cast<const MoveSLRes*>(
               &_MoveSLRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(MoveSLRes* other);
  friend void swap(MoveSLRes& a, MoveSLRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveSLRes* New() const final {
    return CreateMaybeMessage<MoveSLRes>(nullptr);
  }

  MoveSLRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveSLRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveSLRes& from);
  void MergeFrom(const MoveSLRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSLRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.MoveSLRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.MoveSLRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveSJTReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.MoveSJTReq) */ {
 public:
  MoveSJTReq();
  virtual ~MoveSJTReq();

  MoveSJTReq(const MoveSJTReq& from);
  MoveSJTReq(MoveSJTReq&& from) noexcept
    : MoveSJTReq() {
    *this = ::std::move(from);
  }

  inline MoveSJTReq& operator=(const MoveSJTReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSJTReq& operator=(MoveSJTReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveSJTReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveSJTReq* internal_default_instance() {
    return reinterpret_cast<const MoveSJTReq*>(
               &_MoveSJTReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(MoveSJTReq* other);
  friend void swap(MoveSJTReq& a, MoveSJTReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveSJTReq* New() const final {
    return CreateMaybeMessage<MoveSJTReq>(nullptr);
  }

  MoveSJTReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveSJTReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveSJTReq& from);
  void MergeFrom(const MoveSJTReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSJTReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.MoveSJTReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.MoveSJTPoint points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::MoveSJTPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSJTPoint >*
      mutable_points();
  const ::IndyFramework::Protobuf::Shared::MoveSJTPoint& points(int index) const;
  ::IndyFramework::Protobuf::Shared::MoveSJTPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSJTPoint >&
      points() const;

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 2;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 2;
  ::IndyFramework::Protobuf::Shared::JointBaseType base_type() const;
  void set_base_type(::IndyFramework::Protobuf::Shared::JointBaseType value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.MoveSJTReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSJTPoint > points_;
  int base_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveSJTRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.MoveSJTRes) */ {
 public:
  MoveSJTRes();
  virtual ~MoveSJTRes();

  MoveSJTRes(const MoveSJTRes& from);
  MoveSJTRes(MoveSJTRes&& from) noexcept
    : MoveSJTRes() {
    *this = ::std::move(from);
  }

  inline MoveSJTRes& operator=(const MoveSJTRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSJTRes& operator=(MoveSJTRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveSJTRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveSJTRes* internal_default_instance() {
    return reinterpret_cast<const MoveSJTRes*>(
               &_MoveSJTRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(MoveSJTRes* other);
  friend void swap(MoveSJTRes& a, MoveSJTRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveSJTRes* New() const final {
    return CreateMaybeMessage<MoveSJTRes>(nullptr);
  }

  MoveSJTRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveSJTRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveSJTRes& from);
  void MergeFrom(const MoveSJTRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSJTRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.MoveSJTRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.MoveSJTRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveSLTReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.MoveSLTReq) */ {
 public:
  MoveSLTReq();
  virtual ~MoveSLTReq();

  MoveSLTReq(const MoveSLTReq& from);
  MoveSLTReq(MoveSLTReq&& from) noexcept
    : MoveSLTReq() {
    *this = ::std::move(from);
  }

  inline MoveSLTReq& operator=(const MoveSLTReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSLTReq& operator=(MoveSLTReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveSLTReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveSLTReq* internal_default_instance() {
    return reinterpret_cast<const MoveSLTReq*>(
               &_MoveSLTReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(MoveSLTReq* other);
  friend void swap(MoveSLTReq& a, MoveSLTReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveSLTReq* New() const final {
    return CreateMaybeMessage<MoveSLTReq>(nullptr);
  }

  MoveSLTReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveSLTReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveSLTReq& from);
  void MergeFrom(const MoveSLTReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSLTReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.MoveSLTReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.MoveSLTPoint points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::MoveSLTPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSLTPoint >*
      mutable_points();
  const ::IndyFramework::Protobuf::Shared::MoveSLTPoint& points(int index) const;
  ::IndyFramework::Protobuf::Shared::MoveSLTPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSLTPoint >&
      points() const;

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  void clear_blending_type();
  static const int kBlendingTypeFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::BlendingType blending_type() const;
  void set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value);

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::TaskBaseType base_type() const;
  void set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value);

  // float blending_radius = 5;
  void clear_blending_radius();
  static const int kBlendingRadiusFieldNumber = 5;
  float blending_radius() const;
  void set_blending_radius(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.MoveSLTReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSLTPoint > points_;
  int blending_type_;
  int base_type_;
  float blending_radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveSLTRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.MoveSLTRes) */ {
 public:
  MoveSLTRes();
  virtual ~MoveSLTRes();

  MoveSLTRes(const MoveSLTRes& from);
  MoveSLTRes(MoveSLTRes&& from) noexcept
    : MoveSLTRes() {
    *this = ::std::move(from);
  }

  inline MoveSLTRes& operator=(const MoveSLTRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSLTRes& operator=(MoveSLTRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveSLTRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveSLTRes* internal_default_instance() {
    return reinterpret_cast<const MoveSLTRes*>(
               &_MoveSLTRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(MoveSLTRes* other);
  friend void swap(MoveSLTRes& a, MoveSLTRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveSLTRes* New() const final {
    return CreateMaybeMessage<MoveSLTRes>(nullptr);
  }

  MoveSLTRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveSLTRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveSLTRes& from);
  void MergeFrom(const MoveSLTRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSLTRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.MoveSLTRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.MoveSLTRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveSpiralReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.MoveSpiralReq) */ {
 public:
  MoveSpiralReq();
  virtual ~MoveSpiralReq();

  MoveSpiralReq(const MoveSpiralReq& from);
  MoveSpiralReq(MoveSpiralReq&& from) noexcept
    : MoveSpiralReq() {
    *this = ::std::move(from);
  }

  inline MoveSpiralReq& operator=(const MoveSpiralReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSpiralReq& operator=(MoveSpiralReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveSpiralReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveSpiralReq* internal_default_instance() {
    return reinterpret_cast<const MoveSpiralReq*>(
               &_MoveSpiralReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(MoveSpiralReq* other);
  friend void swap(MoveSpiralReq& a, MoveSpiralReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveSpiralReq* New() const final {
    return CreateMaybeMessage<MoveSpiralReq>(nullptr);
  }

  MoveSpiralReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveSpiralReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveSpiralReq& from);
  void MergeFrom(const MoveSpiralReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSpiralReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.MoveSpiralReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.MoveSpiralReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class MoveSpiralRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.MoveSpiralRes) */ {
 public:
  MoveSpiralRes();
  virtual ~MoveSpiralRes();

  MoveSpiralRes(const MoveSpiralRes& from);
  MoveSpiralRes(MoveSpiralRes&& from) noexcept
    : MoveSpiralRes() {
    *this = ::std::move(from);
  }

  inline MoveSpiralRes& operator=(const MoveSpiralRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSpiralRes& operator=(MoveSpiralRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveSpiralRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveSpiralRes* internal_default_instance() {
    return reinterpret_cast<const MoveSpiralRes*>(
               &_MoveSpiralRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(MoveSpiralRes* other);
  friend void swap(MoveSpiralRes& a, MoveSpiralRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveSpiralRes* New() const final {
    return CreateMaybeMessage<MoveSpiralRes>(nullptr);
  }

  MoveSpiralRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveSpiralRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveSpiralRes& from);
  void MergeFrom(const MoveSpiralRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSpiralRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.MoveSpiralRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.MoveSpiralRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetRefFrameReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetRefFrameReq) */ {
 public:
  SetRefFrameReq();
  virtual ~SetRefFrameReq();

  SetRefFrameReq(const SetRefFrameReq& from);
  SetRefFrameReq(SetRefFrameReq&& from) noexcept
    : SetRefFrameReq() {
    *this = ::std::move(from);
  }

  inline SetRefFrameReq& operator=(const SetRefFrameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRefFrameReq& operator=(SetRefFrameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRefFrameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRefFrameReq* internal_default_instance() {
    return reinterpret_cast<const SetRefFrameReq*>(
               &_SetRefFrameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(SetRefFrameReq* other);
  friend void swap(SetRefFrameReq& a, SetRefFrameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRefFrameReq* New() const final {
    return CreateMaybeMessage<SetRefFrameReq>(nullptr);
  }

  SetRefFrameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRefFrameReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRefFrameReq& from);
  void MergeFrom(const SetRefFrameReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRefFrameReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetRefFrameReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float ref_frame = 1;
  int ref_frame_size() const;
  void clear_ref_frame();
  static const int kRefFrameFieldNumber = 1;
  float ref_frame(int index) const;
  void set_ref_frame(int index, float value);
  void add_ref_frame(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ref_frame() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ref_frame();

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetRefFrameReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ref_frame_;
  mutable std::atomic<int> _ref_frame_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetRefFrameRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetRefFrameRes) */ {
 public:
  SetRefFrameRes();
  virtual ~SetRefFrameRes();

  SetRefFrameRes(const SetRefFrameRes& from);
  SetRefFrameRes(SetRefFrameRes&& from) noexcept
    : SetRefFrameRes() {
    *this = ::std::move(from);
  }

  inline SetRefFrameRes& operator=(const SetRefFrameRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRefFrameRes& operator=(SetRefFrameRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRefFrameRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRefFrameRes* internal_default_instance() {
    return reinterpret_cast<const SetRefFrameRes*>(
               &_SetRefFrameRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(SetRefFrameRes* other);
  friend void swap(SetRefFrameRes& a, SetRefFrameRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRefFrameRes* New() const final {
    return CreateMaybeMessage<SetRefFrameRes>(nullptr);
  }

  SetRefFrameRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRefFrameRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRefFrameRes& from);
  void MergeFrom(const SetRefFrameRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRefFrameRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetRefFrameRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetRefFrameRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetRefFramePlanarReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetRefFramePlanarReq) */ {
 public:
  SetRefFramePlanarReq();
  virtual ~SetRefFramePlanarReq();

  SetRefFramePlanarReq(const SetRefFramePlanarReq& from);
  SetRefFramePlanarReq(SetRefFramePlanarReq&& from) noexcept
    : SetRefFramePlanarReq() {
    *this = ::std::move(from);
  }

  inline SetRefFramePlanarReq& operator=(const SetRefFramePlanarReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRefFramePlanarReq& operator=(SetRefFramePlanarReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRefFramePlanarReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRefFramePlanarReq* internal_default_instance() {
    return reinterpret_cast<const SetRefFramePlanarReq*>(
               &_SetRefFramePlanarReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(SetRefFramePlanarReq* other);
  friend void swap(SetRefFramePlanarReq& a, SetRefFramePlanarReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRefFramePlanarReq* New() const final {
    return CreateMaybeMessage<SetRefFramePlanarReq>(nullptr);
  }

  SetRefFramePlanarReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRefFramePlanarReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRefFramePlanarReq& from);
  void MergeFrom(const SetRefFramePlanarReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRefFramePlanarReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetRefFramePlanarReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos0 = 1;
  int tpos0_size() const;
  void clear_tpos0();
  static const int kTpos0FieldNumber = 1;
  float tpos0(int index) const;
  void set_tpos0(int index, float value);
  void add_tpos0(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos0() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos0();

  // repeated float tpos1 = 2;
  int tpos1_size() const;
  void clear_tpos1();
  static const int kTpos1FieldNumber = 2;
  float tpos1(int index) const;
  void set_tpos1(int index, float value);
  void add_tpos1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos1();

  // repeated float tpos2 = 3;
  int tpos2_size() const;
  void clear_tpos2();
  static const int kTpos2FieldNumber = 3;
  float tpos2(int index) const;
  void set_tpos2(int index, float value);
  void add_tpos2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos2();

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos0_;
  mutable std::atomic<int> _tpos0_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos1_;
  mutable std::atomic<int> _tpos1_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos2_;
  mutable std::atomic<int> _tpos2_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetRefFramePlanarRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetRefFramePlanarRes) */ {
 public:
  SetRefFramePlanarRes();
  virtual ~SetRefFramePlanarRes();

  SetRefFramePlanarRes(const SetRefFramePlanarRes& from);
  SetRefFramePlanarRes(SetRefFramePlanarRes&& from) noexcept
    : SetRefFramePlanarRes() {
    *this = ::std::move(from);
  }

  inline SetRefFramePlanarRes& operator=(const SetRefFramePlanarRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRefFramePlanarRes& operator=(SetRefFramePlanarRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetRefFramePlanarRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetRefFramePlanarRes* internal_default_instance() {
    return reinterpret_cast<const SetRefFramePlanarRes*>(
               &_SetRefFramePlanarRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(SetRefFramePlanarRes* other);
  friend void swap(SetRefFramePlanarRes& a, SetRefFramePlanarRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetRefFramePlanarRes* New() const final {
    return CreateMaybeMessage<SetRefFramePlanarRes>(nullptr);
  }

  SetRefFramePlanarRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetRefFramePlanarRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetRefFramePlanarRes& from);
  void MergeFrom(const SetRefFramePlanarRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRefFramePlanarRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetRefFramePlanarRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float ref_frame = 1;
  int ref_frame_size() const;
  void clear_ref_frame();
  static const int kRefFrameFieldNumber = 1;
  float ref_frame(int index) const;
  void set_ref_frame(int index, float value);
  void add_ref_frame(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ref_frame() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ref_frame();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ref_frame_;
  mutable std::atomic<int> _ref_frame_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetToolFrameReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetToolFrameReq) */ {
 public:
  SetToolFrameReq();
  virtual ~SetToolFrameReq();

  SetToolFrameReq(const SetToolFrameReq& from);
  SetToolFrameReq(SetToolFrameReq&& from) noexcept
    : SetToolFrameReq() {
    *this = ::std::move(from);
  }

  inline SetToolFrameReq& operator=(const SetToolFrameReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetToolFrameReq& operator=(SetToolFrameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetToolFrameReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetToolFrameReq* internal_default_instance() {
    return reinterpret_cast<const SetToolFrameReq*>(
               &_SetToolFrameReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(SetToolFrameReq* other);
  friend void swap(SetToolFrameReq& a, SetToolFrameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetToolFrameReq* New() const final {
    return CreateMaybeMessage<SetToolFrameReq>(nullptr);
  }

  SetToolFrameReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetToolFrameReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetToolFrameReq& from);
  void MergeFrom(const SetToolFrameReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetToolFrameReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetToolFrameReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tool_frame = 1;
  int tool_frame_size() const;
  void clear_tool_frame();
  static const int kToolFrameFieldNumber = 1;
  float tool_frame(int index) const;
  void set_tool_frame(int index, float value);
  void add_tool_frame(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tool_frame() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tool_frame();

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetToolFrameReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tool_frame_;
  mutable std::atomic<int> _tool_frame_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetToolFrameRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetToolFrameRes) */ {
 public:
  SetToolFrameRes();
  virtual ~SetToolFrameRes();

  SetToolFrameRes(const SetToolFrameRes& from);
  SetToolFrameRes(SetToolFrameRes&& from) noexcept
    : SetToolFrameRes() {
    *this = ::std::move(from);
  }

  inline SetToolFrameRes& operator=(const SetToolFrameRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetToolFrameRes& operator=(SetToolFrameRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetToolFrameRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetToolFrameRes* internal_default_instance() {
    return reinterpret_cast<const SetToolFrameRes*>(
               &_SetToolFrameRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(SetToolFrameRes* other);
  friend void swap(SetToolFrameRes& a, SetToolFrameRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetToolFrameRes* New() const final {
    return CreateMaybeMessage<SetToolFrameRes>(nullptr);
  }

  SetToolFrameRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetToolFrameRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetToolFrameRes& from);
  void MergeFrom(const SetToolFrameRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetToolFrameRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetToolFrameRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetToolFrameRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetSpeedRatioReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetSpeedRatioReq) */ {
 public:
  SetSpeedRatioReq();
  virtual ~SetSpeedRatioReq();

  SetSpeedRatioReq(const SetSpeedRatioReq& from);
  SetSpeedRatioReq(SetSpeedRatioReq&& from) noexcept
    : SetSpeedRatioReq() {
    *this = ::std::move(from);
  }

  inline SetSpeedRatioReq& operator=(const SetSpeedRatioReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSpeedRatioReq& operator=(SetSpeedRatioReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSpeedRatioReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSpeedRatioReq* internal_default_instance() {
    return reinterpret_cast<const SetSpeedRatioReq*>(
               &_SetSpeedRatioReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(SetSpeedRatioReq* other);
  friend void swap(SetSpeedRatioReq& a, SetSpeedRatioReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSpeedRatioReq* New() const final {
    return CreateMaybeMessage<SetSpeedRatioReq>(nullptr);
  }

  SetSpeedRatioReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSpeedRatioReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSpeedRatioReq& from);
  void MergeFrom(const SetSpeedRatioReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSpeedRatioReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetSpeedRatioReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ratio = 1;
  void clear_ratio();
  static const int kRatioFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetSpeedRatioRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetSpeedRatioRes) */ {
 public:
  SetSpeedRatioRes();
  virtual ~SetSpeedRatioRes();

  SetSpeedRatioRes(const SetSpeedRatioRes& from);
  SetSpeedRatioRes(SetSpeedRatioRes&& from) noexcept
    : SetSpeedRatioRes() {
    *this = ::std::move(from);
  }

  inline SetSpeedRatioRes& operator=(const SetSpeedRatioRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSpeedRatioRes& operator=(SetSpeedRatioRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSpeedRatioRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSpeedRatioRes* internal_default_instance() {
    return reinterpret_cast<const SetSpeedRatioRes*>(
               &_SetSpeedRatioRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(SetSpeedRatioRes* other);
  friend void swap(SetSpeedRatioRes& a, SetSpeedRatioRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSpeedRatioRes* New() const final {
    return CreateMaybeMessage<SetSpeedRatioRes>(nullptr);
  }

  SetSpeedRatioRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSpeedRatioRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSpeedRatioRes& from);
  void MergeFrom(const SetSpeedRatioRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSpeedRatioRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetSpeedRatioRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetCommandSpeedRatioReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq) */ {
 public:
  SetCommandSpeedRatioReq();
  virtual ~SetCommandSpeedRatioReq();

  SetCommandSpeedRatioReq(const SetCommandSpeedRatioReq& from);
  SetCommandSpeedRatioReq(SetCommandSpeedRatioReq&& from) noexcept
    : SetCommandSpeedRatioReq() {
    *this = ::std::move(from);
  }

  inline SetCommandSpeedRatioReq& operator=(const SetCommandSpeedRatioReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCommandSpeedRatioReq& operator=(SetCommandSpeedRatioReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCommandSpeedRatioReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCommandSpeedRatioReq* internal_default_instance() {
    return reinterpret_cast<const SetCommandSpeedRatioReq*>(
               &_SetCommandSpeedRatioReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(SetCommandSpeedRatioReq* other);
  friend void swap(SetCommandSpeedRatioReq& a, SetCommandSpeedRatioReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCommandSpeedRatioReq* New() const final {
    return CreateMaybeMessage<SetCommandSpeedRatioReq>(nullptr);
  }

  SetCommandSpeedRatioReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCommandSpeedRatioReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCommandSpeedRatioReq& from);
  void MergeFrom(const SetCommandSpeedRatioReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCommandSpeedRatioReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ratio = 1;
  void clear_ratio();
  static const int kRatioFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetCommandSpeedRatioRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes) */ {
 public:
  SetCommandSpeedRatioRes();
  virtual ~SetCommandSpeedRatioRes();

  SetCommandSpeedRatioRes(const SetCommandSpeedRatioRes& from);
  SetCommandSpeedRatioRes(SetCommandSpeedRatioRes&& from) noexcept
    : SetCommandSpeedRatioRes() {
    *this = ::std::move(from);
  }

  inline SetCommandSpeedRatioRes& operator=(const SetCommandSpeedRatioRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCommandSpeedRatioRes& operator=(SetCommandSpeedRatioRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCommandSpeedRatioRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCommandSpeedRatioRes* internal_default_instance() {
    return reinterpret_cast<const SetCommandSpeedRatioRes*>(
               &_SetCommandSpeedRatioRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(SetCommandSpeedRatioRes* other);
  friend void swap(SetCommandSpeedRatioRes& a, SetCommandSpeedRatioRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCommandSpeedRatioRes* New() const final {
    return CreateMaybeMessage<SetCommandSpeedRatioRes>(nullptr);
  }

  SetCommandSpeedRatioRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCommandSpeedRatioRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCommandSpeedRatioRes& from);
  void MergeFrom(const SetCommandSpeedRatioRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCommandSpeedRatioRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class StopReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.StopReq) */ {
 public:
  StopReq();
  virtual ~StopReq();

  StopReq(const StopReq& from);
  StopReq(StopReq&& from) noexcept
    : StopReq() {
    *this = ::std::move(from);
  }

  inline StopReq& operator=(const StopReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopReq& operator=(StopReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopReq* internal_default_instance() {
    return reinterpret_cast<const StopReq*>(
               &_StopReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(StopReq* other);
  friend void swap(StopReq& a, StopReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopReq* New() const final {
    return CreateMaybeMessage<StopReq>(nullptr);
  }

  StopReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopReq& from);
  void MergeFrom(const StopReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.StopReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .IndyFramework.Protobuf.Shared.StopCategory stop_category = 1;
  void clear_stop_category();
  static const int kStopCategoryFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::StopCategory stop_category() const;
  void set_stop_category(::IndyFramework::Protobuf::Shared::StopCategory value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.StopReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int stop_category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class StopRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.StopRes) */ {
 public:
  StopRes();
  virtual ~StopRes();

  StopRes(const StopRes& from);
  StopRes(StopRes&& from) noexcept
    : StopRes() {
    *this = ::std::move(from);
  }

  inline StopRes& operator=(const StopRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRes& operator=(StopRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRes* internal_default_instance() {
    return reinterpret_cast<const StopRes*>(
               &_StopRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(StopRes* other);
  friend void swap(StopRes& a, StopRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopRes* New() const final {
    return CreateMaybeMessage<StopRes>(nullptr);
  }

  StopRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRes& from);
  void MergeFrom(const StopRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.StopRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.StopRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PauseReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.PauseReq) */ {
 public:
  PauseReq();
  virtual ~PauseReq();

  PauseReq(const PauseReq& from);
  PauseReq(PauseReq&& from) noexcept
    : PauseReq() {
    *this = ::std::move(from);
  }

  inline PauseReq& operator=(const PauseReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseReq& operator=(PauseReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseReq* internal_default_instance() {
    return reinterpret_cast<const PauseReq*>(
               &_PauseReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(PauseReq* other);
  friend void swap(PauseReq& a, PauseReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PauseReq* New() const final {
    return CreateMaybeMessage<PauseReq>(nullptr);
  }

  PauseReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PauseReq& from);
  void MergeFrom(const PauseReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.PauseReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .IndyFramework.Protobuf.Shared.PauseCategory pause_category = 1;
  void clear_pause_category();
  static const int kPauseCategoryFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::PauseCategory pause_category() const;
  void set_pause_category(::IndyFramework::Protobuf::Shared::PauseCategory value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.PauseReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int pause_category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class PauseRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.PauseRes) */ {
 public:
  PauseRes();
  virtual ~PauseRes();

  PauseRes(const PauseRes& from);
  PauseRes(PauseRes&& from) noexcept
    : PauseRes() {
    *this = ::std::move(from);
  }

  inline PauseRes& operator=(const PauseRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseRes& operator=(PauseRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseRes* internal_default_instance() {
    return reinterpret_cast<const PauseRes*>(
               &_PauseRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(PauseRes* other);
  friend void swap(PauseRes& a, PauseRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PauseRes* New() const final {
    return CreateMaybeMessage<PauseRes>(nullptr);
  }

  PauseRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PauseRes& from);
  void MergeFrom(const PauseRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.PauseRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.PauseRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ResumeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.ResumeReq) */ {
 public:
  ResumeReq();
  virtual ~ResumeReq();

  ResumeReq(const ResumeReq& from);
  ResumeReq(ResumeReq&& from) noexcept
    : ResumeReq() {
    *this = ::std::move(from);
  }

  inline ResumeReq& operator=(const ResumeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResumeReq& operator=(ResumeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResumeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResumeReq* internal_default_instance() {
    return reinterpret_cast<const ResumeReq*>(
               &_ResumeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(ResumeReq* other);
  friend void swap(ResumeReq& a, ResumeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResumeReq* New() const final {
    return CreateMaybeMessage<ResumeReq>(nullptr);
  }

  ResumeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResumeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResumeReq& from);
  void MergeFrom(const ResumeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResumeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.ResumeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.ResumeReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ResumeRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.ResumeRes) */ {
 public:
  ResumeRes();
  virtual ~ResumeRes();

  ResumeRes(const ResumeRes& from);
  ResumeRes(ResumeRes&& from) noexcept
    : ResumeRes() {
    *this = ::std::move(from);
  }

  inline ResumeRes& operator=(const ResumeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResumeRes& operator=(ResumeRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResumeRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResumeRes* internal_default_instance() {
    return reinterpret_cast<const ResumeRes*>(
               &_ResumeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(ResumeRes* other);
  friend void swap(ResumeRes& a, ResumeRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResumeRes* New() const final {
    return CreateMaybeMessage<ResumeRes>(nullptr);
  }

  ResumeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResumeRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResumeRes& from);
  void MergeFrom(const ResumeRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResumeRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.ResumeRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.ResumeRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class RebootReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.RebootReq) */ {
 public:
  RebootReq();
  virtual ~RebootReq();

  RebootReq(const RebootReq& from);
  RebootReq(RebootReq&& from) noexcept
    : RebootReq() {
    *this = ::std::move(from);
  }

  inline RebootReq& operator=(const RebootReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebootReq& operator=(RebootReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RebootReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RebootReq* internal_default_instance() {
    return reinterpret_cast<const RebootReq*>(
               &_RebootReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(RebootReq* other);
  friend void swap(RebootReq& a, RebootReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RebootReq* New() const final {
    return CreateMaybeMessage<RebootReq>(nullptr);
  }

  RebootReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RebootReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RebootReq& from);
  void MergeFrom(const RebootReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebootReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.RebootReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.RebootReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class RebootRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.RebootRes) */ {
 public:
  RebootRes();
  virtual ~RebootRes();

  RebootRes(const RebootRes& from);
  RebootRes(RebootRes&& from) noexcept
    : RebootRes() {
    *this = ::std::move(from);
  }

  inline RebootRes& operator=(const RebootRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebootRes& operator=(RebootRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RebootRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RebootRes* internal_default_instance() {
    return reinterpret_cast<const RebootRes*>(
               &_RebootRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(RebootRes* other);
  friend void swap(RebootRes& a, RebootRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RebootRes* New() const final {
    return CreateMaybeMessage<RebootRes>(nullptr);
  }

  RebootRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RebootRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RebootRes& from);
  void MergeFrom(const RebootRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebootRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.RebootRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.RebootRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class RecoverReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.RecoverReq) */ {
 public:
  RecoverReq();
  virtual ~RecoverReq();

  RecoverReq(const RecoverReq& from);
  RecoverReq(RecoverReq&& from) noexcept
    : RecoverReq() {
    *this = ::std::move(from);
  }

  inline RecoverReq& operator=(const RecoverReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecoverReq& operator=(RecoverReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecoverReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecoverReq* internal_default_instance() {
    return reinterpret_cast<const RecoverReq*>(
               &_RecoverReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(RecoverReq* other);
  friend void swap(RecoverReq& a, RecoverReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecoverReq* New() const final {
    return CreateMaybeMessage<RecoverReq>(nullptr);
  }

  RecoverReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecoverReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecoverReq& from);
  void MergeFrom(const RecoverReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoverReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.RecoverReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.RecoverReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class RecoverRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.RecoverRes) */ {
 public:
  RecoverRes();
  virtual ~RecoverRes();

  RecoverRes(const RecoverRes& from);
  RecoverRes(RecoverRes&& from) noexcept
    : RecoverRes() {
    *this = ::std::move(from);
  }

  inline RecoverRes& operator=(const RecoverRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecoverRes& operator=(RecoverRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecoverRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecoverRes* internal_default_instance() {
    return reinterpret_cast<const RecoverRes*>(
               &_RecoverRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(RecoverRes* other);
  friend void swap(RecoverRes& a, RecoverRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecoverRes* New() const final {
    return CreateMaybeMessage<RecoverRes>(nullptr);
  }

  RecoverRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecoverRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecoverRes& from);
  void MergeFrom(const RecoverRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoverRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.RecoverRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.RecoverRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class BrakeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.BrakeReq) */ {
 public:
  BrakeReq();
  virtual ~BrakeReq();

  BrakeReq(const BrakeReq& from);
  BrakeReq(BrakeReq&& from) noexcept
    : BrakeReq() {
    *this = ::std::move(from);
  }

  inline BrakeReq& operator=(const BrakeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrakeReq& operator=(BrakeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BrakeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BrakeReq* internal_default_instance() {
    return reinterpret_cast<const BrakeReq*>(
               &_BrakeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(BrakeReq* other);
  friend void swap(BrakeReq& a, BrakeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrakeReq* New() const final {
    return CreateMaybeMessage<BrakeReq>(nullptr);
  }

  BrakeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BrakeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BrakeReq& from);
  void MergeFrom(const BrakeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrakeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.BrakeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool on_list = 1;
  int on_list_size() const;
  void clear_on_list();
  static const int kOnListFieldNumber = 1;
  bool on_list(int index) const;
  void set_on_list(int index, bool value);
  void add_on_list(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      on_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_on_list();

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.BrakeReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > on_list_;
  mutable std::atomic<int> _on_list_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class BrakeRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.BrakeRes) */ {
 public:
  BrakeRes();
  virtual ~BrakeRes();

  BrakeRes(const BrakeRes& from);
  BrakeRes(BrakeRes&& from) noexcept
    : BrakeRes() {
    *this = ::std::move(from);
  }

  inline BrakeRes& operator=(const BrakeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrakeRes& operator=(BrakeRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BrakeRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BrakeRes* internal_default_instance() {
    return reinterpret_cast<const BrakeRes*>(
               &_BrakeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(BrakeRes* other);
  friend void swap(BrakeRes& a, BrakeRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrakeRes* New() const final {
    return CreateMaybeMessage<BrakeRes>(nullptr);
  }

  BrakeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BrakeRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BrakeRes& from);
  void MergeFrom(const BrakeRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrakeRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.BrakeRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.BrakeRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.ServoReq) */ {
 public:
  ServoReq();
  virtual ~ServoReq();

  ServoReq(const ServoReq& from);
  ServoReq(ServoReq&& from) noexcept
    : ServoReq() {
    *this = ::std::move(from);
  }

  inline ServoReq& operator=(const ServoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoReq& operator=(ServoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoReq* internal_default_instance() {
    return reinterpret_cast<const ServoReq*>(
               &_ServoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(ServoReq* other);
  friend void swap(ServoReq& a, ServoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoReq* New() const final {
    return CreateMaybeMessage<ServoReq>(nullptr);
  }

  ServoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoReq& from);
  void MergeFrom(const ServoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.ServoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool on = 1;
  void clear_on();
  static const int kOnFieldNumber = 1;
  bool on() const;
  void set_on(bool value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.ServoReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool on_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class ServoRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.ServoRes) */ {
 public:
  ServoRes();
  virtual ~ServoRes();

  ServoRes(const ServoRes& from);
  ServoRes(ServoRes&& from) noexcept
    : ServoRes() {
    *this = ::std::move(from);
  }

  inline ServoRes& operator=(const ServoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServoRes& operator=(ServoRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServoRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServoRes* internal_default_instance() {
    return reinterpret_cast<const ServoRes*>(
               &_ServoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(ServoRes* other);
  friend void swap(ServoRes& a, ServoRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServoRes* New() const final {
    return CreateMaybeMessage<ServoRes>(nullptr);
  }

  ServoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServoRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServoRes& from);
  void MergeFrom(const ServoRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServoRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.ServoRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.ServoRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetAutoServoOffReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetAutoServoOffReq) */ {
 public:
  SetAutoServoOffReq();
  virtual ~SetAutoServoOffReq();

  SetAutoServoOffReq(const SetAutoServoOffReq& from);
  SetAutoServoOffReq(SetAutoServoOffReq&& from) noexcept
    : SetAutoServoOffReq() {
    *this = ::std::move(from);
  }

  inline SetAutoServoOffReq& operator=(const SetAutoServoOffReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAutoServoOffReq& operator=(SetAutoServoOffReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAutoServoOffReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAutoServoOffReq* internal_default_instance() {
    return reinterpret_cast<const SetAutoServoOffReq*>(
               &_SetAutoServoOffReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(SetAutoServoOffReq* other);
  friend void swap(SetAutoServoOffReq& a, SetAutoServoOffReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAutoServoOffReq* New() const final {
    return CreateMaybeMessage<SetAutoServoOffReq>(nullptr);
  }

  SetAutoServoOffReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAutoServoOffReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAutoServoOffReq& from);
  void MergeFrom(const SetAutoServoOffReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAutoServoOffReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetAutoServoOffReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // float time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enable_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetAutoServoOffRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetAutoServoOffRes) */ {
 public:
  SetAutoServoOffRes();
  virtual ~SetAutoServoOffRes();

  SetAutoServoOffRes(const SetAutoServoOffRes& from);
  SetAutoServoOffRes(SetAutoServoOffRes&& from) noexcept
    : SetAutoServoOffRes() {
    *this = ::std::move(from);
  }

  inline SetAutoServoOffRes& operator=(const SetAutoServoOffRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAutoServoOffRes& operator=(SetAutoServoOffRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAutoServoOffRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAutoServoOffRes* internal_default_instance() {
    return reinterpret_cast<const SetAutoServoOffRes*>(
               &_SetAutoServoOffRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(SetAutoServoOffRes* other);
  friend void swap(SetAutoServoOffRes& a, SetAutoServoOffRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAutoServoOffRes* New() const final {
    return CreateMaybeMessage<SetAutoServoOffRes>(nullptr);
  }

  SetAutoServoOffRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAutoServoOffRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAutoServoOffRes& from);
  void MergeFrom(const SetAutoServoOffRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAutoServoOffRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetAutoServoOffRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetAutoServoOffReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetAutoServoOffReq) */ {
 public:
  GetAutoServoOffReq();
  virtual ~GetAutoServoOffReq();

  GetAutoServoOffReq(const GetAutoServoOffReq& from);
  GetAutoServoOffReq(GetAutoServoOffReq&& from) noexcept
    : GetAutoServoOffReq() {
    *this = ::std::move(from);
  }

  inline GetAutoServoOffReq& operator=(const GetAutoServoOffReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAutoServoOffReq& operator=(GetAutoServoOffReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAutoServoOffReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAutoServoOffReq* internal_default_instance() {
    return reinterpret_cast<const GetAutoServoOffReq*>(
               &_GetAutoServoOffReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(GetAutoServoOffReq* other);
  friend void swap(GetAutoServoOffReq& a, GetAutoServoOffReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAutoServoOffReq* New() const final {
    return CreateMaybeMessage<GetAutoServoOffReq>(nullptr);
  }

  GetAutoServoOffReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAutoServoOffReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAutoServoOffReq& from);
  void MergeFrom(const GetAutoServoOffReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAutoServoOffReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetAutoServoOffReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetAutoServoOffRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetAutoServoOffRes) */ {
 public:
  GetAutoServoOffRes();
  virtual ~GetAutoServoOffRes();

  GetAutoServoOffRes(const GetAutoServoOffRes& from);
  GetAutoServoOffRes(GetAutoServoOffRes&& from) noexcept
    : GetAutoServoOffRes() {
    *this = ::std::move(from);
  }

  inline GetAutoServoOffRes& operator=(const GetAutoServoOffRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAutoServoOffRes& operator=(GetAutoServoOffRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAutoServoOffRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAutoServoOffRes* internal_default_instance() {
    return reinterpret_cast<const GetAutoServoOffRes*>(
               &_GetAutoServoOffRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(GetAutoServoOffRes* other);
  friend void swap(GetAutoServoOffRes& a, GetAutoServoOffRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAutoServoOffRes* New() const final {
    return CreateMaybeMessage<GetAutoServoOffRes>(nullptr);
  }

  GetAutoServoOffRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAutoServoOffRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAutoServoOffRes& from);
  void MergeFrom(const GetAutoServoOffRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAutoServoOffRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetAutoServoOffRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // bool enable = 1;
  void clear_enable();
  static const int kEnableFieldNumber = 1;
  bool enable() const;
  void set_enable(bool value);

  // float time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  float time() const;
  void set_time(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool enable_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SimulationModeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SimulationModeReq) */ {
 public:
  SimulationModeReq();
  virtual ~SimulationModeReq();

  SimulationModeReq(const SimulationModeReq& from);
  SimulationModeReq(SimulationModeReq&& from) noexcept
    : SimulationModeReq() {
    *this = ::std::move(from);
  }

  inline SimulationModeReq& operator=(const SimulationModeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationModeReq& operator=(SimulationModeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationModeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulationModeReq* internal_default_instance() {
    return reinterpret_cast<const SimulationModeReq*>(
               &_SimulationModeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(SimulationModeReq* other);
  friend void swap(SimulationModeReq& a, SimulationModeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimulationModeReq* New() const final {
    return CreateMaybeMessage<SimulationModeReq>(nullptr);
  }

  SimulationModeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationModeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationModeReq& from);
  void MergeFrom(const SimulationModeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationModeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SimulationModeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool on = 1;
  void clear_on();
  static const int kOnFieldNumber = 1;
  bool on() const;
  void set_on(bool value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SimulationModeReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool on_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SimulationModeRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SimulationModeRes) */ {
 public:
  SimulationModeRes();
  virtual ~SimulationModeRes();

  SimulationModeRes(const SimulationModeRes& from);
  SimulationModeRes(SimulationModeRes&& from) noexcept
    : SimulationModeRes() {
    *this = ::std::move(from);
  }

  inline SimulationModeRes& operator=(const SimulationModeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationModeRes& operator=(SimulationModeRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationModeRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulationModeRes* internal_default_instance() {
    return reinterpret_cast<const SimulationModeRes*>(
               &_SimulationModeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(SimulationModeRes* other);
  friend void swap(SimulationModeRes& a, SimulationModeRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimulationModeRes* New() const final {
    return CreateMaybeMessage<SimulationModeRes>(nullptr);
  }

  SimulationModeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationModeRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationModeRes& from);
  void MergeFrom(const SimulationModeRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationModeRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SimulationModeRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SimulationModeRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DirectTeachingModeReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.DirectTeachingModeReq) */ {
 public:
  DirectTeachingModeReq();
  virtual ~DirectTeachingModeReq();

  DirectTeachingModeReq(const DirectTeachingModeReq& from);
  DirectTeachingModeReq(DirectTeachingModeReq&& from) noexcept
    : DirectTeachingModeReq() {
    *this = ::std::move(from);
  }

  inline DirectTeachingModeReq& operator=(const DirectTeachingModeReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectTeachingModeReq& operator=(DirectTeachingModeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectTeachingModeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectTeachingModeReq* internal_default_instance() {
    return reinterpret_cast<const DirectTeachingModeReq*>(
               &_DirectTeachingModeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(DirectTeachingModeReq* other);
  friend void swap(DirectTeachingModeReq& a, DirectTeachingModeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectTeachingModeReq* New() const final {
    return CreateMaybeMessage<DirectTeachingModeReq>(nullptr);
  }

  DirectTeachingModeReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectTeachingModeReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectTeachingModeReq& from);
  void MergeFrom(const DirectTeachingModeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectTeachingModeReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.DirectTeachingModeReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool on = 1;
  void clear_on();
  static const int kOnFieldNumber = 1;
  bool on() const;
  void set_on(bool value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool on_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class DirectTeachingModeRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.DirectTeachingModeRes) */ {
 public:
  DirectTeachingModeRes();
  virtual ~DirectTeachingModeRes();

  DirectTeachingModeRes(const DirectTeachingModeRes& from);
  DirectTeachingModeRes(DirectTeachingModeRes&& from) noexcept
    : DirectTeachingModeRes() {
    *this = ::std::move(from);
  }

  inline DirectTeachingModeRes& operator=(const DirectTeachingModeRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectTeachingModeRes& operator=(DirectTeachingModeRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectTeachingModeRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectTeachingModeRes* internal_default_instance() {
    return reinterpret_cast<const DirectTeachingModeRes*>(
               &_DirectTeachingModeRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(DirectTeachingModeRes* other);
  friend void swap(DirectTeachingModeRes& a, DirectTeachingModeRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectTeachingModeRes* New() const final {
    return CreateMaybeMessage<DirectTeachingModeRes>(nullptr);
  }

  DirectTeachingModeRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectTeachingModeRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectTeachingModeRes& from);
  void MergeFrom(const DirectTeachingModeRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectTeachingModeRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.DirectTeachingModeRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class InverseKinematicsReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.InverseKinematicsReq) */ {
 public:
  InverseKinematicsReq();
  virtual ~InverseKinematicsReq();

  InverseKinematicsReq(const InverseKinematicsReq& from);
  InverseKinematicsReq(InverseKinematicsReq&& from) noexcept
    : InverseKinematicsReq() {
    *this = ::std::move(from);
  }

  inline InverseKinematicsReq& operator=(const InverseKinematicsReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline InverseKinematicsReq& operator=(InverseKinematicsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InverseKinematicsReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InverseKinematicsReq* internal_default_instance() {
    return reinterpret_cast<const InverseKinematicsReq*>(
               &_InverseKinematicsReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(InverseKinematicsReq* other);
  friend void swap(InverseKinematicsReq& a, InverseKinematicsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InverseKinematicsReq* New() const final {
    return CreateMaybeMessage<InverseKinematicsReq>(nullptr);
  }

  InverseKinematicsReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InverseKinematicsReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InverseKinematicsReq& from);
  void MergeFrom(const InverseKinematicsReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InverseKinematicsReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.InverseKinematicsReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos = 1;
  int tpos_size() const;
  void clear_tpos();
  static const int kTposFieldNumber = 1;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos();

  // repeated float init_jpos = 2;
  int init_jpos_size() const;
  void clear_init_jpos();
  static const int kInitJposFieldNumber = 2;
  float init_jpos(int index) const;
  void set_init_jpos(int index, float value);
  void add_init_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      init_jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_init_jpos();

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.InverseKinematicsReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos_;
  mutable std::atomic<int> _tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > init_jpos_;
  mutable std::atomic<int> _init_jpos_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class InverseKinematicsRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.InverseKinematicsRes) */ {
 public:
  InverseKinematicsRes();
  virtual ~InverseKinematicsRes();

  InverseKinematicsRes(const InverseKinematicsRes& from);
  InverseKinematicsRes(InverseKinematicsRes&& from) noexcept
    : InverseKinematicsRes() {
    *this = ::std::move(from);
  }

  inline InverseKinematicsRes& operator=(const InverseKinematicsRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline InverseKinematicsRes& operator=(InverseKinematicsRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InverseKinematicsRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InverseKinematicsRes* internal_default_instance() {
    return reinterpret_cast<const InverseKinematicsRes*>(
               &_InverseKinematicsRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(InverseKinematicsRes* other);
  friend void swap(InverseKinematicsRes& a, InverseKinematicsRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InverseKinematicsRes* New() const final {
    return CreateMaybeMessage<InverseKinematicsRes>(nullptr);
  }

  InverseKinematicsRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InverseKinematicsRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InverseKinematicsRes& from);
  void MergeFrom(const InverseKinematicsRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InverseKinematicsRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.InverseKinematicsRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float jpos = 1;
  int jpos_size() const;
  void clear_jpos();
  static const int kJposFieldNumber = 1;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_jpos();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.InverseKinematicsRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > jpos_;
  mutable std::atomic<int> _jpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CheckAproachRetractValidReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq) */ {
 public:
  CheckAproachRetractValidReq();
  virtual ~CheckAproachRetractValidReq();

  CheckAproachRetractValidReq(const CheckAproachRetractValidReq& from);
  CheckAproachRetractValidReq(CheckAproachRetractValidReq&& from) noexcept
    : CheckAproachRetractValidReq() {
    *this = ::std::move(from);
  }

  inline CheckAproachRetractValidReq& operator=(const CheckAproachRetractValidReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckAproachRetractValidReq& operator=(CheckAproachRetractValidReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckAproachRetractValidReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckAproachRetractValidReq* internal_default_instance() {
    return reinterpret_cast<const CheckAproachRetractValidReq*>(
               &_CheckAproachRetractValidReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(CheckAproachRetractValidReq* other);
  friend void swap(CheckAproachRetractValidReq& a, CheckAproachRetractValidReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckAproachRetractValidReq* New() const final {
    return CreateMaybeMessage<CheckAproachRetractValidReq>(nullptr);
  }

  CheckAproachRetractValidReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckAproachRetractValidReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckAproachRetractValidReq& from);
  void MergeFrom(const CheckAproachRetractValidReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckAproachRetractValidReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.CheckAproachRetractValidReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos = 1;
  int tpos_size() const;
  void clear_tpos();
  static const int kTposFieldNumber = 1;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos();

  // repeated float init_jpos = 2;
  int init_jpos_size() const;
  void clear_init_jpos();
  static const int kInitJposFieldNumber = 2;
  float init_jpos(int index) const;
  void set_init_jpos(int index, float value);
  void add_init_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      init_jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_init_jpos();

  // repeated float pre_tpos = 3;
  int pre_tpos_size() const;
  void clear_pre_tpos();
  static const int kPreTposFieldNumber = 3;
  float pre_tpos(int index) const;
  void set_pre_tpos(int index, float value);
  void add_pre_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pre_tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pre_tpos();

  // repeated float post_tpos = 4;
  int post_tpos_size() const;
  void clear_post_tpos();
  static const int kPostTposFieldNumber = 4;
  float post_tpos(int index) const;
  void set_post_tpos(int index, float value);
  void add_post_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      post_tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_post_tpos();

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos_;
  mutable std::atomic<int> _tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > init_jpos_;
  mutable std::atomic<int> _init_jpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pre_tpos_;
  mutable std::atomic<int> _pre_tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > post_tpos_;
  mutable std::atomic<int> _post_tpos_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CheckAproachRetractValidRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes) */ {
 public:
  CheckAproachRetractValidRes();
  virtual ~CheckAproachRetractValidRes();

  CheckAproachRetractValidRes(const CheckAproachRetractValidRes& from);
  CheckAproachRetractValidRes(CheckAproachRetractValidRes&& from) noexcept
    : CheckAproachRetractValidRes() {
    *this = ::std::move(from);
  }

  inline CheckAproachRetractValidRes& operator=(const CheckAproachRetractValidRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckAproachRetractValidRes& operator=(CheckAproachRetractValidRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckAproachRetractValidRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckAproachRetractValidRes* internal_default_instance() {
    return reinterpret_cast<const CheckAproachRetractValidRes*>(
               &_CheckAproachRetractValidRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(CheckAproachRetractValidRes* other);
  friend void swap(CheckAproachRetractValidRes& a, CheckAproachRetractValidRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckAproachRetractValidRes* New() const final {
    return CreateMaybeMessage<CheckAproachRetractValidRes>(nullptr);
  }

  CheckAproachRetractValidRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckAproachRetractValidRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckAproachRetractValidRes& from);
  void MergeFrom(const CheckAproachRetractValidRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckAproachRetractValidRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.CheckAproachRetractValidRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tar_pos = 2;
  int tar_pos_size() const;
  void clear_tar_pos();
  static const int kTarPosFieldNumber = 2;
  float tar_pos(int index) const;
  void set_tar_pos(int index, float value);
  void add_tar_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tar_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tar_pos();

  // repeated float approach_pos = 3;
  int approach_pos_size() const;
  void clear_approach_pos();
  static const int kApproachPosFieldNumber = 3;
  float approach_pos(int index) const;
  void set_approach_pos(int index, float value);
  void add_approach_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      approach_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_approach_pos();

  // repeated float retract_pos = 4;
  int retract_pos_size() const;
  void clear_retract_pos();
  static const int kRetractPosFieldNumber = 4;
  float retract_pos(int index) const;
  void set_retract_pos(int index, float value);
  void add_retract_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      retract_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_retract_pos();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // bool is_valid = 1;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 1;
  bool is_valid() const;
  void set_is_valid(bool value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tar_pos_;
  mutable std::atomic<int> _tar_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > approach_pos_;
  mutable std::atomic<int> _approach_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > retract_pos_;
  mutable std::atomic<int> _retract_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool is_valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetPalletPointListReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetPalletPointListReq) */ {
 public:
  GetPalletPointListReq();
  virtual ~GetPalletPointListReq();

  GetPalletPointListReq(const GetPalletPointListReq& from);
  GetPalletPointListReq(GetPalletPointListReq&& from) noexcept
    : GetPalletPointListReq() {
    *this = ::std::move(from);
  }

  inline GetPalletPointListReq& operator=(const GetPalletPointListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPalletPointListReq& operator=(GetPalletPointListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPalletPointListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPalletPointListReq* internal_default_instance() {
    return reinterpret_cast<const GetPalletPointListReq*>(
               &_GetPalletPointListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(GetPalletPointListReq* other);
  friend void swap(GetPalletPointListReq& a, GetPalletPointListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPalletPointListReq* New() const final {
    return CreateMaybeMessage<GetPalletPointListReq>(nullptr);
  }

  GetPalletPointListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPalletPointListReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPalletPointListReq& from);
  void MergeFrom(const GetPalletPointListReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPalletPointListReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetPalletPointListReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float tpos = 1;
  int tpos_size() const;
  void clear_tpos();
  static const int kTposFieldNumber = 1;
  float tpos(int index) const;
  void set_tpos(int index, float value);
  void add_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tpos();

  // repeated float jpos = 2;
  int jpos_size() const;
  void clear_jpos();
  static const int kJposFieldNumber = 2;
  float jpos(int index) const;
  void set_jpos(int index, float value);
  void add_jpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      jpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_jpos();

  // repeated float pre_tpos = 3;
  int pre_tpos_size() const;
  void clear_pre_tpos();
  static const int kPreTposFieldNumber = 3;
  float pre_tpos(int index) const;
  void set_pre_tpos(int index, float value);
  void add_pre_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pre_tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pre_tpos();

  // repeated float post_tpos = 4;
  int post_tpos_size() const;
  void clear_post_tpos();
  static const int kPostTposFieldNumber = 4;
  float post_tpos(int index) const;
  void set_post_tpos(int index, float value);
  void add_post_tpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      post_tpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_post_tpos();

  // int32 pallet_pattern = 5;
  void clear_pallet_pattern();
  static const int kPalletPatternFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 pallet_pattern() const;
  void set_pallet_pattern(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 width = 6;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 height = 7;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetPalletPointListReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tpos_;
  mutable std::atomic<int> _tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > jpos_;
  mutable std::atomic<int> _jpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pre_tpos_;
  mutable std::atomic<int> _pre_tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > post_tpos_;
  mutable std::atomic<int> _post_tpos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 pallet_pattern_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetPalletPointListRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetPalletPointListRes) */ {
 public:
  GetPalletPointListRes();
  virtual ~GetPalletPointListRes();

  GetPalletPointListRes(const GetPalletPointListRes& from);
  GetPalletPointListRes(GetPalletPointListRes&& from) noexcept
    : GetPalletPointListRes() {
    *this = ::std::move(from);
  }

  inline GetPalletPointListRes& operator=(const GetPalletPointListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPalletPointListRes& operator=(GetPalletPointListRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPalletPointListRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPalletPointListRes* internal_default_instance() {
    return reinterpret_cast<const GetPalletPointListRes*>(
               &_GetPalletPointListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(GetPalletPointListRes* other);
  friend void swap(GetPalletPointListRes& a, GetPalletPointListRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPalletPointListRes* New() const final {
    return CreateMaybeMessage<GetPalletPointListRes>(nullptr);
  }

  GetPalletPointListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPalletPointListRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPalletPointListRes& from);
  void MergeFrom(const GetPalletPointListRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPalletPointListRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetPalletPointListRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.PalletPoint pallet_points = 1;
  int pallet_points_size() const;
  void clear_pallet_points();
  static const int kPalletPointsFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::PalletPoint* mutable_pallet_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::PalletPoint >*
      mutable_pallet_points();
  const ::IndyFramework::Protobuf::Shared::PalletPoint& pallet_points(int index) const;
  ::IndyFramework::Protobuf::Shared::PalletPoint* add_pallet_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::PalletPoint >&
      pallet_points() const;

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetPalletPointListRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::PalletPoint > pallet_points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CalculateRelativePoseReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.CalculateRelativePoseReq) */ {
 public:
  CalculateRelativePoseReq();
  virtual ~CalculateRelativePoseReq();

  CalculateRelativePoseReq(const CalculateRelativePoseReq& from);
  CalculateRelativePoseReq(CalculateRelativePoseReq&& from) noexcept
    : CalculateRelativePoseReq() {
    *this = ::std::move(from);
  }

  inline CalculateRelativePoseReq& operator=(const CalculateRelativePoseReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateRelativePoseReq& operator=(CalculateRelativePoseReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateRelativePoseReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateRelativePoseReq* internal_default_instance() {
    return reinterpret_cast<const CalculateRelativePoseReq*>(
               &_CalculateRelativePoseReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(CalculateRelativePoseReq* other);
  friend void swap(CalculateRelativePoseReq& a, CalculateRelativePoseReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalculateRelativePoseReq* New() const final {
    return CreateMaybeMessage<CalculateRelativePoseReq>(nullptr);
  }

  CalculateRelativePoseReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateRelativePoseReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateRelativePoseReq& from);
  void MergeFrom(const CalculateRelativePoseReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateRelativePoseReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.CalculateRelativePoseReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float start_pos = 1;
  int start_pos_size() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 1;
  float start_pos(int index) const;
  void set_start_pos(int index, float value);
  void add_start_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      start_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_start_pos();

  // repeated float end_pos = 2;
  int end_pos_size() const;
  void clear_end_pos();
  static const int kEndPosFieldNumber = 2;
  float end_pos(int index) const;
  void set_end_pos(int index, float value);
  void add_end_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      end_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_end_pos();

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::TaskBaseType base_type() const;
  void set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > start_pos_;
  mutable std::atomic<int> _start_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > end_pos_;
  mutable std::atomic<int> _end_pos_cached_byte_size_;
  int base_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CalculateRelativePoseRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.CalculateRelativePoseRes) */ {
 public:
  CalculateRelativePoseRes();
  virtual ~CalculateRelativePoseRes();

  CalculateRelativePoseRes(const CalculateRelativePoseRes& from);
  CalculateRelativePoseRes(CalculateRelativePoseRes&& from) noexcept
    : CalculateRelativePoseRes() {
    *this = ::std::move(from);
  }

  inline CalculateRelativePoseRes& operator=(const CalculateRelativePoseRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateRelativePoseRes& operator=(CalculateRelativePoseRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateRelativePoseRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateRelativePoseRes* internal_default_instance() {
    return reinterpret_cast<const CalculateRelativePoseRes*>(
               &_CalculateRelativePoseRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(CalculateRelativePoseRes* other);
  friend void swap(CalculateRelativePoseRes& a, CalculateRelativePoseRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalculateRelativePoseRes* New() const final {
    return CreateMaybeMessage<CalculateRelativePoseRes>(nullptr);
  }

  CalculateRelativePoseRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateRelativePoseRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateRelativePoseRes& from);
  void MergeFrom(const CalculateRelativePoseRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateRelativePoseRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.CalculateRelativePoseRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float relative_pos = 1;
  int relative_pos_size() const;
  void clear_relative_pos();
  static const int kRelativePosFieldNumber = 1;
  float relative_pos(int index) const;
  void set_relative_pos(int index, float value);
  void add_relative_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      relative_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_relative_pos();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > relative_pos_;
  mutable std::atomic<int> _relative_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CalculateCurrentPoseRelReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq) */ {
 public:
  CalculateCurrentPoseRelReq();
  virtual ~CalculateCurrentPoseRelReq();

  CalculateCurrentPoseRelReq(const CalculateCurrentPoseRelReq& from);
  CalculateCurrentPoseRelReq(CalculateCurrentPoseRelReq&& from) noexcept
    : CalculateCurrentPoseRelReq() {
    *this = ::std::move(from);
  }

  inline CalculateCurrentPoseRelReq& operator=(const CalculateCurrentPoseRelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateCurrentPoseRelReq& operator=(CalculateCurrentPoseRelReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateCurrentPoseRelReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateCurrentPoseRelReq* internal_default_instance() {
    return reinterpret_cast<const CalculateCurrentPoseRelReq*>(
               &_CalculateCurrentPoseRelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(CalculateCurrentPoseRelReq* other);
  friend void swap(CalculateCurrentPoseRelReq& a, CalculateCurrentPoseRelReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalculateCurrentPoseRelReq* New() const final {
    return CreateMaybeMessage<CalculateCurrentPoseRelReq>(nullptr);
  }

  CalculateCurrentPoseRelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateCurrentPoseRelReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateCurrentPoseRelReq& from);
  void MergeFrom(const CalculateCurrentPoseRelReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateCurrentPoseRelReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float current_pos = 1;
  int current_pos_size() const;
  void clear_current_pos();
  static const int kCurrentPosFieldNumber = 1;
  float current_pos(int index) const;
  void set_current_pos(int index, float value);
  void add_current_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      current_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_current_pos();

  // repeated float relative_pos = 2;
  int relative_pos_size() const;
  void clear_relative_pos();
  static const int kRelativePosFieldNumber = 2;
  float relative_pos(int index) const;
  void set_relative_pos(int index, float value);
  void add_relative_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      relative_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_relative_pos();

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
  void clear_base_type();
  static const int kBaseTypeFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::TaskBaseType base_type() const;
  void set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > current_pos_;
  mutable std::atomic<int> _current_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > relative_pos_;
  mutable std::atomic<int> _relative_pos_cached_byte_size_;
  int base_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class CalculateCurrentPoseRelRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes) */ {
 public:
  CalculateCurrentPoseRelRes();
  virtual ~CalculateCurrentPoseRelRes();

  CalculateCurrentPoseRelRes(const CalculateCurrentPoseRelRes& from);
  CalculateCurrentPoseRelRes(CalculateCurrentPoseRelRes&& from) noexcept
    : CalculateCurrentPoseRelRes() {
    *this = ::std::move(from);
  }

  inline CalculateCurrentPoseRelRes& operator=(const CalculateCurrentPoseRelRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateCurrentPoseRelRes& operator=(CalculateCurrentPoseRelRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalculateCurrentPoseRelRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculateCurrentPoseRelRes* internal_default_instance() {
    return reinterpret_cast<const CalculateCurrentPoseRelRes*>(
               &_CalculateCurrentPoseRelRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void Swap(CalculateCurrentPoseRelRes* other);
  friend void swap(CalculateCurrentPoseRelRes& a, CalculateCurrentPoseRelRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalculateCurrentPoseRelRes* New() const final {
    return CreateMaybeMessage<CalculateCurrentPoseRelRes>(nullptr);
  }

  CalculateCurrentPoseRelRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalculateCurrentPoseRelRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalculateCurrentPoseRelRes& from);
  void MergeFrom(const CalculateCurrentPoseRelRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateCurrentPoseRelRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float calculated_pos = 1;
  int calculated_pos_size() const;
  void clear_calculated_pos();
  static const int kCalculatedPosFieldNumber = 1;
  float calculated_pos(int index) const;
  void set_calculated_pos(int index, float value);
  void add_calculated_pos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      calculated_pos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_calculated_pos();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > calculated_pos_;
  mutable std::atomic<int> _calculated_pos_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetDIReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetDIReq) */ {
 public:
  SetDIReq();
  virtual ~SetDIReq();

  SetDIReq(const SetDIReq& from);
  SetDIReq(SetDIReq&& from) noexcept
    : SetDIReq() {
    *this = ::std::move(from);
  }

  inline SetDIReq& operator=(const SetDIReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDIReq& operator=(SetDIReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDIReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDIReq* internal_default_instance() {
    return reinterpret_cast<const SetDIReq*>(
               &_SetDIReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void Swap(SetDIReq* other);
  friend void swap(SetDIReq& a, SetDIReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetDIReq* New() const final {
    return CreateMaybeMessage<SetDIReq>(nullptr);
  }

  SetDIReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDIReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDIReq& from);
  void MergeFrom(const SetDIReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDIReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetDIReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
  int di_list_size() const;
  void clear_di_list();
  static const int kDiListFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_di_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_di_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& di_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_di_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      di_list() const;

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetDIReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > di_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetDIRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetDIRes) */ {
 public:
  SetDIRes();
  virtual ~SetDIRes();

  SetDIRes(const SetDIRes& from);
  SetDIRes(SetDIRes&& from) noexcept
    : SetDIRes() {
    *this = ::std::move(from);
  }

  inline SetDIRes& operator=(const SetDIRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDIRes& operator=(SetDIRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDIRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDIRes* internal_default_instance() {
    return reinterpret_cast<const SetDIRes*>(
               &_SetDIRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void Swap(SetDIRes* other);
  friend void swap(SetDIRes& a, SetDIRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetDIRes* New() const final {
    return CreateMaybeMessage<SetDIRes>(nullptr);
  }

  SetDIRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDIRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDIRes& from);
  void MergeFrom(const SetDIRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDIRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetDIRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetDIRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetDIReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetDIReq) */ {
 public:
  GetDIReq();
  virtual ~GetDIReq();

  GetDIReq(const GetDIReq& from);
  GetDIReq(GetDIReq&& from) noexcept
    : GetDIReq() {
    *this = ::std::move(from);
  }

  inline GetDIReq& operator=(const GetDIReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDIReq& operator=(GetDIReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDIReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDIReq* internal_default_instance() {
    return reinterpret_cast<const GetDIReq*>(
               &_GetDIReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void Swap(GetDIReq* other);
  friend void swap(GetDIReq& a, GetDIReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDIReq* New() const final {
    return CreateMaybeMessage<GetDIReq>(nullptr);
  }

  GetDIReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDIReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDIReq& from);
  void MergeFrom(const GetDIReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDIReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetDIReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetDIReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetDIRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetDIRes) */ {
 public:
  GetDIRes();
  virtual ~GetDIRes();

  GetDIRes(const GetDIRes& from);
  GetDIRes(GetDIRes&& from) noexcept
    : GetDIRes() {
    *this = ::std::move(from);
  }

  inline GetDIRes& operator=(const GetDIRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDIRes& operator=(GetDIRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDIRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDIRes* internal_default_instance() {
    return reinterpret_cast<const GetDIRes*>(
               &_GetDIRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void Swap(GetDIRes* other);
  friend void swap(GetDIRes& a, GetDIRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDIRes* New() const final {
    return CreateMaybeMessage<GetDIRes>(nullptr);
  }

  GetDIRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDIRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDIRes& from);
  void MergeFrom(const GetDIRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDIRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetDIRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool di = 1;
  int di_size() const;
  void clear_di();
  static const int kDiFieldNumber = 1;
  bool di(int index) const;
  void set_di(int index, bool value);
  void add_di(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      di() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_di();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetDIRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > di_;
  mutable std::atomic<int> _di_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetDOReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetDOReq) */ {
 public:
  SetDOReq();
  virtual ~SetDOReq();

  SetDOReq(const SetDOReq& from);
  SetDOReq(SetDOReq&& from) noexcept
    : SetDOReq() {
    *this = ::std::move(from);
  }

  inline SetDOReq& operator=(const SetDOReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDOReq& operator=(SetDOReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDOReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDOReq* internal_default_instance() {
    return reinterpret_cast<const SetDOReq*>(
               &_SetDOReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void Swap(SetDOReq* other);
  friend void swap(SetDOReq& a, SetDOReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetDOReq* New() const final {
    return CreateMaybeMessage<SetDOReq>(nullptr);
  }

  SetDOReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDOReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDOReq& from);
  void MergeFrom(const SetDOReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDOReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetDOReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
  int do_list_size() const;
  void clear_do_list();
  static const int kDoListFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      do_list() const;

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetDOReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > do_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetDORes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetDORes) */ {
 public:
  SetDORes();
  virtual ~SetDORes();

  SetDORes(const SetDORes& from);
  SetDORes(SetDORes&& from) noexcept
    : SetDORes() {
    *this = ::std::move(from);
  }

  inline SetDORes& operator=(const SetDORes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDORes& operator=(SetDORes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetDORes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetDORes* internal_default_instance() {
    return reinterpret_cast<const SetDORes*>(
               &_SetDORes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void Swap(SetDORes* other);
  friend void swap(SetDORes& a, SetDORes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetDORes* New() const final {
    return CreateMaybeMessage<SetDORes>(nullptr);
  }

  SetDORes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetDORes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetDORes& from);
  void MergeFrom(const SetDORes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDORes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetDORes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetDORes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetDOReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetDOReq) */ {
 public:
  GetDOReq();
  virtual ~GetDOReq();

  GetDOReq(const GetDOReq& from);
  GetDOReq(GetDOReq&& from) noexcept
    : GetDOReq() {
    *this = ::std::move(from);
  }

  inline GetDOReq& operator=(const GetDOReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDOReq& operator=(GetDOReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDOReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDOReq* internal_default_instance() {
    return reinterpret_cast<const GetDOReq*>(
               &_GetDOReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void Swap(GetDOReq* other);
  friend void swap(GetDOReq& a, GetDOReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDOReq* New() const final {
    return CreateMaybeMessage<GetDOReq>(nullptr);
  }

  GetDOReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDOReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDOReq& from);
  void MergeFrom(const GetDOReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDOReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetDOReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetDOReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetDORes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetDORes) */ {
 public:
  GetDORes();
  virtual ~GetDORes();

  GetDORes(const GetDORes& from);
  GetDORes(GetDORes&& from) noexcept
    : GetDORes() {
    *this = ::std::move(from);
  }

  inline GetDORes& operator=(const GetDORes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDORes& operator=(GetDORes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDORes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDORes* internal_default_instance() {
    return reinterpret_cast<const GetDORes*>(
               &_GetDORes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void Swap(GetDORes* other);
  friend void swap(GetDORes& a, GetDORes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDORes* New() const final {
    return CreateMaybeMessage<GetDORes>(nullptr);
  }

  GetDORes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDORes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDORes& from);
  void MergeFrom(const GetDORes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDORes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetDORes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool do = 1;
  int do__size() const;
  void clear_do_();
  static const int kDoFieldNumber = 1;
  bool do_(int index) const;
  void set_do_(int index, bool value);
  void add_do_(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      do_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_do_();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetDORes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > do__;
  mutable std::atomic<int> _do__cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetAIReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetAIReq) */ {
 public:
  SetAIReq();
  virtual ~SetAIReq();

  SetAIReq(const SetAIReq& from);
  SetAIReq(SetAIReq&& from) noexcept
    : SetAIReq() {
    *this = ::std::move(from);
  }

  inline SetAIReq& operator=(const SetAIReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAIReq& operator=(SetAIReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAIReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAIReq* internal_default_instance() {
    return reinterpret_cast<const SetAIReq*>(
               &_SetAIReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void Swap(SetAIReq* other);
  friend void swap(SetAIReq& a, SetAIReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAIReq* New() const final {
    return CreateMaybeMessage<SetAIReq>(nullptr);
  }

  SetAIReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAIReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAIReq& from);
  void MergeFrom(const SetAIReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAIReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetAIReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
  int ai_list_size() const;
  void clear_ai_list();
  static const int kAiListFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_ai_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_ai_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& ai_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_ai_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      ai_list() const;

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetAIReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > ai_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetAIRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetAIRes) */ {
 public:
  SetAIRes();
  virtual ~SetAIRes();

  SetAIRes(const SetAIRes& from);
  SetAIRes(SetAIRes&& from) noexcept
    : SetAIRes() {
    *this = ::std::move(from);
  }

  inline SetAIRes& operator=(const SetAIRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAIRes& operator=(SetAIRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAIRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAIRes* internal_default_instance() {
    return reinterpret_cast<const SetAIRes*>(
               &_SetAIRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  void Swap(SetAIRes* other);
  friend void swap(SetAIRes& a, SetAIRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAIRes* New() const final {
    return CreateMaybeMessage<SetAIRes>(nullptr);
  }

  SetAIRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAIRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAIRes& from);
  void MergeFrom(const SetAIRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAIRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetAIRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetAIRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetAIReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetAIReq) */ {
 public:
  GetAIReq();
  virtual ~GetAIReq();

  GetAIReq(const GetAIReq& from);
  GetAIReq(GetAIReq&& from) noexcept
    : GetAIReq() {
    *this = ::std::move(from);
  }

  inline GetAIReq& operator=(const GetAIReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAIReq& operator=(GetAIReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAIReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAIReq* internal_default_instance() {
    return reinterpret_cast<const GetAIReq*>(
               &_GetAIReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  void Swap(GetAIReq* other);
  friend void swap(GetAIReq& a, GetAIReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAIReq* New() const final {
    return CreateMaybeMessage<GetAIReq>(nullptr);
  }

  GetAIReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAIReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAIReq& from);
  void MergeFrom(const GetAIReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAIReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetAIReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetAIReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetAIRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetAIRes) */ {
 public:
  GetAIRes();
  virtual ~GetAIRes();

  GetAIRes(const GetAIRes& from);
  GetAIRes(GetAIRes&& from) noexcept
    : GetAIRes() {
    *this = ::std::move(from);
  }

  inline GetAIRes& operator=(const GetAIRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAIRes& operator=(GetAIRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAIRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAIRes* internal_default_instance() {
    return reinterpret_cast<const GetAIRes*>(
               &_GetAIRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  void Swap(GetAIRes* other);
  friend void swap(GetAIRes& a, GetAIRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAIRes* New() const final {
    return CreateMaybeMessage<GetAIRes>(nullptr);
  }

  GetAIRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAIRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAIRes& from);
  void MergeFrom(const GetAIRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAIRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetAIRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ai = 1;
  int ai_size() const;
  void clear_ai();
  static const int kAiFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 ai(int index) const;
  void set_ai(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ai(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ai() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ai();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetAIRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ai_;
  mutable std::atomic<int> _ai_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetAOReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetAOReq) */ {
 public:
  GetAOReq();
  virtual ~GetAOReq();

  GetAOReq(const GetAOReq& from);
  GetAOReq(GetAOReq&& from) noexcept
    : GetAOReq() {
    *this = ::std::move(from);
  }

  inline GetAOReq& operator=(const GetAOReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAOReq& operator=(GetAOReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAOReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAOReq* internal_default_instance() {
    return reinterpret_cast<const GetAOReq*>(
               &_GetAOReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  void Swap(GetAOReq* other);
  friend void swap(GetAOReq& a, GetAOReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAOReq* New() const final {
    return CreateMaybeMessage<GetAOReq>(nullptr);
  }

  GetAOReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAOReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAOReq& from);
  void MergeFrom(const GetAOReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAOReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetAOReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetAOReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetAORes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetAORes) */ {
 public:
  GetAORes();
  virtual ~GetAORes();

  GetAORes(const GetAORes& from);
  GetAORes(GetAORes&& from) noexcept
    : GetAORes() {
    *this = ::std::move(from);
  }

  inline GetAORes& operator=(const GetAORes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAORes& operator=(GetAORes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAORes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAORes* internal_default_instance() {
    return reinterpret_cast<const GetAORes*>(
               &_GetAORes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  void Swap(GetAORes* other);
  friend void swap(GetAORes& a, GetAORes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAORes* New() const final {
    return CreateMaybeMessage<GetAORes>(nullptr);
  }

  GetAORes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAORes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAORes& from);
  void MergeFrom(const GetAORes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAORes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetAORes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ao = 1;
  int ao_size() const;
  void clear_ao();
  static const int kAoFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 ao(int index) const;
  void set_ao(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ao(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ao() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ao();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetAORes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ao_;
  mutable std::atomic<int> _ao_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetAOReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetAOReq) */ {
 public:
  SetAOReq();
  virtual ~SetAOReq();

  SetAOReq(const SetAOReq& from);
  SetAOReq(SetAOReq&& from) noexcept
    : SetAOReq() {
    *this = ::std::move(from);
  }

  inline SetAOReq& operator=(const SetAOReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAOReq& operator=(SetAOReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAOReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAOReq* internal_default_instance() {
    return reinterpret_cast<const SetAOReq*>(
               &_SetAOReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  void Swap(SetAOReq* other);
  friend void swap(SetAOReq& a, SetAOReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAOReq* New() const final {
    return CreateMaybeMessage<SetAOReq>(nullptr);
  }

  SetAOReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAOReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAOReq& from);
  void MergeFrom(const SetAOReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAOReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetAOReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
  int ao_list_size() const;
  void clear_ao_list();
  static const int kAoListFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_ao_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& ao_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      ao_list() const;

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetAOReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > ao_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetAORes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetAORes) */ {
 public:
  SetAORes();
  virtual ~SetAORes();

  SetAORes(const SetAORes& from);
  SetAORes(SetAORes&& from) noexcept
    : SetAORes() {
    *this = ::std::move(from);
  }

  inline SetAORes& operator=(const SetAORes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAORes& operator=(SetAORes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAORes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAORes* internal_default_instance() {
    return reinterpret_cast<const SetAORes*>(
               &_SetAORes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  void Swap(SetAORes* other);
  friend void swap(SetAORes& a, SetAORes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAORes* New() const final {
    return CreateMaybeMessage<SetAORes>(nullptr);
  }

  SetAORes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAORes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAORes& from);
  void MergeFrom(const SetAORes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAORes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetAORes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetAORes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetEndDIReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetEndDIReq) */ {
 public:
  GetEndDIReq();
  virtual ~GetEndDIReq();

  GetEndDIReq(const GetEndDIReq& from);
  GetEndDIReq(GetEndDIReq&& from) noexcept
    : GetEndDIReq() {
    *this = ::std::move(from);
  }

  inline GetEndDIReq& operator=(const GetEndDIReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEndDIReq& operator=(GetEndDIReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEndDIReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEndDIReq* internal_default_instance() {
    return reinterpret_cast<const GetEndDIReq*>(
               &_GetEndDIReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  void Swap(GetEndDIReq* other);
  friend void swap(GetEndDIReq& a, GetEndDIReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEndDIReq* New() const final {
    return CreateMaybeMessage<GetEndDIReq>(nullptr);
  }

  GetEndDIReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEndDIReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEndDIReq& from);
  void MergeFrom(const GetEndDIReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEndDIReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetEndDIReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetEndDIReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetEndDIRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetEndDIRes) */ {
 public:
  GetEndDIRes();
  virtual ~GetEndDIRes();

  GetEndDIRes(const GetEndDIRes& from);
  GetEndDIRes(GetEndDIRes&& from) noexcept
    : GetEndDIRes() {
    *this = ::std::move(from);
  }

  inline GetEndDIRes& operator=(const GetEndDIRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEndDIRes& operator=(GetEndDIRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEndDIRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEndDIRes* internal_default_instance() {
    return reinterpret_cast<const GetEndDIRes*>(
               &_GetEndDIRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  void Swap(GetEndDIRes* other);
  friend void swap(GetEndDIRes& a, GetEndDIRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEndDIRes* New() const final {
    return CreateMaybeMessage<GetEndDIRes>(nullptr);
  }

  GetEndDIRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEndDIRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEndDIRes& from);
  void MergeFrom(const GetEndDIRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEndDIRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetEndDIRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool di = 1;
  int di_size() const;
  void clear_di();
  static const int kDiFieldNumber = 1;
  bool di(int index) const;
  void set_di(int index, bool value);
  void add_di(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      di() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_di();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetEndDIRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > di_;
  mutable std::atomic<int> _di_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetEndDIReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetEndDIReq) */ {
 public:
  SetEndDIReq();
  virtual ~SetEndDIReq();

  SetEndDIReq(const SetEndDIReq& from);
  SetEndDIReq(SetEndDIReq&& from) noexcept
    : SetEndDIReq() {
    *this = ::std::move(from);
  }

  inline SetEndDIReq& operator=(const SetEndDIReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEndDIReq& operator=(SetEndDIReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetEndDIReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetEndDIReq* internal_default_instance() {
    return reinterpret_cast<const SetEndDIReq*>(
               &_SetEndDIReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  void Swap(SetEndDIReq* other);
  friend void swap(SetEndDIReq& a, SetEndDIReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetEndDIReq* New() const final {
    return CreateMaybeMessage<SetEndDIReq>(nullptr);
  }

  SetEndDIReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetEndDIReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetEndDIReq& from);
  void MergeFrom(const SetEndDIReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEndDIReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetEndDIReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
  int di_list_size() const;
  void clear_di_list();
  static const int kDiListFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_di_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_di_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& di_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_di_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      di_list() const;

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetEndDIReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > di_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetEndDIRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetEndDIRes) */ {
 public:
  SetEndDIRes();
  virtual ~SetEndDIRes();

  SetEndDIRes(const SetEndDIRes& from);
  SetEndDIRes(SetEndDIRes&& from) noexcept
    : SetEndDIRes() {
    *this = ::std::move(from);
  }

  inline SetEndDIRes& operator=(const SetEndDIRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEndDIRes& operator=(SetEndDIRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetEndDIRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetEndDIRes* internal_default_instance() {
    return reinterpret_cast<const SetEndDIRes*>(
               &_SetEndDIRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  void Swap(SetEndDIRes* other);
  friend void swap(SetEndDIRes& a, SetEndDIRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetEndDIRes* New() const final {
    return CreateMaybeMessage<SetEndDIRes>(nullptr);
  }

  SetEndDIRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetEndDIRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetEndDIRes& from);
  void MergeFrom(const SetEndDIRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEndDIRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetEndDIRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetEndDIRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetEndDOReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetEndDOReq) */ {
 public:
  GetEndDOReq();
  virtual ~GetEndDOReq();

  GetEndDOReq(const GetEndDOReq& from);
  GetEndDOReq(GetEndDOReq&& from) noexcept
    : GetEndDOReq() {
    *this = ::std::move(from);
  }

  inline GetEndDOReq& operator=(const GetEndDOReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEndDOReq& operator=(GetEndDOReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEndDOReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEndDOReq* internal_default_instance() {
    return reinterpret_cast<const GetEndDOReq*>(
               &_GetEndDOReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  void Swap(GetEndDOReq* other);
  friend void swap(GetEndDOReq& a, GetEndDOReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEndDOReq* New() const final {
    return CreateMaybeMessage<GetEndDOReq>(nullptr);
  }

  GetEndDOReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEndDOReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEndDOReq& from);
  void MergeFrom(const GetEndDOReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEndDOReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetEndDOReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetEndDOReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetEndDORes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetEndDORes) */ {
 public:
  GetEndDORes();
  virtual ~GetEndDORes();

  GetEndDORes(const GetEndDORes& from);
  GetEndDORes(GetEndDORes&& from) noexcept
    : GetEndDORes() {
    *this = ::std::move(from);
  }

  inline GetEndDORes& operator=(const GetEndDORes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEndDORes& operator=(GetEndDORes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEndDORes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEndDORes* internal_default_instance() {
    return reinterpret_cast<const GetEndDORes*>(
               &_GetEndDORes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  void Swap(GetEndDORes* other);
  friend void swap(GetEndDORes& a, GetEndDORes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEndDORes* New() const final {
    return CreateMaybeMessage<GetEndDORes>(nullptr);
  }

  GetEndDORes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEndDORes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEndDORes& from);
  void MergeFrom(const GetEndDORes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEndDORes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetEndDORes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool do = 1;
  int do__size() const;
  void clear_do_();
  static const int kDoFieldNumber = 1;
  bool do_(int index) const;
  void set_do_(int index, bool value);
  void add_do_(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      do_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_do_();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetEndDORes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > do__;
  mutable std::atomic<int> _do__cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetEndDOReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetEndDOReq) */ {
 public:
  SetEndDOReq();
  virtual ~SetEndDOReq();

  SetEndDOReq(const SetEndDOReq& from);
  SetEndDOReq(SetEndDOReq&& from) noexcept
    : SetEndDOReq() {
    *this = ::std::move(from);
  }

  inline SetEndDOReq& operator=(const SetEndDOReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEndDOReq& operator=(SetEndDOReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetEndDOReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetEndDOReq* internal_default_instance() {
    return reinterpret_cast<const SetEndDOReq*>(
               &_SetEndDOReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  void Swap(SetEndDOReq* other);
  friend void swap(SetEndDOReq& a, SetEndDOReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetEndDOReq* New() const final {
    return CreateMaybeMessage<SetEndDOReq>(nullptr);
  }

  SetEndDOReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetEndDOReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetEndDOReq& from);
  void MergeFrom(const SetEndDOReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEndDOReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetEndDOReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
  int do_list_size() const;
  void clear_do_list();
  static const int kDoListFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* mutable_do_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
      mutable_do_list();
  const ::IndyFramework::Protobuf::Shared::DigitalSignal& do_list(int index) const;
  ::IndyFramework::Protobuf::Shared::DigitalSignal* add_do_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
      do_list() const;

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetEndDOReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal > do_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetEndDORes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetEndDORes) */ {
 public:
  SetEndDORes();
  virtual ~SetEndDORes();

  SetEndDORes(const SetEndDORes& from);
  SetEndDORes(SetEndDORes&& from) noexcept
    : SetEndDORes() {
    *this = ::std::move(from);
  }

  inline SetEndDORes& operator=(const SetEndDORes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEndDORes& operator=(SetEndDORes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetEndDORes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetEndDORes* internal_default_instance() {
    return reinterpret_cast<const SetEndDORes*>(
               &_SetEndDORes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  void Swap(SetEndDORes* other);
  friend void swap(SetEndDORes& a, SetEndDORes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetEndDORes* New() const final {
    return CreateMaybeMessage<SetEndDORes>(nullptr);
  }

  SetEndDORes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetEndDORes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetEndDORes& from);
  void MergeFrom(const SetEndDORes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEndDORes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetEndDORes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetEndDORes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetEndAIReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetEndAIReq) */ {
 public:
  SetEndAIReq();
  virtual ~SetEndAIReq();

  SetEndAIReq(const SetEndAIReq& from);
  SetEndAIReq(SetEndAIReq&& from) noexcept
    : SetEndAIReq() {
    *this = ::std::move(from);
  }

  inline SetEndAIReq& operator=(const SetEndAIReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEndAIReq& operator=(SetEndAIReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetEndAIReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetEndAIReq* internal_default_instance() {
    return reinterpret_cast<const SetEndAIReq*>(
               &_SetEndAIReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  void Swap(SetEndAIReq* other);
  friend void swap(SetEndAIReq& a, SetEndAIReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetEndAIReq* New() const final {
    return CreateMaybeMessage<SetEndAIReq>(nullptr);
  }

  SetEndAIReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetEndAIReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetEndAIReq& from);
  void MergeFrom(const SetEndAIReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEndAIReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetEndAIReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
  int ai_list_size() const;
  void clear_ai_list();
  static const int kAiListFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_ai_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_ai_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& ai_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_ai_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      ai_list() const;

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetEndAIReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > ai_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetEndAIRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetEndAIRes) */ {
 public:
  SetEndAIRes();
  virtual ~SetEndAIRes();

  SetEndAIRes(const SetEndAIRes& from);
  SetEndAIRes(SetEndAIRes&& from) noexcept
    : SetEndAIRes() {
    *this = ::std::move(from);
  }

  inline SetEndAIRes& operator=(const SetEndAIRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEndAIRes& operator=(SetEndAIRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetEndAIRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetEndAIRes* internal_default_instance() {
    return reinterpret_cast<const SetEndAIRes*>(
               &_SetEndAIRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  void Swap(SetEndAIRes* other);
  friend void swap(SetEndAIRes& a, SetEndAIRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetEndAIRes* New() const final {
    return CreateMaybeMessage<SetEndAIRes>(nullptr);
  }

  SetEndAIRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetEndAIRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetEndAIRes& from);
  void MergeFrom(const SetEndAIRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEndAIRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetEndAIRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetEndAIRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetEndAIReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetEndAIReq) */ {
 public:
  GetEndAIReq();
  virtual ~GetEndAIReq();

  GetEndAIReq(const GetEndAIReq& from);
  GetEndAIReq(GetEndAIReq&& from) noexcept
    : GetEndAIReq() {
    *this = ::std::move(from);
  }

  inline GetEndAIReq& operator=(const GetEndAIReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEndAIReq& operator=(GetEndAIReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEndAIReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEndAIReq* internal_default_instance() {
    return reinterpret_cast<const GetEndAIReq*>(
               &_GetEndAIReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  void Swap(GetEndAIReq* other);
  friend void swap(GetEndAIReq& a, GetEndAIReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEndAIReq* New() const final {
    return CreateMaybeMessage<GetEndAIReq>(nullptr);
  }

  GetEndAIReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEndAIReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEndAIReq& from);
  void MergeFrom(const GetEndAIReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEndAIReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetEndAIReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetEndAIReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetEndAIRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetEndAIRes) */ {
 public:
  GetEndAIRes();
  virtual ~GetEndAIRes();

  GetEndAIRes(const GetEndAIRes& from);
  GetEndAIRes(GetEndAIRes&& from) noexcept
    : GetEndAIRes() {
    *this = ::std::move(from);
  }

  inline GetEndAIRes& operator=(const GetEndAIRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEndAIRes& operator=(GetEndAIRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEndAIRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEndAIRes* internal_default_instance() {
    return reinterpret_cast<const GetEndAIRes*>(
               &_GetEndAIRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  void Swap(GetEndAIRes* other);
  friend void swap(GetEndAIRes& a, GetEndAIRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEndAIRes* New() const final {
    return CreateMaybeMessage<GetEndAIRes>(nullptr);
  }

  GetEndAIRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEndAIRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEndAIRes& from);
  void MergeFrom(const GetEndAIRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEndAIRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetEndAIRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ai = 1;
  int ai_size() const;
  void clear_ai();
  static const int kAiFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 ai(int index) const;
  void set_ai(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ai(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ai() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ai();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetEndAIRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ai_;
  mutable std::atomic<int> _ai_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetEndAOReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetEndAOReq) */ {
 public:
  GetEndAOReq();
  virtual ~GetEndAOReq();

  GetEndAOReq(const GetEndAOReq& from);
  GetEndAOReq(GetEndAOReq&& from) noexcept
    : GetEndAOReq() {
    *this = ::std::move(from);
  }

  inline GetEndAOReq& operator=(const GetEndAOReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEndAOReq& operator=(GetEndAOReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEndAOReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEndAOReq* internal_default_instance() {
    return reinterpret_cast<const GetEndAOReq*>(
               &_GetEndAOReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  void Swap(GetEndAOReq* other);
  friend void swap(GetEndAOReq& a, GetEndAOReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEndAOReq* New() const final {
    return CreateMaybeMessage<GetEndAOReq>(nullptr);
  }

  GetEndAOReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEndAOReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEndAOReq& from);
  void MergeFrom(const GetEndAOReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEndAOReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetEndAOReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetEndAOReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetEndAORes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetEndAORes) */ {
 public:
  GetEndAORes();
  virtual ~GetEndAORes();

  GetEndAORes(const GetEndAORes& from);
  GetEndAORes(GetEndAORes&& from) noexcept
    : GetEndAORes() {
    *this = ::std::move(from);
  }

  inline GetEndAORes& operator=(const GetEndAORes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEndAORes& operator=(GetEndAORes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEndAORes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEndAORes* internal_default_instance() {
    return reinterpret_cast<const GetEndAORes*>(
               &_GetEndAORes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  void Swap(GetEndAORes* other);
  friend void swap(GetEndAORes& a, GetEndAORes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEndAORes* New() const final {
    return CreateMaybeMessage<GetEndAORes>(nullptr);
  }

  GetEndAORes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEndAORes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEndAORes& from);
  void MergeFrom(const GetEndAORes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEndAORes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetEndAORes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ao = 1;
  int ao_size() const;
  void clear_ao();
  static const int kAoFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 ao(int index) const;
  void set_ao(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ao(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ao() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ao();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetEndAORes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ao_;
  mutable std::atomic<int> _ao_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetEndAOReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetEndAOReq) */ {
 public:
  SetEndAOReq();
  virtual ~SetEndAOReq();

  SetEndAOReq(const SetEndAOReq& from);
  SetEndAOReq(SetEndAOReq&& from) noexcept
    : SetEndAOReq() {
    *this = ::std::move(from);
  }

  inline SetEndAOReq& operator=(const SetEndAOReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEndAOReq& operator=(SetEndAOReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetEndAOReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetEndAOReq* internal_default_instance() {
    return reinterpret_cast<const SetEndAOReq*>(
               &_SetEndAOReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  void Swap(SetEndAOReq* other);
  friend void swap(SetEndAOReq& a, SetEndAOReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetEndAOReq* New() const final {
    return CreateMaybeMessage<SetEndAOReq>(nullptr);
  }

  SetEndAOReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetEndAOReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetEndAOReq& from);
  void MergeFrom(const SetEndAOReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEndAOReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetEndAOReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
  int ao_list_size() const;
  void clear_ao_list();
  static const int kAoListFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* mutable_ao_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
      mutable_ao_list();
  const ::IndyFramework::Protobuf::Shared::AnalogSignal& ao_list(int index) const;
  ::IndyFramework::Protobuf::Shared::AnalogSignal* add_ao_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
      ao_list() const;

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetEndAOReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal > ao_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetEndAORes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetEndAORes) */ {
 public:
  SetEndAORes();
  virtual ~SetEndAORes();

  SetEndAORes(const SetEndAORes& from);
  SetEndAORes(SetEndAORes&& from) noexcept
    : SetEndAORes() {
    *this = ::std::move(from);
  }

  inline SetEndAORes& operator=(const SetEndAORes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEndAORes& operator=(SetEndAORes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetEndAORes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetEndAORes* internal_default_instance() {
    return reinterpret_cast<const SetEndAORes*>(
               &_SetEndAORes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  void Swap(SetEndAORes* other);
  friend void swap(SetEndAORes& a, SetEndAORes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetEndAORes* New() const final {
    return CreateMaybeMessage<SetEndAORes>(nullptr);
  }

  SetEndAORes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetEndAORes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetEndAORes& from);
  void MergeFrom(const SetEndAORes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEndAORes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetEndAORes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetEndAORes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetJointControlGainReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetJointControlGainReq) */ {
 public:
  SetJointControlGainReq();
  virtual ~SetJointControlGainReq();

  SetJointControlGainReq(const SetJointControlGainReq& from);
  SetJointControlGainReq(SetJointControlGainReq&& from) noexcept
    : SetJointControlGainReq() {
    *this = ::std::move(from);
  }

  inline SetJointControlGainReq& operator=(const SetJointControlGainReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetJointControlGainReq& operator=(SetJointControlGainReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetJointControlGainReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetJointControlGainReq* internal_default_instance() {
    return reinterpret_cast<const SetJointControlGainReq*>(
               &_SetJointControlGainReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  void Swap(SetJointControlGainReq* other);
  friend void swap(SetJointControlGainReq& a, SetJointControlGainReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetJointControlGainReq* New() const final {
    return CreateMaybeMessage<SetJointControlGainReq>(nullptr);
  }

  SetJointControlGainReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetJointControlGainReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetJointControlGainReq& from);
  void MergeFrom(const SetJointControlGainReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetJointControlGainReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetJointControlGainReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float kp = 1;
  int kp_size() const;
  void clear_kp();
  static const int kKpFieldNumber = 1;
  float kp(int index) const;
  void set_kp(int index, float value);
  void add_kp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kp();

  // repeated float kv = 2;
  int kv_size() const;
  void clear_kv();
  static const int kKvFieldNumber = 2;
  float kv(int index) const;
  void set_kv(int index, float value);
  void add_kv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kv();

  // repeated float kl2 = 3;
  int kl2_size() const;
  void clear_kl2();
  static const int kKl2FieldNumber = 3;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kl2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kl2();

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetJointControlGainReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kp_;
  mutable std::atomic<int> _kp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kv_;
  mutable std::atomic<int> _kv_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kl2_;
  mutable std::atomic<int> _kl2_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetJointControlGainRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetJointControlGainRes) */ {
 public:
  SetJointControlGainRes();
  virtual ~SetJointControlGainRes();

  SetJointControlGainRes(const SetJointControlGainRes& from);
  SetJointControlGainRes(SetJointControlGainRes&& from) noexcept
    : SetJointControlGainRes() {
    *this = ::std::move(from);
  }

  inline SetJointControlGainRes& operator=(const SetJointControlGainRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetJointControlGainRes& operator=(SetJointControlGainRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetJointControlGainRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetJointControlGainRes* internal_default_instance() {
    return reinterpret_cast<const SetJointControlGainRes*>(
               &_SetJointControlGainRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  void Swap(SetJointControlGainRes* other);
  friend void swap(SetJointControlGainRes& a, SetJointControlGainRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetJointControlGainRes* New() const final {
    return CreateMaybeMessage<SetJointControlGainRes>(nullptr);
  }

  SetJointControlGainRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetJointControlGainRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetJointControlGainRes& from);
  void MergeFrom(const SetJointControlGainRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetJointControlGainRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetJointControlGainRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetJointControlGainRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetJointControlGainReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetJointControlGainReq) */ {
 public:
  GetJointControlGainReq();
  virtual ~GetJointControlGainReq();

  GetJointControlGainReq(const GetJointControlGainReq& from);
  GetJointControlGainReq(GetJointControlGainReq&& from) noexcept
    : GetJointControlGainReq() {
    *this = ::std::move(from);
  }

  inline GetJointControlGainReq& operator=(const GetJointControlGainReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJointControlGainReq& operator=(GetJointControlGainReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetJointControlGainReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJointControlGainReq* internal_default_instance() {
    return reinterpret_cast<const GetJointControlGainReq*>(
               &_GetJointControlGainReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  void Swap(GetJointControlGainReq* other);
  friend void swap(GetJointControlGainReq& a, GetJointControlGainReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetJointControlGainReq* New() const final {
    return CreateMaybeMessage<GetJointControlGainReq>(nullptr);
  }

  GetJointControlGainReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetJointControlGainReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetJointControlGainReq& from);
  void MergeFrom(const GetJointControlGainReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJointControlGainReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetJointControlGainReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetJointControlGainReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetJointControlGainRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetJointControlGainRes) */ {
 public:
  GetJointControlGainRes();
  virtual ~GetJointControlGainRes();

  GetJointControlGainRes(const GetJointControlGainRes& from);
  GetJointControlGainRes(GetJointControlGainRes&& from) noexcept
    : GetJointControlGainRes() {
    *this = ::std::move(from);
  }

  inline GetJointControlGainRes& operator=(const GetJointControlGainRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJointControlGainRes& operator=(GetJointControlGainRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetJointControlGainRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJointControlGainRes* internal_default_instance() {
    return reinterpret_cast<const GetJointControlGainRes*>(
               &_GetJointControlGainRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  void Swap(GetJointControlGainRes* other);
  friend void swap(GetJointControlGainRes& a, GetJointControlGainRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetJointControlGainRes* New() const final {
    return CreateMaybeMessage<GetJointControlGainRes>(nullptr);
  }

  GetJointControlGainRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetJointControlGainRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetJointControlGainRes& from);
  void MergeFrom(const GetJointControlGainRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJointControlGainRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetJointControlGainRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float kp = 1;
  int kp_size() const;
  void clear_kp();
  static const int kKpFieldNumber = 1;
  float kp(int index) const;
  void set_kp(int index, float value);
  void add_kp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kp();

  // repeated float kv = 2;
  int kv_size() const;
  void clear_kv();
  static const int kKvFieldNumber = 2;
  float kv(int index) const;
  void set_kv(int index, float value);
  void add_kv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kv();

  // repeated float kl2 = 3;
  int kl2_size() const;
  void clear_kl2();
  static const int kKl2FieldNumber = 3;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kl2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kl2();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetJointControlGainRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kp_;
  mutable std::atomic<int> _kp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kv_;
  mutable std::atomic<int> _kv_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kl2_;
  mutable std::atomic<int> _kl2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetTaskControlGainReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetTaskControlGainReq) */ {
 public:
  SetTaskControlGainReq();
  virtual ~SetTaskControlGainReq();

  SetTaskControlGainReq(const SetTaskControlGainReq& from);
  SetTaskControlGainReq(SetTaskControlGainReq&& from) noexcept
    : SetTaskControlGainReq() {
    *this = ::std::move(from);
  }

  inline SetTaskControlGainReq& operator=(const SetTaskControlGainReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTaskControlGainReq& operator=(SetTaskControlGainReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTaskControlGainReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTaskControlGainReq* internal_default_instance() {
    return reinterpret_cast<const SetTaskControlGainReq*>(
               &_SetTaskControlGainReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  void Swap(SetTaskControlGainReq* other);
  friend void swap(SetTaskControlGainReq& a, SetTaskControlGainReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetTaskControlGainReq* New() const final {
    return CreateMaybeMessage<SetTaskControlGainReq>(nullptr);
  }

  SetTaskControlGainReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTaskControlGainReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTaskControlGainReq& from);
  void MergeFrom(const SetTaskControlGainReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTaskControlGainReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetTaskControlGainReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float kp = 1;
  int kp_size() const;
  void clear_kp();
  static const int kKpFieldNumber = 1;
  float kp(int index) const;
  void set_kp(int index, float value);
  void add_kp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kp();

  // repeated float kv = 2;
  int kv_size() const;
  void clear_kv();
  static const int kKvFieldNumber = 2;
  float kv(int index) const;
  void set_kv(int index, float value);
  void add_kv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kv();

  // repeated float kl2 = 3;
  int kl2_size() const;
  void clear_kl2();
  static const int kKl2FieldNumber = 3;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kl2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kl2();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kp_;
  mutable std::atomic<int> _kp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kv_;
  mutable std::atomic<int> _kv_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kl2_;
  mutable std::atomic<int> _kl2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetTaskControlGainRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetTaskControlGainRes) */ {
 public:
  SetTaskControlGainRes();
  virtual ~SetTaskControlGainRes();

  SetTaskControlGainRes(const SetTaskControlGainRes& from);
  SetTaskControlGainRes(SetTaskControlGainRes&& from) noexcept
    : SetTaskControlGainRes() {
    *this = ::std::move(from);
  }

  inline SetTaskControlGainRes& operator=(const SetTaskControlGainRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTaskControlGainRes& operator=(SetTaskControlGainRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTaskControlGainRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTaskControlGainRes* internal_default_instance() {
    return reinterpret_cast<const SetTaskControlGainRes*>(
               &_SetTaskControlGainRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  void Swap(SetTaskControlGainRes* other);
  friend void swap(SetTaskControlGainRes& a, SetTaskControlGainRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetTaskControlGainRes* New() const final {
    return CreateMaybeMessage<SetTaskControlGainRes>(nullptr);
  }

  SetTaskControlGainRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTaskControlGainRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTaskControlGainRes& from);
  void MergeFrom(const SetTaskControlGainRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTaskControlGainRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetTaskControlGainRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetTaskControlGainReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetTaskControlGainReq) */ {
 public:
  GetTaskControlGainReq();
  virtual ~GetTaskControlGainReq();

  GetTaskControlGainReq(const GetTaskControlGainReq& from);
  GetTaskControlGainReq(GetTaskControlGainReq&& from) noexcept
    : GetTaskControlGainReq() {
    *this = ::std::move(from);
  }

  inline GetTaskControlGainReq& operator=(const GetTaskControlGainReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTaskControlGainReq& operator=(GetTaskControlGainReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTaskControlGainReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTaskControlGainReq* internal_default_instance() {
    return reinterpret_cast<const GetTaskControlGainReq*>(
               &_GetTaskControlGainReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  void Swap(GetTaskControlGainReq* other);
  friend void swap(GetTaskControlGainReq& a, GetTaskControlGainReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTaskControlGainReq* New() const final {
    return CreateMaybeMessage<GetTaskControlGainReq>(nullptr);
  }

  GetTaskControlGainReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTaskControlGainReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTaskControlGainReq& from);
  void MergeFrom(const GetTaskControlGainReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTaskControlGainReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetTaskControlGainReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetTaskControlGainRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetTaskControlGainRes) */ {
 public:
  GetTaskControlGainRes();
  virtual ~GetTaskControlGainRes();

  GetTaskControlGainRes(const GetTaskControlGainRes& from);
  GetTaskControlGainRes(GetTaskControlGainRes&& from) noexcept
    : GetTaskControlGainRes() {
    *this = ::std::move(from);
  }

  inline GetTaskControlGainRes& operator=(const GetTaskControlGainRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTaskControlGainRes& operator=(GetTaskControlGainRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTaskControlGainRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTaskControlGainRes* internal_default_instance() {
    return reinterpret_cast<const GetTaskControlGainRes*>(
               &_GetTaskControlGainRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  void Swap(GetTaskControlGainRes* other);
  friend void swap(GetTaskControlGainRes& a, GetTaskControlGainRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTaskControlGainRes* New() const final {
    return CreateMaybeMessage<GetTaskControlGainRes>(nullptr);
  }

  GetTaskControlGainRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTaskControlGainRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTaskControlGainRes& from);
  void MergeFrom(const GetTaskControlGainRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTaskControlGainRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetTaskControlGainRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float kp = 1;
  int kp_size() const;
  void clear_kp();
  static const int kKpFieldNumber = 1;
  float kp(int index) const;
  void set_kp(int index, float value);
  void add_kp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kp();

  // repeated float kv = 2;
  int kv_size() const;
  void clear_kv();
  static const int kKvFieldNumber = 2;
  float kv(int index) const;
  void set_kv(int index, float value);
  void add_kv(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kv();

  // repeated float kl2 = 3;
  int kl2_size() const;
  void clear_kl2();
  static const int kKl2FieldNumber = 3;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kl2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kl2();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kp_;
  mutable std::atomic<int> _kp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kv_;
  mutable std::atomic<int> _kv_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kl2_;
  mutable std::atomic<int> _kl2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetImpedanceControlGainReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq) */ {
 public:
  SetImpedanceControlGainReq();
  virtual ~SetImpedanceControlGainReq();

  SetImpedanceControlGainReq(const SetImpedanceControlGainReq& from);
  SetImpedanceControlGainReq(SetImpedanceControlGainReq&& from) noexcept
    : SetImpedanceControlGainReq() {
    *this = ::std::move(from);
  }

  inline SetImpedanceControlGainReq& operator=(const SetImpedanceControlGainReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetImpedanceControlGainReq& operator=(SetImpedanceControlGainReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetImpedanceControlGainReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetImpedanceControlGainReq* internal_default_instance() {
    return reinterpret_cast<const SetImpedanceControlGainReq*>(
               &_SetImpedanceControlGainReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  void Swap(SetImpedanceControlGainReq* other);
  friend void swap(SetImpedanceControlGainReq& a, SetImpedanceControlGainReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetImpedanceControlGainReq* New() const final {
    return CreateMaybeMessage<SetImpedanceControlGainReq>(nullptr);
  }

  SetImpedanceControlGainReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetImpedanceControlGainReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetImpedanceControlGainReq& from);
  void MergeFrom(const SetImpedanceControlGainReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetImpedanceControlGainReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetImpedanceControlGainReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float mass = 1;
  int mass_size() const;
  void clear_mass();
  static const int kMassFieldNumber = 1;
  float mass(int index) const;
  void set_mass(int index, float value);
  void add_mass(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mass() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mass();

  // repeated float damping = 2;
  int damping_size() const;
  void clear_damping();
  static const int kDampingFieldNumber = 2;
  float damping(int index) const;
  void set_damping(int index, float value);
  void add_damping(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      damping() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_damping();

  // repeated float stiffness = 3;
  int stiffness_size() const;
  void clear_stiffness();
  static const int kStiffnessFieldNumber = 3;
  float stiffness(int index) const;
  void set_stiffness(int index, float value);
  void add_stiffness(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      stiffness() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_stiffness();

  // repeated float kl2 = 4;
  int kl2_size() const;
  void clear_kl2();
  static const int kKl2FieldNumber = 4;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kl2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kl2();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mass_;
  mutable std::atomic<int> _mass_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > damping_;
  mutable std::atomic<int> _damping_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > stiffness_;
  mutable std::atomic<int> _stiffness_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kl2_;
  mutable std::atomic<int> _kl2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetImpedanceControlGainRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes) */ {
 public:
  SetImpedanceControlGainRes();
  virtual ~SetImpedanceControlGainRes();

  SetImpedanceControlGainRes(const SetImpedanceControlGainRes& from);
  SetImpedanceControlGainRes(SetImpedanceControlGainRes&& from) noexcept
    : SetImpedanceControlGainRes() {
    *this = ::std::move(from);
  }

  inline SetImpedanceControlGainRes& operator=(const SetImpedanceControlGainRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetImpedanceControlGainRes& operator=(SetImpedanceControlGainRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetImpedanceControlGainRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetImpedanceControlGainRes* internal_default_instance() {
    return reinterpret_cast<const SetImpedanceControlGainRes*>(
               &_SetImpedanceControlGainRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  void Swap(SetImpedanceControlGainRes* other);
  friend void swap(SetImpedanceControlGainRes& a, SetImpedanceControlGainRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetImpedanceControlGainRes* New() const final {
    return CreateMaybeMessage<SetImpedanceControlGainRes>(nullptr);
  }

  SetImpedanceControlGainRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetImpedanceControlGainRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetImpedanceControlGainRes& from);
  void MergeFrom(const SetImpedanceControlGainRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetImpedanceControlGainRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetImpedanceControlGainRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetImpedanceControlGainReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq) */ {
 public:
  GetImpedanceControlGainReq();
  virtual ~GetImpedanceControlGainReq();

  GetImpedanceControlGainReq(const GetImpedanceControlGainReq& from);
  GetImpedanceControlGainReq(GetImpedanceControlGainReq&& from) noexcept
    : GetImpedanceControlGainReq() {
    *this = ::std::move(from);
  }

  inline GetImpedanceControlGainReq& operator=(const GetImpedanceControlGainReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImpedanceControlGainReq& operator=(GetImpedanceControlGainReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetImpedanceControlGainReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetImpedanceControlGainReq* internal_default_instance() {
    return reinterpret_cast<const GetImpedanceControlGainReq*>(
               &_GetImpedanceControlGainReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  void Swap(GetImpedanceControlGainReq* other);
  friend void swap(GetImpedanceControlGainReq& a, GetImpedanceControlGainReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetImpedanceControlGainReq* New() const final {
    return CreateMaybeMessage<GetImpedanceControlGainReq>(nullptr);
  }

  GetImpedanceControlGainReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImpedanceControlGainReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetImpedanceControlGainReq& from);
  void MergeFrom(const GetImpedanceControlGainReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImpedanceControlGainReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetImpedanceControlGainReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetImpedanceControlGainRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes) */ {
 public:
  GetImpedanceControlGainRes();
  virtual ~GetImpedanceControlGainRes();

  GetImpedanceControlGainRes(const GetImpedanceControlGainRes& from);
  GetImpedanceControlGainRes(GetImpedanceControlGainRes&& from) noexcept
    : GetImpedanceControlGainRes() {
    *this = ::std::move(from);
  }

  inline GetImpedanceControlGainRes& operator=(const GetImpedanceControlGainRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImpedanceControlGainRes& operator=(GetImpedanceControlGainRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetImpedanceControlGainRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetImpedanceControlGainRes* internal_default_instance() {
    return reinterpret_cast<const GetImpedanceControlGainRes*>(
               &_GetImpedanceControlGainRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  void Swap(GetImpedanceControlGainRes* other);
  friend void swap(GetImpedanceControlGainRes& a, GetImpedanceControlGainRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetImpedanceControlGainRes* New() const final {
    return CreateMaybeMessage<GetImpedanceControlGainRes>(nullptr);
  }

  GetImpedanceControlGainRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetImpedanceControlGainRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetImpedanceControlGainRes& from);
  void MergeFrom(const GetImpedanceControlGainRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImpedanceControlGainRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetImpedanceControlGainRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float mass = 1;
  int mass_size() const;
  void clear_mass();
  static const int kMassFieldNumber = 1;
  float mass(int index) const;
  void set_mass(int index, float value);
  void add_mass(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mass() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mass();

  // repeated float damping = 2;
  int damping_size() const;
  void clear_damping();
  static const int kDampingFieldNumber = 2;
  float damping(int index) const;
  void set_damping(int index, float value);
  void add_damping(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      damping() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_damping();

  // repeated float stiffness = 3;
  int stiffness_size() const;
  void clear_stiffness();
  static const int kStiffnessFieldNumber = 3;
  float stiffness(int index) const;
  void set_stiffness(int index, float value);
  void add_stiffness(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      stiffness() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_stiffness();

  // repeated float kl2 = 4;
  int kl2_size() const;
  void clear_kl2();
  static const int kKl2FieldNumber = 4;
  float kl2(int index) const;
  void set_kl2(int index, float value);
  void add_kl2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      kl2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_kl2();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mass_;
  mutable std::atomic<int> _mass_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > damping_;
  mutable std::atomic<int> _damping_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > stiffness_;
  mutable std::atomic<int> _stiffness_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > kl2_;
  mutable std::atomic<int> _kl2_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetFricCompReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetFricCompReq) */ {
 public:
  SetFricCompReq();
  virtual ~SetFricCompReq();

  SetFricCompReq(const SetFricCompReq& from);
  SetFricCompReq(SetFricCompReq&& from) noexcept
    : SetFricCompReq() {
    *this = ::std::move(from);
  }

  inline SetFricCompReq& operator=(const SetFricCompReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetFricCompReq& operator=(SetFricCompReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetFricCompReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetFricCompReq* internal_default_instance() {
    return reinterpret_cast<const SetFricCompReq*>(
               &_SetFricCompReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  void Swap(SetFricCompReq* other);
  friend void swap(SetFricCompReq& a, SetFricCompReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetFricCompReq* New() const final {
    return CreateMaybeMessage<SetFricCompReq>(nullptr);
  }

  SetFricCompReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetFricCompReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetFricCompReq& from);
  void MergeFrom(const SetFricCompReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetFricCompReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetFricCompReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 control_comp_levels = 2;
  int control_comp_levels_size() const;
  void clear_control_comp_levels();
  static const int kControlCompLevelsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 control_comp_levels(int index) const;
  void set_control_comp_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_control_comp_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      control_comp_levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_control_comp_levels();

  // repeated int32 dt_comp_levels = 6;
  int dt_comp_levels_size() const;
  void clear_dt_comp_levels();
  static const int kDtCompLevelsFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 dt_comp_levels(int index) const;
  void set_dt_comp_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dt_comp_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dt_comp_levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dt_comp_levels();

  // bool control_comp = 1;
  void clear_control_comp();
  static const int kControlCompFieldNumber = 1;
  bool control_comp() const;
  void set_control_comp(bool value);

  // bool dt_comp = 5;
  void clear_dt_comp();
  static const int kDtCompFieldNumber = 5;
  bool dt_comp() const;
  void set_dt_comp(bool value);

  // int32 id_joint = 10;
  void clear_id_joint();
  static const int kIdJointFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::int32 id_joint() const;
  void set_id_joint(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetFricCompReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > control_comp_levels_;
  mutable std::atomic<int> _control_comp_levels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dt_comp_levels_;
  mutable std::atomic<int> _dt_comp_levels_cached_byte_size_;
  bool control_comp_;
  bool dt_comp_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_joint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetFricCompRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetFricCompRes) */ {
 public:
  SetFricCompRes();
  virtual ~SetFricCompRes();

  SetFricCompRes(const SetFricCompRes& from);
  SetFricCompRes(SetFricCompRes&& from) noexcept
    : SetFricCompRes() {
    *this = ::std::move(from);
  }

  inline SetFricCompRes& operator=(const SetFricCompRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetFricCompRes& operator=(SetFricCompRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetFricCompRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetFricCompRes* internal_default_instance() {
    return reinterpret_cast<const SetFricCompRes*>(
               &_SetFricCompRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  void Swap(SetFricCompRes* other);
  friend void swap(SetFricCompRes& a, SetFricCompRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetFricCompRes* New() const final {
    return CreateMaybeMessage<SetFricCompRes>(nullptr);
  }

  SetFricCompRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetFricCompRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetFricCompRes& from);
  void MergeFrom(const SetFricCompRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetFricCompRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetFricCompRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetFricCompRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetFricCompReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetFricCompReq) */ {
 public:
  GetFricCompReq();
  virtual ~GetFricCompReq();

  GetFricCompReq(const GetFricCompReq& from);
  GetFricCompReq(GetFricCompReq&& from) noexcept
    : GetFricCompReq() {
    *this = ::std::move(from);
  }

  inline GetFricCompReq& operator=(const GetFricCompReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFricCompReq& operator=(GetFricCompReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFricCompReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFricCompReq* internal_default_instance() {
    return reinterpret_cast<const GetFricCompReq*>(
               &_GetFricCompReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  void Swap(GetFricCompReq* other);
  friend void swap(GetFricCompReq& a, GetFricCompReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFricCompReq* New() const final {
    return CreateMaybeMessage<GetFricCompReq>(nullptr);
  }

  GetFricCompReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFricCompReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFricCompReq& from);
  void MergeFrom(const GetFricCompReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFricCompReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetFricCompReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetFricCompReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetFricCompRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetFricCompRes) */ {
 public:
  GetFricCompRes();
  virtual ~GetFricCompRes();

  GetFricCompRes(const GetFricCompRes& from);
  GetFricCompRes(GetFricCompRes&& from) noexcept
    : GetFricCompRes() {
    *this = ::std::move(from);
  }

  inline GetFricCompRes& operator=(const GetFricCompRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFricCompRes& operator=(GetFricCompRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFricCompRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFricCompRes* internal_default_instance() {
    return reinterpret_cast<const GetFricCompRes*>(
               &_GetFricCompRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  void Swap(GetFricCompRes* other);
  friend void swap(GetFricCompRes& a, GetFricCompRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetFricCompRes* New() const final {
    return CreateMaybeMessage<GetFricCompRes>(nullptr);
  }

  GetFricCompRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFricCompRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFricCompRes& from);
  void MergeFrom(const GetFricCompRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFricCompRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetFricCompRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 control_comp_levels = 2;
  int control_comp_levels_size() const;
  void clear_control_comp_levels();
  static const int kControlCompLevelsFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 control_comp_levels(int index) const;
  void set_control_comp_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_control_comp_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      control_comp_levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_control_comp_levels();

  // repeated int32 dt_comp_levels = 6;
  int dt_comp_levels_size() const;
  void clear_dt_comp_levels();
  static const int kDtCompLevelsFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 dt_comp_levels(int index) const;
  void set_dt_comp_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dt_comp_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dt_comp_levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dt_comp_levels();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // bool control_comp = 1;
  void clear_control_comp();
  static const int kControlCompFieldNumber = 1;
  bool control_comp() const;
  void set_control_comp(bool value);

  // bool dt_comp = 5;
  void clear_dt_comp();
  static const int kDtCompFieldNumber = 5;
  bool dt_comp() const;
  void set_dt_comp(bool value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetFricCompRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > control_comp_levels_;
  mutable std::atomic<int> _control_comp_levels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dt_comp_levels_;
  mutable std::atomic<int> _dt_comp_levels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool control_comp_;
  bool dt_comp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetSafetyLimitConfigReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq) */ {
 public:
  GetSafetyLimitConfigReq();
  virtual ~GetSafetyLimitConfigReq();

  GetSafetyLimitConfigReq(const GetSafetyLimitConfigReq& from);
  GetSafetyLimitConfigReq(GetSafetyLimitConfigReq&& from) noexcept
    : GetSafetyLimitConfigReq() {
    *this = ::std::move(from);
  }

  inline GetSafetyLimitConfigReq& operator=(const GetSafetyLimitConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSafetyLimitConfigReq& operator=(GetSafetyLimitConfigReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSafetyLimitConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSafetyLimitConfigReq* internal_default_instance() {
    return reinterpret_cast<const GetSafetyLimitConfigReq*>(
               &_GetSafetyLimitConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  void Swap(GetSafetyLimitConfigReq* other);
  friend void swap(GetSafetyLimitConfigReq& a, GetSafetyLimitConfigReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSafetyLimitConfigReq* New() const final {
    return CreateMaybeMessage<GetSafetyLimitConfigReq>(nullptr);
  }

  GetSafetyLimitConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSafetyLimitConfigReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSafetyLimitConfigReq& from);
  void MergeFrom(const GetSafetyLimitConfigReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSafetyLimitConfigReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetSafetyLimitConfigRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes) */ {
 public:
  GetSafetyLimitConfigRes();
  virtual ~GetSafetyLimitConfigRes();

  GetSafetyLimitConfigRes(const GetSafetyLimitConfigRes& from);
  GetSafetyLimitConfigRes(GetSafetyLimitConfigRes&& from) noexcept
    : GetSafetyLimitConfigRes() {
    *this = ::std::move(from);
  }

  inline GetSafetyLimitConfigRes& operator=(const GetSafetyLimitConfigRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSafetyLimitConfigRes& operator=(GetSafetyLimitConfigRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSafetyLimitConfigRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSafetyLimitConfigRes* internal_default_instance() {
    return reinterpret_cast<const GetSafetyLimitConfigRes*>(
               &_GetSafetyLimitConfigRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  void Swap(GetSafetyLimitConfigRes* other);
  friend void swap(GetSafetyLimitConfigRes& a, GetSafetyLimitConfigRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSafetyLimitConfigRes* New() const final {
    return CreateMaybeMessage<GetSafetyLimitConfigRes>(nullptr);
  }

  GetSafetyLimitConfigRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSafetyLimitConfigRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSafetyLimitConfigRes& from);
  void MergeFrom(const GetSafetyLimitConfigRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSafetyLimitConfigRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float joint_limits = 7;
  int joint_limits_size() const;
  void clear_joint_limits();
  static const int kJointLimitsFieldNumber = 7;
  float joint_limits(int index) const;
  void set_joint_limits(int index, float value);
  void add_joint_limits(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      joint_limits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_joint_limits();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // float power_limit = 1;
  void clear_power_limit();
  static const int kPowerLimitFieldNumber = 1;
  float power_limit() const;
  void set_power_limit(float value);

  // float power_limit_ratio = 2;
  void clear_power_limit_ratio();
  static const int kPowerLimitRatioFieldNumber = 2;
  float power_limit_ratio() const;
  void set_power_limit_ratio(float value);

  // float tcp_force_limit = 3;
  void clear_tcp_force_limit();
  static const int kTcpForceLimitFieldNumber = 3;
  float tcp_force_limit() const;
  void set_tcp_force_limit(float value);

  // float tcp_force_limit_ratio = 4;
  void clear_tcp_force_limit_ratio();
  static const int kTcpForceLimitRatioFieldNumber = 4;
  float tcp_force_limit_ratio() const;
  void set_tcp_force_limit_ratio(float value);

  // float tcp_speed_limit = 5;
  void clear_tcp_speed_limit();
  static const int kTcpSpeedLimitFieldNumber = 5;
  float tcp_speed_limit() const;
  void set_tcp_speed_limit(float value);

  // float tcp_speed_limit_ratio = 6;
  void clear_tcp_speed_limit_ratio();
  static const int kTcpSpeedLimitRatioFieldNumber = 6;
  float tcp_speed_limit_ratio() const;
  void set_tcp_speed_limit_ratio(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > joint_limits_;
  mutable std::atomic<int> _joint_limits_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  float power_limit_;
  float power_limit_ratio_;
  float tcp_force_limit_;
  float tcp_force_limit_ratio_;
  float tcp_speed_limit_;
  float tcp_speed_limit_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetSafetyLimitConfigReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq) */ {
 public:
  SetSafetyLimitConfigReq();
  virtual ~SetSafetyLimitConfigReq();

  SetSafetyLimitConfigReq(const SetSafetyLimitConfigReq& from);
  SetSafetyLimitConfigReq(SetSafetyLimitConfigReq&& from) noexcept
    : SetSafetyLimitConfigReq() {
    *this = ::std::move(from);
  }

  inline SetSafetyLimitConfigReq& operator=(const SetSafetyLimitConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSafetyLimitConfigReq& operator=(SetSafetyLimitConfigReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSafetyLimitConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSafetyLimitConfigReq* internal_default_instance() {
    return reinterpret_cast<const SetSafetyLimitConfigReq*>(
               &_SetSafetyLimitConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  void Swap(SetSafetyLimitConfigReq* other);
  friend void swap(SetSafetyLimitConfigReq& a, SetSafetyLimitConfigReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSafetyLimitConfigReq* New() const final {
    return CreateMaybeMessage<SetSafetyLimitConfigReq>(nullptr);
  }

  SetSafetyLimitConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSafetyLimitConfigReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSafetyLimitConfigReq& from);
  void MergeFrom(const SetSafetyLimitConfigReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSafetyLimitConfigReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float joint_limits = 7;
  int joint_limits_size() const;
  void clear_joint_limits();
  static const int kJointLimitsFieldNumber = 7;
  float joint_limits(int index) const;
  void set_joint_limits(int index, float value);
  void add_joint_limits(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      joint_limits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_joint_limits();

  // float power_limit = 1;
  void clear_power_limit();
  static const int kPowerLimitFieldNumber = 1;
  float power_limit() const;
  void set_power_limit(float value);

  // float power_limit_ratio = 2;
  void clear_power_limit_ratio();
  static const int kPowerLimitRatioFieldNumber = 2;
  float power_limit_ratio() const;
  void set_power_limit_ratio(float value);

  // float tcp_force_limit = 3;
  void clear_tcp_force_limit();
  static const int kTcpForceLimitFieldNumber = 3;
  float tcp_force_limit() const;
  void set_tcp_force_limit(float value);

  // float tcp_force_limit_ratio = 4;
  void clear_tcp_force_limit_ratio();
  static const int kTcpForceLimitRatioFieldNumber = 4;
  float tcp_force_limit_ratio() const;
  void set_tcp_force_limit_ratio(float value);

  // float tcp_speed_limit = 5;
  void clear_tcp_speed_limit();
  static const int kTcpSpeedLimitFieldNumber = 5;
  float tcp_speed_limit() const;
  void set_tcp_speed_limit(float value);

  // float tcp_speed_limit_ratio = 6;
  void clear_tcp_speed_limit_ratio();
  static const int kTcpSpeedLimitRatioFieldNumber = 6;
  float tcp_speed_limit_ratio() const;
  void set_tcp_speed_limit_ratio(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > joint_limits_;
  mutable std::atomic<int> _joint_limits_cached_byte_size_;
  float power_limit_;
  float power_limit_ratio_;
  float tcp_force_limit_;
  float tcp_force_limit_ratio_;
  float tcp_speed_limit_;
  float tcp_speed_limit_ratio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetSafetyLimitConfigRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes) */ {
 public:
  SetSafetyLimitConfigRes();
  virtual ~SetSafetyLimitConfigRes();

  SetSafetyLimitConfigRes(const SetSafetyLimitConfigRes& from);
  SetSafetyLimitConfigRes(SetSafetyLimitConfigRes&& from) noexcept
    : SetSafetyLimitConfigRes() {
    *this = ::std::move(from);
  }

  inline SetSafetyLimitConfigRes& operator=(const SetSafetyLimitConfigRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSafetyLimitConfigRes& operator=(SetSafetyLimitConfigRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSafetyLimitConfigRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSafetyLimitConfigRes* internal_default_instance() {
    return reinterpret_cast<const SetSafetyLimitConfigRes*>(
               &_SetSafetyLimitConfigRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  void Swap(SetSafetyLimitConfigRes* other);
  friend void swap(SetSafetyLimitConfigRes& a, SetSafetyLimitConfigRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSafetyLimitConfigRes* New() const final {
    return CreateMaybeMessage<SetSafetyLimitConfigRes>(nullptr);
  }

  SetSafetyLimitConfigRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSafetyLimitConfigRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSafetyLimitConfigRes& from);
  void MergeFrom(const SetSafetyLimitConfigRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSafetyLimitConfigRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetSafetyStopConfigReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq) */ {
 public:
  SetSafetyStopConfigReq();
  virtual ~SetSafetyStopConfigReq();

  SetSafetyStopConfigReq(const SetSafetyStopConfigReq& from);
  SetSafetyStopConfigReq(SetSafetyStopConfigReq&& from) noexcept
    : SetSafetyStopConfigReq() {
    *this = ::std::move(from);
  }

  inline SetSafetyStopConfigReq& operator=(const SetSafetyStopConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSafetyStopConfigReq& operator=(SetSafetyStopConfigReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSafetyStopConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSafetyStopConfigReq* internal_default_instance() {
    return reinterpret_cast<const SetSafetyStopConfigReq*>(
               &_SetSafetyStopConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  void Swap(SetSafetyStopConfigReq* other);
  friend void swap(SetSafetyStopConfigReq& a, SetSafetyStopConfigReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSafetyStopConfigReq* New() const final {
    return CreateMaybeMessage<SetSafetyStopConfigReq>(nullptr);
  }

  SetSafetyStopConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSafetyStopConfigReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSafetyStopConfigReq& from);
  void MergeFrom(const SetSafetyStopConfigReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSafetyStopConfigReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetSafetyStopConfigReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
  void clear_joint_position_limit_stop_cat();
  static const int kJointPositionLimitStopCatFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::StopCategory joint_position_limit_stop_cat() const;
  void set_joint_position_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value);

  // .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
  void clear_joint_speed_limit_stop_cat();
  static const int kJointSpeedLimitStopCatFieldNumber = 2;
  ::IndyFramework::Protobuf::Shared::StopCategory joint_speed_limit_stop_cat() const;
  void set_joint_speed_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value);

  // .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
  void clear_joint_torque_limit_stop_cat();
  static const int kJointTorqueLimitStopCatFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::StopCategory joint_torque_limit_stop_cat() const;
  void set_joint_torque_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value);

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
  void clear_tcp_speed_limit_stop_cat();
  static const int kTcpSpeedLimitStopCatFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::StopCategory tcp_speed_limit_stop_cat() const;
  void set_tcp_speed_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value);

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
  void clear_tcp_force_limit_stop_cat();
  static const int kTcpForceLimitStopCatFieldNumber = 5;
  ::IndyFramework::Protobuf::Shared::StopCategory tcp_force_limit_stop_cat() const;
  void set_tcp_force_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value);

  // .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
  void clear_power_limit_stop_cat();
  static const int kPowerLimitStopCatFieldNumber = 6;
  ::IndyFramework::Protobuf::Shared::StopCategory power_limit_stop_cat() const;
  void set_power_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int joint_position_limit_stop_cat_;
  int joint_speed_limit_stop_cat_;
  int joint_torque_limit_stop_cat_;
  int tcp_speed_limit_stop_cat_;
  int tcp_force_limit_stop_cat_;
  int power_limit_stop_cat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetSafetyStopConfigRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes) */ {
 public:
  SetSafetyStopConfigRes();
  virtual ~SetSafetyStopConfigRes();

  SetSafetyStopConfigRes(const SetSafetyStopConfigRes& from);
  SetSafetyStopConfigRes(SetSafetyStopConfigRes&& from) noexcept
    : SetSafetyStopConfigRes() {
    *this = ::std::move(from);
  }

  inline SetSafetyStopConfigRes& operator=(const SetSafetyStopConfigRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSafetyStopConfigRes& operator=(SetSafetyStopConfigRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetSafetyStopConfigRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSafetyStopConfigRes* internal_default_instance() {
    return reinterpret_cast<const SetSafetyStopConfigRes*>(
               &_SetSafetyStopConfigRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  void Swap(SetSafetyStopConfigRes* other);
  friend void swap(SetSafetyStopConfigRes& a, SetSafetyStopConfigRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSafetyStopConfigRes* New() const final {
    return CreateMaybeMessage<SetSafetyStopConfigRes>(nullptr);
  }

  SetSafetyStopConfigRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetSafetyStopConfigRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetSafetyStopConfigRes& from);
  void MergeFrom(const SetSafetyStopConfigRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSafetyStopConfigRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetSafetyStopConfigRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetSafetyStopConfigReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq) */ {
 public:
  GetSafetyStopConfigReq();
  virtual ~GetSafetyStopConfigReq();

  GetSafetyStopConfigReq(const GetSafetyStopConfigReq& from);
  GetSafetyStopConfigReq(GetSafetyStopConfigReq&& from) noexcept
    : GetSafetyStopConfigReq() {
    *this = ::std::move(from);
  }

  inline GetSafetyStopConfigReq& operator=(const GetSafetyStopConfigReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSafetyStopConfigReq& operator=(GetSafetyStopConfigReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSafetyStopConfigReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSafetyStopConfigReq* internal_default_instance() {
    return reinterpret_cast<const GetSafetyStopConfigReq*>(
               &_GetSafetyStopConfigReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  void Swap(GetSafetyStopConfigReq* other);
  friend void swap(GetSafetyStopConfigReq& a, GetSafetyStopConfigReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSafetyStopConfigReq* New() const final {
    return CreateMaybeMessage<GetSafetyStopConfigReq>(nullptr);
  }

  GetSafetyStopConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSafetyStopConfigReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSafetyStopConfigReq& from);
  void MergeFrom(const GetSafetyStopConfigReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSafetyStopConfigReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetSafetyStopConfigReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetSafetyStopConfigRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes) */ {
 public:
  GetSafetyStopConfigRes();
  virtual ~GetSafetyStopConfigRes();

  GetSafetyStopConfigRes(const GetSafetyStopConfigRes& from);
  GetSafetyStopConfigRes(GetSafetyStopConfigRes&& from) noexcept
    : GetSafetyStopConfigRes() {
    *this = ::std::move(from);
  }

  inline GetSafetyStopConfigRes& operator=(const GetSafetyStopConfigRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSafetyStopConfigRes& operator=(GetSafetyStopConfigRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSafetyStopConfigRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSafetyStopConfigRes* internal_default_instance() {
    return reinterpret_cast<const GetSafetyStopConfigRes*>(
               &_GetSafetyStopConfigRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  void Swap(GetSafetyStopConfigRes* other);
  friend void swap(GetSafetyStopConfigRes& a, GetSafetyStopConfigRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSafetyStopConfigRes* New() const final {
    return CreateMaybeMessage<GetSafetyStopConfigRes>(nullptr);
  }

  GetSafetyStopConfigRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSafetyStopConfigRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSafetyStopConfigRes& from);
  void MergeFrom(const GetSafetyStopConfigRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSafetyStopConfigRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetSafetyStopConfigRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
  void clear_joint_position_limit_stop_cat();
  static const int kJointPositionLimitStopCatFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::StopCategory joint_position_limit_stop_cat() const;
  void set_joint_position_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value);

  // .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
  void clear_joint_speed_limit_stop_cat();
  static const int kJointSpeedLimitStopCatFieldNumber = 2;
  ::IndyFramework::Protobuf::Shared::StopCategory joint_speed_limit_stop_cat() const;
  void set_joint_speed_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value);

  // .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
  void clear_joint_torque_limit_stop_cat();
  static const int kJointTorqueLimitStopCatFieldNumber = 3;
  ::IndyFramework::Protobuf::Shared::StopCategory joint_torque_limit_stop_cat() const;
  void set_joint_torque_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value);

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
  void clear_tcp_speed_limit_stop_cat();
  static const int kTcpSpeedLimitStopCatFieldNumber = 4;
  ::IndyFramework::Protobuf::Shared::StopCategory tcp_speed_limit_stop_cat() const;
  void set_tcp_speed_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value);

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
  void clear_tcp_force_limit_stop_cat();
  static const int kTcpForceLimitStopCatFieldNumber = 5;
  ::IndyFramework::Protobuf::Shared::StopCategory tcp_force_limit_stop_cat() const;
  void set_tcp_force_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value);

  // .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
  void clear_power_limit_stop_cat();
  static const int kPowerLimitStopCatFieldNumber = 6;
  ::IndyFramework::Protobuf::Shared::StopCategory power_limit_stop_cat() const;
  void set_power_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int joint_position_limit_stop_cat_;
  int joint_speed_limit_stop_cat_;
  int joint_torque_limit_stop_cat_;
  int tcp_speed_limit_stop_cat_;
  int tcp_force_limit_stop_cat_;
  int power_limit_stop_cat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetMountPosReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetMountPosReq) */ {
 public:
  SetMountPosReq();
  virtual ~SetMountPosReq();

  SetMountPosReq(const SetMountPosReq& from);
  SetMountPosReq(SetMountPosReq&& from) noexcept
    : SetMountPosReq() {
    *this = ::std::move(from);
  }

  inline SetMountPosReq& operator=(const SetMountPosReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMountPosReq& operator=(SetMountPosReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMountPosReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMountPosReq* internal_default_instance() {
    return reinterpret_cast<const SetMountPosReq*>(
               &_SetMountPosReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  void Swap(SetMountPosReq* other);
  friend void swap(SetMountPosReq& a, SetMountPosReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMountPosReq* New() const final {
    return CreateMaybeMessage<SetMountPosReq>(nullptr);
  }

  SetMountPosReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMountPosReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMountPosReq& from);
  void MergeFrom(const SetMountPosReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMountPosReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetMountPosReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float ry = 1;
  void clear_ry();
  static const int kRyFieldNumber = 1;
  float ry() const;
  void set_ry(float value);

  // float rz = 2;
  void clear_rz();
  static const int kRzFieldNumber = 2;
  float rz() const;
  void set_rz(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetMountPosReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float ry_;
  float rz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetMountPosRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetMountPosRes) */ {
 public:
  SetMountPosRes();
  virtual ~SetMountPosRes();

  SetMountPosRes(const SetMountPosRes& from);
  SetMountPosRes(SetMountPosRes&& from) noexcept
    : SetMountPosRes() {
    *this = ::std::move(from);
  }

  inline SetMountPosRes& operator=(const SetMountPosRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMountPosRes& operator=(SetMountPosRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMountPosRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMountPosRes* internal_default_instance() {
    return reinterpret_cast<const SetMountPosRes*>(
               &_SetMountPosRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  void Swap(SetMountPosRes* other);
  friend void swap(SetMountPosRes& a, SetMountPosRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMountPosRes* New() const final {
    return CreateMaybeMessage<SetMountPosRes>(nullptr);
  }

  SetMountPosRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMountPosRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMountPosRes& from);
  void MergeFrom(const SetMountPosRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMountPosRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetMountPosRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetMountPosRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetMountPosReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetMountPosReq) */ {
 public:
  GetMountPosReq();
  virtual ~GetMountPosReq();

  GetMountPosReq(const GetMountPosReq& from);
  GetMountPosReq(GetMountPosReq&& from) noexcept
    : GetMountPosReq() {
    *this = ::std::move(from);
  }

  inline GetMountPosReq& operator=(const GetMountPosReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMountPosReq& operator=(GetMountPosReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMountPosReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMountPosReq* internal_default_instance() {
    return reinterpret_cast<const GetMountPosReq*>(
               &_GetMountPosReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  void Swap(GetMountPosReq* other);
  friend void swap(GetMountPosReq& a, GetMountPosReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMountPosReq* New() const final {
    return CreateMaybeMessage<GetMountPosReq>(nullptr);
  }

  GetMountPosReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMountPosReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMountPosReq& from);
  void MergeFrom(const GetMountPosReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMountPosReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetMountPosReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetMountPosReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetMountPosRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetMountPosRes) */ {
 public:
  GetMountPosRes();
  virtual ~GetMountPosRes();

  GetMountPosRes(const GetMountPosRes& from);
  GetMountPosRes(GetMountPosRes&& from) noexcept
    : GetMountPosRes() {
    *this = ::std::move(from);
  }

  inline GetMountPosRes& operator=(const GetMountPosRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMountPosRes& operator=(GetMountPosRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMountPosRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMountPosRes* internal_default_instance() {
    return reinterpret_cast<const GetMountPosRes*>(
               &_GetMountPosRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  void Swap(GetMountPosRes* other);
  friend void swap(GetMountPosRes& a, GetMountPosRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMountPosRes* New() const final {
    return CreateMaybeMessage<GetMountPosRes>(nullptr);
  }

  GetMountPosRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMountPosRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMountPosRes& from);
  void MergeFrom(const GetMountPosRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMountPosRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetMountPosRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // float ry = 1;
  void clear_ry();
  static const int kRyFieldNumber = 1;
  float ry() const;
  void set_ry(float value);

  // float rz = 2;
  void clear_rz();
  static const int kRzFieldNumber = 2;
  float rz() const;
  void set_rz(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetMountPosRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  float ry_;
  float rz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetToolPropertyReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetToolPropertyReq) */ {
 public:
  SetToolPropertyReq();
  virtual ~SetToolPropertyReq();

  SetToolPropertyReq(const SetToolPropertyReq& from);
  SetToolPropertyReq(SetToolPropertyReq&& from) noexcept
    : SetToolPropertyReq() {
    *this = ::std::move(from);
  }

  inline SetToolPropertyReq& operator=(const SetToolPropertyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetToolPropertyReq& operator=(SetToolPropertyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetToolPropertyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetToolPropertyReq* internal_default_instance() {
    return reinterpret_cast<const SetToolPropertyReq*>(
               &_SetToolPropertyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  void Swap(SetToolPropertyReq* other);
  friend void swap(SetToolPropertyReq& a, SetToolPropertyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetToolPropertyReq* New() const final {
    return CreateMaybeMessage<SetToolPropertyReq>(nullptr);
  }

  SetToolPropertyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetToolPropertyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetToolPropertyReq& from);
  void MergeFrom(const SetToolPropertyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetToolPropertyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetToolPropertyReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float center_of_mass = 2;
  int center_of_mass_size() const;
  void clear_center_of_mass();
  static const int kCenterOfMassFieldNumber = 2;
  float center_of_mass(int index) const;
  void set_center_of_mass(int index, float value);
  void add_center_of_mass(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      center_of_mass() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_center_of_mass();

  // repeated float inertia = 3;
  int inertia_size() const;
  void clear_inertia();
  static const int kInertiaFieldNumber = 3;
  float inertia(int index) const;
  void set_inertia(int index, float value);
  void add_inertia(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      inertia() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_inertia();

  // float mass = 1;
  void clear_mass();
  static const int kMassFieldNumber = 1;
  float mass() const;
  void set_mass(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetToolPropertyReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > center_of_mass_;
  mutable std::atomic<int> _center_of_mass_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > inertia_;
  mutable std::atomic<int> _inertia_cached_byte_size_;
  float mass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetToolPropertyRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetToolPropertyRes) */ {
 public:
  SetToolPropertyRes();
  virtual ~SetToolPropertyRes();

  SetToolPropertyRes(const SetToolPropertyRes& from);
  SetToolPropertyRes(SetToolPropertyRes&& from) noexcept
    : SetToolPropertyRes() {
    *this = ::std::move(from);
  }

  inline SetToolPropertyRes& operator=(const SetToolPropertyRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetToolPropertyRes& operator=(SetToolPropertyRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetToolPropertyRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetToolPropertyRes* internal_default_instance() {
    return reinterpret_cast<const SetToolPropertyRes*>(
               &_SetToolPropertyRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  void Swap(SetToolPropertyRes* other);
  friend void swap(SetToolPropertyRes& a, SetToolPropertyRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetToolPropertyRes* New() const final {
    return CreateMaybeMessage<SetToolPropertyRes>(nullptr);
  }

  SetToolPropertyRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetToolPropertyRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetToolPropertyRes& from);
  void MergeFrom(const SetToolPropertyRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetToolPropertyRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetToolPropertyRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetToolPropertyRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetToolPropertyReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetToolPropertyReq) */ {
 public:
  GetToolPropertyReq();
  virtual ~GetToolPropertyReq();

  GetToolPropertyReq(const GetToolPropertyReq& from);
  GetToolPropertyReq(GetToolPropertyReq&& from) noexcept
    : GetToolPropertyReq() {
    *this = ::std::move(from);
  }

  inline GetToolPropertyReq& operator=(const GetToolPropertyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetToolPropertyReq& operator=(GetToolPropertyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetToolPropertyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetToolPropertyReq* internal_default_instance() {
    return reinterpret_cast<const GetToolPropertyReq*>(
               &_GetToolPropertyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  void Swap(GetToolPropertyReq* other);
  friend void swap(GetToolPropertyReq& a, GetToolPropertyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetToolPropertyReq* New() const final {
    return CreateMaybeMessage<GetToolPropertyReq>(nullptr);
  }

  GetToolPropertyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetToolPropertyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetToolPropertyReq& from);
  void MergeFrom(const GetToolPropertyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetToolPropertyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetToolPropertyReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetToolPropertyReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetToolPropertyRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetToolPropertyRes) */ {
 public:
  GetToolPropertyRes();
  virtual ~GetToolPropertyRes();

  GetToolPropertyRes(const GetToolPropertyRes& from);
  GetToolPropertyRes(GetToolPropertyRes&& from) noexcept
    : GetToolPropertyRes() {
    *this = ::std::move(from);
  }

  inline GetToolPropertyRes& operator=(const GetToolPropertyRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetToolPropertyRes& operator=(GetToolPropertyRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetToolPropertyRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetToolPropertyRes* internal_default_instance() {
    return reinterpret_cast<const GetToolPropertyRes*>(
               &_GetToolPropertyRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  void Swap(GetToolPropertyRes* other);
  friend void swap(GetToolPropertyRes& a, GetToolPropertyRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetToolPropertyRes* New() const final {
    return CreateMaybeMessage<GetToolPropertyRes>(nullptr);
  }

  GetToolPropertyRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetToolPropertyRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetToolPropertyRes& from);
  void MergeFrom(const GetToolPropertyRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetToolPropertyRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetToolPropertyRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float center_of_mass = 2;
  int center_of_mass_size() const;
  void clear_center_of_mass();
  static const int kCenterOfMassFieldNumber = 2;
  float center_of_mass(int index) const;
  void set_center_of_mass(int index, float value);
  void add_center_of_mass(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      center_of_mass() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_center_of_mass();

  // repeated float inertia = 3;
  int inertia_size() const;
  void clear_inertia();
  static const int kInertiaFieldNumber = 3;
  float inertia(int index) const;
  void set_inertia(int index, float value);
  void add_inertia(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      inertia() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_inertia();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // float mass = 1;
  void clear_mass();
  static const int kMassFieldNumber = 1;
  float mass() const;
  void set_mass(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetToolPropertyRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > center_of_mass_;
  mutable std::atomic<int> _center_of_mass_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > inertia_;
  mutable std::atomic<int> _inertia_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  float mass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetCollSensLevelReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetCollSensLevelReq) */ {
 public:
  SetCollSensLevelReq();
  virtual ~SetCollSensLevelReq();

  SetCollSensLevelReq(const SetCollSensLevelReq& from);
  SetCollSensLevelReq(SetCollSensLevelReq&& from) noexcept
    : SetCollSensLevelReq() {
    *this = ::std::move(from);
  }

  inline SetCollSensLevelReq& operator=(const SetCollSensLevelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCollSensLevelReq& operator=(SetCollSensLevelReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCollSensLevelReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCollSensLevelReq* internal_default_instance() {
    return reinterpret_cast<const SetCollSensLevelReq*>(
               &_SetCollSensLevelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  void Swap(SetCollSensLevelReq* other);
  friend void swap(SetCollSensLevelReq& a, SetCollSensLevelReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCollSensLevelReq* New() const final {
    return CreateMaybeMessage<SetCollSensLevelReq>(nullptr);
  }

  SetCollSensLevelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCollSensLevelReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCollSensLevelReq& from);
  void MergeFrom(const SetCollSensLevelReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCollSensLevelReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetCollSensLevelReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetCollSensLevelRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetCollSensLevelRes) */ {
 public:
  SetCollSensLevelRes();
  virtual ~SetCollSensLevelRes();

  SetCollSensLevelRes(const SetCollSensLevelRes& from);
  SetCollSensLevelRes(SetCollSensLevelRes&& from) noexcept
    : SetCollSensLevelRes() {
    *this = ::std::move(from);
  }

  inline SetCollSensLevelRes& operator=(const SetCollSensLevelRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCollSensLevelRes& operator=(SetCollSensLevelRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCollSensLevelRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCollSensLevelRes* internal_default_instance() {
    return reinterpret_cast<const SetCollSensLevelRes*>(
               &_SetCollSensLevelRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  void Swap(SetCollSensLevelRes* other);
  friend void swap(SetCollSensLevelRes& a, SetCollSensLevelRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCollSensLevelRes* New() const final {
    return CreateMaybeMessage<SetCollSensLevelRes>(nullptr);
  }

  SetCollSensLevelRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCollSensLevelRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCollSensLevelRes& from);
  void MergeFrom(const SetCollSensLevelRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCollSensLevelRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetCollSensLevelRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetCollSensLevelReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetCollSensLevelReq) */ {
 public:
  GetCollSensLevelReq();
  virtual ~GetCollSensLevelReq();

  GetCollSensLevelReq(const GetCollSensLevelReq& from);
  GetCollSensLevelReq(GetCollSensLevelReq&& from) noexcept
    : GetCollSensLevelReq() {
    *this = ::std::move(from);
  }

  inline GetCollSensLevelReq& operator=(const GetCollSensLevelReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollSensLevelReq& operator=(GetCollSensLevelReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCollSensLevelReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCollSensLevelReq* internal_default_instance() {
    return reinterpret_cast<const GetCollSensLevelReq*>(
               &_GetCollSensLevelReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  void Swap(GetCollSensLevelReq* other);
  friend void swap(GetCollSensLevelReq& a, GetCollSensLevelReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCollSensLevelReq* New() const final {
    return CreateMaybeMessage<GetCollSensLevelReq>(nullptr);
  }

  GetCollSensLevelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCollSensLevelReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCollSensLevelReq& from);
  void MergeFrom(const GetCollSensLevelReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollSensLevelReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetCollSensLevelReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetCollSensLevelRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetCollSensLevelRes) */ {
 public:
  GetCollSensLevelRes();
  virtual ~GetCollSensLevelRes();

  GetCollSensLevelRes(const GetCollSensLevelRes& from);
  GetCollSensLevelRes(GetCollSensLevelRes&& from) noexcept
    : GetCollSensLevelRes() {
    *this = ::std::move(from);
  }

  inline GetCollSensLevelRes& operator=(const GetCollSensLevelRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollSensLevelRes& operator=(GetCollSensLevelRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCollSensLevelRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCollSensLevelRes* internal_default_instance() {
    return reinterpret_cast<const GetCollSensLevelRes*>(
               &_GetCollSensLevelRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  void Swap(GetCollSensLevelRes* other);
  friend void swap(GetCollSensLevelRes& a, GetCollSensLevelRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCollSensLevelRes* New() const final {
    return CreateMaybeMessage<GetCollSensLevelRes>(nullptr);
  }

  GetCollSensLevelRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCollSensLevelRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCollSensLevelRes& from);
  void MergeFrom(const GetCollSensLevelRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollSensLevelRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetCollSensLevelRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // int32 level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetCollSensParamReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetCollSensParamReq) */ {
 public:
  SetCollSensParamReq();
  virtual ~SetCollSensParamReq();

  SetCollSensParamReq(const SetCollSensParamReq& from);
  SetCollSensParamReq(SetCollSensParamReq&& from) noexcept
    : SetCollSensParamReq() {
    *this = ::std::move(from);
  }

  inline SetCollSensParamReq& operator=(const SetCollSensParamReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCollSensParamReq& operator=(SetCollSensParamReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCollSensParamReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCollSensParamReq* internal_default_instance() {
    return reinterpret_cast<const SetCollSensParamReq*>(
               &_SetCollSensParamReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  void Swap(SetCollSensParamReq* other);
  friend void swap(SetCollSensParamReq& a, SetCollSensParamReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCollSensParamReq* New() const final {
    return CreateMaybeMessage<SetCollSensParamReq>(nullptr);
  }

  SetCollSensParamReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCollSensParamReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCollSensParamReq& from);
  void MergeFrom(const SetCollSensParamReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCollSensParamReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetCollSensParamReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float j_torque_bases = 1;
  int j_torque_bases_size() const;
  void clear_j_torque_bases();
  static const int kJTorqueBasesFieldNumber = 1;
  float j_torque_bases(int index) const;
  void set_j_torque_bases(int index, float value);
  void add_j_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      j_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_j_torque_bases();

  // repeated float j_torque_tangents = 2;
  int j_torque_tangents_size() const;
  void clear_j_torque_tangents();
  static const int kJTorqueTangentsFieldNumber = 2;
  float j_torque_tangents(int index) const;
  void set_j_torque_tangents(int index, float value);
  void add_j_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      j_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_j_torque_tangents();

  // repeated float t_torque_bases = 3;
  int t_torque_bases_size() const;
  void clear_t_torque_bases();
  static const int kTTorqueBasesFieldNumber = 3;
  float t_torque_bases(int index) const;
  void set_t_torque_bases(int index, float value);
  void add_t_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_torque_bases();

  // repeated float t_torque_tangents = 4;
  int t_torque_tangents_size() const;
  void clear_t_torque_tangents();
  static const int kTTorqueTangentsFieldNumber = 4;
  float t_torque_tangents(int index) const;
  void set_t_torque_tangents(int index, float value);
  void add_t_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_torque_tangents();

  // repeated float error_bases = 5;
  int error_bases_size() const;
  void clear_error_bases();
  static const int kErrorBasesFieldNumber = 5;
  float error_bases(int index) const;
  void set_error_bases(int index, float value);
  void add_error_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      error_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_error_bases();

  // repeated float error_tangents = 6;
  int error_tangents_size() const;
  void clear_error_tangents();
  static const int kErrorTangentsFieldNumber = 6;
  float error_tangents(int index) const;
  void set_error_tangents(int index, float value);
  void add_error_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      error_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_error_tangents();

  // repeated float t_constvel_torque_bases = 7;
  int t_constvel_torque_bases_size() const;
  void clear_t_constvel_torque_bases();
  static const int kTConstvelTorqueBasesFieldNumber = 7;
  float t_constvel_torque_bases(int index) const;
  void set_t_constvel_torque_bases(int index, float value);
  void add_t_constvel_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_constvel_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_constvel_torque_bases();

  // repeated float t_constvel_torque_tangents = 8;
  int t_constvel_torque_tangents_size() const;
  void clear_t_constvel_torque_tangents();
  static const int kTConstvelTorqueTangentsFieldNumber = 8;
  float t_constvel_torque_tangents(int index) const;
  void set_t_constvel_torque_tangents(int index, float value);
  void add_t_constvel_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_constvel_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_constvel_torque_tangents();

  // repeated float t_conveyor_torque_bases = 9;
  int t_conveyor_torque_bases_size() const;
  void clear_t_conveyor_torque_bases();
  static const int kTConveyorTorqueBasesFieldNumber = 9;
  float t_conveyor_torque_bases(int index) const;
  void set_t_conveyor_torque_bases(int index, float value);
  void add_t_conveyor_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_conveyor_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_conveyor_torque_bases();

  // repeated float t_conveyor_torque_tangents = 10;
  int t_conveyor_torque_tangents_size() const;
  void clear_t_conveyor_torque_tangents();
  static const int kTConveyorTorqueTangentsFieldNumber = 10;
  float t_conveyor_torque_tangents(int index) const;
  void set_t_conveyor_torque_tangents(int index, float value);
  void add_t_conveyor_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_conveyor_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_conveyor_torque_tangents();

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetCollSensParamReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > j_torque_bases_;
  mutable std::atomic<int> _j_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > j_torque_tangents_;
  mutable std::atomic<int> _j_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_torque_bases_;
  mutable std::atomic<int> _t_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_torque_tangents_;
  mutable std::atomic<int> _t_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > error_bases_;
  mutable std::atomic<int> _error_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > error_tangents_;
  mutable std::atomic<int> _error_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_constvel_torque_bases_;
  mutable std::atomic<int> _t_constvel_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_constvel_torque_tangents_;
  mutable std::atomic<int> _t_constvel_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_conveyor_torque_bases_;
  mutable std::atomic<int> _t_conveyor_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_conveyor_torque_tangents_;
  mutable std::atomic<int> _t_conveyor_torque_tangents_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetCollSensParamRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetCollSensParamRes) */ {
 public:
  SetCollSensParamRes();
  virtual ~SetCollSensParamRes();

  SetCollSensParamRes(const SetCollSensParamRes& from);
  SetCollSensParamRes(SetCollSensParamRes&& from) noexcept
    : SetCollSensParamRes() {
    *this = ::std::move(from);
  }

  inline SetCollSensParamRes& operator=(const SetCollSensParamRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCollSensParamRes& operator=(SetCollSensParamRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCollSensParamRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCollSensParamRes* internal_default_instance() {
    return reinterpret_cast<const SetCollSensParamRes*>(
               &_SetCollSensParamRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  void Swap(SetCollSensParamRes* other);
  friend void swap(SetCollSensParamRes& a, SetCollSensParamRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCollSensParamRes* New() const final {
    return CreateMaybeMessage<SetCollSensParamRes>(nullptr);
  }

  SetCollSensParamRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCollSensParamRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCollSensParamRes& from);
  void MergeFrom(const SetCollSensParamRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCollSensParamRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetCollSensParamRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetCollSensParamRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetCollSensParamReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetCollSensParamReq) */ {
 public:
  GetCollSensParamReq();
  virtual ~GetCollSensParamReq();

  GetCollSensParamReq(const GetCollSensParamReq& from);
  GetCollSensParamReq(GetCollSensParamReq&& from) noexcept
    : GetCollSensParamReq() {
    *this = ::std::move(from);
  }

  inline GetCollSensParamReq& operator=(const GetCollSensParamReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollSensParamReq& operator=(GetCollSensParamReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCollSensParamReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCollSensParamReq* internal_default_instance() {
    return reinterpret_cast<const GetCollSensParamReq*>(
               &_GetCollSensParamReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  void Swap(GetCollSensParamReq* other);
  friend void swap(GetCollSensParamReq& a, GetCollSensParamReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCollSensParamReq* New() const final {
    return CreateMaybeMessage<GetCollSensParamReq>(nullptr);
  }

  GetCollSensParamReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCollSensParamReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCollSensParamReq& from);
  void MergeFrom(const GetCollSensParamReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollSensParamReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetCollSensParamReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetCollSensParamReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetCollSensParamRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetCollSensParamRes) */ {
 public:
  GetCollSensParamRes();
  virtual ~GetCollSensParamRes();

  GetCollSensParamRes(const GetCollSensParamRes& from);
  GetCollSensParamRes(GetCollSensParamRes&& from) noexcept
    : GetCollSensParamRes() {
    *this = ::std::move(from);
  }

  inline GetCollSensParamRes& operator=(const GetCollSensParamRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollSensParamRes& operator=(GetCollSensParamRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCollSensParamRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCollSensParamRes* internal_default_instance() {
    return reinterpret_cast<const GetCollSensParamRes*>(
               &_GetCollSensParamRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  void Swap(GetCollSensParamRes* other);
  friend void swap(GetCollSensParamRes& a, GetCollSensParamRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCollSensParamRes* New() const final {
    return CreateMaybeMessage<GetCollSensParamRes>(nullptr);
  }

  GetCollSensParamRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCollSensParamRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCollSensParamRes& from);
  void MergeFrom(const GetCollSensParamRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollSensParamRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetCollSensParamRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float j_torque_bases = 1;
  int j_torque_bases_size() const;
  void clear_j_torque_bases();
  static const int kJTorqueBasesFieldNumber = 1;
  float j_torque_bases(int index) const;
  void set_j_torque_bases(int index, float value);
  void add_j_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      j_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_j_torque_bases();

  // repeated float j_torque_tangents = 2;
  int j_torque_tangents_size() const;
  void clear_j_torque_tangents();
  static const int kJTorqueTangentsFieldNumber = 2;
  float j_torque_tangents(int index) const;
  void set_j_torque_tangents(int index, float value);
  void add_j_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      j_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_j_torque_tangents();

  // repeated float t_torque_bases = 3;
  int t_torque_bases_size() const;
  void clear_t_torque_bases();
  static const int kTTorqueBasesFieldNumber = 3;
  float t_torque_bases(int index) const;
  void set_t_torque_bases(int index, float value);
  void add_t_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_torque_bases();

  // repeated float t_torque_tangents = 4;
  int t_torque_tangents_size() const;
  void clear_t_torque_tangents();
  static const int kTTorqueTangentsFieldNumber = 4;
  float t_torque_tangents(int index) const;
  void set_t_torque_tangents(int index, float value);
  void add_t_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_torque_tangents();

  // repeated float error_bases = 5;
  int error_bases_size() const;
  void clear_error_bases();
  static const int kErrorBasesFieldNumber = 5;
  float error_bases(int index) const;
  void set_error_bases(int index, float value);
  void add_error_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      error_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_error_bases();

  // repeated float error_tangents = 6;
  int error_tangents_size() const;
  void clear_error_tangents();
  static const int kErrorTangentsFieldNumber = 6;
  float error_tangents(int index) const;
  void set_error_tangents(int index, float value);
  void add_error_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      error_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_error_tangents();

  // repeated float t_constvel_torque_bases = 7;
  int t_constvel_torque_bases_size() const;
  void clear_t_constvel_torque_bases();
  static const int kTConstvelTorqueBasesFieldNumber = 7;
  float t_constvel_torque_bases(int index) const;
  void set_t_constvel_torque_bases(int index, float value);
  void add_t_constvel_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_constvel_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_constvel_torque_bases();

  // repeated float t_constvel_torque_tangents = 8;
  int t_constvel_torque_tangents_size() const;
  void clear_t_constvel_torque_tangents();
  static const int kTConstvelTorqueTangentsFieldNumber = 8;
  float t_constvel_torque_tangents(int index) const;
  void set_t_constvel_torque_tangents(int index, float value);
  void add_t_constvel_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_constvel_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_constvel_torque_tangents();

  // repeated float t_conveyor_torque_bases = 9;
  int t_conveyor_torque_bases_size() const;
  void clear_t_conveyor_torque_bases();
  static const int kTConveyorTorqueBasesFieldNumber = 9;
  float t_conveyor_torque_bases(int index) const;
  void set_t_conveyor_torque_bases(int index, float value);
  void add_t_conveyor_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_conveyor_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_conveyor_torque_bases();

  // repeated float t_conveyor_torque_tangents = 10;
  int t_conveyor_torque_tangents_size() const;
  void clear_t_conveyor_torque_tangents();
  static const int kTConveyorTorqueTangentsFieldNumber = 10;
  float t_conveyor_torque_tangents(int index) const;
  void set_t_conveyor_torque_tangents(int index, float value);
  void add_t_conveyor_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_conveyor_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_conveyor_torque_tangents();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetCollSensParamRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > j_torque_bases_;
  mutable std::atomic<int> _j_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > j_torque_tangents_;
  mutable std::atomic<int> _j_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_torque_bases_;
  mutable std::atomic<int> _t_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_torque_tangents_;
  mutable std::atomic<int> _t_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > error_bases_;
  mutable std::atomic<int> _error_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > error_tangents_;
  mutable std::atomic<int> _error_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_constvel_torque_bases_;
  mutable std::atomic<int> _t_constvel_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_constvel_torque_tangents_;
  mutable std::atomic<int> _t_constvel_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_conveyor_torque_bases_;
  mutable std::atomic<int> _t_conveyor_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_conveyor_torque_tangents_;
  mutable std::atomic<int> _t_conveyor_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetCollPolicyReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetCollPolicyReq) */ {
 public:
  SetCollPolicyReq();
  virtual ~SetCollPolicyReq();

  SetCollPolicyReq(const SetCollPolicyReq& from);
  SetCollPolicyReq(SetCollPolicyReq&& from) noexcept
    : SetCollPolicyReq() {
    *this = ::std::move(from);
  }

  inline SetCollPolicyReq& operator=(const SetCollPolicyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCollPolicyReq& operator=(SetCollPolicyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCollPolicyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCollPolicyReq* internal_default_instance() {
    return reinterpret_cast<const SetCollPolicyReq*>(
               &_SetCollPolicyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  void Swap(SetCollPolicyReq* other);
  friend void swap(SetCollPolicyReq& a, SetCollPolicyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCollPolicyReq* New() const final {
    return CreateMaybeMessage<SetCollPolicyReq>(nullptr);
  }

  SetCollPolicyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCollPolicyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCollPolicyReq& from);
  void MergeFrom(const SetCollPolicyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCollPolicyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetCollPolicyReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
  void clear_policy();
  static const int kPolicyFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::CollisionPolicy policy() const;
  void set_policy(::IndyFramework::Protobuf::Shared::CollisionPolicy value);

  // float sleep_time = 2;
  void clear_sleep_time();
  static const int kSleepTimeFieldNumber = 2;
  float sleep_time() const;
  void set_sleep_time(float value);

  // float gravity_time = 3;
  void clear_gravity_time();
  static const int kGravityTimeFieldNumber = 3;
  float gravity_time() const;
  void set_gravity_time(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetCollPolicyReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int policy_;
  float sleep_time_;
  float gravity_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetCollPolicyRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetCollPolicyRes) */ {
 public:
  SetCollPolicyRes();
  virtual ~SetCollPolicyRes();

  SetCollPolicyRes(const SetCollPolicyRes& from);
  SetCollPolicyRes(SetCollPolicyRes&& from) noexcept
    : SetCollPolicyRes() {
    *this = ::std::move(from);
  }

  inline SetCollPolicyRes& operator=(const SetCollPolicyRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCollPolicyRes& operator=(SetCollPolicyRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCollPolicyRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCollPolicyRes* internal_default_instance() {
    return reinterpret_cast<const SetCollPolicyRes*>(
               &_SetCollPolicyRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  void Swap(SetCollPolicyRes* other);
  friend void swap(SetCollPolicyRes& a, SetCollPolicyRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetCollPolicyRes* New() const final {
    return CreateMaybeMessage<SetCollPolicyRes>(nullptr);
  }

  SetCollPolicyRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCollPolicyRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCollPolicyRes& from);
  void MergeFrom(const SetCollPolicyRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCollPolicyRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetCollPolicyRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetCollPolicyRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetCollPolicyReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetCollPolicyReq) */ {
 public:
  GetCollPolicyReq();
  virtual ~GetCollPolicyReq();

  GetCollPolicyReq(const GetCollPolicyReq& from);
  GetCollPolicyReq(GetCollPolicyReq&& from) noexcept
    : GetCollPolicyReq() {
    *this = ::std::move(from);
  }

  inline GetCollPolicyReq& operator=(const GetCollPolicyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollPolicyReq& operator=(GetCollPolicyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCollPolicyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCollPolicyReq* internal_default_instance() {
    return reinterpret_cast<const GetCollPolicyReq*>(
               &_GetCollPolicyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  void Swap(GetCollPolicyReq* other);
  friend void swap(GetCollPolicyReq& a, GetCollPolicyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCollPolicyReq* New() const final {
    return CreateMaybeMessage<GetCollPolicyReq>(nullptr);
  }

  GetCollPolicyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCollPolicyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCollPolicyReq& from);
  void MergeFrom(const GetCollPolicyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollPolicyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetCollPolicyReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetCollPolicyReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetCollPolicyRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetCollPolicyRes) */ {
 public:
  GetCollPolicyRes();
  virtual ~GetCollPolicyRes();

  GetCollPolicyRes(const GetCollPolicyRes& from);
  GetCollPolicyRes(GetCollPolicyRes&& from) noexcept
    : GetCollPolicyRes() {
    *this = ::std::move(from);
  }

  inline GetCollPolicyRes& operator=(const GetCollPolicyRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollPolicyRes& operator=(GetCollPolicyRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCollPolicyRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCollPolicyRes* internal_default_instance() {
    return reinterpret_cast<const GetCollPolicyRes*>(
               &_GetCollPolicyRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  void Swap(GetCollPolicyRes* other);
  friend void swap(GetCollPolicyRes& a, GetCollPolicyRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCollPolicyRes* New() const final {
    return CreateMaybeMessage<GetCollPolicyRes>(nullptr);
  }

  GetCollPolicyRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCollPolicyRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCollPolicyRes& from);
  void MergeFrom(const GetCollPolicyRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollPolicyRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetCollPolicyRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
  void clear_policy();
  static const int kPolicyFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::CollisionPolicy policy() const;
  void set_policy(::IndyFramework::Protobuf::Shared::CollisionPolicy value);

  // float sleep_time = 2;
  void clear_sleep_time();
  static const int kSleepTimeFieldNumber = 2;
  float sleep_time() const;
  void set_sleep_time(float value);

  // float gravity_time = 3;
  void clear_gravity_time();
  static const int kGravityTimeFieldNumber = 3;
  float gravity_time() const;
  void set_gravity_time(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetCollPolicyRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int policy_;
  float sleep_time_;
  float gravity_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetCollTuningParamReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetCollTuningParamReq) */ {
 public:
  GetCollTuningParamReq();
  virtual ~GetCollTuningParamReq();

  GetCollTuningParamReq(const GetCollTuningParamReq& from);
  GetCollTuningParamReq(GetCollTuningParamReq&& from) noexcept
    : GetCollTuningParamReq() {
    *this = ::std::move(from);
  }

  inline GetCollTuningParamReq& operator=(const GetCollTuningParamReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollTuningParamReq& operator=(GetCollTuningParamReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCollTuningParamReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCollTuningParamReq* internal_default_instance() {
    return reinterpret_cast<const GetCollTuningParamReq*>(
               &_GetCollTuningParamReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  void Swap(GetCollTuningParamReq* other);
  friend void swap(GetCollTuningParamReq& a, GetCollTuningParamReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCollTuningParamReq* New() const final {
    return CreateMaybeMessage<GetCollTuningParamReq>(nullptr);
  }

  GetCollTuningParamReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCollTuningParamReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCollTuningParamReq& from);
  void MergeFrom(const GetCollTuningParamReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollTuningParamReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetCollTuningParamReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetCollTuningParamRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetCollTuningParamRes) */ {
 public:
  GetCollTuningParamRes();
  virtual ~GetCollTuningParamRes();

  GetCollTuningParamRes(const GetCollTuningParamRes& from);
  GetCollTuningParamRes(GetCollTuningParamRes&& from) noexcept
    : GetCollTuningParamRes() {
    *this = ::std::move(from);
  }

  inline GetCollTuningParamRes& operator=(const GetCollTuningParamRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCollTuningParamRes& operator=(GetCollTuningParamRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCollTuningParamRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCollTuningParamRes* internal_default_instance() {
    return reinterpret_cast<const GetCollTuningParamRes*>(
               &_GetCollTuningParamRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  void Swap(GetCollTuningParamRes* other);
  friend void swap(GetCollTuningParamRes& a, GetCollTuningParamRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCollTuningParamRes* New() const final {
    return CreateMaybeMessage<GetCollTuningParamRes>(nullptr);
  }

  GetCollTuningParamRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCollTuningParamRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCollTuningParamRes& from);
  void MergeFrom(const GetCollTuningParamRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCollTuningParamRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetCollTuningParamRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float j_torque_bases = 1;
  int j_torque_bases_size() const;
  void clear_j_torque_bases();
  static const int kJTorqueBasesFieldNumber = 1;
  float j_torque_bases(int index) const;
  void set_j_torque_bases(int index, float value);
  void add_j_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      j_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_j_torque_bases();

  // repeated float j_torque_tangents = 2;
  int j_torque_tangents_size() const;
  void clear_j_torque_tangents();
  static const int kJTorqueTangentsFieldNumber = 2;
  float j_torque_tangents(int index) const;
  void set_j_torque_tangents(int index, float value);
  void add_j_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      j_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_j_torque_tangents();

  // repeated float t_torque_bases = 3;
  int t_torque_bases_size() const;
  void clear_t_torque_bases();
  static const int kTTorqueBasesFieldNumber = 3;
  float t_torque_bases(int index) const;
  void set_t_torque_bases(int index, float value);
  void add_t_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_torque_bases();

  // repeated float t_torque_tangents = 4;
  int t_torque_tangents_size() const;
  void clear_t_torque_tangents();
  static const int kTTorqueTangentsFieldNumber = 4;
  float t_torque_tangents(int index) const;
  void set_t_torque_tangents(int index, float value);
  void add_t_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_torque_tangents();

  // repeated float error_bases = 5;
  int error_bases_size() const;
  void clear_error_bases();
  static const int kErrorBasesFieldNumber = 5;
  float error_bases(int index) const;
  void set_error_bases(int index, float value);
  void add_error_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      error_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_error_bases();

  // repeated float error_tangents = 6;
  int error_tangents_size() const;
  void clear_error_tangents();
  static const int kErrorTangentsFieldNumber = 6;
  float error_tangents(int index) const;
  void set_error_tangents(int index, float value);
  void add_error_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      error_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_error_tangents();

  // repeated float t_constvel_torque_bases = 7;
  int t_constvel_torque_bases_size() const;
  void clear_t_constvel_torque_bases();
  static const int kTConstvelTorqueBasesFieldNumber = 7;
  float t_constvel_torque_bases(int index) const;
  void set_t_constvel_torque_bases(int index, float value);
  void add_t_constvel_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_constvel_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_constvel_torque_bases();

  // repeated float t_constvel_torque_tangents = 8;
  int t_constvel_torque_tangents_size() const;
  void clear_t_constvel_torque_tangents();
  static const int kTConstvelTorqueTangentsFieldNumber = 8;
  float t_constvel_torque_tangents(int index) const;
  void set_t_constvel_torque_tangents(int index, float value);
  void add_t_constvel_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_constvel_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_constvel_torque_tangents();

  // repeated float t_conveyor_torque_bases = 9;
  int t_conveyor_torque_bases_size() const;
  void clear_t_conveyor_torque_bases();
  static const int kTConveyorTorqueBasesFieldNumber = 9;
  float t_conveyor_torque_bases(int index) const;
  void set_t_conveyor_torque_bases(int index, float value);
  void add_t_conveyor_torque_bases(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_conveyor_torque_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_conveyor_torque_bases();

  // repeated float t_conveyor_torque_tangents = 10;
  int t_conveyor_torque_tangents_size() const;
  void clear_t_conveyor_torque_tangents();
  static const int kTConveyorTorqueTangentsFieldNumber = 10;
  float t_conveyor_torque_tangents(int index) const;
  void set_t_conveyor_torque_tangents(int index, float value);
  void add_t_conveyor_torque_tangents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      t_conveyor_torque_tangents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_t_conveyor_torque_tangents();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // bool is_calc_done = 11;
  void clear_is_calc_done();
  static const int kIsCalcDoneFieldNumber = 11;
  bool is_calc_done() const;
  void set_is_calc_done(bool value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > j_torque_bases_;
  mutable std::atomic<int> _j_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > j_torque_tangents_;
  mutable std::atomic<int> _j_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_torque_bases_;
  mutable std::atomic<int> _t_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_torque_tangents_;
  mutable std::atomic<int> _t_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > error_bases_;
  mutable std::atomic<int> _error_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > error_tangents_;
  mutable std::atomic<int> _error_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_constvel_torque_bases_;
  mutable std::atomic<int> _t_constvel_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_constvel_torque_tangents_;
  mutable std::atomic<int> _t_constvel_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_conveyor_torque_bases_;
  mutable std::atomic<int> _t_conveyor_torque_bases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > t_conveyor_torque_tangents_;
  mutable std::atomic<int> _t_conveyor_torque_tangents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool is_calc_done_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetRTControlDataReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetRTControlDataReq) */ {
 public:
  GetRTControlDataReq();
  virtual ~GetRTControlDataReq();

  GetRTControlDataReq(const GetRTControlDataReq& from);
  GetRTControlDataReq(GetRTControlDataReq&& from) noexcept
    : GetRTControlDataReq() {
    *this = ::std::move(from);
  }

  inline GetRTControlDataReq& operator=(const GetRTControlDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRTControlDataReq& operator=(GetRTControlDataReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRTControlDataReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRTControlDataReq* internal_default_instance() {
    return reinterpret_cast<const GetRTControlDataReq*>(
               &_GetRTControlDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  void Swap(GetRTControlDataReq* other);
  friend void swap(GetRTControlDataReq& a, GetRTControlDataReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRTControlDataReq* New() const final {
    return CreateMaybeMessage<GetRTControlDataReq>(nullptr);
  }

  GetRTControlDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRTControlDataReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRTControlDataReq& from);
  void MergeFrom(const GetRTControlDataReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRTControlDataReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetRTControlDataReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetRTControlDataReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetRTControlDataRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetRTControlDataRes) */ {
 public:
  GetRTControlDataRes();
  virtual ~GetRTControlDataRes();

  GetRTControlDataRes(const GetRTControlDataRes& from);
  GetRTControlDataRes(GetRTControlDataRes&& from) noexcept
    : GetRTControlDataRes() {
    *this = ::std::move(from);
  }

  inline GetRTControlDataRes& operator=(const GetRTControlDataRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRTControlDataRes& operator=(GetRTControlDataRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRTControlDataRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRTControlDataRes* internal_default_instance() {
    return reinterpret_cast<const GetRTControlDataRes*>(
               &_GetRTControlDataRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  void Swap(GetRTControlDataRes* other);
  friend void swap(GetRTControlDataRes& a, GetRTControlDataRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRTControlDataRes* New() const final {
    return CreateMaybeMessage<GetRTControlDataRes>(nullptr);
  }

  GetRTControlDataRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRTControlDataRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRTControlDataRes& from);
  void MergeFrom(const GetRTControlDataRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRTControlDataRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetRTControlDataRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float q = 1;
  int q_size() const;
  void clear_q();
  static const int kQFieldNumber = 1;
  float q(int index) const;
  void set_q(int index, float value);
  void add_q(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      q() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_q();

  // repeated float qdot = 2;
  int qdot_size() const;
  void clear_qdot();
  static const int kQdotFieldNumber = 2;
  float qdot(int index) const;
  void set_qdot(int index, float value);
  void add_qdot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      qdot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_qdot();

  // repeated float qddot = 3;
  int qddot_size() const;
  void clear_qddot();
  static const int kQddotFieldNumber = 3;
  float qddot(int index) const;
  void set_qddot(int index, float value);
  void add_qddot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      qddot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_qddot();

  // repeated float p = 11;
  int p_size() const;
  void clear_p();
  static const int kPFieldNumber = 11;
  float p(int index) const;
  void set_p(int index, float value);
  void add_p(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      p() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_p();

  // repeated float pdot = 12;
  int pdot_size() const;
  void clear_pdot();
  static const int kPdotFieldNumber = 12;
  float pdot(int index) const;
  void set_pdot(int index, float value);
  void add_pdot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pdot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pdot();

  // repeated float pddot = 13;
  int pddot_size() const;
  void clear_pddot();
  static const int kPddotFieldNumber = 13;
  float pddot(int index) const;
  void set_pddot(int index, float value);
  void add_pddot(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      pddot() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_pddot();

  // repeated float ref_frame = 21;
  int ref_frame_size() const;
  void clear_ref_frame();
  static const int kRefFrameFieldNumber = 21;
  float ref_frame(int index) const;
  void set_ref_frame(int index, float value);
  void add_ref_frame(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ref_frame() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ref_frame();

  // repeated float tool_frame = 22;
  int tool_frame_size() const;
  void clear_tool_frame();
  static const int kToolFrameFieldNumber = 22;
  float tool_frame(int index) const;
  void set_tool_frame(int index, float value);
  void add_tool_frame(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tool_frame() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tool_frame();

  // string running_time = 31;
  void clear_running_time();
  static const int kRunningTimeFieldNumber = 31;
  const std::string& running_time() const;
  void set_running_time(const std::string& value);
  void set_running_time(std::string&& value);
  void set_running_time(const char* value);
  void set_running_time(const char* value, size_t size);
  std::string* mutable_running_time();
  std::string* release_running_time();
  void set_allocated_running_time(std::string* running_time);

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetRTControlDataRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > q_;
  mutable std::atomic<int> _q_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > qdot_;
  mutable std::atomic<int> _qdot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > qddot_;
  mutable std::atomic<int> _qddot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > p_;
  mutable std::atomic<int> _p_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pdot_;
  mutable std::atomic<int> _pdot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > pddot_;
  mutable std::atomic<int> _pddot_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ref_frame_;
  mutable std::atomic<int> _ref_frame_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tool_frame_;
  mutable std::atomic<int> _tool_frame_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr running_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetIODataReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetIODataReq) */ {
 public:
  GetIODataReq();
  virtual ~GetIODataReq();

  GetIODataReq(const GetIODataReq& from);
  GetIODataReq(GetIODataReq&& from) noexcept
    : GetIODataReq() {
    *this = ::std::move(from);
  }

  inline GetIODataReq& operator=(const GetIODataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIODataReq& operator=(GetIODataReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIODataReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIODataReq* internal_default_instance() {
    return reinterpret_cast<const GetIODataReq*>(
               &_GetIODataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  void Swap(GetIODataReq* other);
  friend void swap(GetIODataReq& a, GetIODataReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetIODataReq* New() const final {
    return CreateMaybeMessage<GetIODataReq>(nullptr);
  }

  GetIODataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIODataReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIODataReq& from);
  void MergeFrom(const GetIODataReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIODataReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetIODataReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetIODataReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetIODataRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetIODataRes) */ {
 public:
  GetIODataRes();
  virtual ~GetIODataRes();

  GetIODataRes(const GetIODataRes& from);
  GetIODataRes(GetIODataRes&& from) noexcept
    : GetIODataRes() {
    *this = ::std::move(from);
  }

  inline GetIODataRes& operator=(const GetIODataRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIODataRes& operator=(GetIODataRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIODataRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIODataRes* internal_default_instance() {
    return reinterpret_cast<const GetIODataRes*>(
               &_GetIODataRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  void Swap(GetIODataRes* other);
  friend void swap(GetIODataRes& a, GetIODataRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetIODataRes* New() const final {
    return CreateMaybeMessage<GetIODataRes>(nullptr);
  }

  GetIODataRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIODataRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIODataRes& from);
  void MergeFrom(const GetIODataRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIODataRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetIODataRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool di = 1;
  int di_size() const;
  void clear_di();
  static const int kDiFieldNumber = 1;
  bool di(int index) const;
  void set_di(int index, bool value);
  void add_di(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      di() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_di();

  // repeated bool do = 2;
  int do__size() const;
  void clear_do_();
  static const int kDoFieldNumber = 2;
  bool do_(int index) const;
  void set_do_(int index, bool value);
  void add_do_(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      do_() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_do_();

  // repeated int32 ai = 3;
  int ai_size() const;
  void clear_ai();
  static const int kAiFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 ai(int index) const;
  void set_ai(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ai(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ai() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ai();

  // repeated int32 ao = 4;
  int ao_size() const;
  void clear_ao();
  static const int kAoFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 ao(int index) const;
  void set_ao(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ao(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ao() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ao();

  // repeated bool end_di = 11;
  int end_di_size() const;
  void clear_end_di();
  static const int kEndDiFieldNumber = 11;
  bool end_di(int index) const;
  void set_end_di(int index, bool value);
  void add_end_di(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      end_di() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_end_di();

  // repeated bool end_do = 12;
  int end_do_size() const;
  void clear_end_do();
  static const int kEndDoFieldNumber = 12;
  bool end_do(int index) const;
  void set_end_do(int index, bool value);
  void add_end_do(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      end_do() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_end_do();

  // repeated int32 end_ai = 13;
  int end_ai_size() const;
  void clear_end_ai();
  static const int kEndAiFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 end_ai(int index) const;
  void set_end_ai(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_end_ai(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      end_ai() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_end_ai();

  // repeated int32 end_ao = 14;
  int end_ao_size() const;
  void clear_end_ao();
  static const int kEndAoFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 end_ao(int index) const;
  void set_end_ao(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_end_ao(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      end_ao() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_end_ao();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetIODataRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > di_;
  mutable std::atomic<int> _di_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > do__;
  mutable std::atomic<int> _do__cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ai_;
  mutable std::atomic<int> _ai_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ao_;
  mutable std::atomic<int> _ao_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > end_di_;
  mutable std::atomic<int> _end_di_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > end_do_;
  mutable std::atomic<int> _end_do_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > end_ai_;
  mutable std::atomic<int> _end_ai_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > end_ao_;
  mutable std::atomic<int> _end_ao_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetCoreDataReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetCoreDataReq) */ {
 public:
  GetCoreDataReq();
  virtual ~GetCoreDataReq();

  GetCoreDataReq(const GetCoreDataReq& from);
  GetCoreDataReq(GetCoreDataReq&& from) noexcept
    : GetCoreDataReq() {
    *this = ::std::move(from);
  }

  inline GetCoreDataReq& operator=(const GetCoreDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCoreDataReq& operator=(GetCoreDataReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCoreDataReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCoreDataReq* internal_default_instance() {
    return reinterpret_cast<const GetCoreDataReq*>(
               &_GetCoreDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  void Swap(GetCoreDataReq* other);
  friend void swap(GetCoreDataReq& a, GetCoreDataReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCoreDataReq* New() const final {
    return CreateMaybeMessage<GetCoreDataReq>(nullptr);
  }

  GetCoreDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCoreDataReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCoreDataReq& from);
  void MergeFrom(const GetCoreDataReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCoreDataReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetCoreDataReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetCoreDataReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetCoreDataRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetCoreDataRes) */ {
 public:
  GetCoreDataRes();
  virtual ~GetCoreDataRes();

  GetCoreDataRes(const GetCoreDataRes& from);
  GetCoreDataRes(GetCoreDataRes&& from) noexcept
    : GetCoreDataRes() {
    *this = ::std::move(from);
  }

  inline GetCoreDataRes& operator=(const GetCoreDataRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCoreDataRes& operator=(GetCoreDataRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCoreDataRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCoreDataRes* internal_default_instance() {
    return reinterpret_cast<const GetCoreDataRes*>(
               &_GetCoreDataRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  void Swap(GetCoreDataRes* other);
  friend void swap(GetCoreDataRes& a, GetCoreDataRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCoreDataRes* New() const final {
    return CreateMaybeMessage<GetCoreDataRes>(nullptr);
  }

  GetCoreDataRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCoreDataRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCoreDataRes& from);
  void MergeFrom(const GetCoreDataRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCoreDataRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetCoreDataRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float temperatures = 2;
  int temperatures_size() const;
  void clear_temperatures();
  static const int kTemperaturesFieldNumber = 2;
  float temperatures(int index) const;
  void set_temperatures(int index, float value);
  void add_temperatures(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      temperatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_temperatures();

  // repeated float voltages = 3;
  int voltages_size() const;
  void clear_voltages();
  static const int kVoltagesFieldNumber = 3;
  float voltages(int index) const;
  void set_voltages(int index, float value);
  void add_voltages(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      voltages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_voltages();

  // repeated float currents = 4;
  int currents_size() const;
  void clear_currents();
  static const int kCurrentsFieldNumber = 4;
  float currents(int index) const;
  void set_currents(int index, float value);
  void add_currents(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      currents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_currents();

  // repeated string states = 5;
  int states_size() const;
  void clear_states();
  static const int kStatesFieldNumber = 5;
  const std::string& states(int index) const;
  std::string* mutable_states(int index);
  void set_states(int index, const std::string& value);
  void set_states(int index, std::string&& value);
  void set_states(int index, const char* value);
  void set_states(int index, const char* value, size_t size);
  std::string* add_states();
  void add_states(const std::string& value);
  void add_states(std::string&& value);
  void add_states(const char* value);
  void add_states(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_states();

  // repeated string state_codes = 6;
  int state_codes_size() const;
  void clear_state_codes();
  static const int kStateCodesFieldNumber = 6;
  const std::string& state_codes(int index) const;
  std::string* mutable_state_codes(int index);
  void set_state_codes(int index, const std::string& value);
  void set_state_codes(int index, std::string&& value);
  void set_state_codes(int index, const char* value);
  void set_state_codes(int index, const char* value, size_t size);
  std::string* add_state_codes();
  void add_state_codes(const std::string& value);
  void add_state_codes(std::string&& value);
  void add_state_codes(const char* value);
  void add_state_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& state_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_state_codes();

  // repeated bool brake_states = 10;
  int brake_states_size() const;
  void clear_brake_states();
  static const int kBrakeStatesFieldNumber = 10;
  bool brake_states(int index) const;
  void set_brake_states(int index, bool value);
  void add_brake_states(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      brake_states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_brake_states();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // bool servo_state = 11;
  void clear_servo_state();
  static const int kServoStateFieldNumber = 11;
  bool servo_state() const;
  void set_servo_state(bool value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetCoreDataRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > temperatures_;
  mutable std::atomic<int> _temperatures_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > voltages_;
  mutable std::atomic<int> _voltages_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > currents_;
  mutable std::atomic<int> _currents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> states_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> state_codes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > brake_states_;
  mutable std::atomic<int> _brake_states_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool servo_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetSystemInfoDataReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetSystemInfoDataReq) */ {
 public:
  GetSystemInfoDataReq();
  virtual ~GetSystemInfoDataReq();

  GetSystemInfoDataReq(const GetSystemInfoDataReq& from);
  GetSystemInfoDataReq(GetSystemInfoDataReq&& from) noexcept
    : GetSystemInfoDataReq() {
    *this = ::std::move(from);
  }

  inline GetSystemInfoDataReq& operator=(const GetSystemInfoDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemInfoDataReq& operator=(GetSystemInfoDataReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemInfoDataReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSystemInfoDataReq* internal_default_instance() {
    return reinterpret_cast<const GetSystemInfoDataReq*>(
               &_GetSystemInfoDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  void Swap(GetSystemInfoDataReq* other);
  friend void swap(GetSystemInfoDataReq& a, GetSystemInfoDataReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSystemInfoDataReq* New() const final {
    return CreateMaybeMessage<GetSystemInfoDataReq>(nullptr);
  }

  GetSystemInfoDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemInfoDataReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemInfoDataReq& from);
  void MergeFrom(const GetSystemInfoDataReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemInfoDataReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetSystemInfoDataReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetSystemInfoDataRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetSystemInfoDataRes) */ {
 public:
  GetSystemInfoDataRes();
  virtual ~GetSystemInfoDataRes();

  GetSystemInfoDataRes(const GetSystemInfoDataRes& from);
  GetSystemInfoDataRes(GetSystemInfoDataRes&& from) noexcept
    : GetSystemInfoDataRes() {
    *this = ::std::move(from);
  }

  inline GetSystemInfoDataRes& operator=(const GetSystemInfoDataRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSystemInfoDataRes& operator=(GetSystemInfoDataRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSystemInfoDataRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSystemInfoDataRes* internal_default_instance() {
    return reinterpret_cast<const GetSystemInfoDataRes*>(
               &_GetSystemInfoDataRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  void Swap(GetSystemInfoDataRes* other);
  friend void swap(GetSystemInfoDataRes& a, GetSystemInfoDataRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSystemInfoDataRes* New() const final {
    return CreateMaybeMessage<GetSystemInfoDataRes>(nullptr);
  }

  GetSystemInfoDataRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSystemInfoDataRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSystemInfoDataRes& from);
  void MergeFrom(const GetSystemInfoDataRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSystemInfoDataRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetSystemInfoDataRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string core_board_fw_vers = 11;
  int core_board_fw_vers_size() const;
  void clear_core_board_fw_vers();
  static const int kCoreBoardFwVersFieldNumber = 11;
  const std::string& core_board_fw_vers(int index) const;
  std::string* mutable_core_board_fw_vers(int index);
  void set_core_board_fw_vers(int index, const std::string& value);
  void set_core_board_fw_vers(int index, std::string&& value);
  void set_core_board_fw_vers(int index, const char* value);
  void set_core_board_fw_vers(int index, const char* value, size_t size);
  std::string* add_core_board_fw_vers();
  void add_core_board_fw_vers(const std::string& value);
  void add_core_board_fw_vers(std::string&& value);
  void add_core_board_fw_vers(const char* value);
  void add_core_board_fw_vers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& core_board_fw_vers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_core_board_fw_vers();

  // string control_task_ver = 1;
  void clear_control_task_ver();
  static const int kControlTaskVerFieldNumber = 1;
  const std::string& control_task_ver() const;
  void set_control_task_ver(const std::string& value);
  void set_control_task_ver(std::string&& value);
  void set_control_task_ver(const char* value);
  void set_control_task_ver(const char* value, size_t size);
  std::string* mutable_control_task_ver();
  std::string* release_control_task_ver();
  void set_allocated_control_task_ver(std::string* control_task_ver);

  // string model_name = 3;
  void clear_model_name();
  static const int kModelNameFieldNumber = 3;
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);

  // string io_board_fw_ver = 10;
  void clear_io_board_fw_ver();
  static const int kIoBoardFwVerFieldNumber = 10;
  const std::string& io_board_fw_ver() const;
  void set_io_board_fw_ver(const std::string& value);
  void set_io_board_fw_ver(std::string&& value);
  void set_io_board_fw_ver(const char* value);
  void set_io_board_fw_ver(const char* value, size_t size);
  std::string* mutable_io_board_fw_ver();
  std::string* release_io_board_fw_ver();
  void set_allocated_io_board_fw_ver(std::string* io_board_fw_ver);

  // string endtool_board_fw_ver = 12;
  void clear_endtool_board_fw_ver();
  static const int kEndtoolBoardFwVerFieldNumber = 12;
  const std::string& endtool_board_fw_ver() const;
  void set_endtool_board_fw_ver(const std::string& value);
  void set_endtool_board_fw_ver(std::string&& value);
  void set_endtool_board_fw_ver(const char* value);
  void set_endtool_board_fw_ver(const char* value, size_t size);
  std::string* mutable_endtool_board_fw_ver();
  std::string* release_endtool_board_fw_ver();
  void set_allocated_endtool_board_fw_ver(std::string* endtool_board_fw_ver);

  // string robot_sn = 13;
  void clear_robot_sn();
  static const int kRobotSnFieldNumber = 13;
  const std::string& robot_sn() const;
  void set_robot_sn(const std::string& value);
  void set_robot_sn(std::string&& value);
  void set_robot_sn(const char* value);
  void set_robot_sn(const char* value, size_t size);
  std::string* mutable_robot_sn();
  std::string* release_robot_sn();
  void set_allocated_robot_sn(std::string* robot_sn);

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // int32 dof = 2;
  void clear_dof();
  static const int kDofFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 dof() const;
  void set_dof(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .IndyFramework.Protobuf.Shared.EndToolPortType endtool_port_type = 9;
  void clear_endtool_port_type();
  static const int kEndtoolPortTypeFieldNumber = 9;
  ::IndyFramework::Protobuf::Shared::EndToolPortType endtool_port_type() const;
  void set_endtool_port_type(::IndyFramework::Protobuf::Shared::EndToolPortType value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> core_board_fw_vers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr control_task_ver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr io_board_fw_ver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endtool_board_fw_ver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_sn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 dof_;
  int endtool_port_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetStateDataReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetStateDataReq) */ {
 public:
  GetStateDataReq();
  virtual ~GetStateDataReq();

  GetStateDataReq(const GetStateDataReq& from);
  GetStateDataReq(GetStateDataReq&& from) noexcept
    : GetStateDataReq() {
    *this = ::std::move(from);
  }

  inline GetStateDataReq& operator=(const GetStateDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateDataReq& operator=(GetStateDataReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStateDataReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateDataReq* internal_default_instance() {
    return reinterpret_cast<const GetStateDataReq*>(
               &_GetStateDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  void Swap(GetStateDataReq* other);
  friend void swap(GetStateDataReq& a, GetStateDataReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStateDataReq* New() const final {
    return CreateMaybeMessage<GetStateDataReq>(nullptr);
  }

  GetStateDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateDataReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateDataReq& from);
  void MergeFrom(const GetStateDataReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateDataReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetStateDataReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetStateDataReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetStateDataRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetStateDataRes) */ {
 public:
  GetStateDataRes();
  virtual ~GetStateDataRes();

  GetStateDataRes(const GetStateDataRes& from);
  GetStateDataRes(GetStateDataRes&& from) noexcept
    : GetStateDataRes() {
    *this = ::std::move(from);
  }

  inline GetStateDataRes& operator=(const GetStateDataRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStateDataRes& operator=(GetStateDataRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStateDataRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStateDataRes* internal_default_instance() {
    return reinterpret_cast<const GetStateDataRes*>(
               &_GetStateDataRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  void Swap(GetStateDataRes* other);
  friend void swap(GetStateDataRes& a, GetStateDataRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetStateDataRes* New() const final {
    return CreateMaybeMessage<GetStateDataRes>(nullptr);
  }

  GetStateDataRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStateDataRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStateDataRes& from);
  void MergeFrom(const GetStateDataRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStateDataRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetStateDataRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string violation = 3;
  void clear_violation();
  static const int kViolationFieldNumber = 3;
  const std::string& violation() const;
  void set_violation(const std::string& value);
  void set_violation(std::string&& value);
  void set_violation(const char* value);
  void set_violation(const char* value, size_t size);
  std::string* mutable_violation();
  std::string* release_violation();
  void set_allocated_violation(std::string* violation);

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // bool is_simulation_mode = 1;
  void clear_is_simulation_mode();
  static const int kIsSimulationModeFieldNumber = 1;
  bool is_simulation_mode() const;
  void set_is_simulation_mode(bool value);

  // .IndyFramework.Protobuf.Shared.OpState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::IndyFramework::Protobuf::Shared::OpState state() const;
  void set_state(::IndyFramework::Protobuf::Shared::OpState value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetStateDataRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr violation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool is_simulation_mode_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetViolationDataReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetViolationDataReq) */ {
 public:
  GetViolationDataReq();
  virtual ~GetViolationDataReq();

  GetViolationDataReq(const GetViolationDataReq& from);
  GetViolationDataReq(GetViolationDataReq&& from) noexcept
    : GetViolationDataReq() {
    *this = ::std::move(from);
  }

  inline GetViolationDataReq& operator=(const GetViolationDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetViolationDataReq& operator=(GetViolationDataReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetViolationDataReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetViolationDataReq* internal_default_instance() {
    return reinterpret_cast<const GetViolationDataReq*>(
               &_GetViolationDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  void Swap(GetViolationDataReq* other);
  friend void swap(GetViolationDataReq& a, GetViolationDataReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetViolationDataReq* New() const final {
    return CreateMaybeMessage<GetViolationDataReq>(nullptr);
  }

  GetViolationDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetViolationDataReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetViolationDataReq& from);
  void MergeFrom(const GetViolationDataReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetViolationDataReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetViolationDataReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetViolationDataReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetViolationDataRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetViolationDataRes) */ {
 public:
  GetViolationDataRes();
  virtual ~GetViolationDataRes();

  GetViolationDataRes(const GetViolationDataRes& from);
  GetViolationDataRes(GetViolationDataRes&& from) noexcept
    : GetViolationDataRes() {
    *this = ::std::move(from);
  }

  inline GetViolationDataRes& operator=(const GetViolationDataRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetViolationDataRes& operator=(GetViolationDataRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetViolationDataRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetViolationDataRes* internal_default_instance() {
    return reinterpret_cast<const GetViolationDataRes*>(
               &_GetViolationDataRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  void Swap(GetViolationDataRes* other);
  friend void swap(GetViolationDataRes& a, GetViolationDataRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetViolationDataRes* New() const final {
    return CreateMaybeMessage<GetViolationDataRes>(nullptr);
  }

  GetViolationDataRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetViolationDataRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetViolationDataRes& from);
  void MergeFrom(const GetViolationDataRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetViolationDataRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetViolationDataRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 i_args = 3;
  int i_args_size() const;
  void clear_i_args();
  static const int kIArgsFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 i_args(int index) const;
  void set_i_args(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_i_args(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      i_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_i_args();

  // repeated float f_args = 4;
  int f_args_size() const;
  void clear_f_args();
  static const int kFArgsFieldNumber = 4;
  float f_args(int index) const;
  void set_f_args(int index, float value);
  void add_f_args(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      f_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_f_args();

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // uint64 violation_code = 1;
  void clear_violation_code();
  static const int kViolationCodeFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 violation_code() const;
  void set_violation_code(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 j_index = 2;
  void clear_j_index();
  static const int kJIndexFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 j_index() const;
  void set_j_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetViolationDataRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > i_args_;
  mutable std::atomic<int> _i_args_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > f_args_;
  mutable std::atomic<int> _f_args_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 violation_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 j_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetProgramStateReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetProgramStateReq) */ {
 public:
  SetProgramStateReq();
  virtual ~SetProgramStateReq();

  SetProgramStateReq(const SetProgramStateReq& from);
  SetProgramStateReq(SetProgramStateReq&& from) noexcept
    : SetProgramStateReq() {
    *this = ::std::move(from);
  }

  inline SetProgramStateReq& operator=(const SetProgramStateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProgramStateReq& operator=(SetProgramStateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetProgramStateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetProgramStateReq* internal_default_instance() {
    return reinterpret_cast<const SetProgramStateReq*>(
               &_SetProgramStateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  void Swap(SetProgramStateReq* other);
  friend void swap(SetProgramStateReq& a, SetProgramStateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetProgramStateReq* New() const final {
    return CreateMaybeMessage<SetProgramStateReq>(nullptr);
  }

  SetProgramStateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetProgramStateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetProgramStateReq& from);
  void MergeFrom(const SetProgramStateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetProgramStateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetProgramStateReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .IndyFramework.Protobuf.Shared.ProgramState program_state = 1;
  void clear_program_state();
  static const int kProgramStateFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::ProgramState program_state() const;
  void set_program_state(::IndyFramework::Protobuf::Shared::ProgramState value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetProgramStateReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int program_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class SetProgramStateRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.SetProgramStateRes) */ {
 public:
  SetProgramStateRes();
  virtual ~SetProgramStateRes();

  SetProgramStateRes(const SetProgramStateRes& from);
  SetProgramStateRes(SetProgramStateRes&& from) noexcept
    : SetProgramStateRes() {
    *this = ::std::move(from);
  }

  inline SetProgramStateRes& operator=(const SetProgramStateRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetProgramStateRes& operator=(SetProgramStateRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetProgramStateRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetProgramStateRes* internal_default_instance() {
    return reinterpret_cast<const SetProgramStateRes*>(
               &_SetProgramStateRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  void Swap(SetProgramStateRes* other);
  friend void swap(SetProgramStateRes& a, SetProgramStateRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetProgramStateRes* New() const final {
    return CreateMaybeMessage<SetProgramStateRes>(nullptr);
  }

  SetProgramStateRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetProgramStateRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetProgramStateRes& from);
  void MergeFrom(const SetProgramStateRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetProgramStateRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.SetProgramStateRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.SetProgramStateRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetMotionDataReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetMotionDataReq) */ {
 public:
  GetMotionDataReq();
  virtual ~GetMotionDataReq();

  GetMotionDataReq(const GetMotionDataReq& from);
  GetMotionDataReq(GetMotionDataReq&& from) noexcept
    : GetMotionDataReq() {
    *this = ::std::move(from);
  }

  inline GetMotionDataReq& operator=(const GetMotionDataReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMotionDataReq& operator=(GetMotionDataReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMotionDataReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMotionDataReq* internal_default_instance() {
    return reinterpret_cast<const GetMotionDataReq*>(
               &_GetMotionDataReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  void Swap(GetMotionDataReq* other);
  friend void swap(GetMotionDataReq& a, GetMotionDataReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMotionDataReq* New() const final {
    return CreateMaybeMessage<GetMotionDataReq>(nullptr);
  }

  GetMotionDataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMotionDataReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMotionDataReq& from);
  void MergeFrom(const GetMotionDataReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMotionDataReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetMotionDataReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetMotionDataReq)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetMotionDataRes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetMotionDataRes) */ {
 public:
  GetMotionDataRes();
  virtual ~GetMotionDataRes();

  GetMotionDataRes(const GetMotionDataRes& from);
  GetMotionDataRes(GetMotionDataRes&& from) noexcept
    : GetMotionDataRes() {
    *this = ::std::move(from);
  }

  inline GetMotionDataRes& operator=(const GetMotionDataRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMotionDataRes& operator=(GetMotionDataRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMotionDataRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMotionDataRes* internal_default_instance() {
    return reinterpret_cast<const GetMotionDataRes*>(
               &_GetMotionDataRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  void Swap(GetMotionDataRes* other);
  friend void swap(GetMotionDataRes& a, GetMotionDataRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMotionDataRes* New() const final {
    return CreateMaybeMessage<GetMotionDataRes>(nullptr);
  }

  GetMotionDataRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMotionDataRes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMotionDataRes& from);
  void MergeFrom(const GetMotionDataRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMotionDataRes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetMotionDataRes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // .IndyFramework.Protobuf.Shared.TrajState traj_state = 1;
  void clear_traj_state();
  static const int kTrajStateFieldNumber = 1;
  ::IndyFramework::Protobuf::Shared::TrajState traj_state() const;
  void set_traj_state(::IndyFramework::Protobuf::Shared::TrajState value);

  // int32 traj_progress = 2;
  void clear_traj_progress();
  static const int kTrajProgressFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 traj_progress() const;
  void set_traj_progress(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_in_motion = 3;
  void clear_is_in_motion();
  static const int kIsInMotionFieldNumber = 3;
  bool is_in_motion() const;
  void set_is_in_motion(bool value);

  // bool is_motion_done = 4;
  void clear_is_motion_done();
  static const int kIsMotionDoneFieldNumber = 4;
  bool is_motion_done() const;
  void set_is_motion_done(bool value);

  // bool is_pausing = 5;
  void clear_is_pausing();
  static const int kIsPausingFieldNumber = 5;
  bool is_pausing() const;
  void set_is_pausing(bool value);

  // bool is_stopping = 6;
  void clear_is_stopping();
  static const int kIsStoppingFieldNumber = 6;
  bool is_stopping() const;
  void set_is_stopping(bool value);

  // bool has_motion = 7;
  void clear_has_motion();
  static const int kHasMotionFieldNumber = 7;
  bool has_motion() const;
  void set_has_motion(bool value);

  // int32 speed_ratio = 8;
  void clear_speed_ratio();
  static const int kSpeedRatioFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_ratio() const;
  void set_speed_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 motion_id = 9;
  void clear_motion_id();
  static const int kMotionIdFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::int32 motion_id() const;
  void set_motion_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float remain_distance = 10;
  void clear_remain_distance();
  static const int kRemainDistanceFieldNumber = 10;
  float remain_distance() const;
  void set_remain_distance(float value);

  // uint32 motion_queue_size = 11;
  void clear_motion_queue_size();
  static const int kMotionQueueSizeFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::uint32 motion_queue_size() const;
  void set_motion_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 cur_traj_progress = 12;
  void clear_cur_traj_progress();
  static const int kCurTrajProgressFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_traj_progress() const;
  void set_cur_traj_progress(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetMotionDataRes)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int traj_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 traj_progress_;
  bool is_in_motion_;
  bool is_motion_done_;
  bool is_pausing_;
  bool is_stopping_;
  bool has_motion_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 motion_id_;
  float remain_distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 motion_queue_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_traj_progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetEL5001Req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetEL5001Req) */ {
 public:
  GetEL5001Req();
  virtual ~GetEL5001Req();

  GetEL5001Req(const GetEL5001Req& from);
  GetEL5001Req(GetEL5001Req&& from) noexcept
    : GetEL5001Req() {
    *this = ::std::move(from);
  }

  inline GetEL5001Req& operator=(const GetEL5001Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEL5001Req& operator=(GetEL5001Req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEL5001Req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEL5001Req* internal_default_instance() {
    return reinterpret_cast<const GetEL5001Req*>(
               &_GetEL5001Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  void Swap(GetEL5001Req* other);
  friend void swap(GetEL5001Req& a, GetEL5001Req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEL5001Req* New() const final {
    return CreateMaybeMessage<GetEL5001Req>(nullptr);
  }

  GetEL5001Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEL5001Req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEL5001Req& from);
  void MergeFrom(const GetEL5001Req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEL5001Req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetEL5001Req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetEL5001Req)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetEL5001Res :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetEL5001Res) */ {
 public:
  GetEL5001Res();
  virtual ~GetEL5001Res();

  GetEL5001Res(const GetEL5001Res& from);
  GetEL5001Res(GetEL5001Res&& from) noexcept
    : GetEL5001Res() {
    *this = ::std::move(from);
  }

  inline GetEL5001Res& operator=(const GetEL5001Res& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEL5001Res& operator=(GetEL5001Res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEL5001Res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEL5001Res* internal_default_instance() {
    return reinterpret_cast<const GetEL5001Res*>(
               &_GetEL5001Res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  void Swap(GetEL5001Res* other);
  friend void swap(GetEL5001Res& a, GetEL5001Res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEL5001Res* New() const final {
    return CreateMaybeMessage<GetEL5001Res>(nullptr);
  }

  GetEL5001Res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEL5001Res>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEL5001Res& from);
  void MergeFrom(const GetEL5001Res& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEL5001Res* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetEL5001Res";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 delta = 3;
  void clear_delta();
  static const int kDeltaFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 delta() const;
  void set_delta(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float average = 5;
  void clear_average();
  static const int kAverageFieldNumber = 5;
  float average() const;
  void set_average(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetEL5001Res)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 delta_;
  float average_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetEL5101Req :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetEL5101Req) */ {
 public:
  GetEL5101Req();
  virtual ~GetEL5101Req();

  GetEL5101Req(const GetEL5101Req& from);
  GetEL5101Req(GetEL5101Req&& from) noexcept
    : GetEL5101Req() {
    *this = ::std::move(from);
  }

  inline GetEL5101Req& operator=(const GetEL5101Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEL5101Req& operator=(GetEL5101Req&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEL5101Req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEL5101Req* internal_default_instance() {
    return reinterpret_cast<const GetEL5101Req*>(
               &_GetEL5101Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  void Swap(GetEL5101Req* other);
  friend void swap(GetEL5101Req& a, GetEL5101Req& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEL5101Req* New() const final {
    return CreateMaybeMessage<GetEL5101Req>(nullptr);
  }

  GetEL5101Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEL5101Req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEL5101Req& from);
  void MergeFrom(const GetEL5101Req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEL5101Req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetEL5101Req";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetEL5101Req)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// -------------------------------------------------------------------

class GetEL5101Res :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IndyFramework.Protobuf.Control.GetEL5101Res) */ {
 public:
  GetEL5101Res();
  virtual ~GetEL5101Res();

  GetEL5101Res(const GetEL5101Res& from);
  GetEL5101Res(GetEL5101Res&& from) noexcept
    : GetEL5101Res() {
    *this = ::std::move(from);
  }

  inline GetEL5101Res& operator=(const GetEL5101Res& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEL5101Res& operator=(GetEL5101Res&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetEL5101Res& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetEL5101Res* internal_default_instance() {
    return reinterpret_cast<const GetEL5101Res*>(
               &_GetEL5101Res_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  void Swap(GetEL5101Res* other);
  friend void swap(GetEL5101Res& a, GetEL5101Res& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetEL5101Res* New() const final {
    return CreateMaybeMessage<GetEL5101Res>(nullptr);
  }

  GetEL5101Res* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetEL5101Res>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetEL5101Res& from);
  void MergeFrom(const GetEL5101Res& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEL5101Res* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IndyFramework.Protobuf.Control.GetEL5101Res";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_control_5fmsgs_2eproto);
    return ::descriptor_table_control_5fmsgs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 100;
  void clear_msg();
  static const int kMsgFieldNumber = 100;
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);

  // int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 latch = 3;
  void clear_latch();
  static const int kLatchFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 latch() const;
  void set_latch(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 delta = 4;
  void clear_delta();
  static const int kDeltaFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 delta() const;
  void set_delta(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float average = 5;
  void clear_average();
  static const int kAverageFieldNumber = 5;
  float average() const;
  void set_average(float value);

  // @@protoc_insertion_point(class_scope:IndyFramework.Protobuf.Control.GetEL5101Res)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 latch_;
  ::PROTOBUF_NAMESPACE_ID::int32 delta_;
  float average_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_control_5fmsgs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AMoveJReq

// repeated float jpos = 1;
inline int AMoveJReq::jpos_size() const {
  return jpos_.size();
}
inline void AMoveJReq::clear_jpos() {
  jpos_.Clear();
}
inline float AMoveJReq::jpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJReq.jpos)
  return jpos_.Get(index);
}
inline void AMoveJReq::set_jpos(int index, float value) {
  jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJReq.jpos)
}
inline void AMoveJReq::add_jpos(float value) {
  jpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AMoveJReq.jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AMoveJReq::jpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AMoveJReq.jpos)
  return jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AMoveJReq::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AMoveJReq.jpos)
  return &jpos_;
}

// .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
inline void AMoveJReq::clear_blending_type() {
  blending_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::BlendingType AMoveJReq::blending_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJReq.blending_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(blending_type_);
}
inline void AMoveJReq::set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value) {
  
  blending_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJReq.blending_type)
}

// .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
inline void AMoveJReq::clear_base_type() {
  base_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::JointBaseType AMoveJReq::base_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJReq.base_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::JointBaseType >(base_type_);
}
inline void AMoveJReq::set_base_type(::IndyFramework::Protobuf::Shared::JointBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJReq.base_type)
}

// float blending_radius = 5;
inline void AMoveJReq::clear_blending_radius() {
  blending_radius_ = 0;
}
inline float AMoveJReq::blending_radius() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJReq.blending_radius)
  return blending_radius_;
}
inline void AMoveJReq::set_blending_radius(float value) {
  
  blending_radius_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJReq.blending_radius)
}

// float vel = 7;
inline void AMoveJReq::clear_vel() {
  vel_ = 0;
}
inline float AMoveJReq::vel() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJReq.vel)
  return vel_;
}
inline void AMoveJReq::set_vel(float value) {
  
  vel_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJReq.vel)
}

// float acc = 8;
inline void AMoveJReq::clear_acc() {
  acc_ = 0;
}
inline float AMoveJReq::acc() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJReq.acc)
  return acc_;
}
inline void AMoveJReq::set_acc(float value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJReq.acc)
}

// -------------------------------------------------------------------

// AMoveJRes

// string msg = 100;
inline void AMoveJRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AMoveJRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJRes.msg)
  return msg_.GetNoArena();
}
inline void AMoveJRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJRes.msg)
}
inline void AMoveJRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.AMoveJRes.msg)
}
inline void AMoveJRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.AMoveJRes.msg)
}
inline void AMoveJRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.AMoveJRes.msg)
}
inline std::string* AMoveJRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AMoveJRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AMoveJRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.AMoveJRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AMoveJRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.AMoveJRes.msg)
}

// -------------------------------------------------------------------

// AMoveJTReq

// repeated float jpos = 1;
inline int AMoveJTReq::jpos_size() const {
  return jpos_.size();
}
inline void AMoveJTReq::clear_jpos() {
  jpos_.Clear();
}
inline float AMoveJTReq::jpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJTReq.jpos)
  return jpos_.Get(index);
}
inline void AMoveJTReq::set_jpos(int index, float value) {
  jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJTReq.jpos)
}
inline void AMoveJTReq::add_jpos(float value) {
  jpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AMoveJTReq.jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AMoveJTReq::jpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AMoveJTReq.jpos)
  return jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AMoveJTReq::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AMoveJTReq.jpos)
  return &jpos_;
}

// .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
inline void AMoveJTReq::clear_blending_type() {
  blending_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::BlendingType AMoveJTReq::blending_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJTReq.blending_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(blending_type_);
}
inline void AMoveJTReq::set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value) {
  
  blending_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJTReq.blending_type)
}

// .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
inline void AMoveJTReq::clear_base_type() {
  base_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::JointBaseType AMoveJTReq::base_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJTReq.base_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::JointBaseType >(base_type_);
}
inline void AMoveJTReq::set_base_type(::IndyFramework::Protobuf::Shared::JointBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJTReq.base_type)
}

// float blending_radius = 5;
inline void AMoveJTReq::clear_blending_radius() {
  blending_radius_ = 0;
}
inline float AMoveJTReq::blending_radius() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJTReq.blending_radius)
  return blending_radius_;
}
inline void AMoveJTReq::set_blending_radius(float value) {
  
  blending_radius_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJTReq.blending_radius)
}

// float time = 6;
inline void AMoveJTReq::clear_time() {
  time_ = 0;
}
inline float AMoveJTReq::time() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJTReq.time)
  return time_;
}
inline void AMoveJTReq::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJTReq.time)
}

// -------------------------------------------------------------------

// AMoveJTRes

// string msg = 100;
inline void AMoveJTRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AMoveJTRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveJTRes.msg)
  return msg_.GetNoArena();
}
inline void AMoveJTRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveJTRes.msg)
}
inline void AMoveJTRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.AMoveJTRes.msg)
}
inline void AMoveJTRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.AMoveJTRes.msg)
}
inline void AMoveJTRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.AMoveJTRes.msg)
}
inline std::string* AMoveJTRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AMoveJTRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AMoveJTRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.AMoveJTRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AMoveJTRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.AMoveJTRes.msg)
}

// -------------------------------------------------------------------

// AMoveLReq

// repeated float tpos = 1;
inline int AMoveLReq::tpos_size() const {
  return tpos_.size();
}
inline void AMoveLReq::clear_tpos() {
  tpos_.Clear();
}
inline float AMoveLReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLReq.tpos)
  return tpos_.Get(index);
}
inline void AMoveLReq::set_tpos(int index, float value) {
  tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLReq.tpos)
}
inline void AMoveLReq::add_tpos(float value) {
  tpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AMoveLReq.tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AMoveLReq::tpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AMoveLReq.tpos)
  return tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AMoveLReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AMoveLReq.tpos)
  return &tpos_;
}

// .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
inline void AMoveLReq::clear_blending_type() {
  blending_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::BlendingType AMoveLReq::blending_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLReq.blending_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(blending_type_);
}
inline void AMoveLReq::set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value) {
  
  blending_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLReq.blending_type)
}

// .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
inline void AMoveLReq::clear_base_type() {
  base_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::TaskBaseType AMoveLReq::base_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLReq.base_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(base_type_);
}
inline void AMoveLReq::set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLReq.base_type)
}

// float blending_radius = 5;
inline void AMoveLReq::clear_blending_radius() {
  blending_radius_ = 0;
}
inline float AMoveLReq::blending_radius() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLReq.blending_radius)
  return blending_radius_;
}
inline void AMoveLReq::set_blending_radius(float value) {
  
  blending_radius_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLReq.blending_radius)
}

// float vel = 6;
inline void AMoveLReq::clear_vel() {
  vel_ = 0;
}
inline float AMoveLReq::vel() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLReq.vel)
  return vel_;
}
inline void AMoveLReq::set_vel(float value) {
  
  vel_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLReq.vel)
}

// float acc = 7;
inline void AMoveLReq::clear_acc() {
  acc_ = 0;
}
inline float AMoveLReq::acc() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLReq.acc)
  return acc_;
}
inline void AMoveLReq::set_acc(float value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLReq.acc)
}

// -------------------------------------------------------------------

// AMoveLRes

// string msg = 100;
inline void AMoveLRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AMoveLRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLRes.msg)
  return msg_.GetNoArena();
}
inline void AMoveLRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLRes.msg)
}
inline void AMoveLRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.AMoveLRes.msg)
}
inline void AMoveLRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.AMoveLRes.msg)
}
inline void AMoveLRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.AMoveLRes.msg)
}
inline std::string* AMoveLRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AMoveLRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AMoveLRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.AMoveLRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AMoveLRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.AMoveLRes.msg)
}

// -------------------------------------------------------------------

// AMoveLTReq

// repeated float tpos = 1;
inline int AMoveLTReq::tpos_size() const {
  return tpos_.size();
}
inline void AMoveLTReq::clear_tpos() {
  tpos_.Clear();
}
inline float AMoveLTReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLTReq.tpos)
  return tpos_.Get(index);
}
inline void AMoveLTReq::set_tpos(int index, float value) {
  tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLTReq.tpos)
}
inline void AMoveLTReq::add_tpos(float value) {
  tpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AMoveLTReq.tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AMoveLTReq::tpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AMoveLTReq.tpos)
  return tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AMoveLTReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AMoveLTReq.tpos)
  return &tpos_;
}

// .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
inline void AMoveLTReq::clear_blending_type() {
  blending_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::BlendingType AMoveLTReq::blending_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLTReq.blending_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(blending_type_);
}
inline void AMoveLTReq::set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value) {
  
  blending_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLTReq.blending_type)
}

// .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
inline void AMoveLTReq::clear_base_type() {
  base_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::TaskBaseType AMoveLTReq::base_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLTReq.base_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(base_type_);
}
inline void AMoveLTReq::set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLTReq.base_type)
}

// float blending_radius = 5;
inline void AMoveLTReq::clear_blending_radius() {
  blending_radius_ = 0;
}
inline float AMoveLTReq::blending_radius() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLTReq.blending_radius)
  return blending_radius_;
}
inline void AMoveLTReq::set_blending_radius(float value) {
  
  blending_radius_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLTReq.blending_radius)
}

// float time = 6;
inline void AMoveLTReq::clear_time() {
  time_ = 0;
}
inline float AMoveLTReq::time() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLTReq.time)
  return time_;
}
inline void AMoveLTReq::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLTReq.time)
}

// -------------------------------------------------------------------

// AMoveLTRes

// string msg = 100;
inline void AMoveLTRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AMoveLTRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveLTRes.msg)
  return msg_.GetNoArena();
}
inline void AMoveLTRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveLTRes.msg)
}
inline void AMoveLTRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.AMoveLTRes.msg)
}
inline void AMoveLTRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.AMoveLTRes.msg)
}
inline void AMoveLTRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.AMoveLTRes.msg)
}
inline std::string* AMoveLTRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AMoveLTRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AMoveLTRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.AMoveLTRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AMoveLTRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.AMoveLTRes.msg)
}

// -------------------------------------------------------------------

// AMoveCReq

// repeated float tpos0 = 1;
inline int AMoveCReq::tpos0_size() const {
  return tpos0_.size();
}
inline void AMoveCReq::clear_tpos0() {
  tpos0_.Clear();
}
inline float AMoveCReq::tpos0(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCReq.tpos0)
  return tpos0_.Get(index);
}
inline void AMoveCReq::set_tpos0(int index, float value) {
  tpos0_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCReq.tpos0)
}
inline void AMoveCReq::add_tpos0(float value) {
  tpos0_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AMoveCReq.tpos0)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AMoveCReq::tpos0() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AMoveCReq.tpos0)
  return tpos0_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AMoveCReq::mutable_tpos0() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AMoveCReq.tpos0)
  return &tpos0_;
}

// repeated float tpos1 = 2;
inline int AMoveCReq::tpos1_size() const {
  return tpos1_.size();
}
inline void AMoveCReq::clear_tpos1() {
  tpos1_.Clear();
}
inline float AMoveCReq::tpos1(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCReq.tpos1)
  return tpos1_.Get(index);
}
inline void AMoveCReq::set_tpos1(int index, float value) {
  tpos1_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCReq.tpos1)
}
inline void AMoveCReq::add_tpos1(float value) {
  tpos1_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AMoveCReq.tpos1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AMoveCReq::tpos1() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AMoveCReq.tpos1)
  return tpos1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AMoveCReq::mutable_tpos1() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AMoveCReq.tpos1)
  return &tpos1_;
}

// .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
inline void AMoveCReq::clear_blending_type() {
  blending_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::BlendingType AMoveCReq::blending_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCReq.blending_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(blending_type_);
}
inline void AMoveCReq::set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value) {
  
  blending_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCReq.blending_type)
}

// .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
inline void AMoveCReq::clear_base_type() {
  base_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::TaskBaseType AMoveCReq::base_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCReq.base_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(base_type_);
}
inline void AMoveCReq::set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCReq.base_type)
}

// float blending_radius = 5;
inline void AMoveCReq::clear_blending_radius() {
  blending_radius_ = 0;
}
inline float AMoveCReq::blending_radius() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCReq.blending_radius)
  return blending_radius_;
}
inline void AMoveCReq::set_blending_radius(float value) {
  
  blending_radius_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCReq.blending_radius)
}

// float angle = 6;
inline void AMoveCReq::clear_angle() {
  angle_ = 0;
}
inline float AMoveCReq::angle() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCReq.angle)
  return angle_;
}
inline void AMoveCReq::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCReq.angle)
}

// .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
inline void AMoveCReq::clear_setting_type() {
  setting_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::CircularSettingType AMoveCReq::setting_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCReq.setting_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::CircularSettingType >(setting_type_);
}
inline void AMoveCReq::set_setting_type(::IndyFramework::Protobuf::Shared::CircularSettingType value) {
  
  setting_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCReq.setting_type)
}

// .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
inline void AMoveCReq::clear_move_type() {
  move_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::CircularMovingType AMoveCReq::move_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCReq.move_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::CircularMovingType >(move_type_);
}
inline void AMoveCReq::set_move_type(::IndyFramework::Protobuf::Shared::CircularMovingType value) {
  
  move_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCReq.move_type)
}

// float vel = 15;
inline void AMoveCReq::clear_vel() {
  vel_ = 0;
}
inline float AMoveCReq::vel() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCReq.vel)
  return vel_;
}
inline void AMoveCReq::set_vel(float value) {
  
  vel_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCReq.vel)
}

// float acc = 16;
inline void AMoveCReq::clear_acc() {
  acc_ = 0;
}
inline float AMoveCReq::acc() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCReq.acc)
  return acc_;
}
inline void AMoveCReq::set_acc(float value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCReq.acc)
}

// -------------------------------------------------------------------

// AMoveCRes

// string msg = 100;
inline void AMoveCRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AMoveCRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCRes.msg)
  return msg_.GetNoArena();
}
inline void AMoveCRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCRes.msg)
}
inline void AMoveCRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.AMoveCRes.msg)
}
inline void AMoveCRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.AMoveCRes.msg)
}
inline void AMoveCRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.AMoveCRes.msg)
}
inline std::string* AMoveCRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AMoveCRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AMoveCRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.AMoveCRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AMoveCRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.AMoveCRes.msg)
}

// -------------------------------------------------------------------

// AMoveCTReq

// repeated float tpos0 = 1;
inline int AMoveCTReq::tpos0_size() const {
  return tpos0_.size();
}
inline void AMoveCTReq::clear_tpos0() {
  tpos0_.Clear();
}
inline float AMoveCTReq::tpos0(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCTReq.tpos0)
  return tpos0_.Get(index);
}
inline void AMoveCTReq::set_tpos0(int index, float value) {
  tpos0_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCTReq.tpos0)
}
inline void AMoveCTReq::add_tpos0(float value) {
  tpos0_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AMoveCTReq.tpos0)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AMoveCTReq::tpos0() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AMoveCTReq.tpos0)
  return tpos0_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AMoveCTReq::mutable_tpos0() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AMoveCTReq.tpos0)
  return &tpos0_;
}

// repeated float tpos1 = 2;
inline int AMoveCTReq::tpos1_size() const {
  return tpos1_.size();
}
inline void AMoveCTReq::clear_tpos1() {
  tpos1_.Clear();
}
inline float AMoveCTReq::tpos1(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCTReq.tpos1)
  return tpos1_.Get(index);
}
inline void AMoveCTReq::set_tpos1(int index, float value) {
  tpos1_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCTReq.tpos1)
}
inline void AMoveCTReq::add_tpos1(float value) {
  tpos1_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AMoveCTReq.tpos1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AMoveCTReq::tpos1() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AMoveCTReq.tpos1)
  return tpos1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AMoveCTReq::mutable_tpos1() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AMoveCTReq.tpos1)
  return &tpos1_;
}

// .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
inline void AMoveCTReq::clear_blending_type() {
  blending_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::BlendingType AMoveCTReq::blending_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCTReq.blending_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(blending_type_);
}
inline void AMoveCTReq::set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value) {
  
  blending_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCTReq.blending_type)
}

// .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
inline void AMoveCTReq::clear_base_type() {
  base_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::TaskBaseType AMoveCTReq::base_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCTReq.base_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(base_type_);
}
inline void AMoveCTReq::set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCTReq.base_type)
}

// float blending_radius = 5;
inline void AMoveCTReq::clear_blending_radius() {
  blending_radius_ = 0;
}
inline float AMoveCTReq::blending_radius() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCTReq.blending_radius)
  return blending_radius_;
}
inline void AMoveCTReq::set_blending_radius(float value) {
  
  blending_radius_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCTReq.blending_radius)
}

// float angle = 6;
inline void AMoveCTReq::clear_angle() {
  angle_ = 0;
}
inline float AMoveCTReq::angle() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCTReq.angle)
  return angle_;
}
inline void AMoveCTReq::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCTReq.angle)
}

// .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
inline void AMoveCTReq::clear_setting_type() {
  setting_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::CircularSettingType AMoveCTReq::setting_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCTReq.setting_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::CircularSettingType >(setting_type_);
}
inline void AMoveCTReq::set_setting_type(::IndyFramework::Protobuf::Shared::CircularSettingType value) {
  
  setting_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCTReq.setting_type)
}

// .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
inline void AMoveCTReq::clear_move_type() {
  move_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::CircularMovingType AMoveCTReq::move_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCTReq.move_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::CircularMovingType >(move_type_);
}
inline void AMoveCTReq::set_move_type(::IndyFramework::Protobuf::Shared::CircularMovingType value) {
  
  move_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCTReq.move_type)
}

// float time = 21;
inline void AMoveCTReq::clear_time() {
  time_ = 0;
}
inline float AMoveCTReq::time() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCTReq.time)
  return time_;
}
inline void AMoveCTReq::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCTReq.time)
}

// -------------------------------------------------------------------

// AMoveCTRes

// string msg = 100;
inline void AMoveCTRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AMoveCTRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMoveCTRes.msg)
  return msg_.GetNoArena();
}
inline void AMoveCTRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMoveCTRes.msg)
}
inline void AMoveCTRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.AMoveCTRes.msg)
}
inline void AMoveCTRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.AMoveCTRes.msg)
}
inline void AMoveCTRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.AMoveCTRes.msg)
}
inline std::string* AMoveCTRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AMoveCTRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AMoveCTRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.AMoveCTRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AMoveCTRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.AMoveCTRes.msg)
}

// -------------------------------------------------------------------

// AWaitIOReq

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
inline int AWaitIOReq::di_list_size() const {
  return di_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitIOReq::mutable_di_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitIOReq.di_list)
  return di_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitIOReq::mutable_di_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitIOReq.di_list)
  return &di_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitIOReq::di_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitIOReq.di_list)
  return di_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitIOReq::add_di_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitIOReq.di_list)
  return di_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitIOReq::di_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitIOReq.di_list)
  return di_list_;
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 2;
inline int AWaitIOReq::do_list_size() const {
  return do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitIOReq::mutable_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitIOReq.do_list)
  return do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitIOReq::mutable_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitIOReq.do_list)
  return &do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitIOReq::do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitIOReq.do_list)
  return do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitIOReq::add_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitIOReq.do_list)
  return do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitIOReq::do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitIOReq.do_list)
  return do_list_;
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_di_list = 3;
inline int AWaitIOReq::end_di_list_size() const {
  return end_di_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitIOReq::mutable_end_di_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitIOReq.end_di_list)
  return end_di_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitIOReq::mutable_end_di_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitIOReq.end_di_list)
  return &end_di_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitIOReq::end_di_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitIOReq.end_di_list)
  return end_di_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitIOReq::add_end_di_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitIOReq.end_di_list)
  return end_di_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitIOReq::end_di_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitIOReq.end_di_list)
  return end_di_list_;
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_do_list = 4;
inline int AWaitIOReq::end_do_list_size() const {
  return end_do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitIOReq::mutable_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitIOReq.end_do_list)
  return end_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitIOReq::mutable_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitIOReq.end_do_list)
  return &end_do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitIOReq::end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitIOReq.end_do_list)
  return end_do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitIOReq::add_end_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitIOReq.end_do_list)
  return end_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitIOReq::end_do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitIOReq.end_do_list)
  return end_do_list_;
}

// int32 conjunction = 5;
inline void AWaitIOReq::clear_conjunction() {
  conjunction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AWaitIOReq::conjunction() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitIOReq.conjunction)
  return conjunction_;
}
inline void AWaitIOReq::set_conjunction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  conjunction_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AWaitIOReq.conjunction)
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 6;
inline int AWaitIOReq::set_do_list_size() const {
  return set_do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitIOReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitIOReq.set_do_list)
  return set_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitIOReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitIOReq.set_do_list)
  return &set_do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitIOReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitIOReq.set_do_list)
  return set_do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitIOReq::add_set_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitIOReq.set_do_list)
  return set_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitIOReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitIOReq.set_do_list)
  return set_do_list_;
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 7;
inline int AWaitIOReq::set_end_do_list_size() const {
  return set_end_do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitIOReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitIOReq.set_end_do_list)
  return set_end_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitIOReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitIOReq.set_end_do_list)
  return &set_end_do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitIOReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitIOReq.set_end_do_list)
  return set_end_do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitIOReq::add_set_end_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitIOReq.set_end_do_list)
  return set_end_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitIOReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitIOReq.set_end_do_list)
  return set_end_do_list_;
}

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 8;
inline int AWaitIOReq::set_ao_list_size() const {
  return set_ao_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitIOReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitIOReq.set_ao_list)
  return set_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
AWaitIOReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitIOReq.set_ao_list)
  return &set_ao_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& AWaitIOReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitIOReq.set_ao_list)
  return set_ao_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitIOReq::add_set_ao_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitIOReq.set_ao_list)
  return set_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
AWaitIOReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitIOReq.set_ao_list)
  return set_ao_list_;
}

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 9;
inline int AWaitIOReq::set_end_ao_list_size() const {
  return set_end_ao_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitIOReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitIOReq.set_end_ao_list)
  return set_end_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
AWaitIOReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitIOReq.set_end_ao_list)
  return &set_end_ao_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& AWaitIOReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitIOReq.set_end_ao_list)
  return set_end_ao_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitIOReq::add_set_end_ao_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitIOReq.set_end_ao_list)
  return set_end_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
AWaitIOReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitIOReq.set_end_ao_list)
  return set_end_ao_list_;
}

// -------------------------------------------------------------------

// AWaitIORes

// string msg = 100;
inline void AWaitIORes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AWaitIORes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitIORes.msg)
  return msg_.GetNoArena();
}
inline void AWaitIORes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AWaitIORes.msg)
}
inline void AWaitIORes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.AWaitIORes.msg)
}
inline void AWaitIORes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.AWaitIORes.msg)
}
inline void AWaitIORes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.AWaitIORes.msg)
}
inline std::string* AWaitIORes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitIORes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AWaitIORes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.AWaitIORes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AWaitIORes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.AWaitIORes.msg)
}

// -------------------------------------------------------------------

// AWaitTimeReq

// float time = 1;
inline void AWaitTimeReq::clear_time() {
  time_ = 0;
}
inline float AWaitTimeReq::time() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitTimeReq.time)
  return time_;
}
inline void AWaitTimeReq::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AWaitTimeReq.time)
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
inline int AWaitTimeReq::set_do_list_size() const {
  return set_do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitTimeReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitTimeReq.set_do_list)
  return set_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitTimeReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitTimeReq.set_do_list)
  return &set_do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitTimeReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitTimeReq.set_do_list)
  return set_do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitTimeReq::add_set_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitTimeReq.set_do_list)
  return set_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitTimeReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitTimeReq.set_do_list)
  return set_do_list_;
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
inline int AWaitTimeReq::set_end_do_list_size() const {
  return set_end_do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitTimeReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitTimeReq.set_end_do_list)
  return set_end_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitTimeReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitTimeReq.set_end_do_list)
  return &set_end_do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitTimeReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitTimeReq.set_end_do_list)
  return set_end_do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitTimeReq::add_set_end_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitTimeReq.set_end_do_list)
  return set_end_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitTimeReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitTimeReq.set_end_do_list)
  return set_end_do_list_;
}

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
inline int AWaitTimeReq::set_ao_list_size() const {
  return set_ao_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitTimeReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitTimeReq.set_ao_list)
  return set_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
AWaitTimeReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitTimeReq.set_ao_list)
  return &set_ao_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& AWaitTimeReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitTimeReq.set_ao_list)
  return set_ao_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitTimeReq::add_set_ao_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitTimeReq.set_ao_list)
  return set_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
AWaitTimeReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitTimeReq.set_ao_list)
  return set_ao_list_;
}

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
inline int AWaitTimeReq::set_end_ao_list_size() const {
  return set_end_ao_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitTimeReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitTimeReq.set_end_ao_list)
  return set_end_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
AWaitTimeReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitTimeReq.set_end_ao_list)
  return &set_end_ao_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& AWaitTimeReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitTimeReq.set_end_ao_list)
  return set_end_ao_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitTimeReq::add_set_end_ao_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitTimeReq.set_end_ao_list)
  return set_end_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
AWaitTimeReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitTimeReq.set_end_ao_list)
  return set_end_ao_list_;
}

// -------------------------------------------------------------------

// AWaitTimeRes

// string msg = 100;
inline void AWaitTimeRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AWaitTimeRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitTimeRes.msg)
  return msg_.GetNoArena();
}
inline void AWaitTimeRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AWaitTimeRes.msg)
}
inline void AWaitTimeRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.AWaitTimeRes.msg)
}
inline void AWaitTimeRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.AWaitTimeRes.msg)
}
inline void AWaitTimeRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.AWaitTimeRes.msg)
}
inline std::string* AWaitTimeRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitTimeRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AWaitTimeRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.AWaitTimeRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AWaitTimeRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.AWaitTimeRes.msg)
}

// -------------------------------------------------------------------

// AWaitProgressReq

// int32 progress = 1;
inline void AWaitProgressReq::clear_progress() {
  progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AWaitProgressReq::progress() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitProgressReq.progress)
  return progress_;
}
inline void AWaitProgressReq::set_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AWaitProgressReq.progress)
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
inline int AWaitProgressReq::set_do_list_size() const {
  return set_do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitProgressReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitProgressReq.set_do_list)
  return set_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitProgressReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitProgressReq.set_do_list)
  return &set_do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitProgressReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitProgressReq.set_do_list)
  return set_do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitProgressReq::add_set_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitProgressReq.set_do_list)
  return set_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitProgressReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitProgressReq.set_do_list)
  return set_do_list_;
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
inline int AWaitProgressReq::set_end_do_list_size() const {
  return set_end_do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitProgressReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitProgressReq.set_end_do_list)
  return set_end_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitProgressReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitProgressReq.set_end_do_list)
  return &set_end_do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitProgressReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitProgressReq.set_end_do_list)
  return set_end_do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitProgressReq::add_set_end_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitProgressReq.set_end_do_list)
  return set_end_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitProgressReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitProgressReq.set_end_do_list)
  return set_end_do_list_;
}

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
inline int AWaitProgressReq::set_ao_list_size() const {
  return set_ao_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitProgressReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitProgressReq.set_ao_list)
  return set_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
AWaitProgressReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitProgressReq.set_ao_list)
  return &set_ao_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& AWaitProgressReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitProgressReq.set_ao_list)
  return set_ao_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitProgressReq::add_set_ao_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitProgressReq.set_ao_list)
  return set_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
AWaitProgressReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitProgressReq.set_ao_list)
  return set_ao_list_;
}

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
inline int AWaitProgressReq::set_end_ao_list_size() const {
  return set_end_ao_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitProgressReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitProgressReq.set_end_ao_list)
  return set_end_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
AWaitProgressReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitProgressReq.set_end_ao_list)
  return &set_end_ao_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& AWaitProgressReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitProgressReq.set_end_ao_list)
  return set_end_ao_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitProgressReq::add_set_end_ao_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitProgressReq.set_end_ao_list)
  return set_end_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
AWaitProgressReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitProgressReq.set_end_ao_list)
  return set_end_ao_list_;
}

// -------------------------------------------------------------------

// AWaitProgressRes

// string msg = 100;
inline void AWaitProgressRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AWaitProgressRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitProgressRes.msg)
  return msg_.GetNoArena();
}
inline void AWaitProgressRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AWaitProgressRes.msg)
}
inline void AWaitProgressRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.AWaitProgressRes.msg)
}
inline void AWaitProgressRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.AWaitProgressRes.msg)
}
inline void AWaitProgressRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.AWaitProgressRes.msg)
}
inline std::string* AWaitProgressRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitProgressRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AWaitProgressRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.AWaitProgressRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AWaitProgressRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.AWaitProgressRes.msg)
}

// -------------------------------------------------------------------

// AWaitTrajReq

// .IndyFramework.Protobuf.Shared.TrajCondition traj_condition = 1;
inline void AWaitTrajReq::clear_traj_condition() {
  traj_condition_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::TrajCondition AWaitTrajReq::traj_condition() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitTrajReq.traj_condition)
  return static_cast< ::IndyFramework::Protobuf::Shared::TrajCondition >(traj_condition_);
}
inline void AWaitTrajReq::set_traj_condition(::IndyFramework::Protobuf::Shared::TrajCondition value) {
  
  traj_condition_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AWaitTrajReq.traj_condition)
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
inline int AWaitTrajReq::set_do_list_size() const {
  return set_do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitTrajReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitTrajReq.set_do_list)
  return set_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitTrajReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitTrajReq.set_do_list)
  return &set_do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitTrajReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitTrajReq.set_do_list)
  return set_do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitTrajReq::add_set_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitTrajReq.set_do_list)
  return set_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitTrajReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitTrajReq.set_do_list)
  return set_do_list_;
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
inline int AWaitTrajReq::set_end_do_list_size() const {
  return set_end_do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitTrajReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitTrajReq.set_end_do_list)
  return set_end_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitTrajReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitTrajReq.set_end_do_list)
  return &set_end_do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitTrajReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitTrajReq.set_end_do_list)
  return set_end_do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitTrajReq::add_set_end_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitTrajReq.set_end_do_list)
  return set_end_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitTrajReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitTrajReq.set_end_do_list)
  return set_end_do_list_;
}

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
inline int AWaitTrajReq::set_ao_list_size() const {
  return set_ao_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitTrajReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitTrajReq.set_ao_list)
  return set_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
AWaitTrajReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitTrajReq.set_ao_list)
  return &set_ao_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& AWaitTrajReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitTrajReq.set_ao_list)
  return set_ao_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitTrajReq::add_set_ao_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitTrajReq.set_ao_list)
  return set_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
AWaitTrajReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitTrajReq.set_ao_list)
  return set_ao_list_;
}

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
inline int AWaitTrajReq::set_end_ao_list_size() const {
  return set_end_ao_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitTrajReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitTrajReq.set_end_ao_list)
  return set_end_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
AWaitTrajReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitTrajReq.set_end_ao_list)
  return &set_end_ao_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& AWaitTrajReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitTrajReq.set_end_ao_list)
  return set_end_ao_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitTrajReq::add_set_end_ao_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitTrajReq.set_end_ao_list)
  return set_end_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
AWaitTrajReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitTrajReq.set_end_ao_list)
  return set_end_ao_list_;
}

// -------------------------------------------------------------------

// AWaitTrajRes

// string msg = 100;
inline void AWaitTrajRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AWaitTrajRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitTrajRes.msg)
  return msg_.GetNoArena();
}
inline void AWaitTrajRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AWaitTrajRes.msg)
}
inline void AWaitTrajRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.AWaitTrajRes.msg)
}
inline void AWaitTrajRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.AWaitTrajRes.msg)
}
inline void AWaitTrajRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.AWaitTrajRes.msg)
}
inline std::string* AWaitTrajRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitTrajRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AWaitTrajRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.AWaitTrajRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AWaitTrajRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.AWaitTrajRes.msg)
}

// -------------------------------------------------------------------

// AMotionStopReq

// -------------------------------------------------------------------

// AMotionStopRes

// string msg = 100;
inline void AMotionStopRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AMotionStopRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AMotionStopRes.msg)
  return msg_.GetNoArena();
}
inline void AMotionStopRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AMotionStopRes.msg)
}
inline void AMotionStopRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.AMotionStopRes.msg)
}
inline void AMotionStopRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.AMotionStopRes.msg)
}
inline void AMotionStopRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.AMotionStopRes.msg)
}
inline std::string* AMotionStopRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AMotionStopRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AMotionStopRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.AMotionStopRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AMotionStopRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.AMotionStopRes.msg)
}

// -------------------------------------------------------------------

// AWaitRadiusReq

// int32 radius = 1;
inline void AWaitRadiusReq::clear_radius() {
  radius_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AWaitRadiusReq::radius() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitRadiusReq.radius)
  return radius_;
}
inline void AWaitRadiusReq::set_radius(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AWaitRadiusReq.radius)
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
inline int AWaitRadiusReq::set_do_list_size() const {
  return set_do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitRadiusReq::mutable_set_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_do_list)
  return set_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitRadiusReq::mutable_set_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_do_list)
  return &set_do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitRadiusReq::set_do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_do_list)
  return set_do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitRadiusReq::add_set_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_do_list)
  return set_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitRadiusReq::set_do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_do_list)
  return set_do_list_;
}

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
inline int AWaitRadiusReq::set_end_do_list_size() const {
  return set_end_do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitRadiusReq::mutable_set_end_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_end_do_list)
  return set_end_do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
AWaitRadiusReq::mutable_set_end_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_end_do_list)
  return &set_end_do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& AWaitRadiusReq::set_end_do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_end_do_list)
  return set_end_do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* AWaitRadiusReq::add_set_end_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_end_do_list)
  return set_end_do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
AWaitRadiusReq::set_end_do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_end_do_list)
  return set_end_do_list_;
}

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
inline int AWaitRadiusReq::set_ao_list_size() const {
  return set_ao_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitRadiusReq::mutable_set_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_ao_list)
  return set_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
AWaitRadiusReq::mutable_set_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_ao_list)
  return &set_ao_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& AWaitRadiusReq::set_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_ao_list)
  return set_ao_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitRadiusReq::add_set_ao_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_ao_list)
  return set_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
AWaitRadiusReq::set_ao_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_ao_list)
  return set_ao_list_;
}

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
inline int AWaitRadiusReq::set_end_ao_list_size() const {
  return set_end_ao_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitRadiusReq::mutable_set_end_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_end_ao_list)
  return set_end_ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
AWaitRadiusReq::mutable_set_end_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_end_ao_list)
  return &set_end_ao_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& AWaitRadiusReq::set_end_ao_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_end_ao_list)
  return set_end_ao_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* AWaitRadiusReq::add_set_end_ao_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_end_ao_list)
  return set_end_ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
AWaitRadiusReq::set_end_ao_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.AWaitRadiusReq.set_end_ao_list)
  return set_end_ao_list_;
}

// -------------------------------------------------------------------

// AWaitRadiusRes

// string msg = 100;
inline void AWaitRadiusRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AWaitRadiusRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.AWaitRadiusRes.msg)
  return msg_.GetNoArena();
}
inline void AWaitRadiusRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.AWaitRadiusRes.msg)
}
inline void AWaitRadiusRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.AWaitRadiusRes.msg)
}
inline void AWaitRadiusRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.AWaitRadiusRes.msg)
}
inline void AWaitRadiusRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.AWaitRadiusRes.msg)
}
inline std::string* AWaitRadiusRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.AWaitRadiusRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AWaitRadiusRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.AWaitRadiusRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AWaitRadiusRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.AWaitRadiusRes.msg)
}

// -------------------------------------------------------------------

// MoveSJReq

// repeated .IndyFramework.Protobuf.Shared.MoveSJPoint points = 1;
inline int MoveSJReq::points_size() const {
  return points_.size();
}
inline ::IndyFramework::Protobuf::Shared::MoveSJPoint* MoveSJReq::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.MoveSJReq.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSJPoint >*
MoveSJReq::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.MoveSJReq.points)
  return &points_;
}
inline const ::IndyFramework::Protobuf::Shared::MoveSJPoint& MoveSJReq::points(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSJReq.points)
  return points_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::MoveSJPoint* MoveSJReq::add_points() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.MoveSJReq.points)
  return points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSJPoint >&
MoveSJReq::points() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.MoveSJReq.points)
  return points_;
}

// .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
inline void MoveSJReq::clear_blending_type() {
  blending_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::BlendingType MoveSJReq::blending_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSJReq.blending_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(blending_type_);
}
inline void MoveSJReq::set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value) {
  
  blending_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSJReq.blending_type)
}

// .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
inline void MoveSJReq::clear_base_type() {
  base_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::JointBaseType MoveSJReq::base_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSJReq.base_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::JointBaseType >(base_type_);
}
inline void MoveSJReq::set_base_type(::IndyFramework::Protobuf::Shared::JointBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSJReq.base_type)
}

// float blending_radius = 5;
inline void MoveSJReq::clear_blending_radius() {
  blending_radius_ = 0;
}
inline float MoveSJReq::blending_radius() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSJReq.blending_radius)
  return blending_radius_;
}
inline void MoveSJReq::set_blending_radius(float value) {
  
  blending_radius_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSJReq.blending_radius)
}

// float vel = 21;
inline void MoveSJReq::clear_vel() {
  vel_ = 0;
}
inline float MoveSJReq::vel() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSJReq.vel)
  return vel_;
}
inline void MoveSJReq::set_vel(float value) {
  
  vel_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSJReq.vel)
}

// float acc = 22;
inline void MoveSJReq::clear_acc() {
  acc_ = 0;
}
inline float MoveSJReq::acc() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSJReq.acc)
  return acc_;
}
inline void MoveSJReq::set_acc(float value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSJReq.acc)
}

// -------------------------------------------------------------------

// MoveSJRes

// string msg = 100;
inline void MoveSJRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveSJRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSJRes.msg)
  return msg_.GetNoArena();
}
inline void MoveSJRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSJRes.msg)
}
inline void MoveSJRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.MoveSJRes.msg)
}
inline void MoveSJRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.MoveSJRes.msg)
}
inline void MoveSJRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.MoveSJRes.msg)
}
inline std::string* MoveSJRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.MoveSJRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveSJRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.MoveSJRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveSJRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.MoveSJRes.msg)
}

// -------------------------------------------------------------------

// MoveSLReq

// repeated .IndyFramework.Protobuf.Shared.MoveSLPoint points = 1;
inline int MoveSLReq::points_size() const {
  return points_.size();
}
inline ::IndyFramework::Protobuf::Shared::MoveSLPoint* MoveSLReq::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.MoveSLReq.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSLPoint >*
MoveSLReq::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.MoveSLReq.points)
  return &points_;
}
inline const ::IndyFramework::Protobuf::Shared::MoveSLPoint& MoveSLReq::points(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLReq.points)
  return points_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::MoveSLPoint* MoveSLReq::add_points() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.MoveSLReq.points)
  return points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSLPoint >&
MoveSLReq::points() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.MoveSLReq.points)
  return points_;
}

// .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
inline void MoveSLReq::clear_blending_type() {
  blending_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::BlendingType MoveSLReq::blending_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLReq.blending_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(blending_type_);
}
inline void MoveSLReq::set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value) {
  
  blending_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSLReq.blending_type)
}

// .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
inline void MoveSLReq::clear_base_type() {
  base_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::TaskBaseType MoveSLReq::base_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLReq.base_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(base_type_);
}
inline void MoveSLReq::set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSLReq.base_type)
}

// float blending_radius = 5;
inline void MoveSLReq::clear_blending_radius() {
  blending_radius_ = 0;
}
inline float MoveSLReq::blending_radius() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLReq.blending_radius)
  return blending_radius_;
}
inline void MoveSLReq::set_blending_radius(float value) {
  
  blending_radius_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSLReq.blending_radius)
}

// float disp_vel = 21;
inline void MoveSLReq::clear_disp_vel() {
  disp_vel_ = 0;
}
inline float MoveSLReq::disp_vel() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLReq.disp_vel)
  return disp_vel_;
}
inline void MoveSLReq::set_disp_vel(float value) {
  
  disp_vel_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSLReq.disp_vel)
}

// float disp_acc = 22;
inline void MoveSLReq::clear_disp_acc() {
  disp_acc_ = 0;
}
inline float MoveSLReq::disp_acc() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLReq.disp_acc)
  return disp_acc_;
}
inline void MoveSLReq::set_disp_acc(float value) {
  
  disp_acc_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSLReq.disp_acc)
}

// float rot_vel = 23;
inline void MoveSLReq::clear_rot_vel() {
  rot_vel_ = 0;
}
inline float MoveSLReq::rot_vel() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLReq.rot_vel)
  return rot_vel_;
}
inline void MoveSLReq::set_rot_vel(float value) {
  
  rot_vel_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSLReq.rot_vel)
}

// float rot_acc = 24;
inline void MoveSLReq::clear_rot_acc() {
  rot_acc_ = 0;
}
inline float MoveSLReq::rot_acc() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLReq.rot_acc)
  return rot_acc_;
}
inline void MoveSLReq::set_rot_acc(float value) {
  
  rot_acc_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSLReq.rot_acc)
}

// -------------------------------------------------------------------

// MoveSLRes

// string msg = 100;
inline void MoveSLRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveSLRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLRes.msg)
  return msg_.GetNoArena();
}
inline void MoveSLRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSLRes.msg)
}
inline void MoveSLRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.MoveSLRes.msg)
}
inline void MoveSLRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.MoveSLRes.msg)
}
inline void MoveSLRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.MoveSLRes.msg)
}
inline std::string* MoveSLRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.MoveSLRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveSLRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.MoveSLRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveSLRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.MoveSLRes.msg)
}

// -------------------------------------------------------------------

// MoveSJTReq

// repeated .IndyFramework.Protobuf.Shared.MoveSJTPoint points = 1;
inline int MoveSJTReq::points_size() const {
  return points_.size();
}
inline ::IndyFramework::Protobuf::Shared::MoveSJTPoint* MoveSJTReq::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.MoveSJTReq.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSJTPoint >*
MoveSJTReq::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.MoveSJTReq.points)
  return &points_;
}
inline const ::IndyFramework::Protobuf::Shared::MoveSJTPoint& MoveSJTReq::points(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSJTReq.points)
  return points_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::MoveSJTPoint* MoveSJTReq::add_points() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.MoveSJTReq.points)
  return points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSJTPoint >&
MoveSJTReq::points() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.MoveSJTReq.points)
  return points_;
}

// .IndyFramework.Protobuf.Shared.JointBaseType base_type = 2;
inline void MoveSJTReq::clear_base_type() {
  base_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::JointBaseType MoveSJTReq::base_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSJTReq.base_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::JointBaseType >(base_type_);
}
inline void MoveSJTReq::set_base_type(::IndyFramework::Protobuf::Shared::JointBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSJTReq.base_type)
}

// -------------------------------------------------------------------

// MoveSJTRes

// string msg = 100;
inline void MoveSJTRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveSJTRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSJTRes.msg)
  return msg_.GetNoArena();
}
inline void MoveSJTRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSJTRes.msg)
}
inline void MoveSJTRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.MoveSJTRes.msg)
}
inline void MoveSJTRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.MoveSJTRes.msg)
}
inline void MoveSJTRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.MoveSJTRes.msg)
}
inline std::string* MoveSJTRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.MoveSJTRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveSJTRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.MoveSJTRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveSJTRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.MoveSJTRes.msg)
}

// -------------------------------------------------------------------

// MoveSLTReq

// repeated .IndyFramework.Protobuf.Shared.MoveSLTPoint points = 1;
inline int MoveSLTReq::points_size() const {
  return points_.size();
}
inline ::IndyFramework::Protobuf::Shared::MoveSLTPoint* MoveSLTReq::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.MoveSLTReq.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSLTPoint >*
MoveSLTReq::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.MoveSLTReq.points)
  return &points_;
}
inline const ::IndyFramework::Protobuf::Shared::MoveSLTPoint& MoveSLTReq::points(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLTReq.points)
  return points_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::MoveSLTPoint* MoveSLTReq::add_points() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.MoveSLTReq.points)
  return points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::MoveSLTPoint >&
MoveSLTReq::points() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.MoveSLTReq.points)
  return points_;
}

// .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
inline void MoveSLTReq::clear_blending_type() {
  blending_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::BlendingType MoveSLTReq::blending_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLTReq.blending_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(blending_type_);
}
inline void MoveSLTReq::set_blending_type(::IndyFramework::Protobuf::Shared::BlendingType value) {
  
  blending_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSLTReq.blending_type)
}

// .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
inline void MoveSLTReq::clear_base_type() {
  base_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::TaskBaseType MoveSLTReq::base_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLTReq.base_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(base_type_);
}
inline void MoveSLTReq::set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSLTReq.base_type)
}

// float blending_radius = 5;
inline void MoveSLTReq::clear_blending_radius() {
  blending_radius_ = 0;
}
inline float MoveSLTReq::blending_radius() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLTReq.blending_radius)
  return blending_radius_;
}
inline void MoveSLTReq::set_blending_radius(float value) {
  
  blending_radius_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSLTReq.blending_radius)
}

// -------------------------------------------------------------------

// MoveSLTRes

// string msg = 100;
inline void MoveSLTRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveSLTRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSLTRes.msg)
  return msg_.GetNoArena();
}
inline void MoveSLTRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSLTRes.msg)
}
inline void MoveSLTRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.MoveSLTRes.msg)
}
inline void MoveSLTRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.MoveSLTRes.msg)
}
inline void MoveSLTRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.MoveSLTRes.msg)
}
inline std::string* MoveSLTRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.MoveSLTRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveSLTRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.MoveSLTRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveSLTRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.MoveSLTRes.msg)
}

// -------------------------------------------------------------------

// MoveSpiralReq

// -------------------------------------------------------------------

// MoveSpiralRes

// string msg = 100;
inline void MoveSpiralRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MoveSpiralRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.MoveSpiralRes.msg)
  return msg_.GetNoArena();
}
inline void MoveSpiralRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.MoveSpiralRes.msg)
}
inline void MoveSpiralRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.MoveSpiralRes.msg)
}
inline void MoveSpiralRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.MoveSpiralRes.msg)
}
inline void MoveSpiralRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.MoveSpiralRes.msg)
}
inline std::string* MoveSpiralRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.MoveSpiralRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MoveSpiralRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.MoveSpiralRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MoveSpiralRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.MoveSpiralRes.msg)
}

// -------------------------------------------------------------------

// SetRefFrameReq

// repeated float ref_frame = 1;
inline int SetRefFrameReq::ref_frame_size() const {
  return ref_frame_.size();
}
inline void SetRefFrameReq::clear_ref_frame() {
  ref_frame_.Clear();
}
inline float SetRefFrameReq::ref_frame(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetRefFrameReq.ref_frame)
  return ref_frame_.Get(index);
}
inline void SetRefFrameReq::set_ref_frame(int index, float value) {
  ref_frame_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetRefFrameReq.ref_frame)
}
inline void SetRefFrameReq::add_ref_frame(float value) {
  ref_frame_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetRefFrameReq.ref_frame)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetRefFrameReq::ref_frame() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetRefFrameReq.ref_frame)
  return ref_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetRefFrameReq::mutable_ref_frame() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetRefFrameReq.ref_frame)
  return &ref_frame_;
}

// -------------------------------------------------------------------

// SetRefFrameRes

// string msg = 100;
inline void SetRefFrameRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetRefFrameRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetRefFrameRes.msg)
  return msg_.GetNoArena();
}
inline void SetRefFrameRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetRefFrameRes.msg)
}
inline void SetRefFrameRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetRefFrameRes.msg)
}
inline void SetRefFrameRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetRefFrameRes.msg)
}
inline void SetRefFrameRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetRefFrameRes.msg)
}
inline std::string* SetRefFrameRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetRefFrameRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetRefFrameRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetRefFrameRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetRefFrameRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetRefFrameRes.msg)
}

// -------------------------------------------------------------------

// SetRefFramePlanarReq

// repeated float tpos0 = 1;
inline int SetRefFramePlanarReq::tpos0_size() const {
  return tpos0_.size();
}
inline void SetRefFramePlanarReq::clear_tpos0() {
  tpos0_.Clear();
}
inline float SetRefFramePlanarReq::tpos0(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos0)
  return tpos0_.Get(index);
}
inline void SetRefFramePlanarReq::set_tpos0(int index, float value) {
  tpos0_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos0)
}
inline void SetRefFramePlanarReq::add_tpos0(float value) {
  tpos0_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos0)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetRefFramePlanarReq::tpos0() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos0)
  return tpos0_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetRefFramePlanarReq::mutable_tpos0() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos0)
  return &tpos0_;
}

// repeated float tpos1 = 2;
inline int SetRefFramePlanarReq::tpos1_size() const {
  return tpos1_.size();
}
inline void SetRefFramePlanarReq::clear_tpos1() {
  tpos1_.Clear();
}
inline float SetRefFramePlanarReq::tpos1(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos1)
  return tpos1_.Get(index);
}
inline void SetRefFramePlanarReq::set_tpos1(int index, float value) {
  tpos1_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos1)
}
inline void SetRefFramePlanarReq::add_tpos1(float value) {
  tpos1_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetRefFramePlanarReq::tpos1() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos1)
  return tpos1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetRefFramePlanarReq::mutable_tpos1() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos1)
  return &tpos1_;
}

// repeated float tpos2 = 3;
inline int SetRefFramePlanarReq::tpos2_size() const {
  return tpos2_.size();
}
inline void SetRefFramePlanarReq::clear_tpos2() {
  tpos2_.Clear();
}
inline float SetRefFramePlanarReq::tpos2(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos2)
  return tpos2_.Get(index);
}
inline void SetRefFramePlanarReq::set_tpos2(int index, float value) {
  tpos2_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos2)
}
inline void SetRefFramePlanarReq::add_tpos2(float value) {
  tpos2_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetRefFramePlanarReq::tpos2() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos2)
  return tpos2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetRefFramePlanarReq::mutable_tpos2() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetRefFramePlanarReq.tpos2)
  return &tpos2_;
}

// -------------------------------------------------------------------

// SetRefFramePlanarRes

// repeated float ref_frame = 1;
inline int SetRefFramePlanarRes::ref_frame_size() const {
  return ref_frame_.size();
}
inline void SetRefFramePlanarRes::clear_ref_frame() {
  ref_frame_.Clear();
}
inline float SetRefFramePlanarRes::ref_frame(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.ref_frame)
  return ref_frame_.Get(index);
}
inline void SetRefFramePlanarRes::set_ref_frame(int index, float value) {
  ref_frame_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.ref_frame)
}
inline void SetRefFramePlanarRes::add_ref_frame(float value) {
  ref_frame_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.ref_frame)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetRefFramePlanarRes::ref_frame() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.ref_frame)
  return ref_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetRefFramePlanarRes::mutable_ref_frame() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.ref_frame)
  return &ref_frame_;
}

// string msg = 100;
inline void SetRefFramePlanarRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetRefFramePlanarRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.msg)
  return msg_.GetNoArena();
}
inline void SetRefFramePlanarRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.msg)
}
inline void SetRefFramePlanarRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.msg)
}
inline void SetRefFramePlanarRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.msg)
}
inline void SetRefFramePlanarRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.msg)
}
inline std::string* SetRefFramePlanarRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetRefFramePlanarRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetRefFramePlanarRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetRefFramePlanarRes.msg)
}

// -------------------------------------------------------------------

// SetToolFrameReq

// repeated float tool_frame = 1;
inline int SetToolFrameReq::tool_frame_size() const {
  return tool_frame_.size();
}
inline void SetToolFrameReq::clear_tool_frame() {
  tool_frame_.Clear();
}
inline float SetToolFrameReq::tool_frame(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetToolFrameReq.tool_frame)
  return tool_frame_.Get(index);
}
inline void SetToolFrameReq::set_tool_frame(int index, float value) {
  tool_frame_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetToolFrameReq.tool_frame)
}
inline void SetToolFrameReq::add_tool_frame(float value) {
  tool_frame_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetToolFrameReq.tool_frame)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetToolFrameReq::tool_frame() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetToolFrameReq.tool_frame)
  return tool_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetToolFrameReq::mutable_tool_frame() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetToolFrameReq.tool_frame)
  return &tool_frame_;
}

// -------------------------------------------------------------------

// SetToolFrameRes

// string msg = 100;
inline void SetToolFrameRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetToolFrameRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetToolFrameRes.msg)
  return msg_.GetNoArena();
}
inline void SetToolFrameRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetToolFrameRes.msg)
}
inline void SetToolFrameRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetToolFrameRes.msg)
}
inline void SetToolFrameRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetToolFrameRes.msg)
}
inline void SetToolFrameRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetToolFrameRes.msg)
}
inline std::string* SetToolFrameRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetToolFrameRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetToolFrameRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetToolFrameRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetToolFrameRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetToolFrameRes.msg)
}

// -------------------------------------------------------------------

// SetSpeedRatioReq

// int32 ratio = 1;
inline void SetSpeedRatioReq::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetSpeedRatioReq::ratio() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSpeedRatioReq.ratio)
  return ratio_;
}
inline void SetSpeedRatioReq::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSpeedRatioReq.ratio)
}

// -------------------------------------------------------------------

// SetSpeedRatioRes

// string msg = 100;
inline void SetSpeedRatioRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetSpeedRatioRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSpeedRatioRes.msg)
  return msg_.GetNoArena();
}
inline void SetSpeedRatioRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSpeedRatioRes.msg)
}
inline void SetSpeedRatioRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetSpeedRatioRes.msg)
}
inline void SetSpeedRatioRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetSpeedRatioRes.msg)
}
inline void SetSpeedRatioRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetSpeedRatioRes.msg)
}
inline std::string* SetSpeedRatioRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetSpeedRatioRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetSpeedRatioRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetSpeedRatioRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetSpeedRatioRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetSpeedRatioRes.msg)
}

// -------------------------------------------------------------------

// SetCommandSpeedRatioReq

// int32 ratio = 1;
inline void SetCommandSpeedRatioReq::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetCommandSpeedRatioReq::ratio() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq.ratio)
  return ratio_;
}
inline void SetCommandSpeedRatioReq::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq.ratio)
}

// -------------------------------------------------------------------

// SetCommandSpeedRatioRes

// string msg = 100;
inline void SetCommandSpeedRatioRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetCommandSpeedRatioRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes.msg)
  return msg_.GetNoArena();
}
inline void SetCommandSpeedRatioRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes.msg)
}
inline void SetCommandSpeedRatioRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes.msg)
}
inline void SetCommandSpeedRatioRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes.msg)
}
inline void SetCommandSpeedRatioRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes.msg)
}
inline std::string* SetCommandSpeedRatioRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetCommandSpeedRatioRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetCommandSpeedRatioRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes.msg)
}

// -------------------------------------------------------------------

// StopReq

// .IndyFramework.Protobuf.Shared.StopCategory stop_category = 1;
inline void StopReq::clear_stop_category() {
  stop_category_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory StopReq::stop_category() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.StopReq.stop_category)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(stop_category_);
}
inline void StopReq::set_stop_category(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  stop_category_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.StopReq.stop_category)
}

// -------------------------------------------------------------------

// StopRes

// string msg = 100;
inline void StopRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StopRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.StopRes.msg)
  return msg_.GetNoArena();
}
inline void StopRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.StopRes.msg)
}
inline void StopRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.StopRes.msg)
}
inline void StopRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.StopRes.msg)
}
inline void StopRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.StopRes.msg)
}
inline std::string* StopRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.StopRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StopRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.StopRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StopRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.StopRes.msg)
}

// -------------------------------------------------------------------

// PauseReq

// .IndyFramework.Protobuf.Shared.PauseCategory pause_category = 1;
inline void PauseReq::clear_pause_category() {
  pause_category_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::PauseCategory PauseReq::pause_category() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.PauseReq.pause_category)
  return static_cast< ::IndyFramework::Protobuf::Shared::PauseCategory >(pause_category_);
}
inline void PauseReq::set_pause_category(::IndyFramework::Protobuf::Shared::PauseCategory value) {
  
  pause_category_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.PauseReq.pause_category)
}

// -------------------------------------------------------------------

// PauseRes

// string msg = 100;
inline void PauseRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PauseRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.PauseRes.msg)
  return msg_.GetNoArena();
}
inline void PauseRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.PauseRes.msg)
}
inline void PauseRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.PauseRes.msg)
}
inline void PauseRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.PauseRes.msg)
}
inline void PauseRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.PauseRes.msg)
}
inline std::string* PauseRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.PauseRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PauseRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.PauseRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PauseRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.PauseRes.msg)
}

// -------------------------------------------------------------------

// ResumeReq

// -------------------------------------------------------------------

// ResumeRes

// string msg = 100;
inline void ResumeRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResumeRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.ResumeRes.msg)
  return msg_.GetNoArena();
}
inline void ResumeRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.ResumeRes.msg)
}
inline void ResumeRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.ResumeRes.msg)
}
inline void ResumeRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.ResumeRes.msg)
}
inline void ResumeRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.ResumeRes.msg)
}
inline std::string* ResumeRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.ResumeRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResumeRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.ResumeRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResumeRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.ResumeRes.msg)
}

// -------------------------------------------------------------------

// RebootReq

// -------------------------------------------------------------------

// RebootRes

// string msg = 100;
inline void RebootRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RebootRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.RebootRes.msg)
  return msg_.GetNoArena();
}
inline void RebootRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.RebootRes.msg)
}
inline void RebootRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.RebootRes.msg)
}
inline void RebootRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.RebootRes.msg)
}
inline void RebootRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.RebootRes.msg)
}
inline std::string* RebootRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.RebootRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RebootRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.RebootRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RebootRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.RebootRes.msg)
}

// -------------------------------------------------------------------

// RecoverReq

// -------------------------------------------------------------------

// RecoverRes

// string msg = 100;
inline void RecoverRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RecoverRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.RecoverRes.msg)
  return msg_.GetNoArena();
}
inline void RecoverRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.RecoverRes.msg)
}
inline void RecoverRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.RecoverRes.msg)
}
inline void RecoverRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.RecoverRes.msg)
}
inline void RecoverRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.RecoverRes.msg)
}
inline std::string* RecoverRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.RecoverRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecoverRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.RecoverRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecoverRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.RecoverRes.msg)
}

// -------------------------------------------------------------------

// BrakeReq

// repeated bool on_list = 1;
inline int BrakeReq::on_list_size() const {
  return on_list_.size();
}
inline void BrakeReq::clear_on_list() {
  on_list_.Clear();
}
inline bool BrakeReq::on_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.BrakeReq.on_list)
  return on_list_.Get(index);
}
inline void BrakeReq::set_on_list(int index, bool value) {
  on_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.BrakeReq.on_list)
}
inline void BrakeReq::add_on_list(bool value) {
  on_list_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.BrakeReq.on_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BrakeReq::on_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.BrakeReq.on_list)
  return on_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BrakeReq::mutable_on_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.BrakeReq.on_list)
  return &on_list_;
}

// -------------------------------------------------------------------

// BrakeRes

// string msg = 100;
inline void BrakeRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BrakeRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.BrakeRes.msg)
  return msg_.GetNoArena();
}
inline void BrakeRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.BrakeRes.msg)
}
inline void BrakeRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.BrakeRes.msg)
}
inline void BrakeRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.BrakeRes.msg)
}
inline void BrakeRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.BrakeRes.msg)
}
inline std::string* BrakeRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.BrakeRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BrakeRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.BrakeRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BrakeRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.BrakeRes.msg)
}

// -------------------------------------------------------------------

// ServoReq

// bool on = 1;
inline void ServoReq::clear_on() {
  on_ = false;
}
inline bool ServoReq::on() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.ServoReq.on)
  return on_;
}
inline void ServoReq::set_on(bool value) {
  
  on_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.ServoReq.on)
}

// -------------------------------------------------------------------

// ServoRes

// string msg = 100;
inline void ServoRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServoRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.ServoRes.msg)
  return msg_.GetNoArena();
}
inline void ServoRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.ServoRes.msg)
}
inline void ServoRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.ServoRes.msg)
}
inline void ServoRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.ServoRes.msg)
}
inline void ServoRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.ServoRes.msg)
}
inline std::string* ServoRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.ServoRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServoRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.ServoRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServoRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.ServoRes.msg)
}

// -------------------------------------------------------------------

// SetAutoServoOffReq

// bool enable = 1;
inline void SetAutoServoOffReq::clear_enable() {
  enable_ = false;
}
inline bool SetAutoServoOffReq::enable() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetAutoServoOffReq.enable)
  return enable_;
}
inline void SetAutoServoOffReq::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetAutoServoOffReq.enable)
}

// float time = 2;
inline void SetAutoServoOffReq::clear_time() {
  time_ = 0;
}
inline float SetAutoServoOffReq::time() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetAutoServoOffReq.time)
  return time_;
}
inline void SetAutoServoOffReq::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetAutoServoOffReq.time)
}

// -------------------------------------------------------------------

// SetAutoServoOffRes

// string msg = 100;
inline void SetAutoServoOffRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetAutoServoOffRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetAutoServoOffRes.msg)
  return msg_.GetNoArena();
}
inline void SetAutoServoOffRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetAutoServoOffRes.msg)
}
inline void SetAutoServoOffRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetAutoServoOffRes.msg)
}
inline void SetAutoServoOffRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetAutoServoOffRes.msg)
}
inline void SetAutoServoOffRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetAutoServoOffRes.msg)
}
inline std::string* SetAutoServoOffRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetAutoServoOffRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAutoServoOffRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetAutoServoOffRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAutoServoOffRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetAutoServoOffRes.msg)
}

// -------------------------------------------------------------------

// GetAutoServoOffReq

// -------------------------------------------------------------------

// GetAutoServoOffRes

// bool enable = 1;
inline void GetAutoServoOffRes::clear_enable() {
  enable_ = false;
}
inline bool GetAutoServoOffRes::enable() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetAutoServoOffRes.enable)
  return enable_;
}
inline void GetAutoServoOffRes::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetAutoServoOffRes.enable)
}

// float time = 2;
inline void GetAutoServoOffRes::clear_time() {
  time_ = 0;
}
inline float GetAutoServoOffRes::time() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetAutoServoOffRes.time)
  return time_;
}
inline void GetAutoServoOffRes::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetAutoServoOffRes.time)
}

// string msg = 100;
inline void GetAutoServoOffRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAutoServoOffRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetAutoServoOffRes.msg)
  return msg_.GetNoArena();
}
inline void GetAutoServoOffRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetAutoServoOffRes.msg)
}
inline void GetAutoServoOffRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetAutoServoOffRes.msg)
}
inline void GetAutoServoOffRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetAutoServoOffRes.msg)
}
inline void GetAutoServoOffRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetAutoServoOffRes.msg)
}
inline std::string* GetAutoServoOffRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetAutoServoOffRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAutoServoOffRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetAutoServoOffRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAutoServoOffRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetAutoServoOffRes.msg)
}

// -------------------------------------------------------------------

// SimulationModeReq

// bool on = 1;
inline void SimulationModeReq::clear_on() {
  on_ = false;
}
inline bool SimulationModeReq::on() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SimulationModeReq.on)
  return on_;
}
inline void SimulationModeReq::set_on(bool value) {
  
  on_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SimulationModeReq.on)
}

// -------------------------------------------------------------------

// SimulationModeRes

// string msg = 100;
inline void SimulationModeRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SimulationModeRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SimulationModeRes.msg)
  return msg_.GetNoArena();
}
inline void SimulationModeRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SimulationModeRes.msg)
}
inline void SimulationModeRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SimulationModeRes.msg)
}
inline void SimulationModeRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SimulationModeRes.msg)
}
inline void SimulationModeRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SimulationModeRes.msg)
}
inline std::string* SimulationModeRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SimulationModeRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SimulationModeRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SimulationModeRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SimulationModeRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SimulationModeRes.msg)
}

// -------------------------------------------------------------------

// DirectTeachingModeReq

// bool on = 1;
inline void DirectTeachingModeReq::clear_on() {
  on_ = false;
}
inline bool DirectTeachingModeReq::on() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.DirectTeachingModeReq.on)
  return on_;
}
inline void DirectTeachingModeReq::set_on(bool value) {
  
  on_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.DirectTeachingModeReq.on)
}

// -------------------------------------------------------------------

// DirectTeachingModeRes

// string msg = 100;
inline void DirectTeachingModeRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DirectTeachingModeRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.DirectTeachingModeRes.msg)
  return msg_.GetNoArena();
}
inline void DirectTeachingModeRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.DirectTeachingModeRes.msg)
}
inline void DirectTeachingModeRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.DirectTeachingModeRes.msg)
}
inline void DirectTeachingModeRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.DirectTeachingModeRes.msg)
}
inline void DirectTeachingModeRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.DirectTeachingModeRes.msg)
}
inline std::string* DirectTeachingModeRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.DirectTeachingModeRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DirectTeachingModeRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.DirectTeachingModeRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DirectTeachingModeRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.DirectTeachingModeRes.msg)
}

// -------------------------------------------------------------------

// InverseKinematicsReq

// repeated float tpos = 1;
inline int InverseKinematicsReq::tpos_size() const {
  return tpos_.size();
}
inline void InverseKinematicsReq::clear_tpos() {
  tpos_.Clear();
}
inline float InverseKinematicsReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.InverseKinematicsReq.tpos)
  return tpos_.Get(index);
}
inline void InverseKinematicsReq::set_tpos(int index, float value) {
  tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.InverseKinematicsReq.tpos)
}
inline void InverseKinematicsReq::add_tpos(float value) {
  tpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.InverseKinematicsReq.tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
InverseKinematicsReq::tpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.InverseKinematicsReq.tpos)
  return tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
InverseKinematicsReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.InverseKinematicsReq.tpos)
  return &tpos_;
}

// repeated float init_jpos = 2;
inline int InverseKinematicsReq::init_jpos_size() const {
  return init_jpos_.size();
}
inline void InverseKinematicsReq::clear_init_jpos() {
  init_jpos_.Clear();
}
inline float InverseKinematicsReq::init_jpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.InverseKinematicsReq.init_jpos)
  return init_jpos_.Get(index);
}
inline void InverseKinematicsReq::set_init_jpos(int index, float value) {
  init_jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.InverseKinematicsReq.init_jpos)
}
inline void InverseKinematicsReq::add_init_jpos(float value) {
  init_jpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.InverseKinematicsReq.init_jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
InverseKinematicsReq::init_jpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.InverseKinematicsReq.init_jpos)
  return init_jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
InverseKinematicsReq::mutable_init_jpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.InverseKinematicsReq.init_jpos)
  return &init_jpos_;
}

// -------------------------------------------------------------------

// InverseKinematicsRes

// repeated float jpos = 1;
inline int InverseKinematicsRes::jpos_size() const {
  return jpos_.size();
}
inline void InverseKinematicsRes::clear_jpos() {
  jpos_.Clear();
}
inline float InverseKinematicsRes::jpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.InverseKinematicsRes.jpos)
  return jpos_.Get(index);
}
inline void InverseKinematicsRes::set_jpos(int index, float value) {
  jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.InverseKinematicsRes.jpos)
}
inline void InverseKinematicsRes::add_jpos(float value) {
  jpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.InverseKinematicsRes.jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
InverseKinematicsRes::jpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.InverseKinematicsRes.jpos)
  return jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
InverseKinematicsRes::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.InverseKinematicsRes.jpos)
  return &jpos_;
}

// string msg = 100;
inline void InverseKinematicsRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InverseKinematicsRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.InverseKinematicsRes.msg)
  return msg_.GetNoArena();
}
inline void InverseKinematicsRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.InverseKinematicsRes.msg)
}
inline void InverseKinematicsRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.InverseKinematicsRes.msg)
}
inline void InverseKinematicsRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.InverseKinematicsRes.msg)
}
inline void InverseKinematicsRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.InverseKinematicsRes.msg)
}
inline std::string* InverseKinematicsRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.InverseKinematicsRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InverseKinematicsRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.InverseKinematicsRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InverseKinematicsRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.InverseKinematicsRes.msg)
}

// -------------------------------------------------------------------

// CheckAproachRetractValidReq

// repeated float tpos = 1;
inline int CheckAproachRetractValidReq::tpos_size() const {
  return tpos_.size();
}
inline void CheckAproachRetractValidReq::clear_tpos() {
  tpos_.Clear();
}
inline float CheckAproachRetractValidReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.tpos)
  return tpos_.Get(index);
}
inline void CheckAproachRetractValidReq::set_tpos(int index, float value) {
  tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.tpos)
}
inline void CheckAproachRetractValidReq::add_tpos(float value) {
  tpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidReq::tpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.tpos)
  return tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.tpos)
  return &tpos_;
}

// repeated float init_jpos = 2;
inline int CheckAproachRetractValidReq::init_jpos_size() const {
  return init_jpos_.size();
}
inline void CheckAproachRetractValidReq::clear_init_jpos() {
  init_jpos_.Clear();
}
inline float CheckAproachRetractValidReq::init_jpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.init_jpos)
  return init_jpos_.Get(index);
}
inline void CheckAproachRetractValidReq::set_init_jpos(int index, float value) {
  init_jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.init_jpos)
}
inline void CheckAproachRetractValidReq::add_init_jpos(float value) {
  init_jpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.init_jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidReq::init_jpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.init_jpos)
  return init_jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidReq::mutable_init_jpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.init_jpos)
  return &init_jpos_;
}

// repeated float pre_tpos = 3;
inline int CheckAproachRetractValidReq::pre_tpos_size() const {
  return pre_tpos_.size();
}
inline void CheckAproachRetractValidReq::clear_pre_tpos() {
  pre_tpos_.Clear();
}
inline float CheckAproachRetractValidReq::pre_tpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.pre_tpos)
  return pre_tpos_.Get(index);
}
inline void CheckAproachRetractValidReq::set_pre_tpos(int index, float value) {
  pre_tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.pre_tpos)
}
inline void CheckAproachRetractValidReq::add_pre_tpos(float value) {
  pre_tpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.pre_tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidReq::pre_tpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.pre_tpos)
  return pre_tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidReq::mutable_pre_tpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.pre_tpos)
  return &pre_tpos_;
}

// repeated float post_tpos = 4;
inline int CheckAproachRetractValidReq::post_tpos_size() const {
  return post_tpos_.size();
}
inline void CheckAproachRetractValidReq::clear_post_tpos() {
  post_tpos_.Clear();
}
inline float CheckAproachRetractValidReq::post_tpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.post_tpos)
  return post_tpos_.Get(index);
}
inline void CheckAproachRetractValidReq::set_post_tpos(int index, float value) {
  post_tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.post_tpos)
}
inline void CheckAproachRetractValidReq::add_post_tpos(float value) {
  post_tpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.post_tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidReq::post_tpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.post_tpos)
  return post_tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidReq::mutable_post_tpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq.post_tpos)
  return &post_tpos_;
}

// -------------------------------------------------------------------

// CheckAproachRetractValidRes

// bool is_valid = 1;
inline void CheckAproachRetractValidRes::clear_is_valid() {
  is_valid_ = false;
}
inline bool CheckAproachRetractValidRes::is_valid() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.is_valid)
  return is_valid_;
}
inline void CheckAproachRetractValidRes::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.is_valid)
}

// repeated float tar_pos = 2;
inline int CheckAproachRetractValidRes::tar_pos_size() const {
  return tar_pos_.size();
}
inline void CheckAproachRetractValidRes::clear_tar_pos() {
  tar_pos_.Clear();
}
inline float CheckAproachRetractValidRes::tar_pos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.tar_pos)
  return tar_pos_.Get(index);
}
inline void CheckAproachRetractValidRes::set_tar_pos(int index, float value) {
  tar_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.tar_pos)
}
inline void CheckAproachRetractValidRes::add_tar_pos(float value) {
  tar_pos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.tar_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidRes::tar_pos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.tar_pos)
  return tar_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidRes::mutable_tar_pos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.tar_pos)
  return &tar_pos_;
}

// repeated float approach_pos = 3;
inline int CheckAproachRetractValidRes::approach_pos_size() const {
  return approach_pos_.size();
}
inline void CheckAproachRetractValidRes::clear_approach_pos() {
  approach_pos_.Clear();
}
inline float CheckAproachRetractValidRes::approach_pos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.approach_pos)
  return approach_pos_.Get(index);
}
inline void CheckAproachRetractValidRes::set_approach_pos(int index, float value) {
  approach_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.approach_pos)
}
inline void CheckAproachRetractValidRes::add_approach_pos(float value) {
  approach_pos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.approach_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidRes::approach_pos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.approach_pos)
  return approach_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidRes::mutable_approach_pos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.approach_pos)
  return &approach_pos_;
}

// repeated float retract_pos = 4;
inline int CheckAproachRetractValidRes::retract_pos_size() const {
  return retract_pos_.size();
}
inline void CheckAproachRetractValidRes::clear_retract_pos() {
  retract_pos_.Clear();
}
inline float CheckAproachRetractValidRes::retract_pos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.retract_pos)
  return retract_pos_.Get(index);
}
inline void CheckAproachRetractValidRes::set_retract_pos(int index, float value) {
  retract_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.retract_pos)
}
inline void CheckAproachRetractValidRes::add_retract_pos(float value) {
  retract_pos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.retract_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CheckAproachRetractValidRes::retract_pos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.retract_pos)
  return retract_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CheckAproachRetractValidRes::mutable_retract_pos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.retract_pos)
  return &retract_pos_;
}

// string msg = 100;
inline void CheckAproachRetractValidRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CheckAproachRetractValidRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.msg)
  return msg_.GetNoArena();
}
inline void CheckAproachRetractValidRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.msg)
}
inline void CheckAproachRetractValidRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.msg)
}
inline void CheckAproachRetractValidRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.msg)
}
inline void CheckAproachRetractValidRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.msg)
}
inline std::string* CheckAproachRetractValidRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CheckAproachRetractValidRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CheckAproachRetractValidRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.msg)
}

// -------------------------------------------------------------------

// GetPalletPointListReq

// repeated float tpos = 1;
inline int GetPalletPointListReq::tpos_size() const {
  return tpos_.size();
}
inline void GetPalletPointListReq::clear_tpos() {
  tpos_.Clear();
}
inline float GetPalletPointListReq::tpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetPalletPointListReq.tpos)
  return tpos_.Get(index);
}
inline void GetPalletPointListReq::set_tpos(int index, float value) {
  tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetPalletPointListReq.tpos)
}
inline void GetPalletPointListReq::add_tpos(float value) {
  tpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetPalletPointListReq.tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetPalletPointListReq::tpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetPalletPointListReq.tpos)
  return tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetPalletPointListReq::mutable_tpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetPalletPointListReq.tpos)
  return &tpos_;
}

// repeated float jpos = 2;
inline int GetPalletPointListReq::jpos_size() const {
  return jpos_.size();
}
inline void GetPalletPointListReq::clear_jpos() {
  jpos_.Clear();
}
inline float GetPalletPointListReq::jpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetPalletPointListReq.jpos)
  return jpos_.Get(index);
}
inline void GetPalletPointListReq::set_jpos(int index, float value) {
  jpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetPalletPointListReq.jpos)
}
inline void GetPalletPointListReq::add_jpos(float value) {
  jpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetPalletPointListReq.jpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetPalletPointListReq::jpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetPalletPointListReq.jpos)
  return jpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetPalletPointListReq::mutable_jpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetPalletPointListReq.jpos)
  return &jpos_;
}

// repeated float pre_tpos = 3;
inline int GetPalletPointListReq::pre_tpos_size() const {
  return pre_tpos_.size();
}
inline void GetPalletPointListReq::clear_pre_tpos() {
  pre_tpos_.Clear();
}
inline float GetPalletPointListReq::pre_tpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetPalletPointListReq.pre_tpos)
  return pre_tpos_.Get(index);
}
inline void GetPalletPointListReq::set_pre_tpos(int index, float value) {
  pre_tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetPalletPointListReq.pre_tpos)
}
inline void GetPalletPointListReq::add_pre_tpos(float value) {
  pre_tpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetPalletPointListReq.pre_tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetPalletPointListReq::pre_tpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetPalletPointListReq.pre_tpos)
  return pre_tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetPalletPointListReq::mutable_pre_tpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetPalletPointListReq.pre_tpos)
  return &pre_tpos_;
}

// repeated float post_tpos = 4;
inline int GetPalletPointListReq::post_tpos_size() const {
  return post_tpos_.size();
}
inline void GetPalletPointListReq::clear_post_tpos() {
  post_tpos_.Clear();
}
inline float GetPalletPointListReq::post_tpos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetPalletPointListReq.post_tpos)
  return post_tpos_.Get(index);
}
inline void GetPalletPointListReq::set_post_tpos(int index, float value) {
  post_tpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetPalletPointListReq.post_tpos)
}
inline void GetPalletPointListReq::add_post_tpos(float value) {
  post_tpos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetPalletPointListReq.post_tpos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetPalletPointListReq::post_tpos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetPalletPointListReq.post_tpos)
  return post_tpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetPalletPointListReq::mutable_post_tpos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetPalletPointListReq.post_tpos)
  return &post_tpos_;
}

// int32 pallet_pattern = 5;
inline void GetPalletPointListReq::clear_pallet_pattern() {
  pallet_pattern_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPalletPointListReq::pallet_pattern() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetPalletPointListReq.pallet_pattern)
  return pallet_pattern_;
}
inline void GetPalletPointListReq::set_pallet_pattern(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pallet_pattern_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetPalletPointListReq.pallet_pattern)
}

// int32 width = 6;
inline void GetPalletPointListReq::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPalletPointListReq::width() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetPalletPointListReq.width)
  return width_;
}
inline void GetPalletPointListReq::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetPalletPointListReq.width)
}

// int32 height = 7;
inline void GetPalletPointListReq::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPalletPointListReq::height() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetPalletPointListReq.height)
  return height_;
}
inline void GetPalletPointListReq::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetPalletPointListReq.height)
}

// -------------------------------------------------------------------

// GetPalletPointListRes

// repeated .IndyFramework.Protobuf.Shared.PalletPoint pallet_points = 1;
inline int GetPalletPointListRes::pallet_points_size() const {
  return pallet_points_.size();
}
inline ::IndyFramework::Protobuf::Shared::PalletPoint* GetPalletPointListRes::mutable_pallet_points(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetPalletPointListRes.pallet_points)
  return pallet_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::PalletPoint >*
GetPalletPointListRes::mutable_pallet_points() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetPalletPointListRes.pallet_points)
  return &pallet_points_;
}
inline const ::IndyFramework::Protobuf::Shared::PalletPoint& GetPalletPointListRes::pallet_points(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetPalletPointListRes.pallet_points)
  return pallet_points_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::PalletPoint* GetPalletPointListRes::add_pallet_points() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetPalletPointListRes.pallet_points)
  return pallet_points_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::PalletPoint >&
GetPalletPointListRes::pallet_points() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetPalletPointListRes.pallet_points)
  return pallet_points_;
}

// string msg = 100;
inline void GetPalletPointListRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetPalletPointListRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetPalletPointListRes.msg)
  return msg_.GetNoArena();
}
inline void GetPalletPointListRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetPalletPointListRes.msg)
}
inline void GetPalletPointListRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetPalletPointListRes.msg)
}
inline void GetPalletPointListRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetPalletPointListRes.msg)
}
inline void GetPalletPointListRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetPalletPointListRes.msg)
}
inline std::string* GetPalletPointListRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetPalletPointListRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetPalletPointListRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetPalletPointListRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetPalletPointListRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetPalletPointListRes.msg)
}

// -------------------------------------------------------------------

// CalculateRelativePoseReq

// repeated float start_pos = 1;
inline int CalculateRelativePoseReq::start_pos_size() const {
  return start_pos_.size();
}
inline void CalculateRelativePoseReq::clear_start_pos() {
  start_pos_.Clear();
}
inline float CalculateRelativePoseReq::start_pos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CalculateRelativePoseReq.start_pos)
  return start_pos_.Get(index);
}
inline void CalculateRelativePoseReq::set_start_pos(int index, float value) {
  start_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CalculateRelativePoseReq.start_pos)
}
inline void CalculateRelativePoseReq::add_start_pos(float value) {
  start_pos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CalculateRelativePoseReq.start_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateRelativePoseReq::start_pos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CalculateRelativePoseReq.start_pos)
  return start_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateRelativePoseReq::mutable_start_pos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CalculateRelativePoseReq.start_pos)
  return &start_pos_;
}

// repeated float end_pos = 2;
inline int CalculateRelativePoseReq::end_pos_size() const {
  return end_pos_.size();
}
inline void CalculateRelativePoseReq::clear_end_pos() {
  end_pos_.Clear();
}
inline float CalculateRelativePoseReq::end_pos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CalculateRelativePoseReq.end_pos)
  return end_pos_.Get(index);
}
inline void CalculateRelativePoseReq::set_end_pos(int index, float value) {
  end_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CalculateRelativePoseReq.end_pos)
}
inline void CalculateRelativePoseReq::add_end_pos(float value) {
  end_pos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CalculateRelativePoseReq.end_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateRelativePoseReq::end_pos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CalculateRelativePoseReq.end_pos)
  return end_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateRelativePoseReq::mutable_end_pos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CalculateRelativePoseReq.end_pos)
  return &end_pos_;
}

// .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
inline void CalculateRelativePoseReq::clear_base_type() {
  base_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::TaskBaseType CalculateRelativePoseReq::base_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CalculateRelativePoseReq.base_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(base_type_);
}
inline void CalculateRelativePoseReq::set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CalculateRelativePoseReq.base_type)
}

// -------------------------------------------------------------------

// CalculateRelativePoseRes

// repeated float relative_pos = 1;
inline int CalculateRelativePoseRes::relative_pos_size() const {
  return relative_pos_.size();
}
inline void CalculateRelativePoseRes::clear_relative_pos() {
  relative_pos_.Clear();
}
inline float CalculateRelativePoseRes::relative_pos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.relative_pos)
  return relative_pos_.Get(index);
}
inline void CalculateRelativePoseRes::set_relative_pos(int index, float value) {
  relative_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.relative_pos)
}
inline void CalculateRelativePoseRes::add_relative_pos(float value) {
  relative_pos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.relative_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateRelativePoseRes::relative_pos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.relative_pos)
  return relative_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateRelativePoseRes::mutable_relative_pos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.relative_pos)
  return &relative_pos_;
}

// string msg = 100;
inline void CalculateRelativePoseRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CalculateRelativePoseRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.msg)
  return msg_.GetNoArena();
}
inline void CalculateRelativePoseRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.msg)
}
inline void CalculateRelativePoseRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.msg)
}
inline void CalculateRelativePoseRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.msg)
}
inline void CalculateRelativePoseRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.msg)
}
inline std::string* CalculateRelativePoseRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CalculateRelativePoseRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CalculateRelativePoseRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.CalculateRelativePoseRes.msg)
}

// -------------------------------------------------------------------

// CalculateCurrentPoseRelReq

// repeated float current_pos = 1;
inline int CalculateCurrentPoseRelReq::current_pos_size() const {
  return current_pos_.size();
}
inline void CalculateCurrentPoseRelReq::clear_current_pos() {
  current_pos_.Clear();
}
inline float CalculateCurrentPoseRelReq::current_pos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq.current_pos)
  return current_pos_.Get(index);
}
inline void CalculateCurrentPoseRelReq::set_current_pos(int index, float value) {
  current_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq.current_pos)
}
inline void CalculateCurrentPoseRelReq::add_current_pos(float value) {
  current_pos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq.current_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateCurrentPoseRelReq::current_pos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq.current_pos)
  return current_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateCurrentPoseRelReq::mutable_current_pos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq.current_pos)
  return &current_pos_;
}

// repeated float relative_pos = 2;
inline int CalculateCurrentPoseRelReq::relative_pos_size() const {
  return relative_pos_.size();
}
inline void CalculateCurrentPoseRelReq::clear_relative_pos() {
  relative_pos_.Clear();
}
inline float CalculateCurrentPoseRelReq::relative_pos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq.relative_pos)
  return relative_pos_.Get(index);
}
inline void CalculateCurrentPoseRelReq::set_relative_pos(int index, float value) {
  relative_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq.relative_pos)
}
inline void CalculateCurrentPoseRelReq::add_relative_pos(float value) {
  relative_pos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq.relative_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateCurrentPoseRelReq::relative_pos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq.relative_pos)
  return relative_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateCurrentPoseRelReq::mutable_relative_pos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq.relative_pos)
  return &relative_pos_;
}

// .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
inline void CalculateCurrentPoseRelReq::clear_base_type() {
  base_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::TaskBaseType CalculateCurrentPoseRelReq::base_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq.base_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(base_type_);
}
inline void CalculateCurrentPoseRelReq::set_base_type(::IndyFramework::Protobuf::Shared::TaskBaseType value) {
  
  base_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq.base_type)
}

// -------------------------------------------------------------------

// CalculateCurrentPoseRelRes

// repeated float calculated_pos = 1;
inline int CalculateCurrentPoseRelRes::calculated_pos_size() const {
  return calculated_pos_.size();
}
inline void CalculateCurrentPoseRelRes::clear_calculated_pos() {
  calculated_pos_.Clear();
}
inline float CalculateCurrentPoseRelRes::calculated_pos(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.calculated_pos)
  return calculated_pos_.Get(index);
}
inline void CalculateCurrentPoseRelRes::set_calculated_pos(int index, float value) {
  calculated_pos_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.calculated_pos)
}
inline void CalculateCurrentPoseRelRes::add_calculated_pos(float value) {
  calculated_pos_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.calculated_pos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateCurrentPoseRelRes::calculated_pos() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.calculated_pos)
  return calculated_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateCurrentPoseRelRes::mutable_calculated_pos() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.calculated_pos)
  return &calculated_pos_;
}

// string msg = 100;
inline void CalculateCurrentPoseRelRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CalculateCurrentPoseRelRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.msg)
  return msg_.GetNoArena();
}
inline void CalculateCurrentPoseRelRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.msg)
}
inline void CalculateCurrentPoseRelRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.msg)
}
inline void CalculateCurrentPoseRelRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.msg)
}
inline void CalculateCurrentPoseRelRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.msg)
}
inline std::string* CalculateCurrentPoseRelRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CalculateCurrentPoseRelRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CalculateCurrentPoseRelRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.msg)
}

// -------------------------------------------------------------------

// SetDIReq

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
inline int SetDIReq::di_list_size() const {
  return di_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* SetDIReq::mutable_di_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetDIReq.di_list)
  return di_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
SetDIReq::mutable_di_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetDIReq.di_list)
  return &di_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& SetDIReq::di_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetDIReq.di_list)
  return di_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* SetDIReq::add_di_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetDIReq.di_list)
  return di_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
SetDIReq::di_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetDIReq.di_list)
  return di_list_;
}

// -------------------------------------------------------------------

// SetDIRes

// string msg = 100;
inline void SetDIRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetDIRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetDIRes.msg)
  return msg_.GetNoArena();
}
inline void SetDIRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetDIRes.msg)
}
inline void SetDIRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetDIRes.msg)
}
inline void SetDIRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetDIRes.msg)
}
inline void SetDIRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetDIRes.msg)
}
inline std::string* SetDIRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetDIRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetDIRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetDIRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetDIRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetDIRes.msg)
}

// -------------------------------------------------------------------

// GetDIReq

// -------------------------------------------------------------------

// GetDIRes

// repeated bool di = 1;
inline int GetDIRes::di_size() const {
  return di_.size();
}
inline void GetDIRes::clear_di() {
  di_.Clear();
}
inline bool GetDIRes::di(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetDIRes.di)
  return di_.Get(index);
}
inline void GetDIRes::set_di(int index, bool value) {
  di_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetDIRes.di)
}
inline void GetDIRes::add_di(bool value) {
  di_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetDIRes.di)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
GetDIRes::di() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetDIRes.di)
  return di_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
GetDIRes::mutable_di() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetDIRes.di)
  return &di_;
}

// string msg = 100;
inline void GetDIRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDIRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetDIRes.msg)
  return msg_.GetNoArena();
}
inline void GetDIRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetDIRes.msg)
}
inline void GetDIRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetDIRes.msg)
}
inline void GetDIRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetDIRes.msg)
}
inline void GetDIRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetDIRes.msg)
}
inline std::string* GetDIRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetDIRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDIRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetDIRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDIRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetDIRes.msg)
}

// -------------------------------------------------------------------

// SetDOReq

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
inline int SetDOReq::do_list_size() const {
  return do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* SetDOReq::mutable_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetDOReq.do_list)
  return do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
SetDOReq::mutable_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetDOReq.do_list)
  return &do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& SetDOReq::do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetDOReq.do_list)
  return do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* SetDOReq::add_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetDOReq.do_list)
  return do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
SetDOReq::do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetDOReq.do_list)
  return do_list_;
}

// -------------------------------------------------------------------

// SetDORes

// string msg = 100;
inline void SetDORes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetDORes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetDORes.msg)
  return msg_.GetNoArena();
}
inline void SetDORes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetDORes.msg)
}
inline void SetDORes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetDORes.msg)
}
inline void SetDORes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetDORes.msg)
}
inline void SetDORes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetDORes.msg)
}
inline std::string* SetDORes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetDORes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetDORes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetDORes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetDORes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetDORes.msg)
}

// -------------------------------------------------------------------

// GetDOReq

// -------------------------------------------------------------------

// GetDORes

// repeated bool do = 1;
inline int GetDORes::do__size() const {
  return do__.size();
}
inline void GetDORes::clear_do_() {
  do__.Clear();
}
inline bool GetDORes::do_(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetDORes.do)
  return do__.Get(index);
}
inline void GetDORes::set_do_(int index, bool value) {
  do__.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetDORes.do)
}
inline void GetDORes::add_do_(bool value) {
  do__.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetDORes.do)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
GetDORes::do_() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetDORes.do)
  return do__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
GetDORes::mutable_do_() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetDORes.do)
  return &do__;
}

// string msg = 100;
inline void GetDORes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetDORes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetDORes.msg)
  return msg_.GetNoArena();
}
inline void GetDORes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetDORes.msg)
}
inline void GetDORes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetDORes.msg)
}
inline void GetDORes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetDORes.msg)
}
inline void GetDORes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetDORes.msg)
}
inline std::string* GetDORes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetDORes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetDORes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetDORes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetDORes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetDORes.msg)
}

// -------------------------------------------------------------------

// SetAIReq

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
inline int SetAIReq::ai_list_size() const {
  return ai_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* SetAIReq::mutable_ai_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetAIReq.ai_list)
  return ai_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
SetAIReq::mutable_ai_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetAIReq.ai_list)
  return &ai_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& SetAIReq::ai_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetAIReq.ai_list)
  return ai_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* SetAIReq::add_ai_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetAIReq.ai_list)
  return ai_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
SetAIReq::ai_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetAIReq.ai_list)
  return ai_list_;
}

// -------------------------------------------------------------------

// SetAIRes

// string msg = 100;
inline void SetAIRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetAIRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetAIRes.msg)
  return msg_.GetNoArena();
}
inline void SetAIRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetAIRes.msg)
}
inline void SetAIRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetAIRes.msg)
}
inline void SetAIRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetAIRes.msg)
}
inline void SetAIRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetAIRes.msg)
}
inline std::string* SetAIRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetAIRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAIRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetAIRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAIRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetAIRes.msg)
}

// -------------------------------------------------------------------

// GetAIReq

// -------------------------------------------------------------------

// GetAIRes

// repeated int32 ai = 1;
inline int GetAIRes::ai_size() const {
  return ai_.size();
}
inline void GetAIRes::clear_ai() {
  ai_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAIRes::ai(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetAIRes.ai)
  return ai_.Get(index);
}
inline void GetAIRes::set_ai(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ai_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetAIRes.ai)
}
inline void GetAIRes::add_ai(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ai_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetAIRes.ai)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetAIRes::ai() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetAIRes.ai)
  return ai_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetAIRes::mutable_ai() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetAIRes.ai)
  return &ai_;
}

// string msg = 100;
inline void GetAIRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAIRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetAIRes.msg)
  return msg_.GetNoArena();
}
inline void GetAIRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetAIRes.msg)
}
inline void GetAIRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetAIRes.msg)
}
inline void GetAIRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetAIRes.msg)
}
inline void GetAIRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetAIRes.msg)
}
inline std::string* GetAIRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetAIRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAIRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetAIRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAIRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetAIRes.msg)
}

// -------------------------------------------------------------------

// GetAOReq

// -------------------------------------------------------------------

// GetAORes

// repeated int32 ao = 1;
inline int GetAORes::ao_size() const {
  return ao_.size();
}
inline void GetAORes::clear_ao() {
  ao_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAORes::ao(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetAORes.ao)
  return ao_.Get(index);
}
inline void GetAORes::set_ao(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ao_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetAORes.ao)
}
inline void GetAORes::add_ao(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ao_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetAORes.ao)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetAORes::ao() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetAORes.ao)
  return ao_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetAORes::mutable_ao() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetAORes.ao)
  return &ao_;
}

// string msg = 100;
inline void GetAORes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetAORes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetAORes.msg)
  return msg_.GetNoArena();
}
inline void GetAORes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetAORes.msg)
}
inline void GetAORes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetAORes.msg)
}
inline void GetAORes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetAORes.msg)
}
inline void GetAORes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetAORes.msg)
}
inline std::string* GetAORes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetAORes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetAORes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetAORes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetAORes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetAORes.msg)
}

// -------------------------------------------------------------------

// SetAOReq

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
inline int SetAOReq::ao_list_size() const {
  return ao_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* SetAOReq::mutable_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetAOReq.ao_list)
  return ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
SetAOReq::mutable_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetAOReq.ao_list)
  return &ao_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& SetAOReq::ao_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetAOReq.ao_list)
  return ao_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* SetAOReq::add_ao_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetAOReq.ao_list)
  return ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
SetAOReq::ao_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetAOReq.ao_list)
  return ao_list_;
}

// -------------------------------------------------------------------

// SetAORes

// string msg = 100;
inline void SetAORes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetAORes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetAORes.msg)
  return msg_.GetNoArena();
}
inline void SetAORes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetAORes.msg)
}
inline void SetAORes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetAORes.msg)
}
inline void SetAORes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetAORes.msg)
}
inline void SetAORes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetAORes.msg)
}
inline std::string* SetAORes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetAORes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAORes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetAORes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAORes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetAORes.msg)
}

// -------------------------------------------------------------------

// GetEndDIReq

// -------------------------------------------------------------------

// GetEndDIRes

// repeated bool di = 1;
inline int GetEndDIRes::di_size() const {
  return di_.size();
}
inline void GetEndDIRes::clear_di() {
  di_.Clear();
}
inline bool GetEndDIRes::di(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEndDIRes.di)
  return di_.Get(index);
}
inline void GetEndDIRes::set_di(int index, bool value) {
  di_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEndDIRes.di)
}
inline void GetEndDIRes::add_di(bool value) {
  di_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetEndDIRes.di)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
GetEndDIRes::di() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetEndDIRes.di)
  return di_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
GetEndDIRes::mutable_di() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetEndDIRes.di)
  return &di_;
}

// string msg = 100;
inline void GetEndDIRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetEndDIRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEndDIRes.msg)
  return msg_.GetNoArena();
}
inline void GetEndDIRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEndDIRes.msg)
}
inline void GetEndDIRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetEndDIRes.msg)
}
inline void GetEndDIRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetEndDIRes.msg)
}
inline void GetEndDIRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetEndDIRes.msg)
}
inline std::string* GetEndDIRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetEndDIRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetEndDIRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetEndDIRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetEndDIRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetEndDIRes.msg)
}

// -------------------------------------------------------------------

// SetEndDIReq

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
inline int SetEndDIReq::di_list_size() const {
  return di_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* SetEndDIReq::mutable_di_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetEndDIReq.di_list)
  return di_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
SetEndDIReq::mutable_di_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetEndDIReq.di_list)
  return &di_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& SetEndDIReq::di_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetEndDIReq.di_list)
  return di_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* SetEndDIReq::add_di_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetEndDIReq.di_list)
  return di_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
SetEndDIReq::di_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetEndDIReq.di_list)
  return di_list_;
}

// -------------------------------------------------------------------

// SetEndDIRes

// string msg = 100;
inline void SetEndDIRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetEndDIRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetEndDIRes.msg)
  return msg_.GetNoArena();
}
inline void SetEndDIRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetEndDIRes.msg)
}
inline void SetEndDIRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetEndDIRes.msg)
}
inline void SetEndDIRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetEndDIRes.msg)
}
inline void SetEndDIRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetEndDIRes.msg)
}
inline std::string* SetEndDIRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetEndDIRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetEndDIRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetEndDIRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetEndDIRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetEndDIRes.msg)
}

// -------------------------------------------------------------------

// GetEndDOReq

// -------------------------------------------------------------------

// GetEndDORes

// repeated bool do = 1;
inline int GetEndDORes::do__size() const {
  return do__.size();
}
inline void GetEndDORes::clear_do_() {
  do__.Clear();
}
inline bool GetEndDORes::do_(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEndDORes.do)
  return do__.Get(index);
}
inline void GetEndDORes::set_do_(int index, bool value) {
  do__.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEndDORes.do)
}
inline void GetEndDORes::add_do_(bool value) {
  do__.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetEndDORes.do)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
GetEndDORes::do_() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetEndDORes.do)
  return do__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
GetEndDORes::mutable_do_() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetEndDORes.do)
  return &do__;
}

// string msg = 100;
inline void GetEndDORes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetEndDORes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEndDORes.msg)
  return msg_.GetNoArena();
}
inline void GetEndDORes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEndDORes.msg)
}
inline void GetEndDORes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetEndDORes.msg)
}
inline void GetEndDORes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetEndDORes.msg)
}
inline void GetEndDORes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetEndDORes.msg)
}
inline std::string* GetEndDORes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetEndDORes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetEndDORes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetEndDORes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetEndDORes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetEndDORes.msg)
}

// -------------------------------------------------------------------

// SetEndDOReq

// repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
inline int SetEndDOReq::do_list_size() const {
  return do_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* SetEndDOReq::mutable_do_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetEndDOReq.do_list)
  return do_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >*
SetEndDOReq::mutable_do_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetEndDOReq.do_list)
  return &do_list_;
}
inline const ::IndyFramework::Protobuf::Shared::DigitalSignal& SetEndDOReq::do_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetEndDOReq.do_list)
  return do_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::DigitalSignal* SetEndDOReq::add_do_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetEndDOReq.do_list)
  return do_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::DigitalSignal >&
SetEndDOReq::do_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetEndDOReq.do_list)
  return do_list_;
}

// -------------------------------------------------------------------

// SetEndDORes

// string msg = 100;
inline void SetEndDORes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetEndDORes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetEndDORes.msg)
  return msg_.GetNoArena();
}
inline void SetEndDORes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetEndDORes.msg)
}
inline void SetEndDORes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetEndDORes.msg)
}
inline void SetEndDORes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetEndDORes.msg)
}
inline void SetEndDORes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetEndDORes.msg)
}
inline std::string* SetEndDORes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetEndDORes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetEndDORes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetEndDORes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetEndDORes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetEndDORes.msg)
}

// -------------------------------------------------------------------

// SetEndAIReq

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
inline int SetEndAIReq::ai_list_size() const {
  return ai_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* SetEndAIReq::mutable_ai_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetEndAIReq.ai_list)
  return ai_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
SetEndAIReq::mutable_ai_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetEndAIReq.ai_list)
  return &ai_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& SetEndAIReq::ai_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetEndAIReq.ai_list)
  return ai_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* SetEndAIReq::add_ai_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetEndAIReq.ai_list)
  return ai_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
SetEndAIReq::ai_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetEndAIReq.ai_list)
  return ai_list_;
}

// -------------------------------------------------------------------

// SetEndAIRes

// string msg = 100;
inline void SetEndAIRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetEndAIRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetEndAIRes.msg)
  return msg_.GetNoArena();
}
inline void SetEndAIRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetEndAIRes.msg)
}
inline void SetEndAIRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetEndAIRes.msg)
}
inline void SetEndAIRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetEndAIRes.msg)
}
inline void SetEndAIRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetEndAIRes.msg)
}
inline std::string* SetEndAIRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetEndAIRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetEndAIRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetEndAIRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetEndAIRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetEndAIRes.msg)
}

// -------------------------------------------------------------------

// GetEndAIReq

// -------------------------------------------------------------------

// GetEndAIRes

// repeated int32 ai = 1;
inline int GetEndAIRes::ai_size() const {
  return ai_.size();
}
inline void GetEndAIRes::clear_ai() {
  ai_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetEndAIRes::ai(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEndAIRes.ai)
  return ai_.Get(index);
}
inline void GetEndAIRes::set_ai(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ai_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEndAIRes.ai)
}
inline void GetEndAIRes::add_ai(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ai_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetEndAIRes.ai)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetEndAIRes::ai() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetEndAIRes.ai)
  return ai_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetEndAIRes::mutable_ai() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetEndAIRes.ai)
  return &ai_;
}

// string msg = 100;
inline void GetEndAIRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetEndAIRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEndAIRes.msg)
  return msg_.GetNoArena();
}
inline void GetEndAIRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEndAIRes.msg)
}
inline void GetEndAIRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetEndAIRes.msg)
}
inline void GetEndAIRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetEndAIRes.msg)
}
inline void GetEndAIRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetEndAIRes.msg)
}
inline std::string* GetEndAIRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetEndAIRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetEndAIRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetEndAIRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetEndAIRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetEndAIRes.msg)
}

// -------------------------------------------------------------------

// GetEndAOReq

// -------------------------------------------------------------------

// GetEndAORes

// repeated int32 ao = 1;
inline int GetEndAORes::ao_size() const {
  return ao_.size();
}
inline void GetEndAORes::clear_ao() {
  ao_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetEndAORes::ao(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEndAORes.ao)
  return ao_.Get(index);
}
inline void GetEndAORes::set_ao(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ao_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEndAORes.ao)
}
inline void GetEndAORes::add_ao(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ao_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetEndAORes.ao)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetEndAORes::ao() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetEndAORes.ao)
  return ao_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetEndAORes::mutable_ao() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetEndAORes.ao)
  return &ao_;
}

// string msg = 100;
inline void GetEndAORes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetEndAORes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEndAORes.msg)
  return msg_.GetNoArena();
}
inline void GetEndAORes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEndAORes.msg)
}
inline void GetEndAORes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetEndAORes.msg)
}
inline void GetEndAORes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetEndAORes.msg)
}
inline void GetEndAORes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetEndAORes.msg)
}
inline std::string* GetEndAORes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetEndAORes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetEndAORes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetEndAORes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetEndAORes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetEndAORes.msg)
}

// -------------------------------------------------------------------

// SetEndAOReq

// repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
inline int SetEndAOReq::ao_list_size() const {
  return ao_list_.size();
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* SetEndAOReq::mutable_ao_list(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetEndAOReq.ao_list)
  return ao_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >*
SetEndAOReq::mutable_ao_list() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetEndAOReq.ao_list)
  return &ao_list_;
}
inline const ::IndyFramework::Protobuf::Shared::AnalogSignal& SetEndAOReq::ao_list(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetEndAOReq.ao_list)
  return ao_list_.Get(index);
}
inline ::IndyFramework::Protobuf::Shared::AnalogSignal* SetEndAOReq::add_ao_list() {
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetEndAOReq.ao_list)
  return ao_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IndyFramework::Protobuf::Shared::AnalogSignal >&
SetEndAOReq::ao_list() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetEndAOReq.ao_list)
  return ao_list_;
}

// -------------------------------------------------------------------

// SetEndAORes

// string msg = 100;
inline void SetEndAORes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetEndAORes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetEndAORes.msg)
  return msg_.GetNoArena();
}
inline void SetEndAORes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetEndAORes.msg)
}
inline void SetEndAORes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetEndAORes.msg)
}
inline void SetEndAORes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetEndAORes.msg)
}
inline void SetEndAORes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetEndAORes.msg)
}
inline std::string* SetEndAORes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetEndAORes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetEndAORes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetEndAORes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetEndAORes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetEndAORes.msg)
}

// -------------------------------------------------------------------

// SetJointControlGainReq

// repeated float kp = 1;
inline int SetJointControlGainReq::kp_size() const {
  return kp_.size();
}
inline void SetJointControlGainReq::clear_kp() {
  kp_.Clear();
}
inline float SetJointControlGainReq::kp(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetJointControlGainReq.kp)
  return kp_.Get(index);
}
inline void SetJointControlGainReq::set_kp(int index, float value) {
  kp_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetJointControlGainReq.kp)
}
inline void SetJointControlGainReq::add_kp(float value) {
  kp_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetJointControlGainReq.kp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetJointControlGainReq::kp() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetJointControlGainReq.kp)
  return kp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetJointControlGainReq::mutable_kp() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetJointControlGainReq.kp)
  return &kp_;
}

// repeated float kv = 2;
inline int SetJointControlGainReq::kv_size() const {
  return kv_.size();
}
inline void SetJointControlGainReq::clear_kv() {
  kv_.Clear();
}
inline float SetJointControlGainReq::kv(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetJointControlGainReq.kv)
  return kv_.Get(index);
}
inline void SetJointControlGainReq::set_kv(int index, float value) {
  kv_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetJointControlGainReq.kv)
}
inline void SetJointControlGainReq::add_kv(float value) {
  kv_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetJointControlGainReq.kv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetJointControlGainReq::kv() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetJointControlGainReq.kv)
  return kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetJointControlGainReq::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetJointControlGainReq.kv)
  return &kv_;
}

// repeated float kl2 = 3;
inline int SetJointControlGainReq::kl2_size() const {
  return kl2_.size();
}
inline void SetJointControlGainReq::clear_kl2() {
  kl2_.Clear();
}
inline float SetJointControlGainReq::kl2(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetJointControlGainReq.kl2)
  return kl2_.Get(index);
}
inline void SetJointControlGainReq::set_kl2(int index, float value) {
  kl2_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetJointControlGainReq.kl2)
}
inline void SetJointControlGainReq::add_kl2(float value) {
  kl2_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetJointControlGainReq.kl2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetJointControlGainReq::kl2() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetJointControlGainReq.kl2)
  return kl2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetJointControlGainReq::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetJointControlGainReq.kl2)
  return &kl2_;
}

// -------------------------------------------------------------------

// SetJointControlGainRes

// string msg = 100;
inline void SetJointControlGainRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetJointControlGainRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetJointControlGainRes.msg)
  return msg_.GetNoArena();
}
inline void SetJointControlGainRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetJointControlGainRes.msg)
}
inline void SetJointControlGainRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetJointControlGainRes.msg)
}
inline void SetJointControlGainRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetJointControlGainRes.msg)
}
inline void SetJointControlGainRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetJointControlGainRes.msg)
}
inline std::string* SetJointControlGainRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetJointControlGainRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetJointControlGainRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetJointControlGainRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetJointControlGainRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetJointControlGainRes.msg)
}

// -------------------------------------------------------------------

// GetJointControlGainReq

// -------------------------------------------------------------------

// GetJointControlGainRes

// repeated float kp = 1;
inline int GetJointControlGainRes::kp_size() const {
  return kp_.size();
}
inline void GetJointControlGainRes::clear_kp() {
  kp_.Clear();
}
inline float GetJointControlGainRes::kp(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetJointControlGainRes.kp)
  return kp_.Get(index);
}
inline void GetJointControlGainRes::set_kp(int index, float value) {
  kp_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetJointControlGainRes.kp)
}
inline void GetJointControlGainRes::add_kp(float value) {
  kp_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetJointControlGainRes.kp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetJointControlGainRes::kp() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetJointControlGainRes.kp)
  return kp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetJointControlGainRes::mutable_kp() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetJointControlGainRes.kp)
  return &kp_;
}

// repeated float kv = 2;
inline int GetJointControlGainRes::kv_size() const {
  return kv_.size();
}
inline void GetJointControlGainRes::clear_kv() {
  kv_.Clear();
}
inline float GetJointControlGainRes::kv(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetJointControlGainRes.kv)
  return kv_.Get(index);
}
inline void GetJointControlGainRes::set_kv(int index, float value) {
  kv_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetJointControlGainRes.kv)
}
inline void GetJointControlGainRes::add_kv(float value) {
  kv_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetJointControlGainRes.kv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetJointControlGainRes::kv() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetJointControlGainRes.kv)
  return kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetJointControlGainRes::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetJointControlGainRes.kv)
  return &kv_;
}

// repeated float kl2 = 3;
inline int GetJointControlGainRes::kl2_size() const {
  return kl2_.size();
}
inline void GetJointControlGainRes::clear_kl2() {
  kl2_.Clear();
}
inline float GetJointControlGainRes::kl2(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetJointControlGainRes.kl2)
  return kl2_.Get(index);
}
inline void GetJointControlGainRes::set_kl2(int index, float value) {
  kl2_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetJointControlGainRes.kl2)
}
inline void GetJointControlGainRes::add_kl2(float value) {
  kl2_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetJointControlGainRes.kl2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetJointControlGainRes::kl2() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetJointControlGainRes.kl2)
  return kl2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetJointControlGainRes::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetJointControlGainRes.kl2)
  return &kl2_;
}

// string msg = 100;
inline void GetJointControlGainRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetJointControlGainRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetJointControlGainRes.msg)
  return msg_.GetNoArena();
}
inline void GetJointControlGainRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetJointControlGainRes.msg)
}
inline void GetJointControlGainRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetJointControlGainRes.msg)
}
inline void GetJointControlGainRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetJointControlGainRes.msg)
}
inline void GetJointControlGainRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetJointControlGainRes.msg)
}
inline std::string* GetJointControlGainRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetJointControlGainRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetJointControlGainRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetJointControlGainRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetJointControlGainRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetJointControlGainRes.msg)
}

// -------------------------------------------------------------------

// SetTaskControlGainReq

// repeated float kp = 1;
inline int SetTaskControlGainReq::kp_size() const {
  return kp_.size();
}
inline void SetTaskControlGainReq::clear_kp() {
  kp_.Clear();
}
inline float SetTaskControlGainReq::kp(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kp)
  return kp_.Get(index);
}
inline void SetTaskControlGainReq::set_kp(int index, float value) {
  kp_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kp)
}
inline void SetTaskControlGainReq::add_kp(float value) {
  kp_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetTaskControlGainReq::kp() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kp)
  return kp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetTaskControlGainReq::mutable_kp() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kp)
  return &kp_;
}

// repeated float kv = 2;
inline int SetTaskControlGainReq::kv_size() const {
  return kv_.size();
}
inline void SetTaskControlGainReq::clear_kv() {
  kv_.Clear();
}
inline float SetTaskControlGainReq::kv(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kv)
  return kv_.Get(index);
}
inline void SetTaskControlGainReq::set_kv(int index, float value) {
  kv_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kv)
}
inline void SetTaskControlGainReq::add_kv(float value) {
  kv_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetTaskControlGainReq::kv() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kv)
  return kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetTaskControlGainReq::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kv)
  return &kv_;
}

// repeated float kl2 = 3;
inline int SetTaskControlGainReq::kl2_size() const {
  return kl2_.size();
}
inline void SetTaskControlGainReq::clear_kl2() {
  kl2_.Clear();
}
inline float SetTaskControlGainReq::kl2(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kl2)
  return kl2_.Get(index);
}
inline void SetTaskControlGainReq::set_kl2(int index, float value) {
  kl2_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kl2)
}
inline void SetTaskControlGainReq::add_kl2(float value) {
  kl2_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kl2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetTaskControlGainReq::kl2() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kl2)
  return kl2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetTaskControlGainReq::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetTaskControlGainReq.kl2)
  return &kl2_;
}

// string msg = 100;
inline void SetTaskControlGainReq::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetTaskControlGainReq::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetTaskControlGainReq.msg)
  return msg_.GetNoArena();
}
inline void SetTaskControlGainReq::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetTaskControlGainReq.msg)
}
inline void SetTaskControlGainReq::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetTaskControlGainReq.msg)
}
inline void SetTaskControlGainReq::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetTaskControlGainReq.msg)
}
inline void SetTaskControlGainReq::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetTaskControlGainReq.msg)
}
inline std::string* SetTaskControlGainReq::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetTaskControlGainReq.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetTaskControlGainReq::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetTaskControlGainReq.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetTaskControlGainReq::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetTaskControlGainReq.msg)
}

// -------------------------------------------------------------------

// SetTaskControlGainRes

// string msg = 100;
inline void SetTaskControlGainRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetTaskControlGainRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetTaskControlGainRes.msg)
  return msg_.GetNoArena();
}
inline void SetTaskControlGainRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetTaskControlGainRes.msg)
}
inline void SetTaskControlGainRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetTaskControlGainRes.msg)
}
inline void SetTaskControlGainRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetTaskControlGainRes.msg)
}
inline void SetTaskControlGainRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetTaskControlGainRes.msg)
}
inline std::string* SetTaskControlGainRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetTaskControlGainRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetTaskControlGainRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetTaskControlGainRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetTaskControlGainRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetTaskControlGainRes.msg)
}

// -------------------------------------------------------------------

// GetTaskControlGainReq

// -------------------------------------------------------------------

// GetTaskControlGainRes

// repeated float kp = 1;
inline int GetTaskControlGainRes::kp_size() const {
  return kp_.size();
}
inline void GetTaskControlGainRes::clear_kp() {
  kp_.Clear();
}
inline float GetTaskControlGainRes::kp(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kp)
  return kp_.Get(index);
}
inline void GetTaskControlGainRes::set_kp(int index, float value) {
  kp_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kp)
}
inline void GetTaskControlGainRes::add_kp(float value) {
  kp_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetTaskControlGainRes::kp() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kp)
  return kp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetTaskControlGainRes::mutable_kp() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kp)
  return &kp_;
}

// repeated float kv = 2;
inline int GetTaskControlGainRes::kv_size() const {
  return kv_.size();
}
inline void GetTaskControlGainRes::clear_kv() {
  kv_.Clear();
}
inline float GetTaskControlGainRes::kv(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kv)
  return kv_.Get(index);
}
inline void GetTaskControlGainRes::set_kv(int index, float value) {
  kv_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kv)
}
inline void GetTaskControlGainRes::add_kv(float value) {
  kv_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetTaskControlGainRes::kv() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kv)
  return kv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetTaskControlGainRes::mutable_kv() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kv)
  return &kv_;
}

// repeated float kl2 = 3;
inline int GetTaskControlGainRes::kl2_size() const {
  return kl2_.size();
}
inline void GetTaskControlGainRes::clear_kl2() {
  kl2_.Clear();
}
inline float GetTaskControlGainRes::kl2(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kl2)
  return kl2_.Get(index);
}
inline void GetTaskControlGainRes::set_kl2(int index, float value) {
  kl2_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kl2)
}
inline void GetTaskControlGainRes::add_kl2(float value) {
  kl2_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kl2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetTaskControlGainRes::kl2() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kl2)
  return kl2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetTaskControlGainRes::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetTaskControlGainRes.kl2)
  return &kl2_;
}

// string msg = 100;
inline void GetTaskControlGainRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTaskControlGainRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetTaskControlGainRes.msg)
  return msg_.GetNoArena();
}
inline void GetTaskControlGainRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetTaskControlGainRes.msg)
}
inline void GetTaskControlGainRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetTaskControlGainRes.msg)
}
inline void GetTaskControlGainRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetTaskControlGainRes.msg)
}
inline void GetTaskControlGainRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetTaskControlGainRes.msg)
}
inline std::string* GetTaskControlGainRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetTaskControlGainRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTaskControlGainRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetTaskControlGainRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTaskControlGainRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetTaskControlGainRes.msg)
}

// -------------------------------------------------------------------

// SetImpedanceControlGainReq

// repeated float mass = 1;
inline int SetImpedanceControlGainReq::mass_size() const {
  return mass_.size();
}
inline void SetImpedanceControlGainReq::clear_mass() {
  mass_.Clear();
}
inline float SetImpedanceControlGainReq::mass(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.mass)
  return mass_.Get(index);
}
inline void SetImpedanceControlGainReq::set_mass(int index, float value) {
  mass_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.mass)
}
inline void SetImpedanceControlGainReq::add_mass(float value) {
  mass_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.mass)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetImpedanceControlGainReq::mass() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.mass)
  return mass_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetImpedanceControlGainReq::mutable_mass() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.mass)
  return &mass_;
}

// repeated float damping = 2;
inline int SetImpedanceControlGainReq::damping_size() const {
  return damping_.size();
}
inline void SetImpedanceControlGainReq::clear_damping() {
  damping_.Clear();
}
inline float SetImpedanceControlGainReq::damping(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.damping)
  return damping_.Get(index);
}
inline void SetImpedanceControlGainReq::set_damping(int index, float value) {
  damping_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.damping)
}
inline void SetImpedanceControlGainReq::add_damping(float value) {
  damping_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.damping)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetImpedanceControlGainReq::damping() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.damping)
  return damping_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetImpedanceControlGainReq::mutable_damping() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.damping)
  return &damping_;
}

// repeated float stiffness = 3;
inline int SetImpedanceControlGainReq::stiffness_size() const {
  return stiffness_.size();
}
inline void SetImpedanceControlGainReq::clear_stiffness() {
  stiffness_.Clear();
}
inline float SetImpedanceControlGainReq::stiffness(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.stiffness)
  return stiffness_.Get(index);
}
inline void SetImpedanceControlGainReq::set_stiffness(int index, float value) {
  stiffness_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.stiffness)
}
inline void SetImpedanceControlGainReq::add_stiffness(float value) {
  stiffness_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.stiffness)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetImpedanceControlGainReq::stiffness() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.stiffness)
  return stiffness_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetImpedanceControlGainReq::mutable_stiffness() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.stiffness)
  return &stiffness_;
}

// repeated float kl2 = 4;
inline int SetImpedanceControlGainReq::kl2_size() const {
  return kl2_.size();
}
inline void SetImpedanceControlGainReq::clear_kl2() {
  kl2_.Clear();
}
inline float SetImpedanceControlGainReq::kl2(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.kl2)
  return kl2_.Get(index);
}
inline void SetImpedanceControlGainReq::set_kl2(int index, float value) {
  kl2_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.kl2)
}
inline void SetImpedanceControlGainReq::add_kl2(float value) {
  kl2_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.kl2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetImpedanceControlGainReq::kl2() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.kl2)
  return kl2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetImpedanceControlGainReq::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.kl2)
  return &kl2_;
}

// string msg = 100;
inline void SetImpedanceControlGainReq::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetImpedanceControlGainReq::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.msg)
  return msg_.GetNoArena();
}
inline void SetImpedanceControlGainReq::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.msg)
}
inline void SetImpedanceControlGainReq::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.msg)
}
inline void SetImpedanceControlGainReq::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.msg)
}
inline void SetImpedanceControlGainReq::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.msg)
}
inline std::string* SetImpedanceControlGainReq::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetImpedanceControlGainReq::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetImpedanceControlGainReq::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.msg)
}

// -------------------------------------------------------------------

// SetImpedanceControlGainRes

// string msg = 100;
inline void SetImpedanceControlGainRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetImpedanceControlGainRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes.msg)
  return msg_.GetNoArena();
}
inline void SetImpedanceControlGainRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes.msg)
}
inline void SetImpedanceControlGainRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes.msg)
}
inline void SetImpedanceControlGainRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes.msg)
}
inline void SetImpedanceControlGainRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes.msg)
}
inline std::string* SetImpedanceControlGainRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetImpedanceControlGainRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetImpedanceControlGainRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes.msg)
}

// -------------------------------------------------------------------

// GetImpedanceControlGainReq

// -------------------------------------------------------------------

// GetImpedanceControlGainRes

// repeated float mass = 1;
inline int GetImpedanceControlGainRes::mass_size() const {
  return mass_.size();
}
inline void GetImpedanceControlGainRes::clear_mass() {
  mass_.Clear();
}
inline float GetImpedanceControlGainRes::mass(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.mass)
  return mass_.Get(index);
}
inline void GetImpedanceControlGainRes::set_mass(int index, float value) {
  mass_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.mass)
}
inline void GetImpedanceControlGainRes::add_mass(float value) {
  mass_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.mass)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetImpedanceControlGainRes::mass() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.mass)
  return mass_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetImpedanceControlGainRes::mutable_mass() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.mass)
  return &mass_;
}

// repeated float damping = 2;
inline int GetImpedanceControlGainRes::damping_size() const {
  return damping_.size();
}
inline void GetImpedanceControlGainRes::clear_damping() {
  damping_.Clear();
}
inline float GetImpedanceControlGainRes::damping(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.damping)
  return damping_.Get(index);
}
inline void GetImpedanceControlGainRes::set_damping(int index, float value) {
  damping_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.damping)
}
inline void GetImpedanceControlGainRes::add_damping(float value) {
  damping_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.damping)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetImpedanceControlGainRes::damping() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.damping)
  return damping_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetImpedanceControlGainRes::mutable_damping() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.damping)
  return &damping_;
}

// repeated float stiffness = 3;
inline int GetImpedanceControlGainRes::stiffness_size() const {
  return stiffness_.size();
}
inline void GetImpedanceControlGainRes::clear_stiffness() {
  stiffness_.Clear();
}
inline float GetImpedanceControlGainRes::stiffness(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.stiffness)
  return stiffness_.Get(index);
}
inline void GetImpedanceControlGainRes::set_stiffness(int index, float value) {
  stiffness_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.stiffness)
}
inline void GetImpedanceControlGainRes::add_stiffness(float value) {
  stiffness_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.stiffness)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetImpedanceControlGainRes::stiffness() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.stiffness)
  return stiffness_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetImpedanceControlGainRes::mutable_stiffness() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.stiffness)
  return &stiffness_;
}

// repeated float kl2 = 4;
inline int GetImpedanceControlGainRes::kl2_size() const {
  return kl2_.size();
}
inline void GetImpedanceControlGainRes::clear_kl2() {
  kl2_.Clear();
}
inline float GetImpedanceControlGainRes::kl2(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.kl2)
  return kl2_.Get(index);
}
inline void GetImpedanceControlGainRes::set_kl2(int index, float value) {
  kl2_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.kl2)
}
inline void GetImpedanceControlGainRes::add_kl2(float value) {
  kl2_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.kl2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetImpedanceControlGainRes::kl2() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.kl2)
  return kl2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetImpedanceControlGainRes::mutable_kl2() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.kl2)
  return &kl2_;
}

// string msg = 100;
inline void GetImpedanceControlGainRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetImpedanceControlGainRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.msg)
  return msg_.GetNoArena();
}
inline void GetImpedanceControlGainRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.msg)
}
inline void GetImpedanceControlGainRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.msg)
}
inline void GetImpedanceControlGainRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.msg)
}
inline void GetImpedanceControlGainRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.msg)
}
inline std::string* GetImpedanceControlGainRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetImpedanceControlGainRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetImpedanceControlGainRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.msg)
}

// -------------------------------------------------------------------

// SetFricCompReq

// bool control_comp = 1;
inline void SetFricCompReq::clear_control_comp() {
  control_comp_ = false;
}
inline bool SetFricCompReq::control_comp() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetFricCompReq.control_comp)
  return control_comp_;
}
inline void SetFricCompReq::set_control_comp(bool value) {
  
  control_comp_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetFricCompReq.control_comp)
}

// repeated int32 control_comp_levels = 2;
inline int SetFricCompReq::control_comp_levels_size() const {
  return control_comp_levels_.size();
}
inline void SetFricCompReq::clear_control_comp_levels() {
  control_comp_levels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetFricCompReq::control_comp_levels(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetFricCompReq.control_comp_levels)
  return control_comp_levels_.Get(index);
}
inline void SetFricCompReq::set_control_comp_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  control_comp_levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetFricCompReq.control_comp_levels)
}
inline void SetFricCompReq::add_control_comp_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  control_comp_levels_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetFricCompReq.control_comp_levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SetFricCompReq::control_comp_levels() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetFricCompReq.control_comp_levels)
  return control_comp_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SetFricCompReq::mutable_control_comp_levels() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetFricCompReq.control_comp_levels)
  return &control_comp_levels_;
}

// bool dt_comp = 5;
inline void SetFricCompReq::clear_dt_comp() {
  dt_comp_ = false;
}
inline bool SetFricCompReq::dt_comp() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetFricCompReq.dt_comp)
  return dt_comp_;
}
inline void SetFricCompReq::set_dt_comp(bool value) {
  
  dt_comp_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetFricCompReq.dt_comp)
}

// repeated int32 dt_comp_levels = 6;
inline int SetFricCompReq::dt_comp_levels_size() const {
  return dt_comp_levels_.size();
}
inline void SetFricCompReq::clear_dt_comp_levels() {
  dt_comp_levels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetFricCompReq::dt_comp_levels(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetFricCompReq.dt_comp_levels)
  return dt_comp_levels_.Get(index);
}
inline void SetFricCompReq::set_dt_comp_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dt_comp_levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetFricCompReq.dt_comp_levels)
}
inline void SetFricCompReq::add_dt_comp_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dt_comp_levels_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetFricCompReq.dt_comp_levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SetFricCompReq::dt_comp_levels() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetFricCompReq.dt_comp_levels)
  return dt_comp_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SetFricCompReq::mutable_dt_comp_levels() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetFricCompReq.dt_comp_levels)
  return &dt_comp_levels_;
}

// int32 id_joint = 10;
inline void SetFricCompReq::clear_id_joint() {
  id_joint_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetFricCompReq::id_joint() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetFricCompReq.id_joint)
  return id_joint_;
}
inline void SetFricCompReq::set_id_joint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_joint_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetFricCompReq.id_joint)
}

// -------------------------------------------------------------------

// SetFricCompRes

// string msg = 100;
inline void SetFricCompRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetFricCompRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetFricCompRes.msg)
  return msg_.GetNoArena();
}
inline void SetFricCompRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetFricCompRes.msg)
}
inline void SetFricCompRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetFricCompRes.msg)
}
inline void SetFricCompRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetFricCompRes.msg)
}
inline void SetFricCompRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetFricCompRes.msg)
}
inline std::string* SetFricCompRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetFricCompRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetFricCompRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetFricCompRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetFricCompRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetFricCompRes.msg)
}

// -------------------------------------------------------------------

// GetFricCompReq

// -------------------------------------------------------------------

// GetFricCompRes

// bool control_comp = 1;
inline void GetFricCompRes::clear_control_comp() {
  control_comp_ = false;
}
inline bool GetFricCompRes::control_comp() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetFricCompRes.control_comp)
  return control_comp_;
}
inline void GetFricCompRes::set_control_comp(bool value) {
  
  control_comp_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetFricCompRes.control_comp)
}

// repeated int32 control_comp_levels = 2;
inline int GetFricCompRes::control_comp_levels_size() const {
  return control_comp_levels_.size();
}
inline void GetFricCompRes::clear_control_comp_levels() {
  control_comp_levels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFricCompRes::control_comp_levels(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetFricCompRes.control_comp_levels)
  return control_comp_levels_.Get(index);
}
inline void GetFricCompRes::set_control_comp_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  control_comp_levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetFricCompRes.control_comp_levels)
}
inline void GetFricCompRes::add_control_comp_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  control_comp_levels_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetFricCompRes.control_comp_levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetFricCompRes::control_comp_levels() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetFricCompRes.control_comp_levels)
  return control_comp_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetFricCompRes::mutable_control_comp_levels() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetFricCompRes.control_comp_levels)
  return &control_comp_levels_;
}

// bool dt_comp = 5;
inline void GetFricCompRes::clear_dt_comp() {
  dt_comp_ = false;
}
inline bool GetFricCompRes::dt_comp() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetFricCompRes.dt_comp)
  return dt_comp_;
}
inline void GetFricCompRes::set_dt_comp(bool value) {
  
  dt_comp_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetFricCompRes.dt_comp)
}

// repeated int32 dt_comp_levels = 6;
inline int GetFricCompRes::dt_comp_levels_size() const {
  return dt_comp_levels_.size();
}
inline void GetFricCompRes::clear_dt_comp_levels() {
  dt_comp_levels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetFricCompRes::dt_comp_levels(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetFricCompRes.dt_comp_levels)
  return dt_comp_levels_.Get(index);
}
inline void GetFricCompRes::set_dt_comp_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dt_comp_levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetFricCompRes.dt_comp_levels)
}
inline void GetFricCompRes::add_dt_comp_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dt_comp_levels_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetFricCompRes.dt_comp_levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetFricCompRes::dt_comp_levels() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetFricCompRes.dt_comp_levels)
  return dt_comp_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetFricCompRes::mutable_dt_comp_levels() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetFricCompRes.dt_comp_levels)
  return &dt_comp_levels_;
}

// string msg = 100;
inline void GetFricCompRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetFricCompRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetFricCompRes.msg)
  return msg_.GetNoArena();
}
inline void GetFricCompRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetFricCompRes.msg)
}
inline void GetFricCompRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetFricCompRes.msg)
}
inline void GetFricCompRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetFricCompRes.msg)
}
inline void GetFricCompRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetFricCompRes.msg)
}
inline std::string* GetFricCompRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetFricCompRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFricCompRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetFricCompRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFricCompRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetFricCompRes.msg)
}

// -------------------------------------------------------------------

// GetSafetyLimitConfigReq

// -------------------------------------------------------------------

// GetSafetyLimitConfigRes

// float power_limit = 1;
inline void GetSafetyLimitConfigRes::clear_power_limit() {
  power_limit_ = 0;
}
inline float GetSafetyLimitConfigRes::power_limit() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.power_limit)
  return power_limit_;
}
inline void GetSafetyLimitConfigRes::set_power_limit(float value) {
  
  power_limit_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.power_limit)
}

// float power_limit_ratio = 2;
inline void GetSafetyLimitConfigRes::clear_power_limit_ratio() {
  power_limit_ratio_ = 0;
}
inline float GetSafetyLimitConfigRes::power_limit_ratio() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.power_limit_ratio)
  return power_limit_ratio_;
}
inline void GetSafetyLimitConfigRes::set_power_limit_ratio(float value) {
  
  power_limit_ratio_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.power_limit_ratio)
}

// float tcp_force_limit = 3;
inline void GetSafetyLimitConfigRes::clear_tcp_force_limit() {
  tcp_force_limit_ = 0;
}
inline float GetSafetyLimitConfigRes::tcp_force_limit() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.tcp_force_limit)
  return tcp_force_limit_;
}
inline void GetSafetyLimitConfigRes::set_tcp_force_limit(float value) {
  
  tcp_force_limit_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.tcp_force_limit)
}

// float tcp_force_limit_ratio = 4;
inline void GetSafetyLimitConfigRes::clear_tcp_force_limit_ratio() {
  tcp_force_limit_ratio_ = 0;
}
inline float GetSafetyLimitConfigRes::tcp_force_limit_ratio() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.tcp_force_limit_ratio)
  return tcp_force_limit_ratio_;
}
inline void GetSafetyLimitConfigRes::set_tcp_force_limit_ratio(float value) {
  
  tcp_force_limit_ratio_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.tcp_force_limit_ratio)
}

// float tcp_speed_limit = 5;
inline void GetSafetyLimitConfigRes::clear_tcp_speed_limit() {
  tcp_speed_limit_ = 0;
}
inline float GetSafetyLimitConfigRes::tcp_speed_limit() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.tcp_speed_limit)
  return tcp_speed_limit_;
}
inline void GetSafetyLimitConfigRes::set_tcp_speed_limit(float value) {
  
  tcp_speed_limit_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.tcp_speed_limit)
}

// float tcp_speed_limit_ratio = 6;
inline void GetSafetyLimitConfigRes::clear_tcp_speed_limit_ratio() {
  tcp_speed_limit_ratio_ = 0;
}
inline float GetSafetyLimitConfigRes::tcp_speed_limit_ratio() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.tcp_speed_limit_ratio)
  return tcp_speed_limit_ratio_;
}
inline void GetSafetyLimitConfigRes::set_tcp_speed_limit_ratio(float value) {
  
  tcp_speed_limit_ratio_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.tcp_speed_limit_ratio)
}

// repeated float joint_limits = 7;
inline int GetSafetyLimitConfigRes::joint_limits_size() const {
  return joint_limits_.size();
}
inline void GetSafetyLimitConfigRes::clear_joint_limits() {
  joint_limits_.Clear();
}
inline float GetSafetyLimitConfigRes::joint_limits(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.joint_limits)
  return joint_limits_.Get(index);
}
inline void GetSafetyLimitConfigRes::set_joint_limits(int index, float value) {
  joint_limits_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.joint_limits)
}
inline void GetSafetyLimitConfigRes::add_joint_limits(float value) {
  joint_limits_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.joint_limits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetSafetyLimitConfigRes::joint_limits() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.joint_limits)
  return joint_limits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetSafetyLimitConfigRes::mutable_joint_limits() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.joint_limits)
  return &joint_limits_;
}

// string msg = 100;
inline void GetSafetyLimitConfigRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetSafetyLimitConfigRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.msg)
  return msg_.GetNoArena();
}
inline void GetSafetyLimitConfigRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.msg)
}
inline void GetSafetyLimitConfigRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.msg)
}
inline void GetSafetyLimitConfigRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.msg)
}
inline void GetSafetyLimitConfigRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.msg)
}
inline std::string* GetSafetyLimitConfigRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSafetyLimitConfigRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSafetyLimitConfigRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.msg)
}

// -------------------------------------------------------------------

// SetSafetyLimitConfigReq

// float power_limit = 1;
inline void SetSafetyLimitConfigReq::clear_power_limit() {
  power_limit_ = 0;
}
inline float SetSafetyLimitConfigReq::power_limit() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.power_limit)
  return power_limit_;
}
inline void SetSafetyLimitConfigReq::set_power_limit(float value) {
  
  power_limit_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.power_limit)
}

// float power_limit_ratio = 2;
inline void SetSafetyLimitConfigReq::clear_power_limit_ratio() {
  power_limit_ratio_ = 0;
}
inline float SetSafetyLimitConfigReq::power_limit_ratio() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.power_limit_ratio)
  return power_limit_ratio_;
}
inline void SetSafetyLimitConfigReq::set_power_limit_ratio(float value) {
  
  power_limit_ratio_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.power_limit_ratio)
}

// float tcp_force_limit = 3;
inline void SetSafetyLimitConfigReq::clear_tcp_force_limit() {
  tcp_force_limit_ = 0;
}
inline float SetSafetyLimitConfigReq::tcp_force_limit() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.tcp_force_limit)
  return tcp_force_limit_;
}
inline void SetSafetyLimitConfigReq::set_tcp_force_limit(float value) {
  
  tcp_force_limit_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.tcp_force_limit)
}

// float tcp_force_limit_ratio = 4;
inline void SetSafetyLimitConfigReq::clear_tcp_force_limit_ratio() {
  tcp_force_limit_ratio_ = 0;
}
inline float SetSafetyLimitConfigReq::tcp_force_limit_ratio() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.tcp_force_limit_ratio)
  return tcp_force_limit_ratio_;
}
inline void SetSafetyLimitConfigReq::set_tcp_force_limit_ratio(float value) {
  
  tcp_force_limit_ratio_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.tcp_force_limit_ratio)
}

// float tcp_speed_limit = 5;
inline void SetSafetyLimitConfigReq::clear_tcp_speed_limit() {
  tcp_speed_limit_ = 0;
}
inline float SetSafetyLimitConfigReq::tcp_speed_limit() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.tcp_speed_limit)
  return tcp_speed_limit_;
}
inline void SetSafetyLimitConfigReq::set_tcp_speed_limit(float value) {
  
  tcp_speed_limit_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.tcp_speed_limit)
}

// float tcp_speed_limit_ratio = 6;
inline void SetSafetyLimitConfigReq::clear_tcp_speed_limit_ratio() {
  tcp_speed_limit_ratio_ = 0;
}
inline float SetSafetyLimitConfigReq::tcp_speed_limit_ratio() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.tcp_speed_limit_ratio)
  return tcp_speed_limit_ratio_;
}
inline void SetSafetyLimitConfigReq::set_tcp_speed_limit_ratio(float value) {
  
  tcp_speed_limit_ratio_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.tcp_speed_limit_ratio)
}

// repeated float joint_limits = 7;
inline int SetSafetyLimitConfigReq::joint_limits_size() const {
  return joint_limits_.size();
}
inline void SetSafetyLimitConfigReq::clear_joint_limits() {
  joint_limits_.Clear();
}
inline float SetSafetyLimitConfigReq::joint_limits(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.joint_limits)
  return joint_limits_.Get(index);
}
inline void SetSafetyLimitConfigReq::set_joint_limits(int index, float value) {
  joint_limits_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.joint_limits)
}
inline void SetSafetyLimitConfigReq::add_joint_limits(float value) {
  joint_limits_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.joint_limits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetSafetyLimitConfigReq::joint_limits() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.joint_limits)
  return joint_limits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetSafetyLimitConfigReq::mutable_joint_limits() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq.joint_limits)
  return &joint_limits_;
}

// -------------------------------------------------------------------

// SetSafetyLimitConfigRes

// string msg = 100;
inline void SetSafetyLimitConfigRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetSafetyLimitConfigRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes.msg)
  return msg_.GetNoArena();
}
inline void SetSafetyLimitConfigRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes.msg)
}
inline void SetSafetyLimitConfigRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes.msg)
}
inline void SetSafetyLimitConfigRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes.msg)
}
inline void SetSafetyLimitConfigRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes.msg)
}
inline std::string* SetSafetyLimitConfigRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetSafetyLimitConfigRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetSafetyLimitConfigRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes.msg)
}

// -------------------------------------------------------------------

// SetSafetyStopConfigReq

// .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
inline void SetSafetyStopConfigReq::clear_joint_position_limit_stop_cat() {
  joint_position_limit_stop_cat_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory SetSafetyStopConfigReq::joint_position_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq.joint_position_limit_stop_cat)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(joint_position_limit_stop_cat_);
}
inline void SetSafetyStopConfigReq::set_joint_position_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  joint_position_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq.joint_position_limit_stop_cat)
}

// .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
inline void SetSafetyStopConfigReq::clear_joint_speed_limit_stop_cat() {
  joint_speed_limit_stop_cat_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory SetSafetyStopConfigReq::joint_speed_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq.joint_speed_limit_stop_cat)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(joint_speed_limit_stop_cat_);
}
inline void SetSafetyStopConfigReq::set_joint_speed_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  joint_speed_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq.joint_speed_limit_stop_cat)
}

// .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
inline void SetSafetyStopConfigReq::clear_joint_torque_limit_stop_cat() {
  joint_torque_limit_stop_cat_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory SetSafetyStopConfigReq::joint_torque_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq.joint_torque_limit_stop_cat)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(joint_torque_limit_stop_cat_);
}
inline void SetSafetyStopConfigReq::set_joint_torque_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  joint_torque_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq.joint_torque_limit_stop_cat)
}

// .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
inline void SetSafetyStopConfigReq::clear_tcp_speed_limit_stop_cat() {
  tcp_speed_limit_stop_cat_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory SetSafetyStopConfigReq::tcp_speed_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq.tcp_speed_limit_stop_cat)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(tcp_speed_limit_stop_cat_);
}
inline void SetSafetyStopConfigReq::set_tcp_speed_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  tcp_speed_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq.tcp_speed_limit_stop_cat)
}

// .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
inline void SetSafetyStopConfigReq::clear_tcp_force_limit_stop_cat() {
  tcp_force_limit_stop_cat_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory SetSafetyStopConfigReq::tcp_force_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq.tcp_force_limit_stop_cat)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(tcp_force_limit_stop_cat_);
}
inline void SetSafetyStopConfigReq::set_tcp_force_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  tcp_force_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq.tcp_force_limit_stop_cat)
}

// .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
inline void SetSafetyStopConfigReq::clear_power_limit_stop_cat() {
  power_limit_stop_cat_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory SetSafetyStopConfigReq::power_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq.power_limit_stop_cat)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(power_limit_stop_cat_);
}
inline void SetSafetyStopConfigReq::set_power_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  power_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq.power_limit_stop_cat)
}

// -------------------------------------------------------------------

// SetSafetyStopConfigRes

// string msg = 100;
inline void SetSafetyStopConfigRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetSafetyStopConfigRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes.msg)
  return msg_.GetNoArena();
}
inline void SetSafetyStopConfigRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes.msg)
}
inline void SetSafetyStopConfigRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes.msg)
}
inline void SetSafetyStopConfigRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes.msg)
}
inline void SetSafetyStopConfigRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes.msg)
}
inline std::string* SetSafetyStopConfigRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetSafetyStopConfigRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetSafetyStopConfigRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes.msg)
}

// -------------------------------------------------------------------

// GetSafetyStopConfigReq

// -------------------------------------------------------------------

// GetSafetyStopConfigRes

// .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
inline void GetSafetyStopConfigRes::clear_joint_position_limit_stop_cat() {
  joint_position_limit_stop_cat_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory GetSafetyStopConfigRes::joint_position_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.joint_position_limit_stop_cat)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(joint_position_limit_stop_cat_);
}
inline void GetSafetyStopConfigRes::set_joint_position_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  joint_position_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.joint_position_limit_stop_cat)
}

// .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
inline void GetSafetyStopConfigRes::clear_joint_speed_limit_stop_cat() {
  joint_speed_limit_stop_cat_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory GetSafetyStopConfigRes::joint_speed_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.joint_speed_limit_stop_cat)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(joint_speed_limit_stop_cat_);
}
inline void GetSafetyStopConfigRes::set_joint_speed_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  joint_speed_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.joint_speed_limit_stop_cat)
}

// .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
inline void GetSafetyStopConfigRes::clear_joint_torque_limit_stop_cat() {
  joint_torque_limit_stop_cat_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory GetSafetyStopConfigRes::joint_torque_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.joint_torque_limit_stop_cat)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(joint_torque_limit_stop_cat_);
}
inline void GetSafetyStopConfigRes::set_joint_torque_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  joint_torque_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.joint_torque_limit_stop_cat)
}

// .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
inline void GetSafetyStopConfigRes::clear_tcp_speed_limit_stop_cat() {
  tcp_speed_limit_stop_cat_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory GetSafetyStopConfigRes::tcp_speed_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.tcp_speed_limit_stop_cat)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(tcp_speed_limit_stop_cat_);
}
inline void GetSafetyStopConfigRes::set_tcp_speed_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  tcp_speed_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.tcp_speed_limit_stop_cat)
}

// .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
inline void GetSafetyStopConfigRes::clear_tcp_force_limit_stop_cat() {
  tcp_force_limit_stop_cat_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory GetSafetyStopConfigRes::tcp_force_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.tcp_force_limit_stop_cat)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(tcp_force_limit_stop_cat_);
}
inline void GetSafetyStopConfigRes::set_tcp_force_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  tcp_force_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.tcp_force_limit_stop_cat)
}

// .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
inline void GetSafetyStopConfigRes::clear_power_limit_stop_cat() {
  power_limit_stop_cat_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::StopCategory GetSafetyStopConfigRes::power_limit_stop_cat() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.power_limit_stop_cat)
  return static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(power_limit_stop_cat_);
}
inline void GetSafetyStopConfigRes::set_power_limit_stop_cat(::IndyFramework::Protobuf::Shared::StopCategory value) {
  
  power_limit_stop_cat_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.power_limit_stop_cat)
}

// string msg = 100;
inline void GetSafetyStopConfigRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetSafetyStopConfigRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.msg)
  return msg_.GetNoArena();
}
inline void GetSafetyStopConfigRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.msg)
}
inline void GetSafetyStopConfigRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.msg)
}
inline void GetSafetyStopConfigRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.msg)
}
inline void GetSafetyStopConfigRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.msg)
}
inline std::string* GetSafetyStopConfigRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSafetyStopConfigRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSafetyStopConfigRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.msg)
}

// -------------------------------------------------------------------

// SetMountPosReq

// float ry = 1;
inline void SetMountPosReq::clear_ry() {
  ry_ = 0;
}
inline float SetMountPosReq::ry() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetMountPosReq.ry)
  return ry_;
}
inline void SetMountPosReq::set_ry(float value) {
  
  ry_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetMountPosReq.ry)
}

// float rz = 2;
inline void SetMountPosReq::clear_rz() {
  rz_ = 0;
}
inline float SetMountPosReq::rz() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetMountPosReq.rz)
  return rz_;
}
inline void SetMountPosReq::set_rz(float value) {
  
  rz_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetMountPosReq.rz)
}

// -------------------------------------------------------------------

// SetMountPosRes

// string msg = 100;
inline void SetMountPosRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetMountPosRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetMountPosRes.msg)
  return msg_.GetNoArena();
}
inline void SetMountPosRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetMountPosRes.msg)
}
inline void SetMountPosRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetMountPosRes.msg)
}
inline void SetMountPosRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetMountPosRes.msg)
}
inline void SetMountPosRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetMountPosRes.msg)
}
inline std::string* SetMountPosRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetMountPosRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetMountPosRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetMountPosRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetMountPosRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetMountPosRes.msg)
}

// -------------------------------------------------------------------

// GetMountPosReq

// -------------------------------------------------------------------

// GetMountPosRes

// float ry = 1;
inline void GetMountPosRes::clear_ry() {
  ry_ = 0;
}
inline float GetMountPosRes::ry() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMountPosRes.ry)
  return ry_;
}
inline void GetMountPosRes::set_ry(float value) {
  
  ry_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMountPosRes.ry)
}

// float rz = 2;
inline void GetMountPosRes::clear_rz() {
  rz_ = 0;
}
inline float GetMountPosRes::rz() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMountPosRes.rz)
  return rz_;
}
inline void GetMountPosRes::set_rz(float value) {
  
  rz_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMountPosRes.rz)
}

// string msg = 100;
inline void GetMountPosRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetMountPosRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMountPosRes.msg)
  return msg_.GetNoArena();
}
inline void GetMountPosRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMountPosRes.msg)
}
inline void GetMountPosRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetMountPosRes.msg)
}
inline void GetMountPosRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetMountPosRes.msg)
}
inline void GetMountPosRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetMountPosRes.msg)
}
inline std::string* GetMountPosRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetMountPosRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMountPosRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetMountPosRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMountPosRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetMountPosRes.msg)
}

// -------------------------------------------------------------------

// SetToolPropertyReq

// float mass = 1;
inline void SetToolPropertyReq::clear_mass() {
  mass_ = 0;
}
inline float SetToolPropertyReq::mass() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetToolPropertyReq.mass)
  return mass_;
}
inline void SetToolPropertyReq::set_mass(float value) {
  
  mass_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetToolPropertyReq.mass)
}

// repeated float center_of_mass = 2;
inline int SetToolPropertyReq::center_of_mass_size() const {
  return center_of_mass_.size();
}
inline void SetToolPropertyReq::clear_center_of_mass() {
  center_of_mass_.Clear();
}
inline float SetToolPropertyReq::center_of_mass(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetToolPropertyReq.center_of_mass)
  return center_of_mass_.Get(index);
}
inline void SetToolPropertyReq::set_center_of_mass(int index, float value) {
  center_of_mass_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetToolPropertyReq.center_of_mass)
}
inline void SetToolPropertyReq::add_center_of_mass(float value) {
  center_of_mass_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetToolPropertyReq.center_of_mass)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetToolPropertyReq::center_of_mass() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetToolPropertyReq.center_of_mass)
  return center_of_mass_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetToolPropertyReq::mutable_center_of_mass() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetToolPropertyReq.center_of_mass)
  return &center_of_mass_;
}

// repeated float inertia = 3;
inline int SetToolPropertyReq::inertia_size() const {
  return inertia_.size();
}
inline void SetToolPropertyReq::clear_inertia() {
  inertia_.Clear();
}
inline float SetToolPropertyReq::inertia(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetToolPropertyReq.inertia)
  return inertia_.Get(index);
}
inline void SetToolPropertyReq::set_inertia(int index, float value) {
  inertia_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetToolPropertyReq.inertia)
}
inline void SetToolPropertyReq::add_inertia(float value) {
  inertia_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetToolPropertyReq.inertia)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetToolPropertyReq::inertia() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetToolPropertyReq.inertia)
  return inertia_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetToolPropertyReq::mutable_inertia() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetToolPropertyReq.inertia)
  return &inertia_;
}

// -------------------------------------------------------------------

// SetToolPropertyRes

// string msg = 100;
inline void SetToolPropertyRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetToolPropertyRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetToolPropertyRes.msg)
  return msg_.GetNoArena();
}
inline void SetToolPropertyRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetToolPropertyRes.msg)
}
inline void SetToolPropertyRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetToolPropertyRes.msg)
}
inline void SetToolPropertyRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetToolPropertyRes.msg)
}
inline void SetToolPropertyRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetToolPropertyRes.msg)
}
inline std::string* SetToolPropertyRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetToolPropertyRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetToolPropertyRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetToolPropertyRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetToolPropertyRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetToolPropertyRes.msg)
}

// -------------------------------------------------------------------

// GetToolPropertyReq

// -------------------------------------------------------------------

// GetToolPropertyRes

// float mass = 1;
inline void GetToolPropertyRes::clear_mass() {
  mass_ = 0;
}
inline float GetToolPropertyRes::mass() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetToolPropertyRes.mass)
  return mass_;
}
inline void GetToolPropertyRes::set_mass(float value) {
  
  mass_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetToolPropertyRes.mass)
}

// repeated float center_of_mass = 2;
inline int GetToolPropertyRes::center_of_mass_size() const {
  return center_of_mass_.size();
}
inline void GetToolPropertyRes::clear_center_of_mass() {
  center_of_mass_.Clear();
}
inline float GetToolPropertyRes::center_of_mass(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetToolPropertyRes.center_of_mass)
  return center_of_mass_.Get(index);
}
inline void GetToolPropertyRes::set_center_of_mass(int index, float value) {
  center_of_mass_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetToolPropertyRes.center_of_mass)
}
inline void GetToolPropertyRes::add_center_of_mass(float value) {
  center_of_mass_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetToolPropertyRes.center_of_mass)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetToolPropertyRes::center_of_mass() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetToolPropertyRes.center_of_mass)
  return center_of_mass_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetToolPropertyRes::mutable_center_of_mass() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetToolPropertyRes.center_of_mass)
  return &center_of_mass_;
}

// repeated float inertia = 3;
inline int GetToolPropertyRes::inertia_size() const {
  return inertia_.size();
}
inline void GetToolPropertyRes::clear_inertia() {
  inertia_.Clear();
}
inline float GetToolPropertyRes::inertia(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetToolPropertyRes.inertia)
  return inertia_.Get(index);
}
inline void GetToolPropertyRes::set_inertia(int index, float value) {
  inertia_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetToolPropertyRes.inertia)
}
inline void GetToolPropertyRes::add_inertia(float value) {
  inertia_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetToolPropertyRes.inertia)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetToolPropertyRes::inertia() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetToolPropertyRes.inertia)
  return inertia_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetToolPropertyRes::mutable_inertia() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetToolPropertyRes.inertia)
  return &inertia_;
}

// string msg = 100;
inline void GetToolPropertyRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetToolPropertyRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetToolPropertyRes.msg)
  return msg_.GetNoArena();
}
inline void GetToolPropertyRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetToolPropertyRes.msg)
}
inline void GetToolPropertyRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetToolPropertyRes.msg)
}
inline void GetToolPropertyRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetToolPropertyRes.msg)
}
inline void GetToolPropertyRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetToolPropertyRes.msg)
}
inline std::string* GetToolPropertyRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetToolPropertyRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetToolPropertyRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetToolPropertyRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetToolPropertyRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetToolPropertyRes.msg)
}

// -------------------------------------------------------------------

// SetCollSensLevelReq

// int32 level = 1;
inline void SetCollSensLevelReq::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetCollSensLevelReq::level() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensLevelReq.level)
  return level_;
}
inline void SetCollSensLevelReq::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensLevelReq.level)
}

// -------------------------------------------------------------------

// SetCollSensLevelRes

// string msg = 100;
inline void SetCollSensLevelRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetCollSensLevelRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensLevelRes.msg)
  return msg_.GetNoArena();
}
inline void SetCollSensLevelRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensLevelRes.msg)
}
inline void SetCollSensLevelRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetCollSensLevelRes.msg)
}
inline void SetCollSensLevelRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetCollSensLevelRes.msg)
}
inline void SetCollSensLevelRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetCollSensLevelRes.msg)
}
inline std::string* SetCollSensLevelRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetCollSensLevelRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetCollSensLevelRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetCollSensLevelRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetCollSensLevelRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetCollSensLevelRes.msg)
}

// -------------------------------------------------------------------

// GetCollSensLevelReq

// -------------------------------------------------------------------

// GetCollSensLevelRes

// int32 level = 1;
inline void GetCollSensLevelRes::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetCollSensLevelRes::level() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensLevelRes.level)
  return level_;
}
inline void GetCollSensLevelRes::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensLevelRes.level)
}

// string msg = 100;
inline void GetCollSensLevelRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetCollSensLevelRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensLevelRes.msg)
  return msg_.GetNoArena();
}
inline void GetCollSensLevelRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensLevelRes.msg)
}
inline void GetCollSensLevelRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetCollSensLevelRes.msg)
}
inline void GetCollSensLevelRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetCollSensLevelRes.msg)
}
inline void GetCollSensLevelRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetCollSensLevelRes.msg)
}
inline std::string* GetCollSensLevelRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetCollSensLevelRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCollSensLevelRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetCollSensLevelRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCollSensLevelRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetCollSensLevelRes.msg)
}

// -------------------------------------------------------------------

// SetCollSensParamReq

// repeated float j_torque_bases = 1;
inline int SetCollSensParamReq::j_torque_bases_size() const {
  return j_torque_bases_.size();
}
inline void SetCollSensParamReq::clear_j_torque_bases() {
  j_torque_bases_.Clear();
}
inline float SetCollSensParamReq::j_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensParamReq.j_torque_bases)
  return j_torque_bases_.Get(index);
}
inline void SetCollSensParamReq::set_j_torque_bases(int index, float value) {
  j_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensParamReq.j_torque_bases)
}
inline void SetCollSensParamReq::add_j_torque_bases(float value) {
  j_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetCollSensParamReq.j_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCollSensParamReq::j_torque_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.j_torque_bases)
  return j_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCollSensParamReq::mutable_j_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.j_torque_bases)
  return &j_torque_bases_;
}

// repeated float j_torque_tangents = 2;
inline int SetCollSensParamReq::j_torque_tangents_size() const {
  return j_torque_tangents_.size();
}
inline void SetCollSensParamReq::clear_j_torque_tangents() {
  j_torque_tangents_.Clear();
}
inline float SetCollSensParamReq::j_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensParamReq.j_torque_tangents)
  return j_torque_tangents_.Get(index);
}
inline void SetCollSensParamReq::set_j_torque_tangents(int index, float value) {
  j_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensParamReq.j_torque_tangents)
}
inline void SetCollSensParamReq::add_j_torque_tangents(float value) {
  j_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetCollSensParamReq.j_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCollSensParamReq::j_torque_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.j_torque_tangents)
  return j_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCollSensParamReq::mutable_j_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.j_torque_tangents)
  return &j_torque_tangents_;
}

// repeated float t_torque_bases = 3;
inline int SetCollSensParamReq::t_torque_bases_size() const {
  return t_torque_bases_.size();
}
inline void SetCollSensParamReq::clear_t_torque_bases() {
  t_torque_bases_.Clear();
}
inline float SetCollSensParamReq::t_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_torque_bases)
  return t_torque_bases_.Get(index);
}
inline void SetCollSensParamReq::set_t_torque_bases(int index, float value) {
  t_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_torque_bases)
}
inline void SetCollSensParamReq::add_t_torque_bases(float value) {
  t_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCollSensParamReq::t_torque_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_torque_bases)
  return t_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCollSensParamReq::mutable_t_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_torque_bases)
  return &t_torque_bases_;
}

// repeated float t_torque_tangents = 4;
inline int SetCollSensParamReq::t_torque_tangents_size() const {
  return t_torque_tangents_.size();
}
inline void SetCollSensParamReq::clear_t_torque_tangents() {
  t_torque_tangents_.Clear();
}
inline float SetCollSensParamReq::t_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_torque_tangents)
  return t_torque_tangents_.Get(index);
}
inline void SetCollSensParamReq::set_t_torque_tangents(int index, float value) {
  t_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_torque_tangents)
}
inline void SetCollSensParamReq::add_t_torque_tangents(float value) {
  t_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCollSensParamReq::t_torque_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_torque_tangents)
  return t_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCollSensParamReq::mutable_t_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_torque_tangents)
  return &t_torque_tangents_;
}

// repeated float error_bases = 5;
inline int SetCollSensParamReq::error_bases_size() const {
  return error_bases_.size();
}
inline void SetCollSensParamReq::clear_error_bases() {
  error_bases_.Clear();
}
inline float SetCollSensParamReq::error_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensParamReq.error_bases)
  return error_bases_.Get(index);
}
inline void SetCollSensParamReq::set_error_bases(int index, float value) {
  error_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensParamReq.error_bases)
}
inline void SetCollSensParamReq::add_error_bases(float value) {
  error_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetCollSensParamReq.error_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCollSensParamReq::error_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.error_bases)
  return error_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCollSensParamReq::mutable_error_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.error_bases)
  return &error_bases_;
}

// repeated float error_tangents = 6;
inline int SetCollSensParamReq::error_tangents_size() const {
  return error_tangents_.size();
}
inline void SetCollSensParamReq::clear_error_tangents() {
  error_tangents_.Clear();
}
inline float SetCollSensParamReq::error_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensParamReq.error_tangents)
  return error_tangents_.Get(index);
}
inline void SetCollSensParamReq::set_error_tangents(int index, float value) {
  error_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensParamReq.error_tangents)
}
inline void SetCollSensParamReq::add_error_tangents(float value) {
  error_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetCollSensParamReq.error_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCollSensParamReq::error_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.error_tangents)
  return error_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCollSensParamReq::mutable_error_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.error_tangents)
  return &error_tangents_;
}

// repeated float t_constvel_torque_bases = 7;
inline int SetCollSensParamReq::t_constvel_torque_bases_size() const {
  return t_constvel_torque_bases_.size();
}
inline void SetCollSensParamReq::clear_t_constvel_torque_bases() {
  t_constvel_torque_bases_.Clear();
}
inline float SetCollSensParamReq::t_constvel_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_constvel_torque_bases)
  return t_constvel_torque_bases_.Get(index);
}
inline void SetCollSensParamReq::set_t_constvel_torque_bases(int index, float value) {
  t_constvel_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_constvel_torque_bases)
}
inline void SetCollSensParamReq::add_t_constvel_torque_bases(float value) {
  t_constvel_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_constvel_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCollSensParamReq::t_constvel_torque_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_constvel_torque_bases)
  return t_constvel_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCollSensParamReq::mutable_t_constvel_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_constvel_torque_bases)
  return &t_constvel_torque_bases_;
}

// repeated float t_constvel_torque_tangents = 8;
inline int SetCollSensParamReq::t_constvel_torque_tangents_size() const {
  return t_constvel_torque_tangents_.size();
}
inline void SetCollSensParamReq::clear_t_constvel_torque_tangents() {
  t_constvel_torque_tangents_.Clear();
}
inline float SetCollSensParamReq::t_constvel_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_constvel_torque_tangents)
  return t_constvel_torque_tangents_.Get(index);
}
inline void SetCollSensParamReq::set_t_constvel_torque_tangents(int index, float value) {
  t_constvel_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_constvel_torque_tangents)
}
inline void SetCollSensParamReq::add_t_constvel_torque_tangents(float value) {
  t_constvel_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_constvel_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCollSensParamReq::t_constvel_torque_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_constvel_torque_tangents)
  return t_constvel_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCollSensParamReq::mutable_t_constvel_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_constvel_torque_tangents)
  return &t_constvel_torque_tangents_;
}

// repeated float t_conveyor_torque_bases = 9;
inline int SetCollSensParamReq::t_conveyor_torque_bases_size() const {
  return t_conveyor_torque_bases_.size();
}
inline void SetCollSensParamReq::clear_t_conveyor_torque_bases() {
  t_conveyor_torque_bases_.Clear();
}
inline float SetCollSensParamReq::t_conveyor_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_conveyor_torque_bases)
  return t_conveyor_torque_bases_.Get(index);
}
inline void SetCollSensParamReq::set_t_conveyor_torque_bases(int index, float value) {
  t_conveyor_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_conveyor_torque_bases)
}
inline void SetCollSensParamReq::add_t_conveyor_torque_bases(float value) {
  t_conveyor_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_conveyor_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCollSensParamReq::t_conveyor_torque_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_conveyor_torque_bases)
  return t_conveyor_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCollSensParamReq::mutable_t_conveyor_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_conveyor_torque_bases)
  return &t_conveyor_torque_bases_;
}

// repeated float t_conveyor_torque_tangents = 10;
inline int SetCollSensParamReq::t_conveyor_torque_tangents_size() const {
  return t_conveyor_torque_tangents_.size();
}
inline void SetCollSensParamReq::clear_t_conveyor_torque_tangents() {
  t_conveyor_torque_tangents_.Clear();
}
inline float SetCollSensParamReq::t_conveyor_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_conveyor_torque_tangents)
  return t_conveyor_torque_tangents_.Get(index);
}
inline void SetCollSensParamReq::set_t_conveyor_torque_tangents(int index, float value) {
  t_conveyor_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_conveyor_torque_tangents)
}
inline void SetCollSensParamReq::add_t_conveyor_torque_tangents(float value) {
  t_conveyor_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_conveyor_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetCollSensParamReq::t_conveyor_torque_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_conveyor_torque_tangents)
  return t_conveyor_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetCollSensParamReq::mutable_t_conveyor_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.SetCollSensParamReq.t_conveyor_torque_tangents)
  return &t_conveyor_torque_tangents_;
}

// -------------------------------------------------------------------

// SetCollSensParamRes

// string msg = 100;
inline void SetCollSensParamRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetCollSensParamRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollSensParamRes.msg)
  return msg_.GetNoArena();
}
inline void SetCollSensParamRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollSensParamRes.msg)
}
inline void SetCollSensParamRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetCollSensParamRes.msg)
}
inline void SetCollSensParamRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetCollSensParamRes.msg)
}
inline void SetCollSensParamRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetCollSensParamRes.msg)
}
inline std::string* SetCollSensParamRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetCollSensParamRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetCollSensParamRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetCollSensParamRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetCollSensParamRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetCollSensParamRes.msg)
}

// -------------------------------------------------------------------

// GetCollSensParamReq

// -------------------------------------------------------------------

// GetCollSensParamRes

// repeated float j_torque_bases = 1;
inline int GetCollSensParamRes::j_torque_bases_size() const {
  return j_torque_bases_.size();
}
inline void GetCollSensParamRes::clear_j_torque_bases() {
  j_torque_bases_.Clear();
}
inline float GetCollSensParamRes::j_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensParamRes.j_torque_bases)
  return j_torque_bases_.Get(index);
}
inline void GetCollSensParamRes::set_j_torque_bases(int index, float value) {
  j_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensParamRes.j_torque_bases)
}
inline void GetCollSensParamRes::add_j_torque_bases(float value) {
  j_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollSensParamRes.j_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollSensParamRes::j_torque_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.j_torque_bases)
  return j_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollSensParamRes::mutable_j_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.j_torque_bases)
  return &j_torque_bases_;
}

// repeated float j_torque_tangents = 2;
inline int GetCollSensParamRes::j_torque_tangents_size() const {
  return j_torque_tangents_.size();
}
inline void GetCollSensParamRes::clear_j_torque_tangents() {
  j_torque_tangents_.Clear();
}
inline float GetCollSensParamRes::j_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensParamRes.j_torque_tangents)
  return j_torque_tangents_.Get(index);
}
inline void GetCollSensParamRes::set_j_torque_tangents(int index, float value) {
  j_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensParamRes.j_torque_tangents)
}
inline void GetCollSensParamRes::add_j_torque_tangents(float value) {
  j_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollSensParamRes.j_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollSensParamRes::j_torque_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.j_torque_tangents)
  return j_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollSensParamRes::mutable_j_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.j_torque_tangents)
  return &j_torque_tangents_;
}

// repeated float t_torque_bases = 3;
inline int GetCollSensParamRes::t_torque_bases_size() const {
  return t_torque_bases_.size();
}
inline void GetCollSensParamRes::clear_t_torque_bases() {
  t_torque_bases_.Clear();
}
inline float GetCollSensParamRes::t_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_torque_bases)
  return t_torque_bases_.Get(index);
}
inline void GetCollSensParamRes::set_t_torque_bases(int index, float value) {
  t_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_torque_bases)
}
inline void GetCollSensParamRes::add_t_torque_bases(float value) {
  t_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollSensParamRes::t_torque_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_torque_bases)
  return t_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollSensParamRes::mutable_t_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_torque_bases)
  return &t_torque_bases_;
}

// repeated float t_torque_tangents = 4;
inline int GetCollSensParamRes::t_torque_tangents_size() const {
  return t_torque_tangents_.size();
}
inline void GetCollSensParamRes::clear_t_torque_tangents() {
  t_torque_tangents_.Clear();
}
inline float GetCollSensParamRes::t_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_torque_tangents)
  return t_torque_tangents_.Get(index);
}
inline void GetCollSensParamRes::set_t_torque_tangents(int index, float value) {
  t_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_torque_tangents)
}
inline void GetCollSensParamRes::add_t_torque_tangents(float value) {
  t_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollSensParamRes::t_torque_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_torque_tangents)
  return t_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollSensParamRes::mutable_t_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_torque_tangents)
  return &t_torque_tangents_;
}

// repeated float error_bases = 5;
inline int GetCollSensParamRes::error_bases_size() const {
  return error_bases_.size();
}
inline void GetCollSensParamRes::clear_error_bases() {
  error_bases_.Clear();
}
inline float GetCollSensParamRes::error_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensParamRes.error_bases)
  return error_bases_.Get(index);
}
inline void GetCollSensParamRes::set_error_bases(int index, float value) {
  error_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensParamRes.error_bases)
}
inline void GetCollSensParamRes::add_error_bases(float value) {
  error_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollSensParamRes.error_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollSensParamRes::error_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.error_bases)
  return error_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollSensParamRes::mutable_error_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.error_bases)
  return &error_bases_;
}

// repeated float error_tangents = 6;
inline int GetCollSensParamRes::error_tangents_size() const {
  return error_tangents_.size();
}
inline void GetCollSensParamRes::clear_error_tangents() {
  error_tangents_.Clear();
}
inline float GetCollSensParamRes::error_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensParamRes.error_tangents)
  return error_tangents_.Get(index);
}
inline void GetCollSensParamRes::set_error_tangents(int index, float value) {
  error_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensParamRes.error_tangents)
}
inline void GetCollSensParamRes::add_error_tangents(float value) {
  error_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollSensParamRes.error_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollSensParamRes::error_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.error_tangents)
  return error_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollSensParamRes::mutable_error_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.error_tangents)
  return &error_tangents_;
}

// repeated float t_constvel_torque_bases = 7;
inline int GetCollSensParamRes::t_constvel_torque_bases_size() const {
  return t_constvel_torque_bases_.size();
}
inline void GetCollSensParamRes::clear_t_constvel_torque_bases() {
  t_constvel_torque_bases_.Clear();
}
inline float GetCollSensParamRes::t_constvel_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_constvel_torque_bases)
  return t_constvel_torque_bases_.Get(index);
}
inline void GetCollSensParamRes::set_t_constvel_torque_bases(int index, float value) {
  t_constvel_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_constvel_torque_bases)
}
inline void GetCollSensParamRes::add_t_constvel_torque_bases(float value) {
  t_constvel_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_constvel_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollSensParamRes::t_constvel_torque_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_constvel_torque_bases)
  return t_constvel_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollSensParamRes::mutable_t_constvel_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_constvel_torque_bases)
  return &t_constvel_torque_bases_;
}

// repeated float t_constvel_torque_tangents = 8;
inline int GetCollSensParamRes::t_constvel_torque_tangents_size() const {
  return t_constvel_torque_tangents_.size();
}
inline void GetCollSensParamRes::clear_t_constvel_torque_tangents() {
  t_constvel_torque_tangents_.Clear();
}
inline float GetCollSensParamRes::t_constvel_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_constvel_torque_tangents)
  return t_constvel_torque_tangents_.Get(index);
}
inline void GetCollSensParamRes::set_t_constvel_torque_tangents(int index, float value) {
  t_constvel_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_constvel_torque_tangents)
}
inline void GetCollSensParamRes::add_t_constvel_torque_tangents(float value) {
  t_constvel_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_constvel_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollSensParamRes::t_constvel_torque_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_constvel_torque_tangents)
  return t_constvel_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollSensParamRes::mutable_t_constvel_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_constvel_torque_tangents)
  return &t_constvel_torque_tangents_;
}

// repeated float t_conveyor_torque_bases = 9;
inline int GetCollSensParamRes::t_conveyor_torque_bases_size() const {
  return t_conveyor_torque_bases_.size();
}
inline void GetCollSensParamRes::clear_t_conveyor_torque_bases() {
  t_conveyor_torque_bases_.Clear();
}
inline float GetCollSensParamRes::t_conveyor_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_conveyor_torque_bases)
  return t_conveyor_torque_bases_.Get(index);
}
inline void GetCollSensParamRes::set_t_conveyor_torque_bases(int index, float value) {
  t_conveyor_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_conveyor_torque_bases)
}
inline void GetCollSensParamRes::add_t_conveyor_torque_bases(float value) {
  t_conveyor_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_conveyor_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollSensParamRes::t_conveyor_torque_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_conveyor_torque_bases)
  return t_conveyor_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollSensParamRes::mutable_t_conveyor_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_conveyor_torque_bases)
  return &t_conveyor_torque_bases_;
}

// repeated float t_conveyor_torque_tangents = 10;
inline int GetCollSensParamRes::t_conveyor_torque_tangents_size() const {
  return t_conveyor_torque_tangents_.size();
}
inline void GetCollSensParamRes::clear_t_conveyor_torque_tangents() {
  t_conveyor_torque_tangents_.Clear();
}
inline float GetCollSensParamRes::t_conveyor_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_conveyor_torque_tangents)
  return t_conveyor_torque_tangents_.Get(index);
}
inline void GetCollSensParamRes::set_t_conveyor_torque_tangents(int index, float value) {
  t_conveyor_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_conveyor_torque_tangents)
}
inline void GetCollSensParamRes::add_t_conveyor_torque_tangents(float value) {
  t_conveyor_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_conveyor_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollSensParamRes::t_conveyor_torque_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_conveyor_torque_tangents)
  return t_conveyor_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollSensParamRes::mutable_t_conveyor_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollSensParamRes.t_conveyor_torque_tangents)
  return &t_conveyor_torque_tangents_;
}

// string msg = 100;
inline void GetCollSensParamRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetCollSensParamRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollSensParamRes.msg)
  return msg_.GetNoArena();
}
inline void GetCollSensParamRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollSensParamRes.msg)
}
inline void GetCollSensParamRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetCollSensParamRes.msg)
}
inline void GetCollSensParamRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetCollSensParamRes.msg)
}
inline void GetCollSensParamRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetCollSensParamRes.msg)
}
inline std::string* GetCollSensParamRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetCollSensParamRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCollSensParamRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetCollSensParamRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCollSensParamRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetCollSensParamRes.msg)
}

// -------------------------------------------------------------------

// SetCollPolicyReq

// .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
inline void SetCollPolicyReq::clear_policy() {
  policy_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::CollisionPolicy SetCollPolicyReq::policy() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollPolicyReq.policy)
  return static_cast< ::IndyFramework::Protobuf::Shared::CollisionPolicy >(policy_);
}
inline void SetCollPolicyReq::set_policy(::IndyFramework::Protobuf::Shared::CollisionPolicy value) {
  
  policy_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollPolicyReq.policy)
}

// float sleep_time = 2;
inline void SetCollPolicyReq::clear_sleep_time() {
  sleep_time_ = 0;
}
inline float SetCollPolicyReq::sleep_time() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollPolicyReq.sleep_time)
  return sleep_time_;
}
inline void SetCollPolicyReq::set_sleep_time(float value) {
  
  sleep_time_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollPolicyReq.sleep_time)
}

// float gravity_time = 3;
inline void SetCollPolicyReq::clear_gravity_time() {
  gravity_time_ = 0;
}
inline float SetCollPolicyReq::gravity_time() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollPolicyReq.gravity_time)
  return gravity_time_;
}
inline void SetCollPolicyReq::set_gravity_time(float value) {
  
  gravity_time_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollPolicyReq.gravity_time)
}

// -------------------------------------------------------------------

// SetCollPolicyRes

// string msg = 100;
inline void SetCollPolicyRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetCollPolicyRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetCollPolicyRes.msg)
  return msg_.GetNoArena();
}
inline void SetCollPolicyRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetCollPolicyRes.msg)
}
inline void SetCollPolicyRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetCollPolicyRes.msg)
}
inline void SetCollPolicyRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetCollPolicyRes.msg)
}
inline void SetCollPolicyRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetCollPolicyRes.msg)
}
inline std::string* SetCollPolicyRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetCollPolicyRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetCollPolicyRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetCollPolicyRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetCollPolicyRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetCollPolicyRes.msg)
}

// -------------------------------------------------------------------

// GetCollPolicyReq

// -------------------------------------------------------------------

// GetCollPolicyRes

// .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
inline void GetCollPolicyRes::clear_policy() {
  policy_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::CollisionPolicy GetCollPolicyRes::policy() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollPolicyRes.policy)
  return static_cast< ::IndyFramework::Protobuf::Shared::CollisionPolicy >(policy_);
}
inline void GetCollPolicyRes::set_policy(::IndyFramework::Protobuf::Shared::CollisionPolicy value) {
  
  policy_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollPolicyRes.policy)
}

// float sleep_time = 2;
inline void GetCollPolicyRes::clear_sleep_time() {
  sleep_time_ = 0;
}
inline float GetCollPolicyRes::sleep_time() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollPolicyRes.sleep_time)
  return sleep_time_;
}
inline void GetCollPolicyRes::set_sleep_time(float value) {
  
  sleep_time_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollPolicyRes.sleep_time)
}

// float gravity_time = 3;
inline void GetCollPolicyRes::clear_gravity_time() {
  gravity_time_ = 0;
}
inline float GetCollPolicyRes::gravity_time() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollPolicyRes.gravity_time)
  return gravity_time_;
}
inline void GetCollPolicyRes::set_gravity_time(float value) {
  
  gravity_time_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollPolicyRes.gravity_time)
}

// string msg = 100;
inline void GetCollPolicyRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetCollPolicyRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollPolicyRes.msg)
  return msg_.GetNoArena();
}
inline void GetCollPolicyRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollPolicyRes.msg)
}
inline void GetCollPolicyRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetCollPolicyRes.msg)
}
inline void GetCollPolicyRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetCollPolicyRes.msg)
}
inline void GetCollPolicyRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetCollPolicyRes.msg)
}
inline std::string* GetCollPolicyRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetCollPolicyRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCollPolicyRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetCollPolicyRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCollPolicyRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetCollPolicyRes.msg)
}

// -------------------------------------------------------------------

// GetCollTuningParamReq

// -------------------------------------------------------------------

// GetCollTuningParamRes

// repeated float j_torque_bases = 1;
inline int GetCollTuningParamRes::j_torque_bases_size() const {
  return j_torque_bases_.size();
}
inline void GetCollTuningParamRes::clear_j_torque_bases() {
  j_torque_bases_.Clear();
}
inline float GetCollTuningParamRes::j_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollTuningParamRes.j_torque_bases)
  return j_torque_bases_.Get(index);
}
inline void GetCollTuningParamRes::set_j_torque_bases(int index, float value) {
  j_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollTuningParamRes.j_torque_bases)
}
inline void GetCollTuningParamRes::add_j_torque_bases(float value) {
  j_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollTuningParamRes.j_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollTuningParamRes::j_torque_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.j_torque_bases)
  return j_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollTuningParamRes::mutable_j_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.j_torque_bases)
  return &j_torque_bases_;
}

// repeated float j_torque_tangents = 2;
inline int GetCollTuningParamRes::j_torque_tangents_size() const {
  return j_torque_tangents_.size();
}
inline void GetCollTuningParamRes::clear_j_torque_tangents() {
  j_torque_tangents_.Clear();
}
inline float GetCollTuningParamRes::j_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollTuningParamRes.j_torque_tangents)
  return j_torque_tangents_.Get(index);
}
inline void GetCollTuningParamRes::set_j_torque_tangents(int index, float value) {
  j_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollTuningParamRes.j_torque_tangents)
}
inline void GetCollTuningParamRes::add_j_torque_tangents(float value) {
  j_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollTuningParamRes.j_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollTuningParamRes::j_torque_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.j_torque_tangents)
  return j_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollTuningParamRes::mutable_j_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.j_torque_tangents)
  return &j_torque_tangents_;
}

// repeated float t_torque_bases = 3;
inline int GetCollTuningParamRes::t_torque_bases_size() const {
  return t_torque_bases_.size();
}
inline void GetCollTuningParamRes::clear_t_torque_bases() {
  t_torque_bases_.Clear();
}
inline float GetCollTuningParamRes::t_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_torque_bases)
  return t_torque_bases_.Get(index);
}
inline void GetCollTuningParamRes::set_t_torque_bases(int index, float value) {
  t_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_torque_bases)
}
inline void GetCollTuningParamRes::add_t_torque_bases(float value) {
  t_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollTuningParamRes::t_torque_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_torque_bases)
  return t_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollTuningParamRes::mutable_t_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_torque_bases)
  return &t_torque_bases_;
}

// repeated float t_torque_tangents = 4;
inline int GetCollTuningParamRes::t_torque_tangents_size() const {
  return t_torque_tangents_.size();
}
inline void GetCollTuningParamRes::clear_t_torque_tangents() {
  t_torque_tangents_.Clear();
}
inline float GetCollTuningParamRes::t_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_torque_tangents)
  return t_torque_tangents_.Get(index);
}
inline void GetCollTuningParamRes::set_t_torque_tangents(int index, float value) {
  t_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_torque_tangents)
}
inline void GetCollTuningParamRes::add_t_torque_tangents(float value) {
  t_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollTuningParamRes::t_torque_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_torque_tangents)
  return t_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollTuningParamRes::mutable_t_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_torque_tangents)
  return &t_torque_tangents_;
}

// repeated float error_bases = 5;
inline int GetCollTuningParamRes::error_bases_size() const {
  return error_bases_.size();
}
inline void GetCollTuningParamRes::clear_error_bases() {
  error_bases_.Clear();
}
inline float GetCollTuningParamRes::error_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollTuningParamRes.error_bases)
  return error_bases_.Get(index);
}
inline void GetCollTuningParamRes::set_error_bases(int index, float value) {
  error_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollTuningParamRes.error_bases)
}
inline void GetCollTuningParamRes::add_error_bases(float value) {
  error_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollTuningParamRes.error_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollTuningParamRes::error_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.error_bases)
  return error_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollTuningParamRes::mutable_error_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.error_bases)
  return &error_bases_;
}

// repeated float error_tangents = 6;
inline int GetCollTuningParamRes::error_tangents_size() const {
  return error_tangents_.size();
}
inline void GetCollTuningParamRes::clear_error_tangents() {
  error_tangents_.Clear();
}
inline float GetCollTuningParamRes::error_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollTuningParamRes.error_tangents)
  return error_tangents_.Get(index);
}
inline void GetCollTuningParamRes::set_error_tangents(int index, float value) {
  error_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollTuningParamRes.error_tangents)
}
inline void GetCollTuningParamRes::add_error_tangents(float value) {
  error_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollTuningParamRes.error_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollTuningParamRes::error_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.error_tangents)
  return error_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollTuningParamRes::mutable_error_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.error_tangents)
  return &error_tangents_;
}

// repeated float t_constvel_torque_bases = 7;
inline int GetCollTuningParamRes::t_constvel_torque_bases_size() const {
  return t_constvel_torque_bases_.size();
}
inline void GetCollTuningParamRes::clear_t_constvel_torque_bases() {
  t_constvel_torque_bases_.Clear();
}
inline float GetCollTuningParamRes::t_constvel_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_constvel_torque_bases)
  return t_constvel_torque_bases_.Get(index);
}
inline void GetCollTuningParamRes::set_t_constvel_torque_bases(int index, float value) {
  t_constvel_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_constvel_torque_bases)
}
inline void GetCollTuningParamRes::add_t_constvel_torque_bases(float value) {
  t_constvel_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_constvel_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollTuningParamRes::t_constvel_torque_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_constvel_torque_bases)
  return t_constvel_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollTuningParamRes::mutable_t_constvel_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_constvel_torque_bases)
  return &t_constvel_torque_bases_;
}

// repeated float t_constvel_torque_tangents = 8;
inline int GetCollTuningParamRes::t_constvel_torque_tangents_size() const {
  return t_constvel_torque_tangents_.size();
}
inline void GetCollTuningParamRes::clear_t_constvel_torque_tangents() {
  t_constvel_torque_tangents_.Clear();
}
inline float GetCollTuningParamRes::t_constvel_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_constvel_torque_tangents)
  return t_constvel_torque_tangents_.Get(index);
}
inline void GetCollTuningParamRes::set_t_constvel_torque_tangents(int index, float value) {
  t_constvel_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_constvel_torque_tangents)
}
inline void GetCollTuningParamRes::add_t_constvel_torque_tangents(float value) {
  t_constvel_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_constvel_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollTuningParamRes::t_constvel_torque_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_constvel_torque_tangents)
  return t_constvel_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollTuningParamRes::mutable_t_constvel_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_constvel_torque_tangents)
  return &t_constvel_torque_tangents_;
}

// repeated float t_conveyor_torque_bases = 9;
inline int GetCollTuningParamRes::t_conveyor_torque_bases_size() const {
  return t_conveyor_torque_bases_.size();
}
inline void GetCollTuningParamRes::clear_t_conveyor_torque_bases() {
  t_conveyor_torque_bases_.Clear();
}
inline float GetCollTuningParamRes::t_conveyor_torque_bases(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_conveyor_torque_bases)
  return t_conveyor_torque_bases_.Get(index);
}
inline void GetCollTuningParamRes::set_t_conveyor_torque_bases(int index, float value) {
  t_conveyor_torque_bases_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_conveyor_torque_bases)
}
inline void GetCollTuningParamRes::add_t_conveyor_torque_bases(float value) {
  t_conveyor_torque_bases_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_conveyor_torque_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollTuningParamRes::t_conveyor_torque_bases() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_conveyor_torque_bases)
  return t_conveyor_torque_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollTuningParamRes::mutable_t_conveyor_torque_bases() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_conveyor_torque_bases)
  return &t_conveyor_torque_bases_;
}

// repeated float t_conveyor_torque_tangents = 10;
inline int GetCollTuningParamRes::t_conveyor_torque_tangents_size() const {
  return t_conveyor_torque_tangents_.size();
}
inline void GetCollTuningParamRes::clear_t_conveyor_torque_tangents() {
  t_conveyor_torque_tangents_.Clear();
}
inline float GetCollTuningParamRes::t_conveyor_torque_tangents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_conveyor_torque_tangents)
  return t_conveyor_torque_tangents_.Get(index);
}
inline void GetCollTuningParamRes::set_t_conveyor_torque_tangents(int index, float value) {
  t_conveyor_torque_tangents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_conveyor_torque_tangents)
}
inline void GetCollTuningParamRes::add_t_conveyor_torque_tangents(float value) {
  t_conveyor_torque_tangents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_conveyor_torque_tangents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCollTuningParamRes::t_conveyor_torque_tangents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_conveyor_torque_tangents)
  return t_conveyor_torque_tangents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCollTuningParamRes::mutable_t_conveyor_torque_tangents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCollTuningParamRes.t_conveyor_torque_tangents)
  return &t_conveyor_torque_tangents_;
}

// bool is_calc_done = 11;
inline void GetCollTuningParamRes::clear_is_calc_done() {
  is_calc_done_ = false;
}
inline bool GetCollTuningParamRes::is_calc_done() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollTuningParamRes.is_calc_done)
  return is_calc_done_;
}
inline void GetCollTuningParamRes::set_is_calc_done(bool value) {
  
  is_calc_done_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollTuningParamRes.is_calc_done)
}

// string msg = 100;
inline void GetCollTuningParamRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetCollTuningParamRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCollTuningParamRes.msg)
  return msg_.GetNoArena();
}
inline void GetCollTuningParamRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCollTuningParamRes.msg)
}
inline void GetCollTuningParamRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetCollTuningParamRes.msg)
}
inline void GetCollTuningParamRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetCollTuningParamRes.msg)
}
inline void GetCollTuningParamRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetCollTuningParamRes.msg)
}
inline std::string* GetCollTuningParamRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetCollTuningParamRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCollTuningParamRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetCollTuningParamRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCollTuningParamRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetCollTuningParamRes.msg)
}

// -------------------------------------------------------------------

// GetRTControlDataReq

// -------------------------------------------------------------------

// GetRTControlDataRes

// repeated float q = 1;
inline int GetRTControlDataRes::q_size() const {
  return q_.size();
}
inline void GetRTControlDataRes::clear_q() {
  q_.Clear();
}
inline float GetRTControlDataRes::q(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetRTControlDataRes.q)
  return q_.Get(index);
}
inline void GetRTControlDataRes::set_q(int index, float value) {
  q_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetRTControlDataRes.q)
}
inline void GetRTControlDataRes::add_q(float value) {
  q_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetRTControlDataRes.q)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetRTControlDataRes::q() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.q)
  return q_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetRTControlDataRes::mutable_q() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.q)
  return &q_;
}

// repeated float qdot = 2;
inline int GetRTControlDataRes::qdot_size() const {
  return qdot_.size();
}
inline void GetRTControlDataRes::clear_qdot() {
  qdot_.Clear();
}
inline float GetRTControlDataRes::qdot(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetRTControlDataRes.qdot)
  return qdot_.Get(index);
}
inline void GetRTControlDataRes::set_qdot(int index, float value) {
  qdot_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetRTControlDataRes.qdot)
}
inline void GetRTControlDataRes::add_qdot(float value) {
  qdot_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetRTControlDataRes.qdot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetRTControlDataRes::qdot() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.qdot)
  return qdot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetRTControlDataRes::mutable_qdot() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.qdot)
  return &qdot_;
}

// repeated float qddot = 3;
inline int GetRTControlDataRes::qddot_size() const {
  return qddot_.size();
}
inline void GetRTControlDataRes::clear_qddot() {
  qddot_.Clear();
}
inline float GetRTControlDataRes::qddot(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetRTControlDataRes.qddot)
  return qddot_.Get(index);
}
inline void GetRTControlDataRes::set_qddot(int index, float value) {
  qddot_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetRTControlDataRes.qddot)
}
inline void GetRTControlDataRes::add_qddot(float value) {
  qddot_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetRTControlDataRes.qddot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetRTControlDataRes::qddot() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.qddot)
  return qddot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetRTControlDataRes::mutable_qddot() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.qddot)
  return &qddot_;
}

// repeated float p = 11;
inline int GetRTControlDataRes::p_size() const {
  return p_.size();
}
inline void GetRTControlDataRes::clear_p() {
  p_.Clear();
}
inline float GetRTControlDataRes::p(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetRTControlDataRes.p)
  return p_.Get(index);
}
inline void GetRTControlDataRes::set_p(int index, float value) {
  p_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetRTControlDataRes.p)
}
inline void GetRTControlDataRes::add_p(float value) {
  p_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetRTControlDataRes.p)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetRTControlDataRes::p() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.p)
  return p_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetRTControlDataRes::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.p)
  return &p_;
}

// repeated float pdot = 12;
inline int GetRTControlDataRes::pdot_size() const {
  return pdot_.size();
}
inline void GetRTControlDataRes::clear_pdot() {
  pdot_.Clear();
}
inline float GetRTControlDataRes::pdot(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetRTControlDataRes.pdot)
  return pdot_.Get(index);
}
inline void GetRTControlDataRes::set_pdot(int index, float value) {
  pdot_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetRTControlDataRes.pdot)
}
inline void GetRTControlDataRes::add_pdot(float value) {
  pdot_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetRTControlDataRes.pdot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetRTControlDataRes::pdot() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.pdot)
  return pdot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetRTControlDataRes::mutable_pdot() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.pdot)
  return &pdot_;
}

// repeated float pddot = 13;
inline int GetRTControlDataRes::pddot_size() const {
  return pddot_.size();
}
inline void GetRTControlDataRes::clear_pddot() {
  pddot_.Clear();
}
inline float GetRTControlDataRes::pddot(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetRTControlDataRes.pddot)
  return pddot_.Get(index);
}
inline void GetRTControlDataRes::set_pddot(int index, float value) {
  pddot_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetRTControlDataRes.pddot)
}
inline void GetRTControlDataRes::add_pddot(float value) {
  pddot_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetRTControlDataRes.pddot)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetRTControlDataRes::pddot() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.pddot)
  return pddot_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetRTControlDataRes::mutable_pddot() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.pddot)
  return &pddot_;
}

// repeated float ref_frame = 21;
inline int GetRTControlDataRes::ref_frame_size() const {
  return ref_frame_.size();
}
inline void GetRTControlDataRes::clear_ref_frame() {
  ref_frame_.Clear();
}
inline float GetRTControlDataRes::ref_frame(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetRTControlDataRes.ref_frame)
  return ref_frame_.Get(index);
}
inline void GetRTControlDataRes::set_ref_frame(int index, float value) {
  ref_frame_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetRTControlDataRes.ref_frame)
}
inline void GetRTControlDataRes::add_ref_frame(float value) {
  ref_frame_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetRTControlDataRes.ref_frame)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetRTControlDataRes::ref_frame() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.ref_frame)
  return ref_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetRTControlDataRes::mutable_ref_frame() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.ref_frame)
  return &ref_frame_;
}

// repeated float tool_frame = 22;
inline int GetRTControlDataRes::tool_frame_size() const {
  return tool_frame_.size();
}
inline void GetRTControlDataRes::clear_tool_frame() {
  tool_frame_.Clear();
}
inline float GetRTControlDataRes::tool_frame(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetRTControlDataRes.tool_frame)
  return tool_frame_.Get(index);
}
inline void GetRTControlDataRes::set_tool_frame(int index, float value) {
  tool_frame_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetRTControlDataRes.tool_frame)
}
inline void GetRTControlDataRes::add_tool_frame(float value) {
  tool_frame_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetRTControlDataRes.tool_frame)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetRTControlDataRes::tool_frame() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.tool_frame)
  return tool_frame_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetRTControlDataRes::mutable_tool_frame() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetRTControlDataRes.tool_frame)
  return &tool_frame_;
}

// string running_time = 31;
inline void GetRTControlDataRes::clear_running_time() {
  running_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetRTControlDataRes::running_time() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetRTControlDataRes.running_time)
  return running_time_.GetNoArena();
}
inline void GetRTControlDataRes::set_running_time(const std::string& value) {
  
  running_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetRTControlDataRes.running_time)
}
inline void GetRTControlDataRes::set_running_time(std::string&& value) {
  
  running_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetRTControlDataRes.running_time)
}
inline void GetRTControlDataRes::set_running_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  running_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetRTControlDataRes.running_time)
}
inline void GetRTControlDataRes::set_running_time(const char* value, size_t size) {
  
  running_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetRTControlDataRes.running_time)
}
inline std::string* GetRTControlDataRes::mutable_running_time() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetRTControlDataRes.running_time)
  return running_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetRTControlDataRes::release_running_time() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetRTControlDataRes.running_time)
  
  return running_time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetRTControlDataRes::set_allocated_running_time(std::string* running_time) {
  if (running_time != nullptr) {
    
  } else {
    
  }
  running_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), running_time);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetRTControlDataRes.running_time)
}

// string msg = 100;
inline void GetRTControlDataRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetRTControlDataRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetRTControlDataRes.msg)
  return msg_.GetNoArena();
}
inline void GetRTControlDataRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetRTControlDataRes.msg)
}
inline void GetRTControlDataRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetRTControlDataRes.msg)
}
inline void GetRTControlDataRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetRTControlDataRes.msg)
}
inline void GetRTControlDataRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetRTControlDataRes.msg)
}
inline std::string* GetRTControlDataRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetRTControlDataRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetRTControlDataRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetRTControlDataRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetRTControlDataRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetRTControlDataRes.msg)
}

// -------------------------------------------------------------------

// GetIODataReq

// -------------------------------------------------------------------

// GetIODataRes

// repeated bool di = 1;
inline int GetIODataRes::di_size() const {
  return di_.size();
}
inline void GetIODataRes::clear_di() {
  di_.Clear();
}
inline bool GetIODataRes::di(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetIODataRes.di)
  return di_.Get(index);
}
inline void GetIODataRes::set_di(int index, bool value) {
  di_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetIODataRes.di)
}
inline void GetIODataRes::add_di(bool value) {
  di_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetIODataRes.di)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
GetIODataRes::di() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetIODataRes.di)
  return di_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
GetIODataRes::mutable_di() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetIODataRes.di)
  return &di_;
}

// repeated bool do = 2;
inline int GetIODataRes::do__size() const {
  return do__.size();
}
inline void GetIODataRes::clear_do_() {
  do__.Clear();
}
inline bool GetIODataRes::do_(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetIODataRes.do)
  return do__.Get(index);
}
inline void GetIODataRes::set_do_(int index, bool value) {
  do__.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetIODataRes.do)
}
inline void GetIODataRes::add_do_(bool value) {
  do__.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetIODataRes.do)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
GetIODataRes::do_() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetIODataRes.do)
  return do__;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
GetIODataRes::mutable_do_() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetIODataRes.do)
  return &do__;
}

// repeated int32 ai = 3;
inline int GetIODataRes::ai_size() const {
  return ai_.size();
}
inline void GetIODataRes::clear_ai() {
  ai_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetIODataRes::ai(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetIODataRes.ai)
  return ai_.Get(index);
}
inline void GetIODataRes::set_ai(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ai_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetIODataRes.ai)
}
inline void GetIODataRes::add_ai(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ai_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetIODataRes.ai)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetIODataRes::ai() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetIODataRes.ai)
  return ai_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetIODataRes::mutable_ai() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetIODataRes.ai)
  return &ai_;
}

// repeated int32 ao = 4;
inline int GetIODataRes::ao_size() const {
  return ao_.size();
}
inline void GetIODataRes::clear_ao() {
  ao_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetIODataRes::ao(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetIODataRes.ao)
  return ao_.Get(index);
}
inline void GetIODataRes::set_ao(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ao_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetIODataRes.ao)
}
inline void GetIODataRes::add_ao(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ao_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetIODataRes.ao)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetIODataRes::ao() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetIODataRes.ao)
  return ao_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetIODataRes::mutable_ao() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetIODataRes.ao)
  return &ao_;
}

// repeated bool end_di = 11;
inline int GetIODataRes::end_di_size() const {
  return end_di_.size();
}
inline void GetIODataRes::clear_end_di() {
  end_di_.Clear();
}
inline bool GetIODataRes::end_di(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetIODataRes.end_di)
  return end_di_.Get(index);
}
inline void GetIODataRes::set_end_di(int index, bool value) {
  end_di_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetIODataRes.end_di)
}
inline void GetIODataRes::add_end_di(bool value) {
  end_di_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetIODataRes.end_di)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
GetIODataRes::end_di() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetIODataRes.end_di)
  return end_di_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
GetIODataRes::mutable_end_di() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetIODataRes.end_di)
  return &end_di_;
}

// repeated bool end_do = 12;
inline int GetIODataRes::end_do_size() const {
  return end_do_.size();
}
inline void GetIODataRes::clear_end_do() {
  end_do_.Clear();
}
inline bool GetIODataRes::end_do(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetIODataRes.end_do)
  return end_do_.Get(index);
}
inline void GetIODataRes::set_end_do(int index, bool value) {
  end_do_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetIODataRes.end_do)
}
inline void GetIODataRes::add_end_do(bool value) {
  end_do_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetIODataRes.end_do)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
GetIODataRes::end_do() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetIODataRes.end_do)
  return end_do_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
GetIODataRes::mutable_end_do() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetIODataRes.end_do)
  return &end_do_;
}

// repeated int32 end_ai = 13;
inline int GetIODataRes::end_ai_size() const {
  return end_ai_.size();
}
inline void GetIODataRes::clear_end_ai() {
  end_ai_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetIODataRes::end_ai(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetIODataRes.end_ai)
  return end_ai_.Get(index);
}
inline void GetIODataRes::set_end_ai(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  end_ai_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetIODataRes.end_ai)
}
inline void GetIODataRes::add_end_ai(::PROTOBUF_NAMESPACE_ID::int32 value) {
  end_ai_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetIODataRes.end_ai)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetIODataRes::end_ai() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetIODataRes.end_ai)
  return end_ai_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetIODataRes::mutable_end_ai() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetIODataRes.end_ai)
  return &end_ai_;
}

// repeated int32 end_ao = 14;
inline int GetIODataRes::end_ao_size() const {
  return end_ao_.size();
}
inline void GetIODataRes::clear_end_ao() {
  end_ao_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetIODataRes::end_ao(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetIODataRes.end_ao)
  return end_ao_.Get(index);
}
inline void GetIODataRes::set_end_ao(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  end_ao_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetIODataRes.end_ao)
}
inline void GetIODataRes::add_end_ao(::PROTOBUF_NAMESPACE_ID::int32 value) {
  end_ao_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetIODataRes.end_ao)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetIODataRes::end_ao() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetIODataRes.end_ao)
  return end_ao_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetIODataRes::mutable_end_ao() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetIODataRes.end_ao)
  return &end_ao_;
}

// string msg = 100;
inline void GetIODataRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetIODataRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetIODataRes.msg)
  return msg_.GetNoArena();
}
inline void GetIODataRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetIODataRes.msg)
}
inline void GetIODataRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetIODataRes.msg)
}
inline void GetIODataRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetIODataRes.msg)
}
inline void GetIODataRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetIODataRes.msg)
}
inline std::string* GetIODataRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetIODataRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetIODataRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetIODataRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetIODataRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetIODataRes.msg)
}

// -------------------------------------------------------------------

// GetCoreDataReq

// -------------------------------------------------------------------

// GetCoreDataRes

// repeated float temperatures = 2;
inline int GetCoreDataRes::temperatures_size() const {
  return temperatures_.size();
}
inline void GetCoreDataRes::clear_temperatures() {
  temperatures_.Clear();
}
inline float GetCoreDataRes::temperatures(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCoreDataRes.temperatures)
  return temperatures_.Get(index);
}
inline void GetCoreDataRes::set_temperatures(int index, float value) {
  temperatures_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCoreDataRes.temperatures)
}
inline void GetCoreDataRes::add_temperatures(float value) {
  temperatures_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCoreDataRes.temperatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCoreDataRes::temperatures() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCoreDataRes.temperatures)
  return temperatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCoreDataRes::mutable_temperatures() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCoreDataRes.temperatures)
  return &temperatures_;
}

// repeated float voltages = 3;
inline int GetCoreDataRes::voltages_size() const {
  return voltages_.size();
}
inline void GetCoreDataRes::clear_voltages() {
  voltages_.Clear();
}
inline float GetCoreDataRes::voltages(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCoreDataRes.voltages)
  return voltages_.Get(index);
}
inline void GetCoreDataRes::set_voltages(int index, float value) {
  voltages_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCoreDataRes.voltages)
}
inline void GetCoreDataRes::add_voltages(float value) {
  voltages_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCoreDataRes.voltages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCoreDataRes::voltages() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCoreDataRes.voltages)
  return voltages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCoreDataRes::mutable_voltages() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCoreDataRes.voltages)
  return &voltages_;
}

// repeated float currents = 4;
inline int GetCoreDataRes::currents_size() const {
  return currents_.size();
}
inline void GetCoreDataRes::clear_currents() {
  currents_.Clear();
}
inline float GetCoreDataRes::currents(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCoreDataRes.currents)
  return currents_.Get(index);
}
inline void GetCoreDataRes::set_currents(int index, float value) {
  currents_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCoreDataRes.currents)
}
inline void GetCoreDataRes::add_currents(float value) {
  currents_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCoreDataRes.currents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetCoreDataRes::currents() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCoreDataRes.currents)
  return currents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetCoreDataRes::mutable_currents() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCoreDataRes.currents)
  return &currents_;
}

// repeated string states = 5;
inline int GetCoreDataRes::states_size() const {
  return states_.size();
}
inline void GetCoreDataRes::clear_states() {
  states_.Clear();
}
inline const std::string& GetCoreDataRes::states(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
  return states_.Get(index);
}
inline std::string* GetCoreDataRes::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
  return states_.Mutable(index);
}
inline void GetCoreDataRes::set_states(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
  states_.Mutable(index)->assign(value);
}
inline void GetCoreDataRes::set_states(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
  states_.Mutable(index)->assign(std::move(value));
}
inline void GetCoreDataRes::set_states(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  states_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
}
inline void GetCoreDataRes::set_states(int index, const char* value, size_t size) {
  states_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
}
inline std::string* GetCoreDataRes::add_states() {
  // @@protoc_insertion_point(field_add_mutable:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
  return states_.Add();
}
inline void GetCoreDataRes::add_states(const std::string& value) {
  states_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
}
inline void GetCoreDataRes::add_states(std::string&& value) {
  states_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
}
inline void GetCoreDataRes::add_states(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  states_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
}
inline void GetCoreDataRes::add_states(const char* value, size_t size) {
  states_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetCoreDataRes::states() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
  return states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetCoreDataRes::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCoreDataRes.states)
  return &states_;
}

// repeated string state_codes = 6;
inline int GetCoreDataRes::state_codes_size() const {
  return state_codes_.size();
}
inline void GetCoreDataRes::clear_state_codes() {
  state_codes_.Clear();
}
inline const std::string& GetCoreDataRes::state_codes(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
  return state_codes_.Get(index);
}
inline std::string* GetCoreDataRes::mutable_state_codes(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
  return state_codes_.Mutable(index);
}
inline void GetCoreDataRes::set_state_codes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
  state_codes_.Mutable(index)->assign(value);
}
inline void GetCoreDataRes::set_state_codes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
  state_codes_.Mutable(index)->assign(std::move(value));
}
inline void GetCoreDataRes::set_state_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  state_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
}
inline void GetCoreDataRes::set_state_codes(int index, const char* value, size_t size) {
  state_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
}
inline std::string* GetCoreDataRes::add_state_codes() {
  // @@protoc_insertion_point(field_add_mutable:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
  return state_codes_.Add();
}
inline void GetCoreDataRes::add_state_codes(const std::string& value) {
  state_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
}
inline void GetCoreDataRes::add_state_codes(std::string&& value) {
  state_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
}
inline void GetCoreDataRes::add_state_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  state_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
}
inline void GetCoreDataRes::add_state_codes(const char* value, size_t size) {
  state_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetCoreDataRes::state_codes() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
  return state_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetCoreDataRes::mutable_state_codes() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes)
  return &state_codes_;
}

// repeated bool brake_states = 10;
inline int GetCoreDataRes::brake_states_size() const {
  return brake_states_.size();
}
inline void GetCoreDataRes::clear_brake_states() {
  brake_states_.Clear();
}
inline bool GetCoreDataRes::brake_states(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCoreDataRes.brake_states)
  return brake_states_.Get(index);
}
inline void GetCoreDataRes::set_brake_states(int index, bool value) {
  brake_states_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCoreDataRes.brake_states)
}
inline void GetCoreDataRes::add_brake_states(bool value) {
  brake_states_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetCoreDataRes.brake_states)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
GetCoreDataRes::brake_states() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetCoreDataRes.brake_states)
  return brake_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
GetCoreDataRes::mutable_brake_states() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetCoreDataRes.brake_states)
  return &brake_states_;
}

// bool servo_state = 11;
inline void GetCoreDataRes::clear_servo_state() {
  servo_state_ = false;
}
inline bool GetCoreDataRes::servo_state() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCoreDataRes.servo_state)
  return servo_state_;
}
inline void GetCoreDataRes::set_servo_state(bool value) {
  
  servo_state_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCoreDataRes.servo_state)
}

// string msg = 100;
inline void GetCoreDataRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetCoreDataRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetCoreDataRes.msg)
  return msg_.GetNoArena();
}
inline void GetCoreDataRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetCoreDataRes.msg)
}
inline void GetCoreDataRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetCoreDataRes.msg)
}
inline void GetCoreDataRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetCoreDataRes.msg)
}
inline void GetCoreDataRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetCoreDataRes.msg)
}
inline std::string* GetCoreDataRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetCoreDataRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetCoreDataRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetCoreDataRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetCoreDataRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetCoreDataRes.msg)
}

// -------------------------------------------------------------------

// GetSystemInfoDataReq

// -------------------------------------------------------------------

// GetSystemInfoDataRes

// string control_task_ver = 1;
inline void GetSystemInfoDataRes::clear_control_task_ver() {
  control_task_ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetSystemInfoDataRes::control_task_ver() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.control_task_ver)
  return control_task_ver_.GetNoArena();
}
inline void GetSystemInfoDataRes::set_control_task_ver(const std::string& value) {
  
  control_task_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.control_task_ver)
}
inline void GetSystemInfoDataRes::set_control_task_ver(std::string&& value) {
  
  control_task_ver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.control_task_ver)
}
inline void GetSystemInfoDataRes::set_control_task_ver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  control_task_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.control_task_ver)
}
inline void GetSystemInfoDataRes::set_control_task_ver(const char* value, size_t size) {
  
  control_task_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.control_task_ver)
}
inline std::string* GetSystemInfoDataRes::mutable_control_task_ver() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.control_task_ver)
  return control_task_ver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSystemInfoDataRes::release_control_task_ver() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.control_task_ver)
  
  return control_task_ver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSystemInfoDataRes::set_allocated_control_task_ver(std::string* control_task_ver) {
  if (control_task_ver != nullptr) {
    
  } else {
    
  }
  control_task_ver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), control_task_ver);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.control_task_ver)
}

// int32 dof = 2;
inline void GetSystemInfoDataRes::clear_dof() {
  dof_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetSystemInfoDataRes::dof() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.dof)
  return dof_;
}
inline void GetSystemInfoDataRes::set_dof(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dof_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.dof)
}

// string model_name = 3;
inline void GetSystemInfoDataRes::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetSystemInfoDataRes::model_name() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.model_name)
  return model_name_.GetNoArena();
}
inline void GetSystemInfoDataRes::set_model_name(const std::string& value) {
  
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.model_name)
}
inline void GetSystemInfoDataRes::set_model_name(std::string&& value) {
  
  model_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.model_name)
}
inline void GetSystemInfoDataRes::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.model_name)
}
inline void GetSystemInfoDataRes::set_model_name(const char* value, size_t size) {
  
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.model_name)
}
inline std::string* GetSystemInfoDataRes::mutable_model_name() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.model_name)
  return model_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSystemInfoDataRes::release_model_name() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.model_name)
  
  return model_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSystemInfoDataRes::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.model_name)
}

// .IndyFramework.Protobuf.Shared.EndToolPortType endtool_port_type = 9;
inline void GetSystemInfoDataRes::clear_endtool_port_type() {
  endtool_port_type_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::EndToolPortType GetSystemInfoDataRes::endtool_port_type() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_port_type)
  return static_cast< ::IndyFramework::Protobuf::Shared::EndToolPortType >(endtool_port_type_);
}
inline void GetSystemInfoDataRes::set_endtool_port_type(::IndyFramework::Protobuf::Shared::EndToolPortType value) {
  
  endtool_port_type_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_port_type)
}

// string io_board_fw_ver = 10;
inline void GetSystemInfoDataRes::clear_io_board_fw_ver() {
  io_board_fw_ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetSystemInfoDataRes::io_board_fw_ver() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.io_board_fw_ver)
  return io_board_fw_ver_.GetNoArena();
}
inline void GetSystemInfoDataRes::set_io_board_fw_ver(const std::string& value) {
  
  io_board_fw_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.io_board_fw_ver)
}
inline void GetSystemInfoDataRes::set_io_board_fw_ver(std::string&& value) {
  
  io_board_fw_ver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.io_board_fw_ver)
}
inline void GetSystemInfoDataRes::set_io_board_fw_ver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  io_board_fw_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.io_board_fw_ver)
}
inline void GetSystemInfoDataRes::set_io_board_fw_ver(const char* value, size_t size) {
  
  io_board_fw_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.io_board_fw_ver)
}
inline std::string* GetSystemInfoDataRes::mutable_io_board_fw_ver() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.io_board_fw_ver)
  return io_board_fw_ver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSystemInfoDataRes::release_io_board_fw_ver() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.io_board_fw_ver)
  
  return io_board_fw_ver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSystemInfoDataRes::set_allocated_io_board_fw_ver(std::string* io_board_fw_ver) {
  if (io_board_fw_ver != nullptr) {
    
  } else {
    
  }
  io_board_fw_ver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), io_board_fw_ver);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.io_board_fw_ver)
}

// repeated string core_board_fw_vers = 11;
inline int GetSystemInfoDataRes::core_board_fw_vers_size() const {
  return core_board_fw_vers_.size();
}
inline void GetSystemInfoDataRes::clear_core_board_fw_vers() {
  core_board_fw_vers_.Clear();
}
inline const std::string& GetSystemInfoDataRes::core_board_fw_vers(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
  return core_board_fw_vers_.Get(index);
}
inline std::string* GetSystemInfoDataRes::mutable_core_board_fw_vers(int index) {
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
  return core_board_fw_vers_.Mutable(index);
}
inline void GetSystemInfoDataRes::set_core_board_fw_vers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
  core_board_fw_vers_.Mutable(index)->assign(value);
}
inline void GetSystemInfoDataRes::set_core_board_fw_vers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
  core_board_fw_vers_.Mutable(index)->assign(std::move(value));
}
inline void GetSystemInfoDataRes::set_core_board_fw_vers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  core_board_fw_vers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
}
inline void GetSystemInfoDataRes::set_core_board_fw_vers(int index, const char* value, size_t size) {
  core_board_fw_vers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
}
inline std::string* GetSystemInfoDataRes::add_core_board_fw_vers() {
  // @@protoc_insertion_point(field_add_mutable:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
  return core_board_fw_vers_.Add();
}
inline void GetSystemInfoDataRes::add_core_board_fw_vers(const std::string& value) {
  core_board_fw_vers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
}
inline void GetSystemInfoDataRes::add_core_board_fw_vers(std::string&& value) {
  core_board_fw_vers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
}
inline void GetSystemInfoDataRes::add_core_board_fw_vers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  core_board_fw_vers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
}
inline void GetSystemInfoDataRes::add_core_board_fw_vers(const char* value, size_t size) {
  core_board_fw_vers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSystemInfoDataRes::core_board_fw_vers() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
  return core_board_fw_vers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSystemInfoDataRes::mutable_core_board_fw_vers() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers)
  return &core_board_fw_vers_;
}

// string endtool_board_fw_ver = 12;
inline void GetSystemInfoDataRes::clear_endtool_board_fw_ver() {
  endtool_board_fw_ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetSystemInfoDataRes::endtool_board_fw_ver() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_board_fw_ver)
  return endtool_board_fw_ver_.GetNoArena();
}
inline void GetSystemInfoDataRes::set_endtool_board_fw_ver(const std::string& value) {
  
  endtool_board_fw_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_board_fw_ver)
}
inline void GetSystemInfoDataRes::set_endtool_board_fw_ver(std::string&& value) {
  
  endtool_board_fw_ver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_board_fw_ver)
}
inline void GetSystemInfoDataRes::set_endtool_board_fw_ver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endtool_board_fw_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_board_fw_ver)
}
inline void GetSystemInfoDataRes::set_endtool_board_fw_ver(const char* value, size_t size) {
  
  endtool_board_fw_ver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_board_fw_ver)
}
inline std::string* GetSystemInfoDataRes::mutable_endtool_board_fw_ver() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_board_fw_ver)
  return endtool_board_fw_ver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSystemInfoDataRes::release_endtool_board_fw_ver() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_board_fw_ver)
  
  return endtool_board_fw_ver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSystemInfoDataRes::set_allocated_endtool_board_fw_ver(std::string* endtool_board_fw_ver) {
  if (endtool_board_fw_ver != nullptr) {
    
  } else {
    
  }
  endtool_board_fw_ver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endtool_board_fw_ver);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_board_fw_ver)
}

// string robot_sn = 13;
inline void GetSystemInfoDataRes::clear_robot_sn() {
  robot_sn_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetSystemInfoDataRes::robot_sn() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.robot_sn)
  return robot_sn_.GetNoArena();
}
inline void GetSystemInfoDataRes::set_robot_sn(const std::string& value) {
  
  robot_sn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.robot_sn)
}
inline void GetSystemInfoDataRes::set_robot_sn(std::string&& value) {
  
  robot_sn_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.robot_sn)
}
inline void GetSystemInfoDataRes::set_robot_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_sn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.robot_sn)
}
inline void GetSystemInfoDataRes::set_robot_sn(const char* value, size_t size) {
  
  robot_sn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.robot_sn)
}
inline std::string* GetSystemInfoDataRes::mutable_robot_sn() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.robot_sn)
  return robot_sn_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSystemInfoDataRes::release_robot_sn() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.robot_sn)
  
  return robot_sn_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSystemInfoDataRes::set_allocated_robot_sn(std::string* robot_sn) {
  if (robot_sn != nullptr) {
    
  } else {
    
  }
  robot_sn_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_sn);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.robot_sn)
}

// string msg = 100;
inline void GetSystemInfoDataRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetSystemInfoDataRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.msg)
  return msg_.GetNoArena();
}
inline void GetSystemInfoDataRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.msg)
}
inline void GetSystemInfoDataRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.msg)
}
inline void GetSystemInfoDataRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.msg)
}
inline void GetSystemInfoDataRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.msg)
}
inline std::string* GetSystemInfoDataRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetSystemInfoDataRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetSystemInfoDataRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetSystemInfoDataRes.msg)
}

// -------------------------------------------------------------------

// GetStateDataReq

// -------------------------------------------------------------------

// GetStateDataRes

// bool is_simulation_mode = 1;
inline void GetStateDataRes::clear_is_simulation_mode() {
  is_simulation_mode_ = false;
}
inline bool GetStateDataRes::is_simulation_mode() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetStateDataRes.is_simulation_mode)
  return is_simulation_mode_;
}
inline void GetStateDataRes::set_is_simulation_mode(bool value) {
  
  is_simulation_mode_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetStateDataRes.is_simulation_mode)
}

// .IndyFramework.Protobuf.Shared.OpState state = 2;
inline void GetStateDataRes::clear_state() {
  state_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::OpState GetStateDataRes::state() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetStateDataRes.state)
  return static_cast< ::IndyFramework::Protobuf::Shared::OpState >(state_);
}
inline void GetStateDataRes::set_state(::IndyFramework::Protobuf::Shared::OpState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetStateDataRes.state)
}

// string violation = 3;
inline void GetStateDataRes::clear_violation() {
  violation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetStateDataRes::violation() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetStateDataRes.violation)
  return violation_.GetNoArena();
}
inline void GetStateDataRes::set_violation(const std::string& value) {
  
  violation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetStateDataRes.violation)
}
inline void GetStateDataRes::set_violation(std::string&& value) {
  
  violation_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetStateDataRes.violation)
}
inline void GetStateDataRes::set_violation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  violation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetStateDataRes.violation)
}
inline void GetStateDataRes::set_violation(const char* value, size_t size) {
  
  violation_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetStateDataRes.violation)
}
inline std::string* GetStateDataRes::mutable_violation() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetStateDataRes.violation)
  return violation_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStateDataRes::release_violation() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetStateDataRes.violation)
  
  return violation_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateDataRes::set_allocated_violation(std::string* violation) {
  if (violation != nullptr) {
    
  } else {
    
  }
  violation_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), violation);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetStateDataRes.violation)
}

// string msg = 100;
inline void GetStateDataRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetStateDataRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetStateDataRes.msg)
  return msg_.GetNoArena();
}
inline void GetStateDataRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetStateDataRes.msg)
}
inline void GetStateDataRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetStateDataRes.msg)
}
inline void GetStateDataRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetStateDataRes.msg)
}
inline void GetStateDataRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetStateDataRes.msg)
}
inline std::string* GetStateDataRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetStateDataRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStateDataRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetStateDataRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStateDataRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetStateDataRes.msg)
}

// -------------------------------------------------------------------

// GetViolationDataReq

// -------------------------------------------------------------------

// GetViolationDataRes

// uint64 violation_code = 1;
inline void GetViolationDataRes::clear_violation_code() {
  violation_code_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetViolationDataRes::violation_code() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetViolationDataRes.violation_code)
  return violation_code_;
}
inline void GetViolationDataRes::set_violation_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  violation_code_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetViolationDataRes.violation_code)
}

// uint32 j_index = 2;
inline void GetViolationDataRes::clear_j_index() {
  j_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetViolationDataRes::j_index() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetViolationDataRes.j_index)
  return j_index_;
}
inline void GetViolationDataRes::set_j_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  j_index_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetViolationDataRes.j_index)
}

// repeated int32 i_args = 3;
inline int GetViolationDataRes::i_args_size() const {
  return i_args_.size();
}
inline void GetViolationDataRes::clear_i_args() {
  i_args_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetViolationDataRes::i_args(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetViolationDataRes.i_args)
  return i_args_.Get(index);
}
inline void GetViolationDataRes::set_i_args(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  i_args_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetViolationDataRes.i_args)
}
inline void GetViolationDataRes::add_i_args(::PROTOBUF_NAMESPACE_ID::int32 value) {
  i_args_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetViolationDataRes.i_args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
GetViolationDataRes::i_args() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetViolationDataRes.i_args)
  return i_args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
GetViolationDataRes::mutable_i_args() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetViolationDataRes.i_args)
  return &i_args_;
}

// repeated float f_args = 4;
inline int GetViolationDataRes::f_args_size() const {
  return f_args_.size();
}
inline void GetViolationDataRes::clear_f_args() {
  f_args_.Clear();
}
inline float GetViolationDataRes::f_args(int index) const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetViolationDataRes.f_args)
  return f_args_.Get(index);
}
inline void GetViolationDataRes::set_f_args(int index, float value) {
  f_args_.Set(index, value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetViolationDataRes.f_args)
}
inline void GetViolationDataRes::add_f_args(float value) {
  f_args_.Add(value);
  // @@protoc_insertion_point(field_add:IndyFramework.Protobuf.Control.GetViolationDataRes.f_args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetViolationDataRes::f_args() const {
  // @@protoc_insertion_point(field_list:IndyFramework.Protobuf.Control.GetViolationDataRes.f_args)
  return f_args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetViolationDataRes::mutable_f_args() {
  // @@protoc_insertion_point(field_mutable_list:IndyFramework.Protobuf.Control.GetViolationDataRes.f_args)
  return &f_args_;
}

// string msg = 100;
inline void GetViolationDataRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetViolationDataRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetViolationDataRes.msg)
  return msg_.GetNoArena();
}
inline void GetViolationDataRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetViolationDataRes.msg)
}
inline void GetViolationDataRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetViolationDataRes.msg)
}
inline void GetViolationDataRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetViolationDataRes.msg)
}
inline void GetViolationDataRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetViolationDataRes.msg)
}
inline std::string* GetViolationDataRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetViolationDataRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetViolationDataRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetViolationDataRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetViolationDataRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetViolationDataRes.msg)
}

// -------------------------------------------------------------------

// SetProgramStateReq

// .IndyFramework.Protobuf.Shared.ProgramState program_state = 1;
inline void SetProgramStateReq::clear_program_state() {
  program_state_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::ProgramState SetProgramStateReq::program_state() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetProgramStateReq.program_state)
  return static_cast< ::IndyFramework::Protobuf::Shared::ProgramState >(program_state_);
}
inline void SetProgramStateReq::set_program_state(::IndyFramework::Protobuf::Shared::ProgramState value) {
  
  program_state_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetProgramStateReq.program_state)
}

// -------------------------------------------------------------------

// SetProgramStateRes

// string msg = 100;
inline void SetProgramStateRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetProgramStateRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.SetProgramStateRes.msg)
  return msg_.GetNoArena();
}
inline void SetProgramStateRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.SetProgramStateRes.msg)
}
inline void SetProgramStateRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.SetProgramStateRes.msg)
}
inline void SetProgramStateRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.SetProgramStateRes.msg)
}
inline void SetProgramStateRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.SetProgramStateRes.msg)
}
inline std::string* SetProgramStateRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.SetProgramStateRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetProgramStateRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.SetProgramStateRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetProgramStateRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.SetProgramStateRes.msg)
}

// -------------------------------------------------------------------

// GetMotionDataReq

// -------------------------------------------------------------------

// GetMotionDataRes

// .IndyFramework.Protobuf.Shared.TrajState traj_state = 1;
inline void GetMotionDataRes::clear_traj_state() {
  traj_state_ = 0;
}
inline ::IndyFramework::Protobuf::Shared::TrajState GetMotionDataRes::traj_state() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.traj_state)
  return static_cast< ::IndyFramework::Protobuf::Shared::TrajState >(traj_state_);
}
inline void GetMotionDataRes::set_traj_state(::IndyFramework::Protobuf::Shared::TrajState value) {
  
  traj_state_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.traj_state)
}

// int32 traj_progress = 2;
inline void GetMotionDataRes::clear_traj_progress() {
  traj_progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMotionDataRes::traj_progress() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.traj_progress)
  return traj_progress_;
}
inline void GetMotionDataRes::set_traj_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  traj_progress_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.traj_progress)
}

// bool is_in_motion = 3;
inline void GetMotionDataRes::clear_is_in_motion() {
  is_in_motion_ = false;
}
inline bool GetMotionDataRes::is_in_motion() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.is_in_motion)
  return is_in_motion_;
}
inline void GetMotionDataRes::set_is_in_motion(bool value) {
  
  is_in_motion_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.is_in_motion)
}

// bool is_motion_done = 4;
inline void GetMotionDataRes::clear_is_motion_done() {
  is_motion_done_ = false;
}
inline bool GetMotionDataRes::is_motion_done() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.is_motion_done)
  return is_motion_done_;
}
inline void GetMotionDataRes::set_is_motion_done(bool value) {
  
  is_motion_done_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.is_motion_done)
}

// bool is_pausing = 5;
inline void GetMotionDataRes::clear_is_pausing() {
  is_pausing_ = false;
}
inline bool GetMotionDataRes::is_pausing() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.is_pausing)
  return is_pausing_;
}
inline void GetMotionDataRes::set_is_pausing(bool value) {
  
  is_pausing_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.is_pausing)
}

// bool is_stopping = 6;
inline void GetMotionDataRes::clear_is_stopping() {
  is_stopping_ = false;
}
inline bool GetMotionDataRes::is_stopping() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.is_stopping)
  return is_stopping_;
}
inline void GetMotionDataRes::set_is_stopping(bool value) {
  
  is_stopping_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.is_stopping)
}

// bool has_motion = 7;
inline void GetMotionDataRes::clear_has_motion() {
  has_motion_ = false;
}
inline bool GetMotionDataRes::has_motion() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.has_motion)
  return has_motion_;
}
inline void GetMotionDataRes::set_has_motion(bool value) {
  
  has_motion_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.has_motion)
}

// int32 speed_ratio = 8;
inline void GetMotionDataRes::clear_speed_ratio() {
  speed_ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMotionDataRes::speed_ratio() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.speed_ratio)
  return speed_ratio_;
}
inline void GetMotionDataRes::set_speed_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ratio_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.speed_ratio)
}

// int32 motion_id = 9;
inline void GetMotionDataRes::clear_motion_id() {
  motion_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMotionDataRes::motion_id() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.motion_id)
  return motion_id_;
}
inline void GetMotionDataRes::set_motion_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  motion_id_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.motion_id)
}

// float remain_distance = 10;
inline void GetMotionDataRes::clear_remain_distance() {
  remain_distance_ = 0;
}
inline float GetMotionDataRes::remain_distance() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.remain_distance)
  return remain_distance_;
}
inline void GetMotionDataRes::set_remain_distance(float value) {
  
  remain_distance_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.remain_distance)
}

// uint32 motion_queue_size = 11;
inline void GetMotionDataRes::clear_motion_queue_size() {
  motion_queue_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetMotionDataRes::motion_queue_size() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.motion_queue_size)
  return motion_queue_size_;
}
inline void GetMotionDataRes::set_motion_queue_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  motion_queue_size_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.motion_queue_size)
}

// int32 cur_traj_progress = 12;
inline void GetMotionDataRes::clear_cur_traj_progress() {
  cur_traj_progress_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetMotionDataRes::cur_traj_progress() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.cur_traj_progress)
  return cur_traj_progress_;
}
inline void GetMotionDataRes::set_cur_traj_progress(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_traj_progress_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.cur_traj_progress)
}

// string msg = 100;
inline void GetMotionDataRes::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetMotionDataRes::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetMotionDataRes.msg)
  return msg_.GetNoArena();
}
inline void GetMotionDataRes::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetMotionDataRes.msg)
}
inline void GetMotionDataRes::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetMotionDataRes.msg)
}
inline void GetMotionDataRes::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetMotionDataRes.msg)
}
inline void GetMotionDataRes::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetMotionDataRes.msg)
}
inline std::string* GetMotionDataRes::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetMotionDataRes.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetMotionDataRes::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetMotionDataRes.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetMotionDataRes::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetMotionDataRes.msg)
}

// -------------------------------------------------------------------

// GetEL5001Req

// -------------------------------------------------------------------

// GetEL5001Res

// int32 status = 1;
inline void GetEL5001Res::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetEL5001Res::status() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEL5001Res.status)
  return status_;
}
inline void GetEL5001Res::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEL5001Res.status)
}

// int32 value = 2;
inline void GetEL5001Res::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetEL5001Res::value() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEL5001Res.value)
  return value_;
}
inline void GetEL5001Res::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEL5001Res.value)
}

// int32 delta = 3;
inline void GetEL5001Res::clear_delta() {
  delta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetEL5001Res::delta() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEL5001Res.delta)
  return delta_;
}
inline void GetEL5001Res::set_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delta_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEL5001Res.delta)
}

// float average = 5;
inline void GetEL5001Res::clear_average() {
  average_ = 0;
}
inline float GetEL5001Res::average() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEL5001Res.average)
  return average_;
}
inline void GetEL5001Res::set_average(float value) {
  
  average_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEL5001Res.average)
}

// string msg = 100;
inline void GetEL5001Res::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetEL5001Res::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEL5001Res.msg)
  return msg_.GetNoArena();
}
inline void GetEL5001Res::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEL5001Res.msg)
}
inline void GetEL5001Res::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetEL5001Res.msg)
}
inline void GetEL5001Res::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetEL5001Res.msg)
}
inline void GetEL5001Res::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetEL5001Res.msg)
}
inline std::string* GetEL5001Res::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetEL5001Res.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetEL5001Res::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetEL5001Res.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetEL5001Res::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetEL5001Res.msg)
}

// -------------------------------------------------------------------

// GetEL5101Req

// -------------------------------------------------------------------

// GetEL5101Res

// int32 status = 1;
inline void GetEL5101Res::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetEL5101Res::status() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEL5101Res.status)
  return status_;
}
inline void GetEL5101Res::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEL5101Res.status)
}

// int32 value = 2;
inline void GetEL5101Res::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetEL5101Res::value() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEL5101Res.value)
  return value_;
}
inline void GetEL5101Res::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEL5101Res.value)
}

// int32 latch = 3;
inline void GetEL5101Res::clear_latch() {
  latch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetEL5101Res::latch() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEL5101Res.latch)
  return latch_;
}
inline void GetEL5101Res::set_latch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  latch_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEL5101Res.latch)
}

// int32 delta = 4;
inline void GetEL5101Res::clear_delta() {
  delta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetEL5101Res::delta() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEL5101Res.delta)
  return delta_;
}
inline void GetEL5101Res::set_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delta_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEL5101Res.delta)
}

// float average = 5;
inline void GetEL5101Res::clear_average() {
  average_ = 0;
}
inline float GetEL5101Res::average() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEL5101Res.average)
  return average_;
}
inline void GetEL5101Res::set_average(float value) {
  
  average_ = value;
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEL5101Res.average)
}

// string msg = 100;
inline void GetEL5101Res::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetEL5101Res::msg() const {
  // @@protoc_insertion_point(field_get:IndyFramework.Protobuf.Control.GetEL5101Res.msg)
  return msg_.GetNoArena();
}
inline void GetEL5101Res::set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IndyFramework.Protobuf.Control.GetEL5101Res.msg)
}
inline void GetEL5101Res::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IndyFramework.Protobuf.Control.GetEL5101Res.msg)
}
inline void GetEL5101Res::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IndyFramework.Protobuf.Control.GetEL5101Res.msg)
}
inline void GetEL5101Res::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IndyFramework.Protobuf.Control.GetEL5101Res.msg)
}
inline std::string* GetEL5101Res::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:IndyFramework.Protobuf.Control.GetEL5101Res.msg)
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetEL5101Res::release_msg() {
  // @@protoc_insertion_point(field_release:IndyFramework.Protobuf.Control.GetEL5101Res.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetEL5101Res::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:IndyFramework.Protobuf.Control.GetEL5101Res.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Control
}  // namespace Protobuf
}  // namespace IndyFramework

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_control_5fmsgs_2eproto
