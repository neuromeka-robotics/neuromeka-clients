// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control_msgs.proto

#include "control_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_shared_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnalogSignal_shared_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalSignal_shared_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSJPoint_shared_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSJTPoint_shared_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSLPoint_shared_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSLTPoint_shared_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PalletPoint_shared_5fmsgs_2eproto;
namespace IndyFramework {
namespace Protobuf {
namespace Control {
class AMoveJReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMoveJReq> _instance;
} _AMoveJReq_default_instance_;
class AMoveJResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMoveJRes> _instance;
} _AMoveJRes_default_instance_;
class AMoveJTReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMoveJTReq> _instance;
} _AMoveJTReq_default_instance_;
class AMoveJTResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMoveJTRes> _instance;
} _AMoveJTRes_default_instance_;
class AMoveLReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMoveLReq> _instance;
} _AMoveLReq_default_instance_;
class AMoveLResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMoveLRes> _instance;
} _AMoveLRes_default_instance_;
class AMoveLTReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMoveLTReq> _instance;
} _AMoveLTReq_default_instance_;
class AMoveLTResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMoveLTRes> _instance;
} _AMoveLTRes_default_instance_;
class AMoveCReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMoveCReq> _instance;
} _AMoveCReq_default_instance_;
class AMoveCResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMoveCRes> _instance;
} _AMoveCRes_default_instance_;
class AMoveCTReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMoveCTReq> _instance;
} _AMoveCTReq_default_instance_;
class AMoveCTResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMoveCTRes> _instance;
} _AMoveCTRes_default_instance_;
class AWaitIOReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AWaitIOReq> _instance;
} _AWaitIOReq_default_instance_;
class AWaitIOResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AWaitIORes> _instance;
} _AWaitIORes_default_instance_;
class AWaitTimeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AWaitTimeReq> _instance;
} _AWaitTimeReq_default_instance_;
class AWaitTimeResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AWaitTimeRes> _instance;
} _AWaitTimeRes_default_instance_;
class AWaitProgressReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AWaitProgressReq> _instance;
} _AWaitProgressReq_default_instance_;
class AWaitProgressResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AWaitProgressRes> _instance;
} _AWaitProgressRes_default_instance_;
class AWaitTrajReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AWaitTrajReq> _instance;
} _AWaitTrajReq_default_instance_;
class AWaitTrajResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AWaitTrajRes> _instance;
} _AWaitTrajRes_default_instance_;
class AMotionStopReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMotionStopReq> _instance;
} _AMotionStopReq_default_instance_;
class AMotionStopResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMotionStopRes> _instance;
} _AMotionStopRes_default_instance_;
class AWaitRadiusReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AWaitRadiusReq> _instance;
} _AWaitRadiusReq_default_instance_;
class AWaitRadiusResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AWaitRadiusRes> _instance;
} _AWaitRadiusRes_default_instance_;
class MoveSJReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSJReq> _instance;
} _MoveSJReq_default_instance_;
class MoveSJResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSJRes> _instance;
} _MoveSJRes_default_instance_;
class MoveSLReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSLReq> _instance;
} _MoveSLReq_default_instance_;
class MoveSLResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSLRes> _instance;
} _MoveSLRes_default_instance_;
class MoveSJTReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSJTReq> _instance;
} _MoveSJTReq_default_instance_;
class MoveSJTResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSJTRes> _instance;
} _MoveSJTRes_default_instance_;
class MoveSLTReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSLTReq> _instance;
} _MoveSLTReq_default_instance_;
class MoveSLTResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSLTRes> _instance;
} _MoveSLTRes_default_instance_;
class MoveSpiralReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSpiralReq> _instance;
} _MoveSpiralReq_default_instance_;
class MoveSpiralResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSpiralRes> _instance;
} _MoveSpiralRes_default_instance_;
class SetRefFrameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRefFrameReq> _instance;
} _SetRefFrameReq_default_instance_;
class SetRefFrameResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRefFrameRes> _instance;
} _SetRefFrameRes_default_instance_;
class SetRefFramePlanarReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRefFramePlanarReq> _instance;
} _SetRefFramePlanarReq_default_instance_;
class SetRefFramePlanarResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRefFramePlanarRes> _instance;
} _SetRefFramePlanarRes_default_instance_;
class SetToolFrameReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetToolFrameReq> _instance;
} _SetToolFrameReq_default_instance_;
class SetToolFrameResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetToolFrameRes> _instance;
} _SetToolFrameRes_default_instance_;
class SetSpeedRatioReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetSpeedRatioReq> _instance;
} _SetSpeedRatioReq_default_instance_;
class SetSpeedRatioResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetSpeedRatioRes> _instance;
} _SetSpeedRatioRes_default_instance_;
class SetCommandSpeedRatioReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCommandSpeedRatioReq> _instance;
} _SetCommandSpeedRatioReq_default_instance_;
class SetCommandSpeedRatioResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCommandSpeedRatioRes> _instance;
} _SetCommandSpeedRatioRes_default_instance_;
class StopReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopReq> _instance;
} _StopReq_default_instance_;
class StopResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopRes> _instance;
} _StopRes_default_instance_;
class PauseReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PauseReq> _instance;
} _PauseReq_default_instance_;
class PauseResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PauseRes> _instance;
} _PauseRes_default_instance_;
class ResumeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResumeReq> _instance;
} _ResumeReq_default_instance_;
class ResumeResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResumeRes> _instance;
} _ResumeRes_default_instance_;
class RebootReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RebootReq> _instance;
} _RebootReq_default_instance_;
class RebootResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RebootRes> _instance;
} _RebootRes_default_instance_;
class RecoverReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecoverReq> _instance;
} _RecoverReq_default_instance_;
class RecoverResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecoverRes> _instance;
} _RecoverRes_default_instance_;
class BrakeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BrakeReq> _instance;
} _BrakeReq_default_instance_;
class BrakeResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BrakeRes> _instance;
} _BrakeRes_default_instance_;
class ServoReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServoReq> _instance;
} _ServoReq_default_instance_;
class ServoResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServoRes> _instance;
} _ServoRes_default_instance_;
class SetAutoServoOffReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAutoServoOffReq> _instance;
} _SetAutoServoOffReq_default_instance_;
class SetAutoServoOffResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAutoServoOffRes> _instance;
} _SetAutoServoOffRes_default_instance_;
class GetAutoServoOffReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAutoServoOffReq> _instance;
} _GetAutoServoOffReq_default_instance_;
class GetAutoServoOffResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAutoServoOffRes> _instance;
} _GetAutoServoOffRes_default_instance_;
class SimulationModeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationModeReq> _instance;
} _SimulationModeReq_default_instance_;
class SimulationModeResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimulationModeRes> _instance;
} _SimulationModeRes_default_instance_;
class DirectTeachingModeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectTeachingModeReq> _instance;
} _DirectTeachingModeReq_default_instance_;
class DirectTeachingModeResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DirectTeachingModeRes> _instance;
} _DirectTeachingModeRes_default_instance_;
class InverseKinematicsReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InverseKinematicsReq> _instance;
} _InverseKinematicsReq_default_instance_;
class InverseKinematicsResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InverseKinematicsRes> _instance;
} _InverseKinematicsRes_default_instance_;
class CheckAproachRetractValidReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckAproachRetractValidReq> _instance;
} _CheckAproachRetractValidReq_default_instance_;
class CheckAproachRetractValidResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckAproachRetractValidRes> _instance;
} _CheckAproachRetractValidRes_default_instance_;
class GetPalletPointListReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPalletPointListReq> _instance;
} _GetPalletPointListReq_default_instance_;
class GetPalletPointListResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPalletPointListRes> _instance;
} _GetPalletPointListRes_default_instance_;
class CalculateRelativePoseReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculateRelativePoseReq> _instance;
} _CalculateRelativePoseReq_default_instance_;
class CalculateRelativePoseResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculateRelativePoseRes> _instance;
} _CalculateRelativePoseRes_default_instance_;
class CalculateCurrentPoseRelReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculateCurrentPoseRelReq> _instance;
} _CalculateCurrentPoseRelReq_default_instance_;
class CalculateCurrentPoseRelResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalculateCurrentPoseRelRes> _instance;
} _CalculateCurrentPoseRelRes_default_instance_;
class SetDIReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetDIReq> _instance;
} _SetDIReq_default_instance_;
class SetDIResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetDIRes> _instance;
} _SetDIRes_default_instance_;
class GetDIReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDIReq> _instance;
} _GetDIReq_default_instance_;
class GetDIResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDIRes> _instance;
} _GetDIRes_default_instance_;
class SetDOReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetDOReq> _instance;
} _SetDOReq_default_instance_;
class SetDOResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetDORes> _instance;
} _SetDORes_default_instance_;
class GetDOReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDOReq> _instance;
} _GetDOReq_default_instance_;
class GetDOResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDORes> _instance;
} _GetDORes_default_instance_;
class SetAIReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAIReq> _instance;
} _SetAIReq_default_instance_;
class SetAIResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAIRes> _instance;
} _SetAIRes_default_instance_;
class GetAIReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAIReq> _instance;
} _GetAIReq_default_instance_;
class GetAIResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAIRes> _instance;
} _GetAIRes_default_instance_;
class GetAOReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAOReq> _instance;
} _GetAOReq_default_instance_;
class GetAOResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAORes> _instance;
} _GetAORes_default_instance_;
class SetAOReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAOReq> _instance;
} _SetAOReq_default_instance_;
class SetAOResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAORes> _instance;
} _SetAORes_default_instance_;
class GetEndDIReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEndDIReq> _instance;
} _GetEndDIReq_default_instance_;
class GetEndDIResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEndDIRes> _instance;
} _GetEndDIRes_default_instance_;
class SetEndDIReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetEndDIReq> _instance;
} _SetEndDIReq_default_instance_;
class SetEndDIResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetEndDIRes> _instance;
} _SetEndDIRes_default_instance_;
class GetEndDOReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEndDOReq> _instance;
} _GetEndDOReq_default_instance_;
class GetEndDOResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEndDORes> _instance;
} _GetEndDORes_default_instance_;
class SetEndDOReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetEndDOReq> _instance;
} _SetEndDOReq_default_instance_;
class SetEndDOResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetEndDORes> _instance;
} _SetEndDORes_default_instance_;
class SetEndAIReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetEndAIReq> _instance;
} _SetEndAIReq_default_instance_;
class SetEndAIResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetEndAIRes> _instance;
} _SetEndAIRes_default_instance_;
class GetEndAIReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEndAIReq> _instance;
} _GetEndAIReq_default_instance_;
class GetEndAIResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEndAIRes> _instance;
} _GetEndAIRes_default_instance_;
class GetEndAOReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEndAOReq> _instance;
} _GetEndAOReq_default_instance_;
class GetEndAOResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEndAORes> _instance;
} _GetEndAORes_default_instance_;
class SetEndAOReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetEndAOReq> _instance;
} _SetEndAOReq_default_instance_;
class SetEndAOResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetEndAORes> _instance;
} _SetEndAORes_default_instance_;
class SetJointControlGainReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetJointControlGainReq> _instance;
} _SetJointControlGainReq_default_instance_;
class SetJointControlGainResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetJointControlGainRes> _instance;
} _SetJointControlGainRes_default_instance_;
class GetJointControlGainReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetJointControlGainReq> _instance;
} _GetJointControlGainReq_default_instance_;
class GetJointControlGainResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetJointControlGainRes> _instance;
} _GetJointControlGainRes_default_instance_;
class SetTaskControlGainReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetTaskControlGainReq> _instance;
} _SetTaskControlGainReq_default_instance_;
class SetTaskControlGainResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetTaskControlGainRes> _instance;
} _SetTaskControlGainRes_default_instance_;
class GetTaskControlGainReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTaskControlGainReq> _instance;
} _GetTaskControlGainReq_default_instance_;
class GetTaskControlGainResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTaskControlGainRes> _instance;
} _GetTaskControlGainRes_default_instance_;
class SetImpedanceControlGainReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetImpedanceControlGainReq> _instance;
} _SetImpedanceControlGainReq_default_instance_;
class SetImpedanceControlGainResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetImpedanceControlGainRes> _instance;
} _SetImpedanceControlGainRes_default_instance_;
class GetImpedanceControlGainReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetImpedanceControlGainReq> _instance;
} _GetImpedanceControlGainReq_default_instance_;
class GetImpedanceControlGainResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetImpedanceControlGainRes> _instance;
} _GetImpedanceControlGainRes_default_instance_;
class SetFricCompReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetFricCompReq> _instance;
} _SetFricCompReq_default_instance_;
class SetFricCompResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetFricCompRes> _instance;
} _SetFricCompRes_default_instance_;
class GetFricCompReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFricCompReq> _instance;
} _GetFricCompReq_default_instance_;
class GetFricCompResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFricCompRes> _instance;
} _GetFricCompRes_default_instance_;
class GetSafetyLimitConfigReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSafetyLimitConfigReq> _instance;
} _GetSafetyLimitConfigReq_default_instance_;
class GetSafetyLimitConfigResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSafetyLimitConfigRes> _instance;
} _GetSafetyLimitConfigRes_default_instance_;
class SetSafetyLimitConfigReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetSafetyLimitConfigReq> _instance;
} _SetSafetyLimitConfigReq_default_instance_;
class SetSafetyLimitConfigResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetSafetyLimitConfigRes> _instance;
} _SetSafetyLimitConfigRes_default_instance_;
class SetSafetyStopConfigReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetSafetyStopConfigReq> _instance;
} _SetSafetyStopConfigReq_default_instance_;
class SetSafetyStopConfigResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetSafetyStopConfigRes> _instance;
} _SetSafetyStopConfigRes_default_instance_;
class GetSafetyStopConfigReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSafetyStopConfigReq> _instance;
} _GetSafetyStopConfigReq_default_instance_;
class GetSafetyStopConfigResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSafetyStopConfigRes> _instance;
} _GetSafetyStopConfigRes_default_instance_;
class SetMountPosReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMountPosReq> _instance;
} _SetMountPosReq_default_instance_;
class SetMountPosResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMountPosRes> _instance;
} _SetMountPosRes_default_instance_;
class GetMountPosReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMountPosReq> _instance;
} _GetMountPosReq_default_instance_;
class GetMountPosResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMountPosRes> _instance;
} _GetMountPosRes_default_instance_;
class SetToolPropertyReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetToolPropertyReq> _instance;
} _SetToolPropertyReq_default_instance_;
class SetToolPropertyResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetToolPropertyRes> _instance;
} _SetToolPropertyRes_default_instance_;
class GetToolPropertyReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetToolPropertyReq> _instance;
} _GetToolPropertyReq_default_instance_;
class GetToolPropertyResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetToolPropertyRes> _instance;
} _GetToolPropertyRes_default_instance_;
class SetCollSensLevelReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCollSensLevelReq> _instance;
} _SetCollSensLevelReq_default_instance_;
class SetCollSensLevelResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCollSensLevelRes> _instance;
} _SetCollSensLevelRes_default_instance_;
class GetCollSensLevelReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollSensLevelReq> _instance;
} _GetCollSensLevelReq_default_instance_;
class GetCollSensLevelResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollSensLevelRes> _instance;
} _GetCollSensLevelRes_default_instance_;
class SetCollSensParamReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCollSensParamReq> _instance;
} _SetCollSensParamReq_default_instance_;
class SetCollSensParamResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCollSensParamRes> _instance;
} _SetCollSensParamRes_default_instance_;
class GetCollSensParamReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollSensParamReq> _instance;
} _GetCollSensParamReq_default_instance_;
class GetCollSensParamResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollSensParamRes> _instance;
} _GetCollSensParamRes_default_instance_;
class SetCollPolicyReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCollPolicyReq> _instance;
} _SetCollPolicyReq_default_instance_;
class SetCollPolicyResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCollPolicyRes> _instance;
} _SetCollPolicyRes_default_instance_;
class GetCollPolicyReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollPolicyReq> _instance;
} _GetCollPolicyReq_default_instance_;
class GetCollPolicyResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollPolicyRes> _instance;
} _GetCollPolicyRes_default_instance_;
class GetCollTuningParamReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollTuningParamReq> _instance;
} _GetCollTuningParamReq_default_instance_;
class GetCollTuningParamResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCollTuningParamRes> _instance;
} _GetCollTuningParamRes_default_instance_;
class GetRTControlDataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRTControlDataReq> _instance;
} _GetRTControlDataReq_default_instance_;
class GetRTControlDataResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRTControlDataRes> _instance;
} _GetRTControlDataRes_default_instance_;
class GetIODataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIODataReq> _instance;
} _GetIODataReq_default_instance_;
class GetIODataResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIODataRes> _instance;
} _GetIODataRes_default_instance_;
class GetCoreDataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCoreDataReq> _instance;
} _GetCoreDataReq_default_instance_;
class GetCoreDataResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCoreDataRes> _instance;
} _GetCoreDataRes_default_instance_;
class GetSystemInfoDataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSystemInfoDataReq> _instance;
} _GetSystemInfoDataReq_default_instance_;
class GetSystemInfoDataResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSystemInfoDataRes> _instance;
} _GetSystemInfoDataRes_default_instance_;
class GetStateDataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStateDataReq> _instance;
} _GetStateDataReq_default_instance_;
class GetStateDataResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStateDataRes> _instance;
} _GetStateDataRes_default_instance_;
class GetViolationDataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetViolationDataReq> _instance;
} _GetViolationDataReq_default_instance_;
class GetViolationDataResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetViolationDataRes> _instance;
} _GetViolationDataRes_default_instance_;
class SetProgramStateReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetProgramStateReq> _instance;
} _SetProgramStateReq_default_instance_;
class SetProgramStateResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetProgramStateRes> _instance;
} _SetProgramStateRes_default_instance_;
class GetMotionDataReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMotionDataReq> _instance;
} _GetMotionDataReq_default_instance_;
class GetMotionDataResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMotionDataRes> _instance;
} _GetMotionDataRes_default_instance_;
class GetEL5001ReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEL5001Req> _instance;
} _GetEL5001Req_default_instance_;
class GetEL5001ResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEL5001Res> _instance;
} _GetEL5001Res_default_instance_;
class GetEL5101ReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEL5101Req> _instance;
} _GetEL5101Req_default_instance_;
class GetEL5101ResDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetEL5101Res> _instance;
} _GetEL5101Res_default_instance_;
}  // namespace Control
}  // namespace Protobuf
}  // namespace IndyFramework
static void InitDefaultsscc_info_AMotionStopReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMotionStopReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMotionStopReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMotionStopReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMotionStopReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMotionStopReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMotionStopRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMotionStopRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMotionStopRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMotionStopRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMotionStopRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMotionStopRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMoveCReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMoveCReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMoveCReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMoveCReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMoveCReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMoveCReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMoveCRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMoveCRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMoveCRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMoveCRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMoveCRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMoveCRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMoveCTReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMoveCTReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMoveCTReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMoveCTReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMoveCTReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMoveCTReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMoveCTRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMoveCTRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMoveCTRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMoveCTRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMoveCTRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMoveCTRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMoveJReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMoveJReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMoveJReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMoveJReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMoveJReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMoveJReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMoveJRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMoveJRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMoveJRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMoveJRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMoveJRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMoveJRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMoveJTReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMoveJTReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMoveJTReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMoveJTReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMoveJTReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMoveJTReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMoveJTRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMoveJTRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMoveJTRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMoveJTRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMoveJTRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMoveJTRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMoveLReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMoveLReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMoveLReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMoveLReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMoveLReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMoveLReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMoveLRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMoveLRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMoveLRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMoveLRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMoveLRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMoveLRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMoveLTReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMoveLTReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMoveLTReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMoveLTReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMoveLTReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMoveLTReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AMoveLTRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AMoveLTRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AMoveLTRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AMoveLTRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMoveLTRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AMoveLTRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AWaitIOReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AWaitIOReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AWaitIOReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AWaitIOReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AWaitIOReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AWaitIOReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_shared_5fmsgs_2eproto.base,
      &scc_info_AnalogSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_AWaitIORes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AWaitIORes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AWaitIORes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AWaitIORes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AWaitIORes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AWaitIORes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AWaitProgressReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AWaitProgressReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AWaitProgressReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AWaitProgressReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AWaitProgressReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AWaitProgressReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_shared_5fmsgs_2eproto.base,
      &scc_info_AnalogSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_AWaitProgressRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AWaitProgressRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AWaitProgressRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AWaitProgressRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AWaitProgressRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AWaitProgressRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AWaitRadiusReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AWaitRadiusReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AWaitRadiusReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AWaitRadiusReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AWaitRadiusReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AWaitRadiusReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_shared_5fmsgs_2eproto.base,
      &scc_info_AnalogSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_AWaitRadiusRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AWaitRadiusRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AWaitRadiusRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AWaitRadiusRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AWaitRadiusRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AWaitRadiusRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AWaitTimeReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AWaitTimeReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AWaitTimeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AWaitTimeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AWaitTimeReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AWaitTimeReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_shared_5fmsgs_2eproto.base,
      &scc_info_AnalogSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_AWaitTimeRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AWaitTimeRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AWaitTimeRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AWaitTimeRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AWaitTimeRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AWaitTimeRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_AWaitTrajReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AWaitTrajReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AWaitTrajReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AWaitTrajReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AWaitTrajReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AWaitTrajReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_shared_5fmsgs_2eproto.base,
      &scc_info_AnalogSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_AWaitTrajRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_AWaitTrajRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::AWaitTrajRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::AWaitTrajRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AWaitTrajRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AWaitTrajRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_BrakeReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_BrakeReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::BrakeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::BrakeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BrakeReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BrakeReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_BrakeRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_BrakeRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::BrakeRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::BrakeRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BrakeRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BrakeRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_CalculateCurrentPoseRelReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_CalculateCurrentPoseRelReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalculateCurrentPoseRelReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CalculateCurrentPoseRelReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_CalculateCurrentPoseRelRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_CalculateCurrentPoseRelRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalculateCurrentPoseRelRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CalculateCurrentPoseRelRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_CalculateRelativePoseReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_CalculateRelativePoseReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalculateRelativePoseReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CalculateRelativePoseReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_CalculateRelativePoseRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_CalculateRelativePoseRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalculateRelativePoseRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CalculateRelativePoseRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_CheckAproachRetractValidReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_CheckAproachRetractValidReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckAproachRetractValidReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CheckAproachRetractValidReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_CheckAproachRetractValidRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_CheckAproachRetractValidRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckAproachRetractValidRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CheckAproachRetractValidRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_DirectTeachingModeReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_DirectTeachingModeReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::DirectTeachingModeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::DirectTeachingModeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectTeachingModeReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DirectTeachingModeReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_DirectTeachingModeRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_DirectTeachingModeRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::DirectTeachingModeRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::DirectTeachingModeRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DirectTeachingModeRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DirectTeachingModeRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetAIReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetAIReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetAIReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetAIReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAIReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetAIReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetAIRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetAIRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetAIRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetAIRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAIRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetAIRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetAOReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetAOReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetAOReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetAOReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAOReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetAOReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetAORes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetAORes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetAORes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetAORes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAORes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetAORes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetAutoServoOffReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetAutoServoOffReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetAutoServoOffReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetAutoServoOffReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAutoServoOffReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetAutoServoOffReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetAutoServoOffRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetAutoServoOffRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetAutoServoOffRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetAutoServoOffRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAutoServoOffRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetAutoServoOffRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetCollPolicyReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetCollPolicyReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetCollPolicyReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetCollPolicyReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCollPolicyReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCollPolicyReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetCollPolicyRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetCollPolicyRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetCollPolicyRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetCollPolicyRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCollPolicyRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCollPolicyRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetCollSensLevelReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetCollSensLevelReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetCollSensLevelReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetCollSensLevelReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCollSensLevelReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCollSensLevelReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetCollSensLevelRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetCollSensLevelRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetCollSensLevelRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetCollSensLevelRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCollSensLevelRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCollSensLevelRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetCollSensParamReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetCollSensParamReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetCollSensParamReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetCollSensParamReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCollSensParamReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCollSensParamReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetCollSensParamRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetCollSensParamRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetCollSensParamRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetCollSensParamRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCollSensParamRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCollSensParamRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetCollTuningParamReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetCollTuningParamReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetCollTuningParamReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetCollTuningParamReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCollTuningParamReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCollTuningParamReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetCollTuningParamRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetCollTuningParamRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetCollTuningParamRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetCollTuningParamRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCollTuningParamRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCollTuningParamRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetCoreDataReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetCoreDataReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetCoreDataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetCoreDataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCoreDataReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCoreDataReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetCoreDataRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetCoreDataRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetCoreDataRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetCoreDataRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCoreDataRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetCoreDataRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetDIReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetDIReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetDIReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetDIReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDIReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetDIReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetDIRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetDIRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetDIRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetDIRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDIRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetDIRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetDOReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetDOReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetDOReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetDOReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDOReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetDOReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetDORes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetDORes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetDORes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetDORes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDORes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetDORes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetEL5001Req_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetEL5001Req_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetEL5001Req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetEL5001Req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEL5001Req_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetEL5001Req_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetEL5001Res_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetEL5001Res_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetEL5001Res();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetEL5001Res::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEL5001Res_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetEL5001Res_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetEL5101Req_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetEL5101Req_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetEL5101Req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetEL5101Req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEL5101Req_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetEL5101Req_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetEL5101Res_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetEL5101Res_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetEL5101Res();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetEL5101Res::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEL5101Res_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetEL5101Res_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetEndAIReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetEndAIReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetEndAIReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetEndAIReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEndAIReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetEndAIReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetEndAIRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetEndAIRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetEndAIRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetEndAIRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEndAIRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetEndAIRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetEndAOReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetEndAOReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetEndAOReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetEndAOReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEndAOReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetEndAOReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetEndAORes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetEndAORes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetEndAORes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetEndAORes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEndAORes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetEndAORes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetEndDIReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetEndDIReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetEndDIReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetEndDIReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEndDIReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetEndDIReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetEndDIRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetEndDIRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetEndDIRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetEndDIRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEndDIRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetEndDIRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetEndDOReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetEndDOReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetEndDOReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetEndDOReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEndDOReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetEndDOReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetEndDORes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetEndDORes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetEndDORes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetEndDORes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetEndDORes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetEndDORes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetFricCompReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetFricCompReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetFricCompReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetFricCompReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFricCompReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetFricCompReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetFricCompRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetFricCompRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetFricCompRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetFricCompRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFricCompRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetFricCompRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetIODataReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetIODataReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetIODataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetIODataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetIODataReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetIODataReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetIODataRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetIODataRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetIODataRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetIODataRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetIODataRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetIODataRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetImpedanceControlGainReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetImpedanceControlGainReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetImpedanceControlGainReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetImpedanceControlGainReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetImpedanceControlGainRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetImpedanceControlGainRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetImpedanceControlGainRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetImpedanceControlGainRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetJointControlGainReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetJointControlGainReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetJointControlGainReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetJointControlGainReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetJointControlGainReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetJointControlGainReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetJointControlGainRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetJointControlGainRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetJointControlGainRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetJointControlGainRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetJointControlGainRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetJointControlGainRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetMotionDataReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetMotionDataReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetMotionDataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetMotionDataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMotionDataReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetMotionDataReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetMotionDataRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetMotionDataRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetMotionDataRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetMotionDataRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMotionDataRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetMotionDataRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetMountPosReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetMountPosReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetMountPosReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetMountPosReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMountPosReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetMountPosReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetMountPosRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetMountPosRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetMountPosRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetMountPosRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMountPosRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetMountPosRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetPalletPointListReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetPalletPointListReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetPalletPointListReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetPalletPointListReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPalletPointListReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetPalletPointListReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetPalletPointListRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetPalletPointListRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetPalletPointListRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetPalletPointListRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPalletPointListRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GetPalletPointListRes_control_5fmsgs_2eproto}, {
      &scc_info_PalletPoint_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_GetRTControlDataReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetRTControlDataReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetRTControlDataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetRTControlDataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRTControlDataReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetRTControlDataReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetRTControlDataRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetRTControlDataRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetRTControlDataRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetRTControlDataRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRTControlDataRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetRTControlDataRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetSafetyLimitConfigReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetSafetyLimitConfigReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSafetyLimitConfigReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetSafetyLimitConfigReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetSafetyLimitConfigRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetSafetyLimitConfigRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSafetyLimitConfigRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetSafetyLimitConfigRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetSafetyStopConfigReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetSafetyStopConfigReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSafetyStopConfigReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetSafetyStopConfigReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetSafetyStopConfigRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetSafetyStopConfigRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSafetyStopConfigRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetSafetyStopConfigRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetStateDataReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetStateDataReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetStateDataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetStateDataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStateDataReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetStateDataReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetStateDataRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetStateDataRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetStateDataRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetStateDataRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStateDataRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetStateDataRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetSystemInfoDataReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetSystemInfoDataReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSystemInfoDataReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetSystemInfoDataReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetSystemInfoDataRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetSystemInfoDataRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSystemInfoDataRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetSystemInfoDataRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetTaskControlGainReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetTaskControlGainReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetTaskControlGainReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetTaskControlGainReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTaskControlGainReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetTaskControlGainReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetTaskControlGainRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetTaskControlGainRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetTaskControlGainRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetTaskControlGainRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTaskControlGainRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetTaskControlGainRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetToolPropertyReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetToolPropertyReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetToolPropertyReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetToolPropertyReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetToolPropertyReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetToolPropertyReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetToolPropertyRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetToolPropertyRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetToolPropertyRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetToolPropertyRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetToolPropertyRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetToolPropertyRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetViolationDataReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetViolationDataReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetViolationDataReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetViolationDataReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetViolationDataReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetViolationDataReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_GetViolationDataRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_GetViolationDataRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::GetViolationDataRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::GetViolationDataRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetViolationDataRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetViolationDataRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_InverseKinematicsReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_InverseKinematicsReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::InverseKinematicsReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::InverseKinematicsReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InverseKinematicsReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InverseKinematicsReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_InverseKinematicsRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_InverseKinematicsRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::InverseKinematicsRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::InverseKinematicsRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InverseKinematicsRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InverseKinematicsRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveSJReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_MoveSJReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::MoveSJReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::MoveSJReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveSJReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MoveSJReq_control_5fmsgs_2eproto}, {
      &scc_info_MoveSJPoint_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveSJRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_MoveSJRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::MoveSJRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::MoveSJRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSJRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveSJRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveSJTReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_MoveSJTReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::MoveSJTReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::MoveSJTReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveSJTReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MoveSJTReq_control_5fmsgs_2eproto}, {
      &scc_info_MoveSJTPoint_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveSJTRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_MoveSJTRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::MoveSJTRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::MoveSJTRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSJTRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveSJTRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveSLReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_MoveSLReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::MoveSLReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::MoveSLReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveSLReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MoveSLReq_control_5fmsgs_2eproto}, {
      &scc_info_MoveSLPoint_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveSLRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_MoveSLRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::MoveSLRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::MoveSLRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSLRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveSLRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveSLTReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_MoveSLTReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::MoveSLTReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::MoveSLTReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveSLTReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MoveSLTReq_control_5fmsgs_2eproto}, {
      &scc_info_MoveSLTPoint_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_MoveSLTRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_MoveSLTRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::MoveSLTRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::MoveSLTRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSLTRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveSLTRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveSpiralReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_MoveSpiralReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::MoveSpiralReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::MoveSpiralReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSpiralReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveSpiralReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveSpiralRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_MoveSpiralRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::MoveSpiralRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::MoveSpiralRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSpiralRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveSpiralRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_PauseReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_PauseReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::PauseReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::PauseReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PauseReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PauseReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_PauseRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_PauseRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::PauseRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::PauseRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PauseRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PauseRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_RebootReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_RebootReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::RebootReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::RebootReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RebootReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RebootReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_RebootRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_RebootRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::RebootRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::RebootRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RebootRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RebootRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_RecoverReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_RecoverReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::RecoverReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::RecoverReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecoverReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RecoverReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_RecoverRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_RecoverRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::RecoverRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::RecoverRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RecoverRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RecoverRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_ResumeReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_ResumeReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::ResumeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::ResumeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResumeReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResumeReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_ResumeRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_ResumeRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::ResumeRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::ResumeRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResumeRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResumeRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_ServoReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_ServoReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::ServoReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::ServoReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServoReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServoReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_ServoRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_ServoRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::ServoRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::ServoRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServoRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServoRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetAIReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetAIReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetAIReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetAIReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetAIReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetAIReq_control_5fmsgs_2eproto}, {
      &scc_info_AnalogSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_SetAIRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetAIRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetAIRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetAIRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAIRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetAIRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetAOReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetAOReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetAOReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetAOReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetAOReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetAOReq_control_5fmsgs_2eproto}, {
      &scc_info_AnalogSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_SetAORes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetAORes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetAORes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetAORes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAORes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetAORes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetAutoServoOffReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetAutoServoOffReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetAutoServoOffReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetAutoServoOffReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAutoServoOffReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetAutoServoOffReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetAutoServoOffRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetAutoServoOffRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetAutoServoOffRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetAutoServoOffRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAutoServoOffRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetAutoServoOffRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetCollPolicyReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetCollPolicyReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetCollPolicyReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetCollPolicyReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCollPolicyReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetCollPolicyReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetCollPolicyRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetCollPolicyRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetCollPolicyRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetCollPolicyRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCollPolicyRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetCollPolicyRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetCollSensLevelReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetCollSensLevelReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetCollSensLevelReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetCollSensLevelReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCollSensLevelReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetCollSensLevelReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetCollSensLevelRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetCollSensLevelRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetCollSensLevelRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetCollSensLevelRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCollSensLevelRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetCollSensLevelRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetCollSensParamReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetCollSensParamReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetCollSensParamReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetCollSensParamReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCollSensParamReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetCollSensParamReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetCollSensParamRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetCollSensParamRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetCollSensParamRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetCollSensParamRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCollSensParamRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetCollSensParamRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetCommandSpeedRatioReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetCommandSpeedRatioReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCommandSpeedRatioReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetCommandSpeedRatioReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetCommandSpeedRatioRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetCommandSpeedRatioRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCommandSpeedRatioRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetCommandSpeedRatioRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetDIReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetDIReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetDIReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetDIReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetDIReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetDIReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_SetDIRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetDIRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetDIRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetDIRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetDIRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetDIRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetDOReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetDOReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetDOReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetDOReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetDOReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetDOReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_SetDORes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetDORes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetDORes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetDORes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetDORes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetDORes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetEndAIReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetEndAIReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetEndAIReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetEndAIReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetEndAIReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetEndAIReq_control_5fmsgs_2eproto}, {
      &scc_info_AnalogSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_SetEndAIRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetEndAIRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetEndAIRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetEndAIRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetEndAIRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetEndAIRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetEndAOReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetEndAOReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetEndAOReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetEndAOReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetEndAOReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetEndAOReq_control_5fmsgs_2eproto}, {
      &scc_info_AnalogSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_SetEndAORes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetEndAORes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetEndAORes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetEndAORes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetEndAORes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetEndAORes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetEndDIReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetEndDIReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetEndDIReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetEndDIReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetEndDIReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetEndDIReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_SetEndDIRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetEndDIRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetEndDIRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetEndDIRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetEndDIRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetEndDIRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetEndDOReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetEndDOReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetEndDOReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetEndDOReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetEndDOReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SetEndDOReq_control_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_SetEndDORes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetEndDORes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetEndDORes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetEndDORes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetEndDORes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetEndDORes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetFricCompReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetFricCompReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetFricCompReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetFricCompReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetFricCompReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetFricCompReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetFricCompRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetFricCompRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetFricCompRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetFricCompRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetFricCompRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetFricCompRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetImpedanceControlGainReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetImpedanceControlGainReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetImpedanceControlGainReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetImpedanceControlGainReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetImpedanceControlGainRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetImpedanceControlGainRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetImpedanceControlGainRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetImpedanceControlGainRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetJointControlGainReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetJointControlGainReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetJointControlGainReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetJointControlGainReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetJointControlGainReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetJointControlGainReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetJointControlGainRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetJointControlGainRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetJointControlGainRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetJointControlGainRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetJointControlGainRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetJointControlGainRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetMountPosReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetMountPosReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetMountPosReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetMountPosReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMountPosReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetMountPosReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetMountPosRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetMountPosRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetMountPosRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetMountPosRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMountPosRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetMountPosRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetProgramStateReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetProgramStateReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetProgramStateReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetProgramStateReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetProgramStateReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetProgramStateReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetProgramStateRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetProgramStateRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetProgramStateRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetProgramStateRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetProgramStateRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetProgramStateRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetRefFramePlanarReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetRefFramePlanarReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRefFramePlanarReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetRefFramePlanarReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetRefFramePlanarRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetRefFramePlanarRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRefFramePlanarRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetRefFramePlanarRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetRefFrameReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetRefFrameReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetRefFrameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetRefFrameReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRefFrameReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetRefFrameReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetRefFrameRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetRefFrameRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetRefFrameRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetRefFrameRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRefFrameRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetRefFrameRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetSafetyLimitConfigReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetSafetyLimitConfigReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetSafetyLimitConfigReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetSafetyLimitConfigReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetSafetyLimitConfigRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetSafetyLimitConfigRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetSafetyLimitConfigRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetSafetyLimitConfigRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetSafetyStopConfigReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetSafetyStopConfigReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetSafetyStopConfigReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetSafetyStopConfigReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetSafetyStopConfigRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetSafetyStopConfigRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetSafetyStopConfigRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetSafetyStopConfigRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetSpeedRatioReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetSpeedRatioReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetSpeedRatioReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetSpeedRatioReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetSpeedRatioReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetSpeedRatioReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetSpeedRatioRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetSpeedRatioRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetSpeedRatioRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetSpeedRatioRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetSpeedRatioRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetSpeedRatioRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetTaskControlGainReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetTaskControlGainReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetTaskControlGainReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetTaskControlGainReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetTaskControlGainReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetTaskControlGainReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetTaskControlGainRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetTaskControlGainRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetTaskControlGainRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetTaskControlGainRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetTaskControlGainRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetTaskControlGainRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetToolFrameReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetToolFrameReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetToolFrameReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetToolFrameReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetToolFrameReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetToolFrameReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetToolFrameRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetToolFrameRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetToolFrameRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetToolFrameRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetToolFrameRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetToolFrameRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetToolPropertyReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetToolPropertyReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetToolPropertyReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetToolPropertyReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetToolPropertyReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetToolPropertyReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SetToolPropertyRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SetToolPropertyRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SetToolPropertyRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SetToolPropertyRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetToolPropertyRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetToolPropertyRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SimulationModeReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SimulationModeReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SimulationModeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SimulationModeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulationModeReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SimulationModeReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_SimulationModeRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_SimulationModeRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::SimulationModeRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::SimulationModeRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimulationModeRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SimulationModeRes_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_StopReq_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_StopReq_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::StopReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::StopReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopReq_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StopReq_control_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_StopRes_control_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Control::_StopRes_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Control::StopRes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Control::StopRes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopRes_control_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StopRes_control_5fmsgs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_5fmsgs_2eproto[174];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_control_5fmsgs_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_5fmsgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJReq, jpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJReq, blending_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJReq, base_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJReq, blending_radius_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJReq, vel_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJReq, acc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJTReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJTReq, jpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJTReq, blending_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJTReq, base_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJTReq, blending_radius_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJTReq, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJTRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveJTRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLReq, tpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLReq, blending_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLReq, base_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLReq, blending_radius_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLReq, vel_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLReq, acc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLTReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLTReq, tpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLTReq, blending_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLTReq, base_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLTReq, blending_radius_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLTReq, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLTRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveLTRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCReq, tpos0_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCReq, tpos1_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCReq, blending_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCReq, base_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCReq, blending_radius_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCReq, angle_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCReq, setting_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCReq, move_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCReq, vel_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCReq, acc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCTReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCTReq, tpos0_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCTReq, tpos1_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCTReq, blending_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCTReq, base_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCTReq, blending_radius_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCTReq, angle_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCTReq, setting_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCTReq, move_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCTReq, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCTRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMoveCTRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitIOReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitIOReq, di_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitIOReq, do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitIOReq, end_di_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitIOReq, end_do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitIOReq, conjunction_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitIOReq, set_do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitIOReq, set_end_do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitIOReq, set_ao_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitIOReq, set_end_ao_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitIORes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitIORes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTimeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTimeReq, time_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTimeReq, set_do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTimeReq, set_end_do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTimeReq, set_ao_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTimeReq, set_end_ao_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTimeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTimeRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitProgressReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitProgressReq, progress_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitProgressReq, set_do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitProgressReq, set_end_do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitProgressReq, set_ao_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitProgressReq, set_end_ao_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitProgressRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitProgressRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTrajReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTrajReq, traj_condition_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTrajReq, set_do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTrajReq, set_end_do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTrajReq, set_ao_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTrajReq, set_end_ao_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTrajRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitTrajRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMotionStopReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMotionStopRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AMotionStopRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitRadiusReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitRadiusReq, radius_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitRadiusReq, set_do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitRadiusReq, set_end_do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitRadiusReq, set_ao_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitRadiusReq, set_end_ao_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitRadiusRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::AWaitRadiusRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJReq, points_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJReq, blending_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJReq, base_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJReq, blending_radius_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJReq, vel_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJReq, acc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLReq, points_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLReq, blending_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLReq, base_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLReq, blending_radius_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLReq, disp_vel_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLReq, disp_acc_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLReq, rot_vel_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLReq, rot_acc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJTReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJTReq, points_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJTReq, base_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJTRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSJTRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLTReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLTReq, points_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLTReq, blending_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLTReq, base_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLTReq, blending_radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLTRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSLTRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSpiralReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSpiralRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::MoveSpiralRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetRefFrameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetRefFrameReq, ref_frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetRefFrameRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetRefFrameRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetRefFramePlanarReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetRefFramePlanarReq, tpos0_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetRefFramePlanarReq, tpos1_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetRefFramePlanarReq, tpos2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetRefFramePlanarRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetRefFramePlanarRes, ref_frame_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetRefFramePlanarRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetToolFrameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetToolFrameReq, tool_frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetToolFrameRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetToolFrameRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSpeedRatioReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSpeedRatioReq, ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSpeedRatioRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSpeedRatioRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq, ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::StopReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::StopReq, stop_category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::StopRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::StopRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::PauseReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::PauseReq, pause_category_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::PauseRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::PauseRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::ResumeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::ResumeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::ResumeRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::RebootReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::RebootRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::RebootRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::RecoverReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::RecoverRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::RecoverRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::BrakeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::BrakeReq, on_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::BrakeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::BrakeRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::ServoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::ServoReq, on_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::ServoRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::ServoRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAutoServoOffReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAutoServoOffReq, enable_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAutoServoOffReq, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAutoServoOffRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAutoServoOffRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAutoServoOffReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAutoServoOffRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAutoServoOffRes, enable_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAutoServoOffRes, time_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAutoServoOffRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SimulationModeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SimulationModeReq, on_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SimulationModeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SimulationModeRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::DirectTeachingModeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::DirectTeachingModeReq, on_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::DirectTeachingModeRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::DirectTeachingModeRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::InverseKinematicsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::InverseKinematicsReq, tpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::InverseKinematicsReq, init_jpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::InverseKinematicsRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::InverseKinematicsRes, jpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::InverseKinematicsRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq, tpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq, init_jpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq, pre_tpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq, post_tpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes, is_valid_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes, tar_pos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes, approach_pos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes, retract_pos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetPalletPointListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetPalletPointListReq, tpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetPalletPointListReq, jpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetPalletPointListReq, pre_tpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetPalletPointListReq, post_tpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetPalletPointListReq, pallet_pattern_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetPalletPointListReq, width_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetPalletPointListReq, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetPalletPointListRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetPalletPointListRes, pallet_points_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetPalletPointListRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateRelativePoseReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateRelativePoseReq, start_pos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateRelativePoseReq, end_pos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateRelativePoseReq, base_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateRelativePoseRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateRelativePoseRes, relative_pos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateRelativePoseRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq, current_pos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq, relative_pos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq, base_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes, calculated_pos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetDIReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetDIReq, di_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetDIRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetDIRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetDIReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetDIRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetDIRes, di_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetDIRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetDOReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetDOReq, do_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetDORes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetDORes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetDOReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetDORes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetDORes, do__),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetDORes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAIReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAIReq, ai_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAIRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAIRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAIReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAIRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAIRes, ai_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAIRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAOReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAORes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAORes, ao_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetAORes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAOReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAOReq, ao_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAORes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetAORes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndDIReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndDIRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndDIRes, di_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndDIRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndDIReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndDIReq, di_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndDIRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndDIRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndDOReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndDORes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndDORes, do__),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndDORes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndDOReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndDOReq, do_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndDORes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndDORes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndAIReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndAIReq, ai_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndAIRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndAIRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndAIReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndAIRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndAIRes, ai_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndAIRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndAOReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndAORes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndAORes, ao_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEndAORes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndAOReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndAOReq, ao_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndAORes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetEndAORes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetJointControlGainReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetJointControlGainReq, kp_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetJointControlGainReq, kv_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetJointControlGainReq, kl2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetJointControlGainRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetJointControlGainRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetJointControlGainReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetJointControlGainRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetJointControlGainRes, kp_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetJointControlGainRes, kv_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetJointControlGainRes, kl2_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetJointControlGainRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetTaskControlGainReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetTaskControlGainReq, kp_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetTaskControlGainReq, kv_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetTaskControlGainReq, kl2_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetTaskControlGainReq, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetTaskControlGainRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetTaskControlGainRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetTaskControlGainReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetTaskControlGainRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetTaskControlGainRes, kp_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetTaskControlGainRes, kv_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetTaskControlGainRes, kl2_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetTaskControlGainRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq, mass_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq, damping_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq, stiffness_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq, kl2_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes, mass_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes, damping_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes, stiffness_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes, kl2_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetFricCompReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetFricCompReq, control_comp_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetFricCompReq, control_comp_levels_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetFricCompReq, dt_comp_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetFricCompReq, dt_comp_levels_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetFricCompReq, id_joint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetFricCompRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetFricCompRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetFricCompReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetFricCompRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetFricCompRes, control_comp_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetFricCompRes, control_comp_levels_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetFricCompRes, dt_comp_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetFricCompRes, dt_comp_levels_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetFricCompRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes, power_limit_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes, power_limit_ratio_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes, tcp_force_limit_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes, tcp_force_limit_ratio_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes, tcp_speed_limit_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes, tcp_speed_limit_ratio_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes, joint_limits_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq, power_limit_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq, power_limit_ratio_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq, tcp_force_limit_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq, tcp_force_limit_ratio_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq, tcp_speed_limit_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq, tcp_speed_limit_ratio_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq, joint_limits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq, joint_position_limit_stop_cat_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq, joint_speed_limit_stop_cat_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq, joint_torque_limit_stop_cat_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq, tcp_speed_limit_stop_cat_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq, tcp_force_limit_stop_cat_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq, power_limit_stop_cat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes, joint_position_limit_stop_cat_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes, joint_speed_limit_stop_cat_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes, joint_torque_limit_stop_cat_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes, tcp_speed_limit_stop_cat_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes, tcp_force_limit_stop_cat_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes, power_limit_stop_cat_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetMountPosReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetMountPosReq, ry_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetMountPosReq, rz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetMountPosRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetMountPosRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMountPosReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMountPosRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMountPosRes, ry_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMountPosRes, rz_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMountPosRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetToolPropertyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetToolPropertyReq, mass_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetToolPropertyReq, center_of_mass_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetToolPropertyReq, inertia_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetToolPropertyRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetToolPropertyRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetToolPropertyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetToolPropertyRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetToolPropertyRes, mass_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetToolPropertyRes, center_of_mass_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetToolPropertyRes, inertia_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetToolPropertyRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensLevelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensLevelReq, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensLevelRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensLevelRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensLevelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensLevelRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensLevelRes, level_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensLevelRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamReq, j_torque_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamReq, j_torque_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamReq, t_torque_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamReq, t_torque_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamReq, error_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamReq, error_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamReq, t_constvel_torque_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamReq, t_constvel_torque_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamReq, t_conveyor_torque_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamReq, t_conveyor_torque_tangents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollSensParamRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamRes, j_torque_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamRes, j_torque_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamRes, t_torque_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamRes, t_torque_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamRes, error_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamRes, error_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamRes, t_constvel_torque_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamRes, t_constvel_torque_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamRes, t_conveyor_torque_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamRes, t_conveyor_torque_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollSensParamRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollPolicyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollPolicyReq, policy_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollPolicyReq, sleep_time_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollPolicyReq, gravity_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollPolicyRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetCollPolicyRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollPolicyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollPolicyRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollPolicyRes, policy_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollPolicyRes, sleep_time_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollPolicyRes, gravity_time_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollPolicyRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, j_torque_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, j_torque_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, t_torque_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, t_torque_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, error_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, error_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, t_constvel_torque_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, t_constvel_torque_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, t_conveyor_torque_bases_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, t_conveyor_torque_tangents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, is_calc_done_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCollTuningParamRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetRTControlDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetRTControlDataRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetRTControlDataRes, q_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetRTControlDataRes, qdot_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetRTControlDataRes, qddot_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetRTControlDataRes, p_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetRTControlDataRes, pdot_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetRTControlDataRes, pddot_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetRTControlDataRes, ref_frame_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetRTControlDataRes, tool_frame_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetRTControlDataRes, running_time_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetRTControlDataRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetIODataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetIODataRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetIODataRes, di_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetIODataRes, do__),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetIODataRes, ai_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetIODataRes, ao_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetIODataRes, end_di_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetIODataRes, end_do_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetIODataRes, end_ai_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetIODataRes, end_ao_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetIODataRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCoreDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCoreDataRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCoreDataRes, temperatures_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCoreDataRes, voltages_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCoreDataRes, currents_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCoreDataRes, states_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCoreDataRes, state_codes_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCoreDataRes, brake_states_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCoreDataRes, servo_state_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetCoreDataRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSystemInfoDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSystemInfoDataRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSystemInfoDataRes, control_task_ver_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSystemInfoDataRes, dof_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSystemInfoDataRes, model_name_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSystemInfoDataRes, endtool_port_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSystemInfoDataRes, io_board_fw_ver_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSystemInfoDataRes, core_board_fw_vers_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSystemInfoDataRes, endtool_board_fw_ver_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSystemInfoDataRes, robot_sn_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetSystemInfoDataRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetStateDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetStateDataRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetStateDataRes, is_simulation_mode_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetStateDataRes, state_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetStateDataRes, violation_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetStateDataRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetViolationDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetViolationDataRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetViolationDataRes, violation_code_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetViolationDataRes, j_index_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetViolationDataRes, i_args_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetViolationDataRes, f_args_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetViolationDataRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetProgramStateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetProgramStateReq, program_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetProgramStateRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::SetProgramStateRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, traj_state_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, traj_progress_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, is_in_motion_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, is_motion_done_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, is_pausing_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, is_stopping_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, has_motion_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, speed_ratio_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, motion_id_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, remain_distance_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, motion_queue_size_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, cur_traj_progress_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetMotionDataRes, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5001Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5001Res, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5001Res, status_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5001Res, value_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5001Res, delta_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5001Res, average_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5001Res, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5101Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5101Res, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5101Res, status_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5101Res, value_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5101Res, latch_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5101Res, delta_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5101Res, average_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Control::GetEL5101Res, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IndyFramework::Protobuf::Control::AMoveJReq)},
  { 11, -1, sizeof(::IndyFramework::Protobuf::Control::AMoveJRes)},
  { 17, -1, sizeof(::IndyFramework::Protobuf::Control::AMoveJTReq)},
  { 27, -1, sizeof(::IndyFramework::Protobuf::Control::AMoveJTRes)},
  { 33, -1, sizeof(::IndyFramework::Protobuf::Control::AMoveLReq)},
  { 44, -1, sizeof(::IndyFramework::Protobuf::Control::AMoveLRes)},
  { 50, -1, sizeof(::IndyFramework::Protobuf::Control::AMoveLTReq)},
  { 60, -1, sizeof(::IndyFramework::Protobuf::Control::AMoveLTRes)},
  { 66, -1, sizeof(::IndyFramework::Protobuf::Control::AMoveCReq)},
  { 81, -1, sizeof(::IndyFramework::Protobuf::Control::AMoveCRes)},
  { 87, -1, sizeof(::IndyFramework::Protobuf::Control::AMoveCTReq)},
  { 101, -1, sizeof(::IndyFramework::Protobuf::Control::AMoveCTRes)},
  { 107, -1, sizeof(::IndyFramework::Protobuf::Control::AWaitIOReq)},
  { 121, -1, sizeof(::IndyFramework::Protobuf::Control::AWaitIORes)},
  { 127, -1, sizeof(::IndyFramework::Protobuf::Control::AWaitTimeReq)},
  { 137, -1, sizeof(::IndyFramework::Protobuf::Control::AWaitTimeRes)},
  { 143, -1, sizeof(::IndyFramework::Protobuf::Control::AWaitProgressReq)},
  { 153, -1, sizeof(::IndyFramework::Protobuf::Control::AWaitProgressRes)},
  { 159, -1, sizeof(::IndyFramework::Protobuf::Control::AWaitTrajReq)},
  { 169, -1, sizeof(::IndyFramework::Protobuf::Control::AWaitTrajRes)},
  { 175, -1, sizeof(::IndyFramework::Protobuf::Control::AMotionStopReq)},
  { 180, -1, sizeof(::IndyFramework::Protobuf::Control::AMotionStopRes)},
  { 186, -1, sizeof(::IndyFramework::Protobuf::Control::AWaitRadiusReq)},
  { 196, -1, sizeof(::IndyFramework::Protobuf::Control::AWaitRadiusRes)},
  { 202, -1, sizeof(::IndyFramework::Protobuf::Control::MoveSJReq)},
  { 213, -1, sizeof(::IndyFramework::Protobuf::Control::MoveSJRes)},
  { 219, -1, sizeof(::IndyFramework::Protobuf::Control::MoveSLReq)},
  { 232, -1, sizeof(::IndyFramework::Protobuf::Control::MoveSLRes)},
  { 238, -1, sizeof(::IndyFramework::Protobuf::Control::MoveSJTReq)},
  { 245, -1, sizeof(::IndyFramework::Protobuf::Control::MoveSJTRes)},
  { 251, -1, sizeof(::IndyFramework::Protobuf::Control::MoveSLTReq)},
  { 260, -1, sizeof(::IndyFramework::Protobuf::Control::MoveSLTRes)},
  { 266, -1, sizeof(::IndyFramework::Protobuf::Control::MoveSpiralReq)},
  { 271, -1, sizeof(::IndyFramework::Protobuf::Control::MoveSpiralRes)},
  { 277, -1, sizeof(::IndyFramework::Protobuf::Control::SetRefFrameReq)},
  { 283, -1, sizeof(::IndyFramework::Protobuf::Control::SetRefFrameRes)},
  { 289, -1, sizeof(::IndyFramework::Protobuf::Control::SetRefFramePlanarReq)},
  { 297, -1, sizeof(::IndyFramework::Protobuf::Control::SetRefFramePlanarRes)},
  { 304, -1, sizeof(::IndyFramework::Protobuf::Control::SetToolFrameReq)},
  { 310, -1, sizeof(::IndyFramework::Protobuf::Control::SetToolFrameRes)},
  { 316, -1, sizeof(::IndyFramework::Protobuf::Control::SetSpeedRatioReq)},
  { 322, -1, sizeof(::IndyFramework::Protobuf::Control::SetSpeedRatioRes)},
  { 328, -1, sizeof(::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq)},
  { 334, -1, sizeof(::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes)},
  { 340, -1, sizeof(::IndyFramework::Protobuf::Control::StopReq)},
  { 346, -1, sizeof(::IndyFramework::Protobuf::Control::StopRes)},
  { 352, -1, sizeof(::IndyFramework::Protobuf::Control::PauseReq)},
  { 358, -1, sizeof(::IndyFramework::Protobuf::Control::PauseRes)},
  { 364, -1, sizeof(::IndyFramework::Protobuf::Control::ResumeReq)},
  { 369, -1, sizeof(::IndyFramework::Protobuf::Control::ResumeRes)},
  { 375, -1, sizeof(::IndyFramework::Protobuf::Control::RebootReq)},
  { 380, -1, sizeof(::IndyFramework::Protobuf::Control::RebootRes)},
  { 386, -1, sizeof(::IndyFramework::Protobuf::Control::RecoverReq)},
  { 391, -1, sizeof(::IndyFramework::Protobuf::Control::RecoverRes)},
  { 397, -1, sizeof(::IndyFramework::Protobuf::Control::BrakeReq)},
  { 403, -1, sizeof(::IndyFramework::Protobuf::Control::BrakeRes)},
  { 409, -1, sizeof(::IndyFramework::Protobuf::Control::ServoReq)},
  { 415, -1, sizeof(::IndyFramework::Protobuf::Control::ServoRes)},
  { 421, -1, sizeof(::IndyFramework::Protobuf::Control::SetAutoServoOffReq)},
  { 428, -1, sizeof(::IndyFramework::Protobuf::Control::SetAutoServoOffRes)},
  { 434, -1, sizeof(::IndyFramework::Protobuf::Control::GetAutoServoOffReq)},
  { 439, -1, sizeof(::IndyFramework::Protobuf::Control::GetAutoServoOffRes)},
  { 447, -1, sizeof(::IndyFramework::Protobuf::Control::SimulationModeReq)},
  { 453, -1, sizeof(::IndyFramework::Protobuf::Control::SimulationModeRes)},
  { 459, -1, sizeof(::IndyFramework::Protobuf::Control::DirectTeachingModeReq)},
  { 465, -1, sizeof(::IndyFramework::Protobuf::Control::DirectTeachingModeRes)},
  { 471, -1, sizeof(::IndyFramework::Protobuf::Control::InverseKinematicsReq)},
  { 478, -1, sizeof(::IndyFramework::Protobuf::Control::InverseKinematicsRes)},
  { 485, -1, sizeof(::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq)},
  { 494, -1, sizeof(::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes)},
  { 504, -1, sizeof(::IndyFramework::Protobuf::Control::GetPalletPointListReq)},
  { 516, -1, sizeof(::IndyFramework::Protobuf::Control::GetPalletPointListRes)},
  { 523, -1, sizeof(::IndyFramework::Protobuf::Control::CalculateRelativePoseReq)},
  { 531, -1, sizeof(::IndyFramework::Protobuf::Control::CalculateRelativePoseRes)},
  { 538, -1, sizeof(::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq)},
  { 546, -1, sizeof(::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes)},
  { 553, -1, sizeof(::IndyFramework::Protobuf::Control::SetDIReq)},
  { 559, -1, sizeof(::IndyFramework::Protobuf::Control::SetDIRes)},
  { 565, -1, sizeof(::IndyFramework::Protobuf::Control::GetDIReq)},
  { 570, -1, sizeof(::IndyFramework::Protobuf::Control::GetDIRes)},
  { 577, -1, sizeof(::IndyFramework::Protobuf::Control::SetDOReq)},
  { 583, -1, sizeof(::IndyFramework::Protobuf::Control::SetDORes)},
  { 589, -1, sizeof(::IndyFramework::Protobuf::Control::GetDOReq)},
  { 594, -1, sizeof(::IndyFramework::Protobuf::Control::GetDORes)},
  { 601, -1, sizeof(::IndyFramework::Protobuf::Control::SetAIReq)},
  { 607, -1, sizeof(::IndyFramework::Protobuf::Control::SetAIRes)},
  { 613, -1, sizeof(::IndyFramework::Protobuf::Control::GetAIReq)},
  { 618, -1, sizeof(::IndyFramework::Protobuf::Control::GetAIRes)},
  { 625, -1, sizeof(::IndyFramework::Protobuf::Control::GetAOReq)},
  { 630, -1, sizeof(::IndyFramework::Protobuf::Control::GetAORes)},
  { 637, -1, sizeof(::IndyFramework::Protobuf::Control::SetAOReq)},
  { 643, -1, sizeof(::IndyFramework::Protobuf::Control::SetAORes)},
  { 649, -1, sizeof(::IndyFramework::Protobuf::Control::GetEndDIReq)},
  { 654, -1, sizeof(::IndyFramework::Protobuf::Control::GetEndDIRes)},
  { 661, -1, sizeof(::IndyFramework::Protobuf::Control::SetEndDIReq)},
  { 667, -1, sizeof(::IndyFramework::Protobuf::Control::SetEndDIRes)},
  { 673, -1, sizeof(::IndyFramework::Protobuf::Control::GetEndDOReq)},
  { 678, -1, sizeof(::IndyFramework::Protobuf::Control::GetEndDORes)},
  { 685, -1, sizeof(::IndyFramework::Protobuf::Control::SetEndDOReq)},
  { 691, -1, sizeof(::IndyFramework::Protobuf::Control::SetEndDORes)},
  { 697, -1, sizeof(::IndyFramework::Protobuf::Control::SetEndAIReq)},
  { 703, -1, sizeof(::IndyFramework::Protobuf::Control::SetEndAIRes)},
  { 709, -1, sizeof(::IndyFramework::Protobuf::Control::GetEndAIReq)},
  { 714, -1, sizeof(::IndyFramework::Protobuf::Control::GetEndAIRes)},
  { 721, -1, sizeof(::IndyFramework::Protobuf::Control::GetEndAOReq)},
  { 726, -1, sizeof(::IndyFramework::Protobuf::Control::GetEndAORes)},
  { 733, -1, sizeof(::IndyFramework::Protobuf::Control::SetEndAOReq)},
  { 739, -1, sizeof(::IndyFramework::Protobuf::Control::SetEndAORes)},
  { 745, -1, sizeof(::IndyFramework::Protobuf::Control::SetJointControlGainReq)},
  { 753, -1, sizeof(::IndyFramework::Protobuf::Control::SetJointControlGainRes)},
  { 759, -1, sizeof(::IndyFramework::Protobuf::Control::GetJointControlGainReq)},
  { 764, -1, sizeof(::IndyFramework::Protobuf::Control::GetJointControlGainRes)},
  { 773, -1, sizeof(::IndyFramework::Protobuf::Control::SetTaskControlGainReq)},
  { 782, -1, sizeof(::IndyFramework::Protobuf::Control::SetTaskControlGainRes)},
  { 788, -1, sizeof(::IndyFramework::Protobuf::Control::GetTaskControlGainReq)},
  { 793, -1, sizeof(::IndyFramework::Protobuf::Control::GetTaskControlGainRes)},
  { 802, -1, sizeof(::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq)},
  { 812, -1, sizeof(::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes)},
  { 818, -1, sizeof(::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq)},
  { 823, -1, sizeof(::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes)},
  { 833, -1, sizeof(::IndyFramework::Protobuf::Control::SetFricCompReq)},
  { 843, -1, sizeof(::IndyFramework::Protobuf::Control::SetFricCompRes)},
  { 849, -1, sizeof(::IndyFramework::Protobuf::Control::GetFricCompReq)},
  { 854, -1, sizeof(::IndyFramework::Protobuf::Control::GetFricCompRes)},
  { 864, -1, sizeof(::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq)},
  { 869, -1, sizeof(::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes)},
  { 882, -1, sizeof(::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq)},
  { 894, -1, sizeof(::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes)},
  { 900, -1, sizeof(::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq)},
  { 911, -1, sizeof(::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes)},
  { 917, -1, sizeof(::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq)},
  { 922, -1, sizeof(::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes)},
  { 934, -1, sizeof(::IndyFramework::Protobuf::Control::SetMountPosReq)},
  { 941, -1, sizeof(::IndyFramework::Protobuf::Control::SetMountPosRes)},
  { 947, -1, sizeof(::IndyFramework::Protobuf::Control::GetMountPosReq)},
  { 952, -1, sizeof(::IndyFramework::Protobuf::Control::GetMountPosRes)},
  { 960, -1, sizeof(::IndyFramework::Protobuf::Control::SetToolPropertyReq)},
  { 968, -1, sizeof(::IndyFramework::Protobuf::Control::SetToolPropertyRes)},
  { 974, -1, sizeof(::IndyFramework::Protobuf::Control::GetToolPropertyReq)},
  { 979, -1, sizeof(::IndyFramework::Protobuf::Control::GetToolPropertyRes)},
  { 988, -1, sizeof(::IndyFramework::Protobuf::Control::SetCollSensLevelReq)},
  { 994, -1, sizeof(::IndyFramework::Protobuf::Control::SetCollSensLevelRes)},
  { 1000, -1, sizeof(::IndyFramework::Protobuf::Control::GetCollSensLevelReq)},
  { 1005, -1, sizeof(::IndyFramework::Protobuf::Control::GetCollSensLevelRes)},
  { 1012, -1, sizeof(::IndyFramework::Protobuf::Control::SetCollSensParamReq)},
  { 1027, -1, sizeof(::IndyFramework::Protobuf::Control::SetCollSensParamRes)},
  { 1033, -1, sizeof(::IndyFramework::Protobuf::Control::GetCollSensParamReq)},
  { 1038, -1, sizeof(::IndyFramework::Protobuf::Control::GetCollSensParamRes)},
  { 1054, -1, sizeof(::IndyFramework::Protobuf::Control::SetCollPolicyReq)},
  { 1062, -1, sizeof(::IndyFramework::Protobuf::Control::SetCollPolicyRes)},
  { 1068, -1, sizeof(::IndyFramework::Protobuf::Control::GetCollPolicyReq)},
  { 1073, -1, sizeof(::IndyFramework::Protobuf::Control::GetCollPolicyRes)},
  { 1082, -1, sizeof(::IndyFramework::Protobuf::Control::GetCollTuningParamReq)},
  { 1087, -1, sizeof(::IndyFramework::Protobuf::Control::GetCollTuningParamRes)},
  { 1104, -1, sizeof(::IndyFramework::Protobuf::Control::GetRTControlDataReq)},
  { 1109, -1, sizeof(::IndyFramework::Protobuf::Control::GetRTControlDataRes)},
  { 1124, -1, sizeof(::IndyFramework::Protobuf::Control::GetIODataReq)},
  { 1129, -1, sizeof(::IndyFramework::Protobuf::Control::GetIODataRes)},
  { 1143, -1, sizeof(::IndyFramework::Protobuf::Control::GetCoreDataReq)},
  { 1148, -1, sizeof(::IndyFramework::Protobuf::Control::GetCoreDataRes)},
  { 1161, -1, sizeof(::IndyFramework::Protobuf::Control::GetSystemInfoDataReq)},
  { 1166, -1, sizeof(::IndyFramework::Protobuf::Control::GetSystemInfoDataRes)},
  { 1180, -1, sizeof(::IndyFramework::Protobuf::Control::GetStateDataReq)},
  { 1185, -1, sizeof(::IndyFramework::Protobuf::Control::GetStateDataRes)},
  { 1194, -1, sizeof(::IndyFramework::Protobuf::Control::GetViolationDataReq)},
  { 1199, -1, sizeof(::IndyFramework::Protobuf::Control::GetViolationDataRes)},
  { 1209, -1, sizeof(::IndyFramework::Protobuf::Control::SetProgramStateReq)},
  { 1215, -1, sizeof(::IndyFramework::Protobuf::Control::SetProgramStateRes)},
  { 1221, -1, sizeof(::IndyFramework::Protobuf::Control::GetMotionDataReq)},
  { 1226, -1, sizeof(::IndyFramework::Protobuf::Control::GetMotionDataRes)},
  { 1244, -1, sizeof(::IndyFramework::Protobuf::Control::GetEL5001Req)},
  { 1249, -1, sizeof(::IndyFramework::Protobuf::Control::GetEL5001Res)},
  { 1259, -1, sizeof(::IndyFramework::Protobuf::Control::GetEL5101Req)},
  { 1264, -1, sizeof(::IndyFramework::Protobuf::Control::GetEL5101Res)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMoveJReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMoveJRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMoveJTReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMoveJTRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMoveLReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMoveLRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMoveLTReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMoveLTRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMoveCReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMoveCRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMoveCTReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMoveCTRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AWaitIOReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AWaitIORes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AWaitTimeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AWaitTimeRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AWaitProgressReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AWaitProgressRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AWaitTrajReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AWaitTrajRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMotionStopReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AMotionStopRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AWaitRadiusReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_AWaitRadiusRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_MoveSJReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_MoveSJRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_MoveSLReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_MoveSLRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_MoveSJTReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_MoveSJTRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_MoveSLTReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_MoveSLTRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_MoveSpiralReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_MoveSpiralRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetRefFrameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetRefFrameRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetRefFramePlanarReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetRefFramePlanarRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetToolFrameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetToolFrameRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetSpeedRatioReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetSpeedRatioRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetCommandSpeedRatioReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetCommandSpeedRatioRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_StopReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_StopRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_PauseReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_PauseRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_ResumeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_ResumeRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_RebootReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_RebootRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_RecoverReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_RecoverRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_BrakeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_BrakeRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_ServoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_ServoRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetAutoServoOffReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetAutoServoOffRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetAutoServoOffReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetAutoServoOffRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SimulationModeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SimulationModeRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_DirectTeachingModeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_DirectTeachingModeRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_InverseKinematicsReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_InverseKinematicsRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_CheckAproachRetractValidReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_CheckAproachRetractValidRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetPalletPointListReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetPalletPointListRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_CalculateRelativePoseReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_CalculateRelativePoseRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_CalculateCurrentPoseRelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_CalculateCurrentPoseRelRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetDIReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetDIRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetDIReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetDIRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetDOReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetDORes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetDOReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetDORes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetAIReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetAIRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetAIReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetAIRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetAOReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetAORes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetAOReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetAORes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetEndDIReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetEndDIRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetEndDIReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetEndDIRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetEndDOReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetEndDORes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetEndDOReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetEndDORes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetEndAIReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetEndAIRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetEndAIReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetEndAIRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetEndAOReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetEndAORes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetEndAOReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetEndAORes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetJointControlGainReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetJointControlGainRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetJointControlGainReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetJointControlGainRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetTaskControlGainReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetTaskControlGainRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetTaskControlGainReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetTaskControlGainRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetImpedanceControlGainReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetImpedanceControlGainRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetImpedanceControlGainReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetImpedanceControlGainRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetFricCompReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetFricCompRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetFricCompReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetFricCompRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetSafetyLimitConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetSafetyLimitConfigRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetSafetyLimitConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetSafetyLimitConfigRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetSafetyStopConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetSafetyStopConfigRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetSafetyStopConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetSafetyStopConfigRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetMountPosReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetMountPosRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetMountPosReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetMountPosRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetToolPropertyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetToolPropertyRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetToolPropertyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetToolPropertyRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetCollSensLevelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetCollSensLevelRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetCollSensLevelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetCollSensLevelRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetCollSensParamReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetCollSensParamRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetCollSensParamReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetCollSensParamRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetCollPolicyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetCollPolicyRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetCollPolicyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetCollPolicyRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetCollTuningParamReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetCollTuningParamRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetRTControlDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetRTControlDataRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetIODataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetIODataRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetCoreDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetCoreDataRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetSystemInfoDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetSystemInfoDataRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetStateDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetStateDataRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetViolationDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetViolationDataRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetProgramStateReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_SetProgramStateRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetMotionDataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetMotionDataRes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetEL5001Req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetEL5001Res_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetEL5101Req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Control::_GetEL5101Res_default_instance_),
};

const char descriptor_table_protodef_control_5fmsgs_2eproto[] =
  "\n\022control_msgs.proto\022\036IndyFramework.Prot"
  "obuf.Control\032\021shared_msgs.proto\"\321\001\n\tAMov"
  "eJReq\022\014\n\004jpos\030\001 \003(\002\022B\n\rblending_type\030\003 \001"
  "(\0162+.IndyFramework.Protobuf.Shared.Blend"
  "ingType\022\?\n\tbase_type\030\004 \001(\0162,.IndyFramewo"
  "rk.Protobuf.Shared.JointBaseType\022\027\n\017blen"
  "ding_radius\030\005 \001(\002\022\013\n\003vel\030\007 \001(\002\022\013\n\003acc\030\010 "
  "\001(\002\"\030\n\tAMoveJRes\022\013\n\003msg\030d \001(\t\"\306\001\n\nAMoveJ"
  "TReq\022\014\n\004jpos\030\001 \003(\002\022B\n\rblending_type\030\003 \001("
  "\0162+.IndyFramework.Protobuf.Shared.Blendi"
  "ngType\022\?\n\tbase_type\030\004 \001(\0162,.IndyFramewor"
  "k.Protobuf.Shared.JointBaseType\022\027\n\017blend"
  "ing_radius\030\005 \001(\002\022\014\n\004time\030\006 \001(\002\"\031\n\nAMoveJ"
  "TRes\022\013\n\003msg\030d \001(\t\"\320\001\n\tAMoveLReq\022\014\n\004tpos\030"
  "\001 \003(\002\022B\n\rblending_type\030\003 \001(\0162+.IndyFrame"
  "work.Protobuf.Shared.BlendingType\022>\n\tbas"
  "e_type\030\004 \001(\0162+.IndyFramework.Protobuf.Sh"
  "ared.TaskBaseType\022\027\n\017blending_radius\030\005 \001"
  "(\002\022\013\n\003vel\030\006 \001(\002\022\013\n\003acc\030\007 \001(\002\"\030\n\tAMoveLRe"
  "s\022\013\n\003msg\030d \001(\t\"\305\001\n\nAMoveLTReq\022\014\n\004tpos\030\001 "
  "\003(\002\022B\n\rblending_type\030\003 \001(\0162+.IndyFramewo"
  "rk.Protobuf.Shared.BlendingType\022>\n\tbase_"
  "type\030\004 \001(\0162+.IndyFramework.Protobuf.Shar"
  "ed.TaskBaseType\022\027\n\017blending_radius\030\005 \001(\002"
  "\022\014\n\004time\030\006 \001(\002\"\031\n\nAMoveLTRes\022\013\n\003msg\030d \001("
  "\t\"\377\002\n\tAMoveCReq\022\r\n\005tpos0\030\001 \003(\002\022\r\n\005tpos1\030"
  "\002 \003(\002\022B\n\rblending_type\030\003 \001(\0162+.IndyFrame"
  "work.Protobuf.Shared.BlendingType\022>\n\tbas"
  "e_type\030\004 \001(\0162+.IndyFramework.Protobuf.Sh"
  "ared.TaskBaseType\022\027\n\017blending_radius\030\005 \001"
  "(\002\022\r\n\005angle\030\006 \001(\002\022H\n\014setting_type\030\r \001(\0162"
  "2.IndyFramework.Protobuf.Shared.Circular"
  "SettingType\022D\n\tmove_type\030\016 \001(\01621.IndyFra"
  "mework.Protobuf.Shared.CircularMovingTyp"
  "e\022\013\n\003vel\030\017 \001(\002\022\013\n\003acc\030\020 \001(\002\"\030\n\tAMoveCRes"
  "\022\013\n\003msg\030d \001(\t\"\364\002\n\nAMoveCTReq\022\r\n\005tpos0\030\001 "
  "\003(\002\022\r\n\005tpos1\030\002 \003(\002\022B\n\rblending_type\030\003 \001("
  "\0162+.IndyFramework.Protobuf.Shared.Blendi"
  "ngType\022>\n\tbase_type\030\004 \001(\0162+.IndyFramewor"
  "k.Protobuf.Shared.TaskBaseType\022\027\n\017blendi"
  "ng_radius\030\005 \001(\002\022\r\n\005angle\030\006 \001(\002\022H\n\014settin"
  "g_type\030\r \001(\01622.IndyFramework.Protobuf.Sh"
  "ared.CircularSettingType\022D\n\tmove_type\030\016 "
  "\001(\01621.IndyFramework.Protobuf.Shared.Circ"
  "ularMovingType\022\014\n\004time\030\025 \001(\002\"\031\n\nAMoveCTR"
  "es\022\013\n\003msg\030d \001(\t\"\267\004\n\nAWaitIOReq\022=\n\007di_lis"
  "t\030\001 \003(\0132,.IndyFramework.Protobuf.Shared."
  "DigitalSignal\022=\n\007do_list\030\002 \003(\0132,.IndyFra"
  "mework.Protobuf.Shared.DigitalSignal\022A\n\013"
  "end_di_list\030\003 \003(\0132,.IndyFramework.Protob"
  "uf.Shared.DigitalSignal\022A\n\013end_do_list\030\004"
  " \003(\0132,.IndyFramework.Protobuf.Shared.Dig"
  "italSignal\022\023\n\013conjunction\030\005 \001(\005\022A\n\013set_d"
  "o_list\030\006 \003(\0132,.IndyFramework.Protobuf.Sh"
  "ared.DigitalSignal\022E\n\017set_end_do_list\030\007 "
  "\003(\0132,.IndyFramework.Protobuf.Shared.Digi"
  "talSignal\022@\n\013set_ao_list\030\010 \003(\0132+.IndyFra"
  "mework.Protobuf.Shared.AnalogSignal\022D\n\017s"
  "et_end_ao_list\030\t \003(\0132+.IndyFramework.Pro"
  "tobuf.Shared.AnalogSignal\"\031\n\nAWaitIORes\022"
  "\013\n\003msg\030d \001(\t\"\256\002\n\014AWaitTimeReq\022\014\n\004time\030\001 "
  "\001(\002\022A\n\013set_do_list\030\002 \003(\0132,.IndyFramework"
  ".Protobuf.Shared.DigitalSignal\022E\n\017set_en"
  "d_do_list\030\003 \003(\0132,.IndyFramework.Protobuf"
  ".Shared.DigitalSignal\022@\n\013set_ao_list\030\004 \003"
  "(\0132+.IndyFramework.Protobuf.Shared.Analo"
  "gSignal\022D\n\017set_end_ao_list\030\005 \003(\0132+.IndyF"
  "ramework.Protobuf.Shared.AnalogSignal\"\033\n"
  "\014AWaitTimeRes\022\013\n\003msg\030d \001(\t\"\266\002\n\020AWaitProg"
  "ressReq\022\020\n\010progress\030\001 \001(\005\022A\n\013set_do_list"
  "\030\002 \003(\0132,.IndyFramework.Protobuf.Shared.D"
  "igitalSignal\022E\n\017set_end_do_list\030\003 \003(\0132,."
  "IndyFramework.Protobuf.Shared.DigitalSig"
  "nal\022@\n\013set_ao_list\030\004 \003(\0132+.IndyFramework"
  ".Protobuf.Shared.AnalogSignal\022D\n\017set_end"
  "_ao_list\030\005 \003(\0132+.IndyFramework.Protobuf."
  "Shared.AnalogSignal\"\037\n\020AWaitProgressRes\022"
  "\013\n\003msg\030d \001(\t\"\346\002\n\014AWaitTrajReq\022D\n\016traj_co"
  "ndition\030\001 \001(\0162,.IndyFramework.Protobuf.S"
  "hared.TrajCondition\022A\n\013set_do_list\030\002 \003(\013"
  "2,.IndyFramework.Protobuf.Shared.Digital"
  "Signal\022E\n\017set_end_do_list\030\003 \003(\0132,.IndyFr"
  "amework.Protobuf.Shared.DigitalSignal\022@\n"
  "\013set_ao_list\030\004 \003(\0132+.IndyFramework.Proto"
  "buf.Shared.AnalogSignal\022D\n\017set_end_ao_li"
  "st\030\005 \003(\0132+.IndyFramework.Protobuf.Shared"
  ".AnalogSignal\"\033\n\014AWaitTrajRes\022\013\n\003msg\030d \001"
  "(\t\"\020\n\016AMotionStopReq\"\035\n\016AMotionStopRes\022\013"
  "\n\003msg\030d \001(\t\"\262\002\n\016AWaitRadiusReq\022\016\n\006radius"
  "\030\001 \001(\005\022A\n\013set_do_list\030\002 \003(\0132,.IndyFramew"
  "ork.Protobuf.Shared.DigitalSignal\022E\n\017set"
  "_end_do_list\030\003 \003(\0132,.IndyFramework.Proto"
  "buf.Shared.DigitalSignal\022@\n\013set_ao_list\030"
  "\004 \003(\0132+.IndyFramework.Protobuf.Shared.An"
  "alogSignal\022D\n\017set_end_ao_list\030\005 \003(\0132+.In"
  "dyFramework.Protobuf.Shared.AnalogSignal"
  "\"\035\n\016AWaitRadiusRes\022\013\n\003msg\030d \001(\t\"\377\001\n\tMove"
  "SJReq\022:\n\006points\030\001 \003(\0132*.IndyFramework.Pr"
  "otobuf.Shared.MoveSJPoint\022B\n\rblending_ty"
  "pe\030\003 \001(\0162+.IndyFramework.Protobuf.Shared"
  ".BlendingType\022\?\n\tbase_type\030\004 \001(\0162,.IndyF"
  "ramework.Protobuf.Shared.JointBaseType\022\027"
  "\n\017blending_radius\030\005 \001(\002\022\013\n\003vel\030\025 \001(\002\022\013\n\003"
  "acc\030\026 \001(\002\"\030\n\tMoveSJRes\022\013\n\003msg\030d \001(\t\"\252\002\n\t"
  "MoveSLReq\022:\n\006points\030\001 \003(\0132*.IndyFramewor"
  "k.Protobuf.Shared.MoveSLPoint\022B\n\rblendin"
  "g_type\030\003 \001(\0162+.IndyFramework.Protobuf.Sh"
  "ared.BlendingType\022>\n\tbase_type\030\004 \001(\0162+.I"
  "ndyFramework.Protobuf.Shared.TaskBaseTyp"
  "e\022\027\n\017blending_radius\030\005 \001(\002\022\020\n\010disp_vel\030\025"
  " \001(\002\022\020\n\010disp_acc\030\026 \001(\002\022\017\n\007rot_vel\030\027 \001(\002\022"
  "\017\n\007rot_acc\030\030 \001(\002\"\030\n\tMoveSLRes\022\013\n\003msg\030d \001"
  "(\t\"\212\001\n\nMoveSJTReq\022;\n\006points\030\001 \003(\0132+.Indy"
  "Framework.Protobuf.Shared.MoveSJTPoint\022\?"
  "\n\tbase_type\030\002 \001(\0162,.IndyFramework.Protob"
  "uf.Shared.JointBaseType\"\031\n\nMoveSJTRes\022\013\n"
  "\003msg\030d \001(\t\"\346\001\n\nMoveSLTReq\022;\n\006points\030\001 \003("
  "\0132+.IndyFramework.Protobuf.Shared.MoveSL"
  "TPoint\022B\n\rblending_type\030\003 \001(\0162+.IndyFram"
  "ework.Protobuf.Shared.BlendingType\022>\n\tba"
  "se_type\030\004 \001(\0162+.IndyFramework.Protobuf.S"
  "hared.TaskBaseType\022\027\n\017blending_radius\030\005 "
  "\001(\002\"\031\n\nMoveSLTRes\022\013\n\003msg\030d \001(\t\"\017\n\rMoveSp"
  "iralReq\"\034\n\rMoveSpiralRes\022\013\n\003msg\030d \001(\t\"#\n"
  "\016SetRefFrameReq\022\021\n\tref_frame\030\001 \003(\002\"\035\n\016Se"
  "tRefFrameRes\022\013\n\003msg\030d \001(\t\"C\n\024SetRefFrame"
  "PlanarReq\022\r\n\005tpos0\030\001 \003(\002\022\r\n\005tpos1\030\002 \003(\002\022"
  "\r\n\005tpos2\030\003 \003(\002\"6\n\024SetRefFramePlanarRes\022\021"
  "\n\tref_frame\030\001 \003(\002\022\013\n\003msg\030d \001(\t\"%\n\017SetToo"
  "lFrameReq\022\022\n\ntool_frame\030\001 \003(\002\"\036\n\017SetTool"
  "FrameRes\022\013\n\003msg\030d \001(\t\"!\n\020SetSpeedRatioRe"
  "q\022\r\n\005ratio\030\001 \001(\005\"\037\n\020SetSpeedRatioRes\022\013\n\003"
  "msg\030d \001(\t\"(\n\027SetCommandSpeedRatioReq\022\r\n\005"
  "ratio\030\001 \001(\005\"&\n\027SetCommandSpeedRatioRes\022\013"
  "\n\003msg\030d \001(\t\"M\n\007StopReq\022B\n\rstop_category\030"
  "\001 \001(\0162+.IndyFramework.Protobuf.Shared.St"
  "opCategory\"\026\n\007StopRes\022\013\n\003msg\030d \001(\t\"P\n\010Pa"
  "useReq\022D\n\016pause_category\030\001 \001(\0162,.IndyFra"
  "mework.Protobuf.Shared.PauseCategory\"\027\n\010"
  "PauseRes\022\013\n\003msg\030d \001(\t\"\013\n\tResumeReq\"\030\n\tRe"
  "sumeRes\022\013\n\003msg\030d \001(\t\"\013\n\tRebootReq\"\030\n\tReb"
  "ootRes\022\013\n\003msg\030d \001(\t\"\014\n\nRecoverReq\"\031\n\nRec"
  "overRes\022\013\n\003msg\030d \001(\t\"\033\n\010BrakeReq\022\017\n\007on_l"
  "ist\030\001 \003(\010\"\027\n\010BrakeRes\022\013\n\003msg\030d \001(\t\"\026\n\010Se"
  "rvoReq\022\n\n\002on\030\001 \001(\010\"\027\n\010ServoRes\022\013\n\003msg\030d "
  "\001(\t\"2\n\022SetAutoServoOffReq\022\016\n\006enable\030\001 \001("
  "\010\022\014\n\004time\030\002 \001(\002\"!\n\022SetAutoServoOffRes\022\013\n"
  "\003msg\030d \001(\t\"\024\n\022GetAutoServoOffReq\"\?\n\022GetA"
  "utoServoOffRes\022\016\n\006enable\030\001 \001(\010\022\014\n\004time\030\002"
  " \001(\002\022\013\n\003msg\030d \001(\t\"\037\n\021SimulationModeReq\022\n"
  "\n\002on\030\001 \001(\010\" \n\021SimulationModeRes\022\013\n\003msg\030d"
  " \001(\t\"#\n\025DirectTeachingModeReq\022\n\n\002on\030\001 \001("
  "\010\"$\n\025DirectTeachingModeRes\022\013\n\003msg\030d \001(\t\""
  "7\n\024InverseKinematicsReq\022\014\n\004tpos\030\001 \003(\002\022\021\n"
  "\tinit_jpos\030\002 \003(\002\"1\n\024InverseKinematicsRes"
  "\022\014\n\004jpos\030\001 \003(\002\022\013\n\003msg\030d \001(\t\"c\n\033CheckApro"
  "achRetractValidReq\022\014\n\004tpos\030\001 \003(\002\022\021\n\tinit"
  "_jpos\030\002 \003(\002\022\020\n\010pre_tpos\030\003 \003(\002\022\021\n\tpost_tp"
  "os\030\004 \003(\002\"x\n\033CheckAproachRetractValidRes\022"
  "\020\n\010is_valid\030\001 \001(\010\022\017\n\007tar_pos\030\002 \003(\002\022\024\n\014ap"
  "proach_pos\030\003 \003(\002\022\023\n\013retract_pos\030\004 \003(\002\022\013\n"
  "\003msg\030d \001(\t\"\217\001\n\025GetPalletPointListReq\022\014\n\004"
  "tpos\030\001 \003(\002\022\014\n\004jpos\030\002 \003(\002\022\020\n\010pre_tpos\030\003 \003"
  "(\002\022\021\n\tpost_tpos\030\004 \003(\002\022\026\n\016pallet_pattern\030"
  "\005 \001(\005\022\r\n\005width\030\006 \001(\005\022\016\n\006height\030\007 \001(\005\"g\n\025"
  "GetPalletPointListRes\022A\n\rpallet_points\030\001"
  " \003(\0132*.IndyFramework.Protobuf.Shared.Pal"
  "letPoint\022\013\n\003msg\030d \001(\t\"~\n\030CalculateRelati"
  "vePoseReq\022\021\n\tstart_pos\030\001 \003(\002\022\017\n\007end_pos\030"
  "\002 \003(\002\022>\n\tbase_type\030\003 \001(\0162+.IndyFramework"
  ".Protobuf.Shared.TaskBaseType\"=\n\030Calcula"
  "teRelativePoseRes\022\024\n\014relative_pos\030\001 \003(\002\022"
  "\013\n\003msg\030d \001(\t\"\207\001\n\032CalculateCurrentPoseRel"
  "Req\022\023\n\013current_pos\030\001 \003(\002\022\024\n\014relative_pos"
  "\030\002 \003(\002\022>\n\tbase_type\030\003 \001(\0162+.IndyFramewor"
  "k.Protobuf.Shared.TaskBaseType\"A\n\032Calcul"
  "ateCurrentPoseRelRes\022\026\n\016calculated_pos\030\001"
  " \003(\002\022\013\n\003msg\030d \001(\t\"I\n\010SetDIReq\022=\n\007di_list"
  "\030\001 \003(\0132,.IndyFramework.Protobuf.Shared.D"
  "igitalSignal\"\027\n\010SetDIRes\022\013\n\003msg\030d \001(\t\"\n\n"
  "\010GetDIReq\"#\n\010GetDIRes\022\n\n\002di\030\001 \003(\010\022\013\n\003msg"
  "\030d \001(\t\"I\n\010SetDOReq\022=\n\007do_list\030\001 \003(\0132,.In"
  "dyFramework.Protobuf.Shared.DigitalSigna"
  "l\"\027\n\010SetDORes\022\013\n\003msg\030d \001(\t\"\n\n\010GetDOReq\"#"
  "\n\010GetDORes\022\n\n\002do\030\001 \003(\010\022\013\n\003msg\030d \001(\t\"H\n\010S"
  "etAIReq\022<\n\007ai_list\030\001 \003(\0132+.IndyFramework"
  ".Protobuf.Shared.AnalogSignal\"\027\n\010SetAIRe"
  "s\022\013\n\003msg\030d \001(\t\"\n\n\010GetAIReq\"#\n\010GetAIRes\022\n"
  "\n\002ai\030\001 \003(\005\022\013\n\003msg\030d \001(\t\"\n\n\010GetAOReq\"#\n\010G"
  "etAORes\022\n\n\002ao\030\001 \003(\005\022\013\n\003msg\030d \001(\t\"H\n\010SetA"
  "OReq\022<\n\007ao_list\030\001 \003(\0132+.IndyFramework.Pr"
  "otobuf.Shared.AnalogSignal\"\027\n\010SetAORes\022\013"
  "\n\003msg\030d \001(\t\"\r\n\013GetEndDIReq\"&\n\013GetEndDIRe"
  "s\022\n\n\002di\030\001 \003(\010\022\013\n\003msg\030d \001(\t\"L\n\013SetEndDIRe"
  "q\022=\n\007di_list\030\001 \003(\0132,.IndyFramework.Proto"
  "buf.Shared.DigitalSignal\"\032\n\013SetEndDIRes\022"
  "\013\n\003msg\030d \001(\t\"\r\n\013GetEndDOReq\"&\n\013GetEndDOR"
  "es\022\n\n\002do\030\001 \003(\010\022\013\n\003msg\030d \001(\t\"L\n\013SetEndDOR"
  "eq\022=\n\007do_list\030\001 \003(\0132,.IndyFramework.Prot"
  "obuf.Shared.DigitalSignal\"\032\n\013SetEndDORes"
  "\022\013\n\003msg\030d \001(\t\"K\n\013SetEndAIReq\022<\n\007ai_list\030"
  "\001 \003(\0132+.IndyFramework.Protobuf.Shared.An"
  "alogSignal\"\032\n\013SetEndAIRes\022\013\n\003msg\030d \001(\t\"\r"
  "\n\013GetEndAIReq\"&\n\013GetEndAIRes\022\n\n\002ai\030\001 \003(\005"
  "\022\013\n\003msg\030d \001(\t\"\r\n\013GetEndAOReq\"&\n\013GetEndAO"
  "Res\022\n\n\002ao\030\001 \003(\005\022\013\n\003msg\030d \001(\t\"K\n\013SetEndAO"
  "Req\022<\n\007ao_list\030\001 \003(\0132+.IndyFramework.Pro"
  "tobuf.Shared.AnalogSignal\"\032\n\013SetEndAORes"
  "\022\013\n\003msg\030d \001(\t\"=\n\026SetJointControlGainReq\022"
  "\n\n\002kp\030\001 \003(\002\022\n\n\002kv\030\002 \003(\002\022\013\n\003kl2\030\003 \003(\002\"%\n\026"
  "SetJointControlGainRes\022\013\n\003msg\030d \001(\t\"\030\n\026G"
  "etJointControlGainReq\"J\n\026GetJointControl"
  "GainRes\022\n\n\002kp\030\001 \003(\002\022\n\n\002kv\030\002 \003(\002\022\013\n\003kl2\030\003"
  " \003(\002\022\013\n\003msg\030d \001(\t\"I\n\025SetTaskControlGainR"
  "eq\022\n\n\002kp\030\001 \003(\002\022\n\n\002kv\030\002 \003(\002\022\013\n\003kl2\030\003 \003(\002\022"
  "\013\n\003msg\030d \001(\t\"$\n\025SetTaskControlGainRes\022\013\n"
  "\003msg\030d \001(\t\"\027\n\025GetTaskControlGainReq\"I\n\025G"
  "etTaskControlGainRes\022\n\n\002kp\030\001 \003(\002\022\n\n\002kv\030\002"
  " \003(\002\022\013\n\003kl2\030\003 \003(\002\022\013\n\003msg\030d \001(\t\"h\n\032SetImp"
  "edanceControlGainReq\022\014\n\004mass\030\001 \003(\002\022\017\n\007da"
  "mping\030\002 \003(\002\022\021\n\tstiffness\030\003 \003(\002\022\013\n\003kl2\030\004 "
  "\003(\002\022\013\n\003msg\030d \001(\t\")\n\032SetImpedanceControlG"
  "ainRes\022\013\n\003msg\030d \001(\t\"\034\n\032GetImpedanceContr"
  "olGainReq\"h\n\032GetImpedanceControlGainRes\022"
  "\014\n\004mass\030\001 \003(\002\022\017\n\007damping\030\002 \003(\002\022\021\n\tstiffn"
  "ess\030\003 \003(\002\022\013\n\003kl2\030\004 \003(\002\022\013\n\003msg\030d \001(\t\"~\n\016S"
  "etFricCompReq\022\024\n\014control_comp\030\001 \001(\010\022\033\n\023c"
  "ontrol_comp_levels\030\002 \003(\005\022\017\n\007dt_comp\030\005 \001("
  "\010\022\026\n\016dt_comp_levels\030\006 \003(\005\022\020\n\010id_joint\030\n "
  "\001(\005\"\035\n\016SetFricCompRes\022\013\n\003msg\030d \001(\t\"\020\n\016Ge"
  "tFricCompReq\"y\n\016GetFricCompRes\022\024\n\014contro"
  "l_comp\030\001 \001(\010\022\033\n\023control_comp_levels\030\002 \003("
  "\005\022\017\n\007dt_comp\030\005 \001(\010\022\026\n\016dt_comp_levels\030\006 \003"
  "(\005\022\013\n\003msg\030d \001(\t\"\031\n\027GetSafetyLimitConfigR"
  "eq\"\334\001\n\027GetSafetyLimitConfigRes\022\023\n\013power_"
  "limit\030\001 \001(\002\022\031\n\021power_limit_ratio\030\002 \001(\002\022\027"
  "\n\017tcp_force_limit\030\003 \001(\002\022\035\n\025tcp_force_lim"
  "it_ratio\030\004 \001(\002\022\027\n\017tcp_speed_limit\030\005 \001(\002\022"
  "\035\n\025tcp_speed_limit_ratio\030\006 \001(\002\022\024\n\014joint_"
  "limits\030\007 \003(\002\022\013\n\003msg\030d \001(\t\"\317\001\n\027SetSafetyL"
  "imitConfigReq\022\023\n\013power_limit\030\001 \001(\002\022\031\n\021po"
  "wer_limit_ratio\030\002 \001(\002\022\027\n\017tcp_force_limit"
  "\030\003 \001(\002\022\035\n\025tcp_force_limit_ratio\030\004 \001(\002\022\027\n"
  "\017tcp_speed_limit\030\005 \001(\002\022\035\n\025tcp_speed_limi"
  "t_ratio\030\006 \001(\002\022\024\n\014joint_limits\030\007 \003(\002\"&\n\027S"
  "etSafetyLimitConfigRes\022\013\n\003msg\030d \001(\t\"\370\003\n\026"
  "SetSafetyStopConfigReq\022R\n\035joint_position"
  "_limit_stop_cat\030\001 \001(\0162+.IndyFramework.Pr"
  "otobuf.Shared.StopCategory\022O\n\032joint_spee"
  "d_limit_stop_cat\030\002 \001(\0162+.IndyFramework.P"
  "rotobuf.Shared.StopCategory\022P\n\033joint_tor"
  "que_limit_stop_cat\030\003 \001(\0162+.IndyFramework"
  ".Protobuf.Shared.StopCategory\022M\n\030tcp_spe"
  "ed_limit_stop_cat\030\004 \001(\0162+.IndyFramework."
  "Protobuf.Shared.StopCategory\022M\n\030tcp_forc"
  "e_limit_stop_cat\030\005 \001(\0162+.IndyFramework.P"
  "rotobuf.Shared.StopCategory\022I\n\024power_lim"
  "it_stop_cat\030\006 \001(\0162+.IndyFramework.Protob"
  "uf.Shared.StopCategory\"%\n\026SetSafetyStopC"
  "onfigRes\022\013\n\003msg\030d \001(\t\"\030\n\026GetSafetyStopCo"
  "nfigReq\"\205\004\n\026GetSafetyStopConfigRes\022R\n\035jo"
  "int_position_limit_stop_cat\030\001 \001(\0162+.Indy"
  "Framework.Protobuf.Shared.StopCategory\022O"
  "\n\032joint_speed_limit_stop_cat\030\002 \001(\0162+.Ind"
  "yFramework.Protobuf.Shared.StopCategory\022"
  "P\n\033joint_torque_limit_stop_cat\030\003 \001(\0162+.I"
  "ndyFramework.Protobuf.Shared.StopCategor"
  "y\022M\n\030tcp_speed_limit_stop_cat\030\004 \001(\0162+.In"
  "dyFramework.Protobuf.Shared.StopCategory"
  "\022M\n\030tcp_force_limit_stop_cat\030\005 \001(\0162+.Ind"
  "yFramework.Protobuf.Shared.StopCategory\022"
  "I\n\024power_limit_stop_cat\030\006 \001(\0162+.IndyFram"
  "ework.Protobuf.Shared.StopCategory\022\013\n\003ms"
  "g\030d \001(\t\"(\n\016SetMountPosReq\022\n\n\002ry\030\001 \001(\002\022\n\n"
  "\002rz\030\002 \001(\002\"\035\n\016SetMountPosRes\022\013\n\003msg\030d \001(\t"
  "\"\020\n\016GetMountPosReq\"5\n\016GetMountPosRes\022\n\n\002"
  "ry\030\001 \001(\002\022\n\n\002rz\030\002 \001(\002\022\013\n\003msg\030d \001(\t\"K\n\022Set"
  "ToolPropertyReq\022\014\n\004mass\030\001 \001(\002\022\026\n\016center_"
  "of_mass\030\002 \003(\002\022\017\n\007inertia\030\003 \003(\002\"!\n\022SetToo"
  "lPropertyRes\022\013\n\003msg\030d \001(\t\"\024\n\022GetToolProp"
  "ertyReq\"X\n\022GetToolPropertyRes\022\014\n\004mass\030\001 "
  "\001(\002\022\026\n\016center_of_mass\030\002 \003(\002\022\017\n\007inertia\030\003"
  " \003(\002\022\013\n\003msg\030d \001(\t\"$\n\023SetCollSensLevelReq"
  "\022\r\n\005level\030\001 \001(\005\"\"\n\023SetCollSensLevelRes\022\013"
  "\n\003msg\030d \001(\t\"\025\n\023GetCollSensLevelReq\"1\n\023Ge"
  "tCollSensLevelRes\022\r\n\005level\030\001 \001(\005\022\013\n\003msg\030"
  "d \001(\t\"\262\002\n\023SetCollSensParamReq\022\026\n\016j_torqu"
  "e_bases\030\001 \003(\002\022\031\n\021j_torque_tangents\030\002 \003(\002"
  "\022\026\n\016t_torque_bases\030\003 \003(\002\022\031\n\021t_torque_tan"
  "gents\030\004 \003(\002\022\023\n\013error_bases\030\005 \003(\002\022\026\n\016erro"
  "r_tangents\030\006 \003(\002\022\037\n\027t_constvel_torque_ba"
  "ses\030\007 \003(\002\022\"\n\032t_constvel_torque_tangents\030"
  "\010 \003(\002\022\037\n\027t_conveyor_torque_bases\030\t \003(\002\022\""
  "\n\032t_conveyor_torque_tangents\030\n \003(\002\"\"\n\023Se"
  "tCollSensParamRes\022\013\n\003msg\030d \001(\t\"\025\n\023GetCol"
  "lSensParamReq\"\277\002\n\023GetCollSensParamRes\022\026\n"
  "\016j_torque_bases\030\001 \003(\002\022\031\n\021j_torque_tangen"
  "ts\030\002 \003(\002\022\026\n\016t_torque_bases\030\003 \003(\002\022\031\n\021t_to"
  "rque_tangents\030\004 \003(\002\022\023\n\013error_bases\030\005 \003(\002"
  "\022\026\n\016error_tangents\030\006 \003(\002\022\037\n\027t_constvel_t"
  "orque_bases\030\007 \003(\002\022\"\n\032t_constvel_torque_t"
  "angents\030\010 \003(\002\022\037\n\027t_conveyor_torque_bases"
  "\030\t \003(\002\022\"\n\032t_conveyor_torque_tangents\030\n \003"
  "(\002\022\013\n\003msg\030d \001(\t\"|\n\020SetCollPolicyReq\022>\n\006p"
  "olicy\030\001 \001(\0162..IndyFramework.Protobuf.Sha"
  "red.CollisionPolicy\022\022\n\nsleep_time\030\002 \001(\002\022"
  "\024\n\014gravity_time\030\003 \001(\002\"\037\n\020SetCollPolicyRe"
  "s\022\013\n\003msg\030d \001(\t\"\022\n\020GetCollPolicyReq\"\211\001\n\020G"
  "etCollPolicyRes\022>\n\006policy\030\001 \001(\0162..IndyFr"
  "amework.Protobuf.Shared.CollisionPolicy\022"
  "\022\n\nsleep_time\030\002 \001(\002\022\024\n\014gravity_time\030\003 \001("
  "\002\022\013\n\003msg\030d \001(\t\"\027\n\025GetCollTuningParamReq\""
  "\327\002\n\025GetCollTuningParamRes\022\026\n\016j_torque_ba"
  "ses\030\001 \003(\002\022\031\n\021j_torque_tangents\030\002 \003(\002\022\026\n\016"
  "t_torque_bases\030\003 \003(\002\022\031\n\021t_torque_tangent"
  "s\030\004 \003(\002\022\023\n\013error_bases\030\005 \003(\002\022\026\n\016error_ta"
  "ngents\030\006 \003(\002\022\037\n\027t_constvel_torque_bases\030"
  "\007 \003(\002\022\"\n\032t_constvel_torque_tangents\030\010 \003("
  "\002\022\037\n\027t_conveyor_torque_bases\030\t \003(\002\022\"\n\032t_"
  "conveyor_torque_tangents\030\n \003(\002\022\024\n\014is_cal"
  "c_done\030\013 \001(\010\022\013\n\003msg\030d \001(\t\"\025\n\023GetRTContro"
  "lDataReq\"\257\001\n\023GetRTControlDataRes\022\t\n\001q\030\001 "
  "\003(\002\022\014\n\004qdot\030\002 \003(\002\022\r\n\005qddot\030\003 \003(\002\022\t\n\001p\030\013 "
  "\003(\002\022\014\n\004pdot\030\014 \003(\002\022\r\n\005pddot\030\r \003(\002\022\021\n\tref_"
  "frame\030\025 \003(\002\022\022\n\ntool_frame\030\026 \003(\002\022\024\n\014runni"
  "ng_time\030\037 \001(\t\022\013\n\003msg\030d \001(\t\"\016\n\014GetIODataR"
  "eq\"\213\001\n\014GetIODataRes\022\n\n\002di\030\001 \003(\010\022\n\n\002do\030\002 "
  "\003(\010\022\n\n\002ai\030\003 \003(\005\022\n\n\002ao\030\004 \003(\005\022\016\n\006end_di\030\013 "
  "\003(\010\022\016\n\006end_do\030\014 \003(\010\022\016\n\006end_ai\030\r \003(\005\022\016\n\006e"
  "nd_ao\030\016 \003(\005\022\013\n\003msg\030d \001(\t\"\020\n\016GetCoreDataR"
  "eq\"\247\001\n\016GetCoreDataRes\022\024\n\014temperatures\030\002 "
  "\003(\002\022\020\n\010voltages\030\003 \003(\002\022\020\n\010currents\030\004 \003(\002\022"
  "\016\n\006states\030\005 \003(\t\022\023\n\013state_codes\030\006 \003(\t\022\024\n\014"
  "brake_states\030\n \003(\010\022\023\n\013servo_state\030\013 \001(\010\022"
  "\013\n\003msg\030d \001(\t\"\026\n\024GetSystemInfoDataReq\"\216\002\n"
  "\024GetSystemInfoDataRes\022\030\n\020control_task_ve"
  "r\030\001 \001(\t\022\013\n\003dof\030\002 \001(\005\022\022\n\nmodel_name\030\003 \001(\t"
  "\022I\n\021endtool_port_type\030\t \001(\0162..IndyFramew"
  "ork.Protobuf.Shared.EndToolPortType\022\027\n\017i"
  "o_board_fw_ver\030\n \001(\t\022\032\n\022core_board_fw_ve"
  "rs\030\013 \003(\t\022\034\n\024endtool_board_fw_ver\030\014 \001(\t\022\020"
  "\n\010robot_sn\030\r \001(\t\022\013\n\003msg\030d \001(\t\"\021\n\017GetStat"
  "eDataReq\"\204\001\n\017GetStateDataRes\022\032\n\022is_simul"
  "ation_mode\030\001 \001(\010\0225\n\005state\030\002 \001(\0162&.IndyFr"
  "amework.Protobuf.Shared.OpState\022\021\n\tviola"
  "tion\030\003 \001(\t\022\013\n\003msg\030d \001(\t\"\025\n\023GetViolationD"
  "ataReq\"k\n\023GetViolationDataRes\022\026\n\016violati"
  "on_code\030\001 \001(\004\022\017\n\007j_index\030\002 \001(\r\022\016\n\006i_args"
  "\030\003 \003(\005\022\016\n\006f_args\030\004 \003(\002\022\013\n\003msg\030d \001(\t\"X\n\022S"
  "etProgramStateReq\022B\n\rprogram_state\030\001 \001(\016"
  "2+.IndyFramework.Protobuf.Shared.Program"
  "State\"!\n\022SetProgramStateRes\022\013\n\003msg\030d \001(\t"
  "\"\022\n\020GetMotionDataReq\"\326\002\n\020GetMotionDataRe"
  "s\022<\n\ntraj_state\030\001 \001(\0162(.IndyFramework.Pr"
  "otobuf.Shared.TrajState\022\025\n\rtraj_progress"
  "\030\002 \001(\005\022\024\n\014is_in_motion\030\003 \001(\010\022\026\n\016is_motio"
  "n_done\030\004 \001(\010\022\022\n\nis_pausing\030\005 \001(\010\022\023\n\013is_s"
  "topping\030\006 \001(\010\022\022\n\nhas_motion\030\007 \001(\010\022\023\n\013spe"
  "ed_ratio\030\010 \001(\005\022\021\n\tmotion_id\030\t \001(\005\022\027\n\017rem"
  "ain_distance\030\n \001(\002\022\031\n\021motion_queue_size\030"
  "\013 \001(\r\022\031\n\021cur_traj_progress\030\014 \001(\005\022\013\n\003msg\030"
  "d \001(\t\"\016\n\014GetEL5001Req\"Z\n\014GetEL5001Res\022\016\n"
  "\006status\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\022\r\n\005delta\030\003 "
  "\001(\005\022\017\n\007average\030\005 \001(\002\022\013\n\003msg\030d \001(\t\"\016\n\014Get"
  "EL5101Req\"i\n\014GetEL5101Res\022\016\n\006status\030\001 \001("
  "\005\022\r\n\005value\030\002 \001(\005\022\r\n\005latch\030\003 \001(\005\022\r\n\005delta"
  "\030\004 \001(\005\022\017\n\007average\030\005 \001(\002\022\013\n\003msg\030d \001(\tb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_5fmsgs_2eproto_deps[1] = {
  &::descriptor_table_shared_5fmsgs_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_control_5fmsgs_2eproto_sccs[174] = {
  &scc_info_AMotionStopReq_control_5fmsgs_2eproto.base,
  &scc_info_AMotionStopRes_control_5fmsgs_2eproto.base,
  &scc_info_AMoveCReq_control_5fmsgs_2eproto.base,
  &scc_info_AMoveCRes_control_5fmsgs_2eproto.base,
  &scc_info_AMoveCTReq_control_5fmsgs_2eproto.base,
  &scc_info_AMoveCTRes_control_5fmsgs_2eproto.base,
  &scc_info_AMoveJReq_control_5fmsgs_2eproto.base,
  &scc_info_AMoveJRes_control_5fmsgs_2eproto.base,
  &scc_info_AMoveJTReq_control_5fmsgs_2eproto.base,
  &scc_info_AMoveJTRes_control_5fmsgs_2eproto.base,
  &scc_info_AMoveLReq_control_5fmsgs_2eproto.base,
  &scc_info_AMoveLRes_control_5fmsgs_2eproto.base,
  &scc_info_AMoveLTReq_control_5fmsgs_2eproto.base,
  &scc_info_AMoveLTRes_control_5fmsgs_2eproto.base,
  &scc_info_AWaitIOReq_control_5fmsgs_2eproto.base,
  &scc_info_AWaitIORes_control_5fmsgs_2eproto.base,
  &scc_info_AWaitProgressReq_control_5fmsgs_2eproto.base,
  &scc_info_AWaitProgressRes_control_5fmsgs_2eproto.base,
  &scc_info_AWaitRadiusReq_control_5fmsgs_2eproto.base,
  &scc_info_AWaitRadiusRes_control_5fmsgs_2eproto.base,
  &scc_info_AWaitTimeReq_control_5fmsgs_2eproto.base,
  &scc_info_AWaitTimeRes_control_5fmsgs_2eproto.base,
  &scc_info_AWaitTrajReq_control_5fmsgs_2eproto.base,
  &scc_info_AWaitTrajRes_control_5fmsgs_2eproto.base,
  &scc_info_BrakeReq_control_5fmsgs_2eproto.base,
  &scc_info_BrakeRes_control_5fmsgs_2eproto.base,
  &scc_info_CalculateCurrentPoseRelReq_control_5fmsgs_2eproto.base,
  &scc_info_CalculateCurrentPoseRelRes_control_5fmsgs_2eproto.base,
  &scc_info_CalculateRelativePoseReq_control_5fmsgs_2eproto.base,
  &scc_info_CalculateRelativePoseRes_control_5fmsgs_2eproto.base,
  &scc_info_CheckAproachRetractValidReq_control_5fmsgs_2eproto.base,
  &scc_info_CheckAproachRetractValidRes_control_5fmsgs_2eproto.base,
  &scc_info_DirectTeachingModeReq_control_5fmsgs_2eproto.base,
  &scc_info_DirectTeachingModeRes_control_5fmsgs_2eproto.base,
  &scc_info_GetAIReq_control_5fmsgs_2eproto.base,
  &scc_info_GetAIRes_control_5fmsgs_2eproto.base,
  &scc_info_GetAOReq_control_5fmsgs_2eproto.base,
  &scc_info_GetAORes_control_5fmsgs_2eproto.base,
  &scc_info_GetAutoServoOffReq_control_5fmsgs_2eproto.base,
  &scc_info_GetAutoServoOffRes_control_5fmsgs_2eproto.base,
  &scc_info_GetCollPolicyReq_control_5fmsgs_2eproto.base,
  &scc_info_GetCollPolicyRes_control_5fmsgs_2eproto.base,
  &scc_info_GetCollSensLevelReq_control_5fmsgs_2eproto.base,
  &scc_info_GetCollSensLevelRes_control_5fmsgs_2eproto.base,
  &scc_info_GetCollSensParamReq_control_5fmsgs_2eproto.base,
  &scc_info_GetCollSensParamRes_control_5fmsgs_2eproto.base,
  &scc_info_GetCollTuningParamReq_control_5fmsgs_2eproto.base,
  &scc_info_GetCollTuningParamRes_control_5fmsgs_2eproto.base,
  &scc_info_GetCoreDataReq_control_5fmsgs_2eproto.base,
  &scc_info_GetCoreDataRes_control_5fmsgs_2eproto.base,
  &scc_info_GetDIReq_control_5fmsgs_2eproto.base,
  &scc_info_GetDIRes_control_5fmsgs_2eproto.base,
  &scc_info_GetDOReq_control_5fmsgs_2eproto.base,
  &scc_info_GetDORes_control_5fmsgs_2eproto.base,
  &scc_info_GetEL5001Req_control_5fmsgs_2eproto.base,
  &scc_info_GetEL5001Res_control_5fmsgs_2eproto.base,
  &scc_info_GetEL5101Req_control_5fmsgs_2eproto.base,
  &scc_info_GetEL5101Res_control_5fmsgs_2eproto.base,
  &scc_info_GetEndAIReq_control_5fmsgs_2eproto.base,
  &scc_info_GetEndAIRes_control_5fmsgs_2eproto.base,
  &scc_info_GetEndAOReq_control_5fmsgs_2eproto.base,
  &scc_info_GetEndAORes_control_5fmsgs_2eproto.base,
  &scc_info_GetEndDIReq_control_5fmsgs_2eproto.base,
  &scc_info_GetEndDIRes_control_5fmsgs_2eproto.base,
  &scc_info_GetEndDOReq_control_5fmsgs_2eproto.base,
  &scc_info_GetEndDORes_control_5fmsgs_2eproto.base,
  &scc_info_GetFricCompReq_control_5fmsgs_2eproto.base,
  &scc_info_GetFricCompRes_control_5fmsgs_2eproto.base,
  &scc_info_GetIODataReq_control_5fmsgs_2eproto.base,
  &scc_info_GetIODataRes_control_5fmsgs_2eproto.base,
  &scc_info_GetImpedanceControlGainReq_control_5fmsgs_2eproto.base,
  &scc_info_GetImpedanceControlGainRes_control_5fmsgs_2eproto.base,
  &scc_info_GetJointControlGainReq_control_5fmsgs_2eproto.base,
  &scc_info_GetJointControlGainRes_control_5fmsgs_2eproto.base,
  &scc_info_GetMotionDataReq_control_5fmsgs_2eproto.base,
  &scc_info_GetMotionDataRes_control_5fmsgs_2eproto.base,
  &scc_info_GetMountPosReq_control_5fmsgs_2eproto.base,
  &scc_info_GetMountPosRes_control_5fmsgs_2eproto.base,
  &scc_info_GetPalletPointListReq_control_5fmsgs_2eproto.base,
  &scc_info_GetPalletPointListRes_control_5fmsgs_2eproto.base,
  &scc_info_GetRTControlDataReq_control_5fmsgs_2eproto.base,
  &scc_info_GetRTControlDataRes_control_5fmsgs_2eproto.base,
  &scc_info_GetSafetyLimitConfigReq_control_5fmsgs_2eproto.base,
  &scc_info_GetSafetyLimitConfigRes_control_5fmsgs_2eproto.base,
  &scc_info_GetSafetyStopConfigReq_control_5fmsgs_2eproto.base,
  &scc_info_GetSafetyStopConfigRes_control_5fmsgs_2eproto.base,
  &scc_info_GetStateDataReq_control_5fmsgs_2eproto.base,
  &scc_info_GetStateDataRes_control_5fmsgs_2eproto.base,
  &scc_info_GetSystemInfoDataReq_control_5fmsgs_2eproto.base,
  &scc_info_GetSystemInfoDataRes_control_5fmsgs_2eproto.base,
  &scc_info_GetTaskControlGainReq_control_5fmsgs_2eproto.base,
  &scc_info_GetTaskControlGainRes_control_5fmsgs_2eproto.base,
  &scc_info_GetToolPropertyReq_control_5fmsgs_2eproto.base,
  &scc_info_GetToolPropertyRes_control_5fmsgs_2eproto.base,
  &scc_info_GetViolationDataReq_control_5fmsgs_2eproto.base,
  &scc_info_GetViolationDataRes_control_5fmsgs_2eproto.base,
  &scc_info_InverseKinematicsReq_control_5fmsgs_2eproto.base,
  &scc_info_InverseKinematicsRes_control_5fmsgs_2eproto.base,
  &scc_info_MoveSJReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveSJRes_control_5fmsgs_2eproto.base,
  &scc_info_MoveSJTReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveSJTRes_control_5fmsgs_2eproto.base,
  &scc_info_MoveSLReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveSLRes_control_5fmsgs_2eproto.base,
  &scc_info_MoveSLTReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveSLTRes_control_5fmsgs_2eproto.base,
  &scc_info_MoveSpiralReq_control_5fmsgs_2eproto.base,
  &scc_info_MoveSpiralRes_control_5fmsgs_2eproto.base,
  &scc_info_PauseReq_control_5fmsgs_2eproto.base,
  &scc_info_PauseRes_control_5fmsgs_2eproto.base,
  &scc_info_RebootReq_control_5fmsgs_2eproto.base,
  &scc_info_RebootRes_control_5fmsgs_2eproto.base,
  &scc_info_RecoverReq_control_5fmsgs_2eproto.base,
  &scc_info_RecoverRes_control_5fmsgs_2eproto.base,
  &scc_info_ResumeReq_control_5fmsgs_2eproto.base,
  &scc_info_ResumeRes_control_5fmsgs_2eproto.base,
  &scc_info_ServoReq_control_5fmsgs_2eproto.base,
  &scc_info_ServoRes_control_5fmsgs_2eproto.base,
  &scc_info_SetAIReq_control_5fmsgs_2eproto.base,
  &scc_info_SetAIRes_control_5fmsgs_2eproto.base,
  &scc_info_SetAOReq_control_5fmsgs_2eproto.base,
  &scc_info_SetAORes_control_5fmsgs_2eproto.base,
  &scc_info_SetAutoServoOffReq_control_5fmsgs_2eproto.base,
  &scc_info_SetAutoServoOffRes_control_5fmsgs_2eproto.base,
  &scc_info_SetCollPolicyReq_control_5fmsgs_2eproto.base,
  &scc_info_SetCollPolicyRes_control_5fmsgs_2eproto.base,
  &scc_info_SetCollSensLevelReq_control_5fmsgs_2eproto.base,
  &scc_info_SetCollSensLevelRes_control_5fmsgs_2eproto.base,
  &scc_info_SetCollSensParamReq_control_5fmsgs_2eproto.base,
  &scc_info_SetCollSensParamRes_control_5fmsgs_2eproto.base,
  &scc_info_SetCommandSpeedRatioReq_control_5fmsgs_2eproto.base,
  &scc_info_SetCommandSpeedRatioRes_control_5fmsgs_2eproto.base,
  &scc_info_SetDIReq_control_5fmsgs_2eproto.base,
  &scc_info_SetDIRes_control_5fmsgs_2eproto.base,
  &scc_info_SetDOReq_control_5fmsgs_2eproto.base,
  &scc_info_SetDORes_control_5fmsgs_2eproto.base,
  &scc_info_SetEndAIReq_control_5fmsgs_2eproto.base,
  &scc_info_SetEndAIRes_control_5fmsgs_2eproto.base,
  &scc_info_SetEndAOReq_control_5fmsgs_2eproto.base,
  &scc_info_SetEndAORes_control_5fmsgs_2eproto.base,
  &scc_info_SetEndDIReq_control_5fmsgs_2eproto.base,
  &scc_info_SetEndDIRes_control_5fmsgs_2eproto.base,
  &scc_info_SetEndDOReq_control_5fmsgs_2eproto.base,
  &scc_info_SetEndDORes_control_5fmsgs_2eproto.base,
  &scc_info_SetFricCompReq_control_5fmsgs_2eproto.base,
  &scc_info_SetFricCompRes_control_5fmsgs_2eproto.base,
  &scc_info_SetImpedanceControlGainReq_control_5fmsgs_2eproto.base,
  &scc_info_SetImpedanceControlGainRes_control_5fmsgs_2eproto.base,
  &scc_info_SetJointControlGainReq_control_5fmsgs_2eproto.base,
  &scc_info_SetJointControlGainRes_control_5fmsgs_2eproto.base,
  &scc_info_SetMountPosReq_control_5fmsgs_2eproto.base,
  &scc_info_SetMountPosRes_control_5fmsgs_2eproto.base,
  &scc_info_SetProgramStateReq_control_5fmsgs_2eproto.base,
  &scc_info_SetProgramStateRes_control_5fmsgs_2eproto.base,
  &scc_info_SetRefFramePlanarReq_control_5fmsgs_2eproto.base,
  &scc_info_SetRefFramePlanarRes_control_5fmsgs_2eproto.base,
  &scc_info_SetRefFrameReq_control_5fmsgs_2eproto.base,
  &scc_info_SetRefFrameRes_control_5fmsgs_2eproto.base,
  &scc_info_SetSafetyLimitConfigReq_control_5fmsgs_2eproto.base,
  &scc_info_SetSafetyLimitConfigRes_control_5fmsgs_2eproto.base,
  &scc_info_SetSafetyStopConfigReq_control_5fmsgs_2eproto.base,
  &scc_info_SetSafetyStopConfigRes_control_5fmsgs_2eproto.base,
  &scc_info_SetSpeedRatioReq_control_5fmsgs_2eproto.base,
  &scc_info_SetSpeedRatioRes_control_5fmsgs_2eproto.base,
  &scc_info_SetTaskControlGainReq_control_5fmsgs_2eproto.base,
  &scc_info_SetTaskControlGainRes_control_5fmsgs_2eproto.base,
  &scc_info_SetToolFrameReq_control_5fmsgs_2eproto.base,
  &scc_info_SetToolFrameRes_control_5fmsgs_2eproto.base,
  &scc_info_SetToolPropertyReq_control_5fmsgs_2eproto.base,
  &scc_info_SetToolPropertyRes_control_5fmsgs_2eproto.base,
  &scc_info_SimulationModeReq_control_5fmsgs_2eproto.base,
  &scc_info_SimulationModeRes_control_5fmsgs_2eproto.base,
  &scc_info_StopReq_control_5fmsgs_2eproto.base,
  &scc_info_StopRes_control_5fmsgs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_5fmsgs_2eproto_once;
static bool descriptor_table_control_5fmsgs_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_5fmsgs_2eproto = {
  &descriptor_table_control_5fmsgs_2eproto_initialized, descriptor_table_protodef_control_5fmsgs_2eproto, "control_msgs.proto", 14684,
  &descriptor_table_control_5fmsgs_2eproto_once, descriptor_table_control_5fmsgs_2eproto_sccs, descriptor_table_control_5fmsgs_2eproto_deps, 174, 1,
  schemas, file_default_instances, TableStruct_control_5fmsgs_2eproto::offsets,
  file_level_metadata_control_5fmsgs_2eproto, 174, file_level_enum_descriptors_control_5fmsgs_2eproto, file_level_service_descriptors_control_5fmsgs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_control_5fmsgs_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_control_5fmsgs_2eproto), true);
namespace IndyFramework {
namespace Protobuf {
namespace Control {

// ===================================================================

void AMoveJReq::InitAsDefaultInstance() {
}
class AMoveJReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMoveJReq::kJposFieldNumber;
const int AMoveJReq::kBlendingTypeFieldNumber;
const int AMoveJReq::kBaseTypeFieldNumber;
const int AMoveJReq::kBlendingRadiusFieldNumber;
const int AMoveJReq::kVelFieldNumber;
const int AMoveJReq::kAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMoveJReq::AMoveJReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMoveJReq)
}
AMoveJReq::AMoveJReq(const AMoveJReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      jpos_(from.jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blending_type_, &from.blending_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&acc_) -
    reinterpret_cast<char*>(&blending_type_)) + sizeof(acc_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMoveJReq)
}

void AMoveJReq::SharedCtor() {
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(acc_));
}

AMoveJReq::~AMoveJReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMoveJReq)
  SharedDtor();
}

void AMoveJReq::SharedDtor() {
}

void AMoveJReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMoveJReq& AMoveJReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMoveJReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMoveJReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMoveJReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpos_.Clear();
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(acc_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMoveJReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float jpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_blending_type(static_cast<::IndyFramework::Protobuf::Shared::BlendingType>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::IndyFramework::Protobuf::Shared::JointBaseType>(val));
        } else goto handle_unusual;
        continue;
      // float blending_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMoveJReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMoveJReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float jpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blending_type(static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::IndyFramework::Protobuf::Shared::JointBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMoveJReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMoveJReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMoveJReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMoveJReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->blending_type(), output);
  }

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->base_type(), output);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->blending_radius(), output);
  }

  // float vel = 7;
  if (!(this->vel() <= 0 && this->vel() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->vel(), output);
  }

  // float acc = 8;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->acc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMoveJReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMoveJReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMoveJReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->blending_type(), target);
  }

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->base_type(), target);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->blending_radius(), target);
  }

  // float vel = 7;
  if (!(this->vel() <= 0 && this->vel() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->vel(), target);
  }

  // float acc = 8;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->acc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMoveJReq)
  return target;
}

size_t AMoveJReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMoveJReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->blending_type());
  }

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float vel = 7;
  if (!(this->vel() <= 0 && this->vel() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc = 8;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMoveJReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMoveJReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AMoveJReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMoveJReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMoveJReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMoveJReq)
    MergeFrom(*source);
  }
}

void AMoveJReq::MergeFrom(const AMoveJReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMoveJReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jpos_.MergeFrom(from.jpos_);
  if (from.blending_type() != 0) {
    set_blending_type(from.blending_type());
  }
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
  if (!(from.vel() <= 0 && from.vel() >= 0)) {
    set_vel(from.vel());
  }
  if (!(from.acc() <= 0 && from.acc() >= 0)) {
    set_acc(from.acc());
  }
}

void AMoveJReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMoveJReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMoveJReq::CopyFrom(const AMoveJReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMoveJReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMoveJReq::IsInitialized() const {
  return true;
}

void AMoveJReq::Swap(AMoveJReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMoveJReq::InternalSwap(AMoveJReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpos_.InternalSwap(&other->jpos_);
  swap(blending_type_, other->blending_type_);
  swap(base_type_, other->base_type_);
  swap(blending_radius_, other->blending_radius_);
  swap(vel_, other->vel_);
  swap(acc_, other->acc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AMoveJReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMoveJRes::InitAsDefaultInstance() {
}
class AMoveJRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMoveJRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMoveJRes::AMoveJRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMoveJRes)
}
AMoveJRes::AMoveJRes(const AMoveJRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMoveJRes)
}

void AMoveJRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AMoveJRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AMoveJRes::~AMoveJRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMoveJRes)
  SharedDtor();
}

void AMoveJRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AMoveJRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMoveJRes& AMoveJRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMoveJRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMoveJRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMoveJRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMoveJRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.AMoveJRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMoveJRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMoveJRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.AMoveJRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMoveJRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMoveJRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMoveJRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMoveJRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMoveJRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMoveJRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMoveJRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMoveJRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMoveJRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMoveJRes)
  return target;
}

size_t AMoveJRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMoveJRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMoveJRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMoveJRes)
  GOOGLE_DCHECK_NE(&from, this);
  const AMoveJRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMoveJRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMoveJRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMoveJRes)
    MergeFrom(*source);
  }
}

void AMoveJRes::MergeFrom(const AMoveJRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMoveJRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AMoveJRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMoveJRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMoveJRes::CopyFrom(const AMoveJRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMoveJRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMoveJRes::IsInitialized() const {
  return true;
}

void AMoveJRes::Swap(AMoveJRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMoveJRes::InternalSwap(AMoveJRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AMoveJRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMoveJTReq::InitAsDefaultInstance() {
}
class AMoveJTReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMoveJTReq::kJposFieldNumber;
const int AMoveJTReq::kBlendingTypeFieldNumber;
const int AMoveJTReq::kBaseTypeFieldNumber;
const int AMoveJTReq::kBlendingRadiusFieldNumber;
const int AMoveJTReq::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMoveJTReq::AMoveJTReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMoveJTReq)
}
AMoveJTReq::AMoveJTReq(const AMoveJTReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      jpos_(from.jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blending_type_, &from.blending_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&blending_type_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMoveJTReq)
}

void AMoveJTReq::SharedCtor() {
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(time_));
}

AMoveJTReq::~AMoveJTReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMoveJTReq)
  SharedDtor();
}

void AMoveJTReq::SharedDtor() {
}

void AMoveJTReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMoveJTReq& AMoveJTReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMoveJTReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMoveJTReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMoveJTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpos_.Clear();
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMoveJTReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float jpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_blending_type(static_cast<::IndyFramework::Protobuf::Shared::BlendingType>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::IndyFramework::Protobuf::Shared::JointBaseType>(val));
        } else goto handle_unusual;
        continue;
      // float blending_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMoveJTReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMoveJTReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float jpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blending_type(static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::IndyFramework::Protobuf::Shared::JointBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMoveJTReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMoveJTReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMoveJTReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMoveJTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->blending_type(), output);
  }

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->base_type(), output);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->blending_radius(), output);
  }

  // float time = 6;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMoveJTReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMoveJTReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMoveJTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->blending_type(), target);
  }

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->base_type(), target);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->blending_radius(), target);
  }

  // float time = 6;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMoveJTReq)
  return target;
}

size_t AMoveJTReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMoveJTReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->blending_type());
  }

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float time = 6;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMoveJTReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMoveJTReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AMoveJTReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMoveJTReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMoveJTReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMoveJTReq)
    MergeFrom(*source);
  }
}

void AMoveJTReq::MergeFrom(const AMoveJTReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMoveJTReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jpos_.MergeFrom(from.jpos_);
  if (from.blending_type() != 0) {
    set_blending_type(from.blending_type());
  }
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    set_time(from.time());
  }
}

void AMoveJTReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMoveJTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMoveJTReq::CopyFrom(const AMoveJTReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMoveJTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMoveJTReq::IsInitialized() const {
  return true;
}

void AMoveJTReq::Swap(AMoveJTReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMoveJTReq::InternalSwap(AMoveJTReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpos_.InternalSwap(&other->jpos_);
  swap(blending_type_, other->blending_type_);
  swap(base_type_, other->base_type_);
  swap(blending_radius_, other->blending_radius_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AMoveJTReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMoveJTRes::InitAsDefaultInstance() {
}
class AMoveJTRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMoveJTRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMoveJTRes::AMoveJTRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMoveJTRes)
}
AMoveJTRes::AMoveJTRes(const AMoveJTRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMoveJTRes)
}

void AMoveJTRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AMoveJTRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AMoveJTRes::~AMoveJTRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMoveJTRes)
  SharedDtor();
}

void AMoveJTRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AMoveJTRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMoveJTRes& AMoveJTRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMoveJTRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMoveJTRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMoveJTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMoveJTRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.AMoveJTRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMoveJTRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMoveJTRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.AMoveJTRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMoveJTRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMoveJTRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMoveJTRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMoveJTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMoveJTRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMoveJTRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMoveJTRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMoveJTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMoveJTRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMoveJTRes)
  return target;
}

size_t AMoveJTRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMoveJTRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMoveJTRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMoveJTRes)
  GOOGLE_DCHECK_NE(&from, this);
  const AMoveJTRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMoveJTRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMoveJTRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMoveJTRes)
    MergeFrom(*source);
  }
}

void AMoveJTRes::MergeFrom(const AMoveJTRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMoveJTRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AMoveJTRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMoveJTRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMoveJTRes::CopyFrom(const AMoveJTRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMoveJTRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMoveJTRes::IsInitialized() const {
  return true;
}

void AMoveJTRes::Swap(AMoveJTRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMoveJTRes::InternalSwap(AMoveJTRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AMoveJTRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMoveLReq::InitAsDefaultInstance() {
}
class AMoveLReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMoveLReq::kTposFieldNumber;
const int AMoveLReq::kBlendingTypeFieldNumber;
const int AMoveLReq::kBaseTypeFieldNumber;
const int AMoveLReq::kBlendingRadiusFieldNumber;
const int AMoveLReq::kVelFieldNumber;
const int AMoveLReq::kAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMoveLReq::AMoveLReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMoveLReq)
}
AMoveLReq::AMoveLReq(const AMoveLReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blending_type_, &from.blending_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&acc_) -
    reinterpret_cast<char*>(&blending_type_)) + sizeof(acc_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMoveLReq)
}

void AMoveLReq::SharedCtor() {
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(acc_));
}

AMoveLReq::~AMoveLReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMoveLReq)
  SharedDtor();
}

void AMoveLReq::SharedDtor() {
}

void AMoveLReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMoveLReq& AMoveLReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMoveLReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMoveLReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMoveLReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(acc_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMoveLReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_blending_type(static_cast<::IndyFramework::Protobuf::Shared::BlendingType>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::IndyFramework::Protobuf::Shared::TaskBaseType>(val));
        } else goto handle_unusual;
        continue;
      // float blending_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMoveLReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMoveLReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blending_type(static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMoveLReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMoveLReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMoveLReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMoveLReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->blending_type(), output);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->base_type(), output);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->blending_radius(), output);
  }

  // float vel = 6;
  if (!(this->vel() <= 0 && this->vel() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->vel(), output);
  }

  // float acc = 7;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->acc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMoveLReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMoveLReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMoveLReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->blending_type(), target);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->base_type(), target);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->blending_radius(), target);
  }

  // float vel = 6;
  if (!(this->vel() <= 0 && this->vel() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->vel(), target);
  }

  // float acc = 7;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->acc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMoveLReq)
  return target;
}

size_t AMoveLReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMoveLReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->blending_type());
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float vel = 6;
  if (!(this->vel() <= 0 && this->vel() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc = 7;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMoveLReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMoveLReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AMoveLReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMoveLReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMoveLReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMoveLReq)
    MergeFrom(*source);
  }
}

void AMoveLReq::MergeFrom(const AMoveLReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMoveLReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  if (from.blending_type() != 0) {
    set_blending_type(from.blending_type());
  }
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
  if (!(from.vel() <= 0 && from.vel() >= 0)) {
    set_vel(from.vel());
  }
  if (!(from.acc() <= 0 && from.acc() >= 0)) {
    set_acc(from.acc());
  }
}

void AMoveLReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMoveLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMoveLReq::CopyFrom(const AMoveLReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMoveLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMoveLReq::IsInitialized() const {
  return true;
}

void AMoveLReq::Swap(AMoveLReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMoveLReq::InternalSwap(AMoveLReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  swap(blending_type_, other->blending_type_);
  swap(base_type_, other->base_type_);
  swap(blending_radius_, other->blending_radius_);
  swap(vel_, other->vel_);
  swap(acc_, other->acc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AMoveLReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMoveLRes::InitAsDefaultInstance() {
}
class AMoveLRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMoveLRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMoveLRes::AMoveLRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMoveLRes)
}
AMoveLRes::AMoveLRes(const AMoveLRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMoveLRes)
}

void AMoveLRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AMoveLRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AMoveLRes::~AMoveLRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMoveLRes)
  SharedDtor();
}

void AMoveLRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AMoveLRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMoveLRes& AMoveLRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMoveLRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMoveLRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMoveLRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMoveLRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.AMoveLRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMoveLRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMoveLRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.AMoveLRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMoveLRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMoveLRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMoveLRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMoveLRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMoveLRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMoveLRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMoveLRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMoveLRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMoveLRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMoveLRes)
  return target;
}

size_t AMoveLRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMoveLRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMoveLRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMoveLRes)
  GOOGLE_DCHECK_NE(&from, this);
  const AMoveLRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMoveLRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMoveLRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMoveLRes)
    MergeFrom(*source);
  }
}

void AMoveLRes::MergeFrom(const AMoveLRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMoveLRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AMoveLRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMoveLRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMoveLRes::CopyFrom(const AMoveLRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMoveLRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMoveLRes::IsInitialized() const {
  return true;
}

void AMoveLRes::Swap(AMoveLRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMoveLRes::InternalSwap(AMoveLRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AMoveLRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMoveLTReq::InitAsDefaultInstance() {
}
class AMoveLTReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMoveLTReq::kTposFieldNumber;
const int AMoveLTReq::kBlendingTypeFieldNumber;
const int AMoveLTReq::kBaseTypeFieldNumber;
const int AMoveLTReq::kBlendingRadiusFieldNumber;
const int AMoveLTReq::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMoveLTReq::AMoveLTReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMoveLTReq)
}
AMoveLTReq::AMoveLTReq(const AMoveLTReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blending_type_, &from.blending_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&blending_type_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMoveLTReq)
}

void AMoveLTReq::SharedCtor() {
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(time_));
}

AMoveLTReq::~AMoveLTReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMoveLTReq)
  SharedDtor();
}

void AMoveLTReq::SharedDtor() {
}

void AMoveLTReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMoveLTReq& AMoveLTReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMoveLTReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMoveLTReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMoveLTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMoveLTReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_blending_type(static_cast<::IndyFramework::Protobuf::Shared::BlendingType>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::IndyFramework::Protobuf::Shared::TaskBaseType>(val));
        } else goto handle_unusual;
        continue;
      // float blending_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMoveLTReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMoveLTReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blending_type(static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMoveLTReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMoveLTReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMoveLTReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMoveLTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->blending_type(), output);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->base_type(), output);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->blending_radius(), output);
  }

  // float time = 6;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMoveLTReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMoveLTReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMoveLTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->blending_type(), target);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->base_type(), target);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->blending_radius(), target);
  }

  // float time = 6;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMoveLTReq)
  return target;
}

size_t AMoveLTReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMoveLTReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->blending_type());
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float time = 6;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMoveLTReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMoveLTReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AMoveLTReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMoveLTReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMoveLTReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMoveLTReq)
    MergeFrom(*source);
  }
}

void AMoveLTReq::MergeFrom(const AMoveLTReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMoveLTReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  if (from.blending_type() != 0) {
    set_blending_type(from.blending_type());
  }
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    set_time(from.time());
  }
}

void AMoveLTReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMoveLTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMoveLTReq::CopyFrom(const AMoveLTReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMoveLTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMoveLTReq::IsInitialized() const {
  return true;
}

void AMoveLTReq::Swap(AMoveLTReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMoveLTReq::InternalSwap(AMoveLTReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  swap(blending_type_, other->blending_type_);
  swap(base_type_, other->base_type_);
  swap(blending_radius_, other->blending_radius_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AMoveLTReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMoveLTRes::InitAsDefaultInstance() {
}
class AMoveLTRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMoveLTRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMoveLTRes::AMoveLTRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMoveLTRes)
}
AMoveLTRes::AMoveLTRes(const AMoveLTRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMoveLTRes)
}

void AMoveLTRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AMoveLTRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AMoveLTRes::~AMoveLTRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMoveLTRes)
  SharedDtor();
}

void AMoveLTRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AMoveLTRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMoveLTRes& AMoveLTRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMoveLTRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMoveLTRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMoveLTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMoveLTRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.AMoveLTRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMoveLTRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMoveLTRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.AMoveLTRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMoveLTRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMoveLTRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMoveLTRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMoveLTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMoveLTRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMoveLTRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMoveLTRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMoveLTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMoveLTRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMoveLTRes)
  return target;
}

size_t AMoveLTRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMoveLTRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMoveLTRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMoveLTRes)
  GOOGLE_DCHECK_NE(&from, this);
  const AMoveLTRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMoveLTRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMoveLTRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMoveLTRes)
    MergeFrom(*source);
  }
}

void AMoveLTRes::MergeFrom(const AMoveLTRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMoveLTRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AMoveLTRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMoveLTRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMoveLTRes::CopyFrom(const AMoveLTRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMoveLTRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMoveLTRes::IsInitialized() const {
  return true;
}

void AMoveLTRes::Swap(AMoveLTRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMoveLTRes::InternalSwap(AMoveLTRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AMoveLTRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMoveCReq::InitAsDefaultInstance() {
}
class AMoveCReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMoveCReq::kTpos0FieldNumber;
const int AMoveCReq::kTpos1FieldNumber;
const int AMoveCReq::kBlendingTypeFieldNumber;
const int AMoveCReq::kBaseTypeFieldNumber;
const int AMoveCReq::kBlendingRadiusFieldNumber;
const int AMoveCReq::kAngleFieldNumber;
const int AMoveCReq::kSettingTypeFieldNumber;
const int AMoveCReq::kMoveTypeFieldNumber;
const int AMoveCReq::kVelFieldNumber;
const int AMoveCReq::kAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMoveCReq::AMoveCReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMoveCReq)
}
AMoveCReq::AMoveCReq(const AMoveCReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos0_(from.tpos0_),
      tpos1_(from.tpos1_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blending_type_, &from.blending_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&acc_) -
    reinterpret_cast<char*>(&blending_type_)) + sizeof(acc_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMoveCReq)
}

void AMoveCReq::SharedCtor() {
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(acc_));
}

AMoveCReq::~AMoveCReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMoveCReq)
  SharedDtor();
}

void AMoveCReq::SharedDtor() {
}

void AMoveCReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMoveCReq& AMoveCReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMoveCReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMoveCReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMoveCReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos0_.Clear();
  tpos1_.Clear();
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(acc_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMoveCReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos0(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos0(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tpos1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_tpos1(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_blending_type(static_cast<::IndyFramework::Protobuf::Shared::BlendingType>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::IndyFramework::Protobuf::Shared::TaskBaseType>(val));
        } else goto handle_unusual;
        continue;
      // float blending_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_setting_type(static_cast<::IndyFramework::Protobuf::Shared::CircularSettingType>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_move_type(static_cast<::IndyFramework::Protobuf::Shared::CircularMovingType>(val));
        } else goto handle_unusual;
        continue;
      // float vel = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMoveCReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMoveCReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos0 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos0())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos0())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tpos1 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos1())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tpos1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blending_type(static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_setting_type(static_cast< ::IndyFramework::Protobuf::Shared::CircularSettingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_move_type(static_cast< ::IndyFramework::Protobuf::Shared::CircularMovingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (125 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMoveCReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMoveCReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMoveCReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMoveCReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos0 = 1;
  if (this->tpos0_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos0_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos0().data(), this->tpos0_size(), output);
  }

  // repeated float tpos1 = 2;
  if (this->tpos1_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos1_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos1().data(), this->tpos1_size(), output);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->blending_type(), output);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->base_type(), output);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->blending_radius(), output);
  }

  // float angle = 6;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->angle(), output);
  }

  // .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
  if (this->setting_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      13, this->setting_type(), output);
  }

  // .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
  if (this->move_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      14, this->move_type(), output);
  }

  // float vel = 15;
  if (!(this->vel() <= 0 && this->vel() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(15, this->vel(), output);
  }

  // float acc = 16;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->acc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMoveCReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMoveCReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMoveCReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos0 = 1;
  if (this->tpos0_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos0_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos0_, target);
  }

  // repeated float tpos1 = 2;
  if (this->tpos1_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos1_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos1_, target);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->blending_type(), target);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->base_type(), target);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->blending_radius(), target);
  }

  // float angle = 6;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->angle(), target);
  }

  // .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
  if (this->setting_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->setting_type(), target);
  }

  // .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
  if (this->move_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->move_type(), target);
  }

  // float vel = 15;
  if (!(this->vel() <= 0 && this->vel() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->vel(), target);
  }

  // float acc = 16;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->acc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMoveCReq)
  return target;
}

size_t AMoveCReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMoveCReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos0 = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos0_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos0_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tpos1 = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos1_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->blending_type());
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle = 6;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  // .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
  if (this->setting_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->setting_type());
  }

  // .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
  if (this->move_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->move_type());
  }

  // float vel = 15;
  if (!(this->vel() <= 0 && this->vel() >= 0)) {
    total_size += 1 + 4;
  }

  // float acc = 16;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    total_size += 2 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMoveCReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMoveCReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AMoveCReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMoveCReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMoveCReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMoveCReq)
    MergeFrom(*source);
  }
}

void AMoveCReq::MergeFrom(const AMoveCReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMoveCReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos0_.MergeFrom(from.tpos0_);
  tpos1_.MergeFrom(from.tpos1_);
  if (from.blending_type() != 0) {
    set_blending_type(from.blending_type());
  }
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    set_angle(from.angle());
  }
  if (from.setting_type() != 0) {
    set_setting_type(from.setting_type());
  }
  if (from.move_type() != 0) {
    set_move_type(from.move_type());
  }
  if (!(from.vel() <= 0 && from.vel() >= 0)) {
    set_vel(from.vel());
  }
  if (!(from.acc() <= 0 && from.acc() >= 0)) {
    set_acc(from.acc());
  }
}

void AMoveCReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMoveCReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMoveCReq::CopyFrom(const AMoveCReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMoveCReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMoveCReq::IsInitialized() const {
  return true;
}

void AMoveCReq::Swap(AMoveCReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMoveCReq::InternalSwap(AMoveCReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos0_.InternalSwap(&other->tpos0_);
  tpos1_.InternalSwap(&other->tpos1_);
  swap(blending_type_, other->blending_type_);
  swap(base_type_, other->base_type_);
  swap(blending_radius_, other->blending_radius_);
  swap(angle_, other->angle_);
  swap(setting_type_, other->setting_type_);
  swap(move_type_, other->move_type_);
  swap(vel_, other->vel_);
  swap(acc_, other->acc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AMoveCReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMoveCRes::InitAsDefaultInstance() {
}
class AMoveCRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMoveCRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMoveCRes::AMoveCRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMoveCRes)
}
AMoveCRes::AMoveCRes(const AMoveCRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMoveCRes)
}

void AMoveCRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AMoveCRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AMoveCRes::~AMoveCRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMoveCRes)
  SharedDtor();
}

void AMoveCRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AMoveCRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMoveCRes& AMoveCRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMoveCRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMoveCRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMoveCRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMoveCRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.AMoveCRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMoveCRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMoveCRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.AMoveCRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMoveCRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMoveCRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMoveCRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMoveCRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMoveCRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMoveCRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMoveCRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMoveCRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMoveCRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMoveCRes)
  return target;
}

size_t AMoveCRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMoveCRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMoveCRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMoveCRes)
  GOOGLE_DCHECK_NE(&from, this);
  const AMoveCRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMoveCRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMoveCRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMoveCRes)
    MergeFrom(*source);
  }
}

void AMoveCRes::MergeFrom(const AMoveCRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMoveCRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AMoveCRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMoveCRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMoveCRes::CopyFrom(const AMoveCRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMoveCRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMoveCRes::IsInitialized() const {
  return true;
}

void AMoveCRes::Swap(AMoveCRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMoveCRes::InternalSwap(AMoveCRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AMoveCRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMoveCTReq::InitAsDefaultInstance() {
}
class AMoveCTReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMoveCTReq::kTpos0FieldNumber;
const int AMoveCTReq::kTpos1FieldNumber;
const int AMoveCTReq::kBlendingTypeFieldNumber;
const int AMoveCTReq::kBaseTypeFieldNumber;
const int AMoveCTReq::kBlendingRadiusFieldNumber;
const int AMoveCTReq::kAngleFieldNumber;
const int AMoveCTReq::kSettingTypeFieldNumber;
const int AMoveCTReq::kMoveTypeFieldNumber;
const int AMoveCTReq::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMoveCTReq::AMoveCTReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMoveCTReq)
}
AMoveCTReq::AMoveCTReq(const AMoveCTReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos0_(from.tpos0_),
      tpos1_(from.tpos1_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blending_type_, &from.blending_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&move_type_) -
    reinterpret_cast<char*>(&blending_type_)) + sizeof(move_type_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMoveCTReq)
}

void AMoveCTReq::SharedCtor() {
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_type_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(move_type_));
}

AMoveCTReq::~AMoveCTReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMoveCTReq)
  SharedDtor();
}

void AMoveCTReq::SharedDtor() {
}

void AMoveCTReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMoveCTReq& AMoveCTReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMoveCTReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMoveCTReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMoveCTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos0_.Clear();
  tpos1_.Clear();
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&move_type_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(move_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMoveCTReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos0(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos0(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tpos1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_tpos1(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_blending_type(static_cast<::IndyFramework::Protobuf::Shared::BlendingType>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::IndyFramework::Protobuf::Shared::TaskBaseType>(val));
        } else goto handle_unusual;
        continue;
      // float blending_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_setting_type(static_cast<::IndyFramework::Protobuf::Shared::CircularSettingType>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_move_type(static_cast<::IndyFramework::Protobuf::Shared::CircularMovingType>(val));
        } else goto handle_unusual;
        continue;
      // float time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMoveCTReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMoveCTReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos0 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos0())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos0())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tpos1 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos1())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tpos1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blending_type(static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_setting_type(static_cast< ::IndyFramework::Protobuf::Shared::CircularSettingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_move_type(static_cast< ::IndyFramework::Protobuf::Shared::CircularMovingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (173 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMoveCTReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMoveCTReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMoveCTReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMoveCTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos0 = 1;
  if (this->tpos0_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos0_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos0().data(), this->tpos0_size(), output);
  }

  // repeated float tpos1 = 2;
  if (this->tpos1_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos1_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos1().data(), this->tpos1_size(), output);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->blending_type(), output);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->base_type(), output);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->blending_radius(), output);
  }

  // float angle = 6;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->angle(), output);
  }

  // .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
  if (this->setting_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      13, this->setting_type(), output);
  }

  // .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
  if (this->move_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      14, this->move_type(), output);
  }

  // float time = 21;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(21, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMoveCTReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMoveCTReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMoveCTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos0 = 1;
  if (this->tpos0_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos0_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos0_, target);
  }

  // repeated float tpos1 = 2;
  if (this->tpos1_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos1_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos1_, target);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->blending_type(), target);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->base_type(), target);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->blending_radius(), target);
  }

  // float angle = 6;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->angle(), target);
  }

  // .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
  if (this->setting_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->setting_type(), target);
  }

  // .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
  if (this->move_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->move_type(), target);
  }

  // float time = 21;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMoveCTReq)
  return target;
}

size_t AMoveCTReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMoveCTReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos0 = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos0_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos0_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tpos1 = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos1_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->blending_type());
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle = 6;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  // float time = 21;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 2 + 4;
  }

  // .IndyFramework.Protobuf.Shared.CircularSettingType setting_type = 13;
  if (this->setting_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->setting_type());
  }

  // .IndyFramework.Protobuf.Shared.CircularMovingType move_type = 14;
  if (this->move_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->move_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMoveCTReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMoveCTReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AMoveCTReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMoveCTReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMoveCTReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMoveCTReq)
    MergeFrom(*source);
  }
}

void AMoveCTReq::MergeFrom(const AMoveCTReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMoveCTReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos0_.MergeFrom(from.tpos0_);
  tpos1_.MergeFrom(from.tpos1_);
  if (from.blending_type() != 0) {
    set_blending_type(from.blending_type());
  }
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    set_angle(from.angle());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    set_time(from.time());
  }
  if (from.setting_type() != 0) {
    set_setting_type(from.setting_type());
  }
  if (from.move_type() != 0) {
    set_move_type(from.move_type());
  }
}

void AMoveCTReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMoveCTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMoveCTReq::CopyFrom(const AMoveCTReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMoveCTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMoveCTReq::IsInitialized() const {
  return true;
}

void AMoveCTReq::Swap(AMoveCTReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMoveCTReq::InternalSwap(AMoveCTReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos0_.InternalSwap(&other->tpos0_);
  tpos1_.InternalSwap(&other->tpos1_);
  swap(blending_type_, other->blending_type_);
  swap(base_type_, other->base_type_);
  swap(blending_radius_, other->blending_radius_);
  swap(angle_, other->angle_);
  swap(time_, other->time_);
  swap(setting_type_, other->setting_type_);
  swap(move_type_, other->move_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AMoveCTReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMoveCTRes::InitAsDefaultInstance() {
}
class AMoveCTRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMoveCTRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMoveCTRes::AMoveCTRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMoveCTRes)
}
AMoveCTRes::AMoveCTRes(const AMoveCTRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMoveCTRes)
}

void AMoveCTRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AMoveCTRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AMoveCTRes::~AMoveCTRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMoveCTRes)
  SharedDtor();
}

void AMoveCTRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AMoveCTRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMoveCTRes& AMoveCTRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMoveCTRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMoveCTRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMoveCTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMoveCTRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.AMoveCTRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMoveCTRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMoveCTRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.AMoveCTRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMoveCTRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMoveCTRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMoveCTRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMoveCTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMoveCTRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMoveCTRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMoveCTRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMoveCTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMoveCTRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMoveCTRes)
  return target;
}

size_t AMoveCTRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMoveCTRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMoveCTRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMoveCTRes)
  GOOGLE_DCHECK_NE(&from, this);
  const AMoveCTRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMoveCTRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMoveCTRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMoveCTRes)
    MergeFrom(*source);
  }
}

void AMoveCTRes::MergeFrom(const AMoveCTRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMoveCTRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AMoveCTRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMoveCTRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMoveCTRes::CopyFrom(const AMoveCTRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMoveCTRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMoveCTRes::IsInitialized() const {
  return true;
}

void AMoveCTRes::Swap(AMoveCTRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMoveCTRes::InternalSwap(AMoveCTRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AMoveCTRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AWaitIOReq::InitAsDefaultInstance() {
}
class AWaitIOReq::HasBitSetters {
 public:
};

void AWaitIOReq::clear_di_list() {
  di_list_.Clear();
}
void AWaitIOReq::clear_do_list() {
  do_list_.Clear();
}
void AWaitIOReq::clear_end_di_list() {
  end_di_list_.Clear();
}
void AWaitIOReq::clear_end_do_list() {
  end_do_list_.Clear();
}
void AWaitIOReq::clear_set_do_list() {
  set_do_list_.Clear();
}
void AWaitIOReq::clear_set_end_do_list() {
  set_end_do_list_.Clear();
}
void AWaitIOReq::clear_set_ao_list() {
  set_ao_list_.Clear();
}
void AWaitIOReq::clear_set_end_ao_list() {
  set_end_ao_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AWaitIOReq::kDiListFieldNumber;
const int AWaitIOReq::kDoListFieldNumber;
const int AWaitIOReq::kEndDiListFieldNumber;
const int AWaitIOReq::kEndDoListFieldNumber;
const int AWaitIOReq::kConjunctionFieldNumber;
const int AWaitIOReq::kSetDoListFieldNumber;
const int AWaitIOReq::kSetEndDoListFieldNumber;
const int AWaitIOReq::kSetAoListFieldNumber;
const int AWaitIOReq::kSetEndAoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AWaitIOReq::AWaitIOReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AWaitIOReq)
}
AWaitIOReq::AWaitIOReq(const AWaitIOReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      di_list_(from.di_list_),
      do_list_(from.do_list_),
      end_di_list_(from.end_di_list_),
      end_do_list_(from.end_do_list_),
      set_do_list_(from.set_do_list_),
      set_end_do_list_(from.set_end_do_list_),
      set_ao_list_(from.set_ao_list_),
      set_end_ao_list_(from.set_end_ao_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  conjunction_ = from.conjunction_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AWaitIOReq)
}

void AWaitIOReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AWaitIOReq_control_5fmsgs_2eproto.base);
  conjunction_ = 0;
}

AWaitIOReq::~AWaitIOReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AWaitIOReq)
  SharedDtor();
}

void AWaitIOReq::SharedDtor() {
}

void AWaitIOReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AWaitIOReq& AWaitIOReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AWaitIOReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AWaitIOReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AWaitIOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  di_list_.Clear();
  do_list_.Clear();
  end_di_list_.Clear();
  end_do_list_.Clear();
  set_do_list_.Clear();
  set_end_do_list_.Clear();
  set_ao_list_.Clear();
  set_end_ao_list_.Clear();
  conjunction_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AWaitIOReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_di_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_di_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_end_di_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_do_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_end_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // int32 conjunction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          conjunction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AWaitIOReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AWaitIOReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_di_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_di_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_end_di_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_do_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_end_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 conjunction = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &conjunction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AWaitIOReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AWaitIOReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AWaitIOReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AWaitIOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->di_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->di_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->do_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_di_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_di_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->end_di_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_do_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->end_do_list(static_cast<int>(i)),
      output);
  }

  // int32 conjunction = 5;
  if (this->conjunction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->conjunction(), output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->set_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->set_end_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->set_ao_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->set_end_ao_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AWaitIOReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AWaitIOReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AWaitIOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->di_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->di_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->do_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_di_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_di_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->end_di_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_do_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->end_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->end_do_list(static_cast<int>(i)), target);
  }

  // int32 conjunction = 5;
  if (this->conjunction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->conjunction(), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->set_do_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->set_end_do_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->set_ao_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->set_end_ao_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AWaitIOReq)
  return target;
}

size_t AWaitIOReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AWaitIOReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->di_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->di_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_di_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->end_di_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->end_di_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal end_do_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->end_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->end_do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->set_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->set_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_ao_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_ao_list(static_cast<int>(i)));
    }
  }

  // int32 conjunction = 5;
  if (this->conjunction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->conjunction());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AWaitIOReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AWaitIOReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AWaitIOReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AWaitIOReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AWaitIOReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AWaitIOReq)
    MergeFrom(*source);
  }
}

void AWaitIOReq::MergeFrom(const AWaitIOReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AWaitIOReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  di_list_.MergeFrom(from.di_list_);
  do_list_.MergeFrom(from.do_list_);
  end_di_list_.MergeFrom(from.end_di_list_);
  end_do_list_.MergeFrom(from.end_do_list_);
  set_do_list_.MergeFrom(from.set_do_list_);
  set_end_do_list_.MergeFrom(from.set_end_do_list_);
  set_ao_list_.MergeFrom(from.set_ao_list_);
  set_end_ao_list_.MergeFrom(from.set_end_ao_list_);
  if (from.conjunction() != 0) {
    set_conjunction(from.conjunction());
  }
}

void AWaitIOReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AWaitIOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AWaitIOReq::CopyFrom(const AWaitIOReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AWaitIOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AWaitIOReq::IsInitialized() const {
  return true;
}

void AWaitIOReq::Swap(AWaitIOReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AWaitIOReq::InternalSwap(AWaitIOReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&di_list_)->InternalSwap(CastToBase(&other->di_list_));
  CastToBase(&do_list_)->InternalSwap(CastToBase(&other->do_list_));
  CastToBase(&end_di_list_)->InternalSwap(CastToBase(&other->end_di_list_));
  CastToBase(&end_do_list_)->InternalSwap(CastToBase(&other->end_do_list_));
  CastToBase(&set_do_list_)->InternalSwap(CastToBase(&other->set_do_list_));
  CastToBase(&set_end_do_list_)->InternalSwap(CastToBase(&other->set_end_do_list_));
  CastToBase(&set_ao_list_)->InternalSwap(CastToBase(&other->set_ao_list_));
  CastToBase(&set_end_ao_list_)->InternalSwap(CastToBase(&other->set_end_ao_list_));
  swap(conjunction_, other->conjunction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AWaitIOReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AWaitIORes::InitAsDefaultInstance() {
}
class AWaitIORes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AWaitIORes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AWaitIORes::AWaitIORes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AWaitIORes)
}
AWaitIORes::AWaitIORes(const AWaitIORes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AWaitIORes)
}

void AWaitIORes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AWaitIORes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AWaitIORes::~AWaitIORes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AWaitIORes)
  SharedDtor();
}

void AWaitIORes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AWaitIORes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AWaitIORes& AWaitIORes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AWaitIORes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AWaitIORes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AWaitIORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AWaitIORes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.AWaitIORes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AWaitIORes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AWaitIORes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.AWaitIORes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AWaitIORes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AWaitIORes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AWaitIORes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AWaitIORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AWaitIORes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AWaitIORes)
}

::PROTOBUF_NAMESPACE_ID::uint8* AWaitIORes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AWaitIORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AWaitIORes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AWaitIORes)
  return target;
}

size_t AWaitIORes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AWaitIORes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AWaitIORes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AWaitIORes)
  GOOGLE_DCHECK_NE(&from, this);
  const AWaitIORes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AWaitIORes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AWaitIORes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AWaitIORes)
    MergeFrom(*source);
  }
}

void AWaitIORes::MergeFrom(const AWaitIORes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AWaitIORes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AWaitIORes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AWaitIORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AWaitIORes::CopyFrom(const AWaitIORes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AWaitIORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AWaitIORes::IsInitialized() const {
  return true;
}

void AWaitIORes::Swap(AWaitIORes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AWaitIORes::InternalSwap(AWaitIORes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AWaitIORes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AWaitTimeReq::InitAsDefaultInstance() {
}
class AWaitTimeReq::HasBitSetters {
 public:
};

void AWaitTimeReq::clear_set_do_list() {
  set_do_list_.Clear();
}
void AWaitTimeReq::clear_set_end_do_list() {
  set_end_do_list_.Clear();
}
void AWaitTimeReq::clear_set_ao_list() {
  set_ao_list_.Clear();
}
void AWaitTimeReq::clear_set_end_ao_list() {
  set_end_ao_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AWaitTimeReq::kTimeFieldNumber;
const int AWaitTimeReq::kSetDoListFieldNumber;
const int AWaitTimeReq::kSetEndDoListFieldNumber;
const int AWaitTimeReq::kSetAoListFieldNumber;
const int AWaitTimeReq::kSetEndAoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AWaitTimeReq::AWaitTimeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AWaitTimeReq)
}
AWaitTimeReq::AWaitTimeReq(const AWaitTimeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      set_do_list_(from.set_do_list_),
      set_end_do_list_(from.set_end_do_list_),
      set_ao_list_(from.set_ao_list_),
      set_end_ao_list_(from.set_end_ao_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AWaitTimeReq)
}

void AWaitTimeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AWaitTimeReq_control_5fmsgs_2eproto.base);
  time_ = 0;
}

AWaitTimeReq::~AWaitTimeReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AWaitTimeReq)
  SharedDtor();
}

void AWaitTimeReq::SharedDtor() {
}

void AWaitTimeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AWaitTimeReq& AWaitTimeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AWaitTimeReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AWaitTimeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AWaitTimeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_do_list_.Clear();
  set_end_do_list_.Clear();
  set_ao_list_.Clear();
  set_end_ao_list_.Clear();
  time_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AWaitTimeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AWaitTimeReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AWaitTimeReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AWaitTimeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AWaitTimeReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AWaitTimeReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AWaitTimeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->time(), output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->set_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->set_end_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->set_ao_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->set_end_ao_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AWaitTimeReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AWaitTimeReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AWaitTimeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->time(), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->set_do_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->set_end_do_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->set_ao_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->set_end_ao_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AWaitTimeReq)
  return target;
}

size_t AWaitTimeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AWaitTimeReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->set_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->set_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_ao_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_ao_list(static_cast<int>(i)));
    }
  }

  // float time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AWaitTimeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AWaitTimeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AWaitTimeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AWaitTimeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AWaitTimeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AWaitTimeReq)
    MergeFrom(*source);
  }
}

void AWaitTimeReq::MergeFrom(const AWaitTimeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AWaitTimeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_do_list_.MergeFrom(from.set_do_list_);
  set_end_do_list_.MergeFrom(from.set_end_do_list_);
  set_ao_list_.MergeFrom(from.set_ao_list_);
  set_end_ao_list_.MergeFrom(from.set_end_ao_list_);
  if (!(from.time() <= 0 && from.time() >= 0)) {
    set_time(from.time());
  }
}

void AWaitTimeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AWaitTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AWaitTimeReq::CopyFrom(const AWaitTimeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AWaitTimeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AWaitTimeReq::IsInitialized() const {
  return true;
}

void AWaitTimeReq::Swap(AWaitTimeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AWaitTimeReq::InternalSwap(AWaitTimeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&set_do_list_)->InternalSwap(CastToBase(&other->set_do_list_));
  CastToBase(&set_end_do_list_)->InternalSwap(CastToBase(&other->set_end_do_list_));
  CastToBase(&set_ao_list_)->InternalSwap(CastToBase(&other->set_ao_list_));
  CastToBase(&set_end_ao_list_)->InternalSwap(CastToBase(&other->set_end_ao_list_));
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AWaitTimeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AWaitTimeRes::InitAsDefaultInstance() {
}
class AWaitTimeRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AWaitTimeRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AWaitTimeRes::AWaitTimeRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AWaitTimeRes)
}
AWaitTimeRes::AWaitTimeRes(const AWaitTimeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AWaitTimeRes)
}

void AWaitTimeRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AWaitTimeRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AWaitTimeRes::~AWaitTimeRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AWaitTimeRes)
  SharedDtor();
}

void AWaitTimeRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AWaitTimeRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AWaitTimeRes& AWaitTimeRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AWaitTimeRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AWaitTimeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AWaitTimeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AWaitTimeRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.AWaitTimeRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AWaitTimeRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AWaitTimeRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.AWaitTimeRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AWaitTimeRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AWaitTimeRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AWaitTimeRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AWaitTimeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AWaitTimeRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AWaitTimeRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* AWaitTimeRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AWaitTimeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AWaitTimeRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AWaitTimeRes)
  return target;
}

size_t AWaitTimeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AWaitTimeRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AWaitTimeRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AWaitTimeRes)
  GOOGLE_DCHECK_NE(&from, this);
  const AWaitTimeRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AWaitTimeRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AWaitTimeRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AWaitTimeRes)
    MergeFrom(*source);
  }
}

void AWaitTimeRes::MergeFrom(const AWaitTimeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AWaitTimeRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AWaitTimeRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AWaitTimeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AWaitTimeRes::CopyFrom(const AWaitTimeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AWaitTimeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AWaitTimeRes::IsInitialized() const {
  return true;
}

void AWaitTimeRes::Swap(AWaitTimeRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AWaitTimeRes::InternalSwap(AWaitTimeRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AWaitTimeRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AWaitProgressReq::InitAsDefaultInstance() {
}
class AWaitProgressReq::HasBitSetters {
 public:
};

void AWaitProgressReq::clear_set_do_list() {
  set_do_list_.Clear();
}
void AWaitProgressReq::clear_set_end_do_list() {
  set_end_do_list_.Clear();
}
void AWaitProgressReq::clear_set_ao_list() {
  set_ao_list_.Clear();
}
void AWaitProgressReq::clear_set_end_ao_list() {
  set_end_ao_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AWaitProgressReq::kProgressFieldNumber;
const int AWaitProgressReq::kSetDoListFieldNumber;
const int AWaitProgressReq::kSetEndDoListFieldNumber;
const int AWaitProgressReq::kSetAoListFieldNumber;
const int AWaitProgressReq::kSetEndAoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AWaitProgressReq::AWaitProgressReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AWaitProgressReq)
}
AWaitProgressReq::AWaitProgressReq(const AWaitProgressReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      set_do_list_(from.set_do_list_),
      set_end_do_list_(from.set_end_do_list_),
      set_ao_list_(from.set_ao_list_),
      set_end_ao_list_(from.set_end_ao_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AWaitProgressReq)
}

void AWaitProgressReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AWaitProgressReq_control_5fmsgs_2eproto.base);
  progress_ = 0;
}

AWaitProgressReq::~AWaitProgressReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AWaitProgressReq)
  SharedDtor();
}

void AWaitProgressReq::SharedDtor() {
}

void AWaitProgressReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AWaitProgressReq& AWaitProgressReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AWaitProgressReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AWaitProgressReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AWaitProgressReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_do_list_.Clear();
  set_end_do_list_.Clear();
  set_ao_list_.Clear();
  set_end_ao_list_.Clear();
  progress_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AWaitProgressReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AWaitProgressReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AWaitProgressReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 progress = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AWaitProgressReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AWaitProgressReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AWaitProgressReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AWaitProgressReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress = 1;
  if (this->progress() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->progress(), output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->set_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->set_end_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->set_ao_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->set_end_ao_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AWaitProgressReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AWaitProgressReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AWaitProgressReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress = 1;
  if (this->progress() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->progress(), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->set_do_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->set_end_do_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->set_ao_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->set_end_ao_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AWaitProgressReq)
  return target;
}

size_t AWaitProgressReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AWaitProgressReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->set_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->set_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_ao_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_ao_list(static_cast<int>(i)));
    }
  }

  // int32 progress = 1;
  if (this->progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->progress());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AWaitProgressReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AWaitProgressReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AWaitProgressReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AWaitProgressReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AWaitProgressReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AWaitProgressReq)
    MergeFrom(*source);
  }
}

void AWaitProgressReq::MergeFrom(const AWaitProgressReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AWaitProgressReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_do_list_.MergeFrom(from.set_do_list_);
  set_end_do_list_.MergeFrom(from.set_end_do_list_);
  set_ao_list_.MergeFrom(from.set_ao_list_);
  set_end_ao_list_.MergeFrom(from.set_end_ao_list_);
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
}

void AWaitProgressReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AWaitProgressReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AWaitProgressReq::CopyFrom(const AWaitProgressReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AWaitProgressReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AWaitProgressReq::IsInitialized() const {
  return true;
}

void AWaitProgressReq::Swap(AWaitProgressReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AWaitProgressReq::InternalSwap(AWaitProgressReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&set_do_list_)->InternalSwap(CastToBase(&other->set_do_list_));
  CastToBase(&set_end_do_list_)->InternalSwap(CastToBase(&other->set_end_do_list_));
  CastToBase(&set_ao_list_)->InternalSwap(CastToBase(&other->set_ao_list_));
  CastToBase(&set_end_ao_list_)->InternalSwap(CastToBase(&other->set_end_ao_list_));
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AWaitProgressReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AWaitProgressRes::InitAsDefaultInstance() {
}
class AWaitProgressRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AWaitProgressRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AWaitProgressRes::AWaitProgressRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AWaitProgressRes)
}
AWaitProgressRes::AWaitProgressRes(const AWaitProgressRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AWaitProgressRes)
}

void AWaitProgressRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AWaitProgressRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AWaitProgressRes::~AWaitProgressRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AWaitProgressRes)
  SharedDtor();
}

void AWaitProgressRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AWaitProgressRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AWaitProgressRes& AWaitProgressRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AWaitProgressRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AWaitProgressRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AWaitProgressRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AWaitProgressRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.AWaitProgressRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AWaitProgressRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AWaitProgressRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.AWaitProgressRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AWaitProgressRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AWaitProgressRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AWaitProgressRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AWaitProgressRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AWaitProgressRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AWaitProgressRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* AWaitProgressRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AWaitProgressRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AWaitProgressRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AWaitProgressRes)
  return target;
}

size_t AWaitProgressRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AWaitProgressRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AWaitProgressRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AWaitProgressRes)
  GOOGLE_DCHECK_NE(&from, this);
  const AWaitProgressRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AWaitProgressRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AWaitProgressRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AWaitProgressRes)
    MergeFrom(*source);
  }
}

void AWaitProgressRes::MergeFrom(const AWaitProgressRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AWaitProgressRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AWaitProgressRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AWaitProgressRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AWaitProgressRes::CopyFrom(const AWaitProgressRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AWaitProgressRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AWaitProgressRes::IsInitialized() const {
  return true;
}

void AWaitProgressRes::Swap(AWaitProgressRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AWaitProgressRes::InternalSwap(AWaitProgressRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AWaitProgressRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AWaitTrajReq::InitAsDefaultInstance() {
}
class AWaitTrajReq::HasBitSetters {
 public:
};

void AWaitTrajReq::clear_set_do_list() {
  set_do_list_.Clear();
}
void AWaitTrajReq::clear_set_end_do_list() {
  set_end_do_list_.Clear();
}
void AWaitTrajReq::clear_set_ao_list() {
  set_ao_list_.Clear();
}
void AWaitTrajReq::clear_set_end_ao_list() {
  set_end_ao_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AWaitTrajReq::kTrajConditionFieldNumber;
const int AWaitTrajReq::kSetDoListFieldNumber;
const int AWaitTrajReq::kSetEndDoListFieldNumber;
const int AWaitTrajReq::kSetAoListFieldNumber;
const int AWaitTrajReq::kSetEndAoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AWaitTrajReq::AWaitTrajReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AWaitTrajReq)
}
AWaitTrajReq::AWaitTrajReq(const AWaitTrajReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      set_do_list_(from.set_do_list_),
      set_end_do_list_(from.set_end_do_list_),
      set_ao_list_(from.set_ao_list_),
      set_end_ao_list_(from.set_end_ao_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  traj_condition_ = from.traj_condition_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AWaitTrajReq)
}

void AWaitTrajReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AWaitTrajReq_control_5fmsgs_2eproto.base);
  traj_condition_ = 0;
}

AWaitTrajReq::~AWaitTrajReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AWaitTrajReq)
  SharedDtor();
}

void AWaitTrajReq::SharedDtor() {
}

void AWaitTrajReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AWaitTrajReq& AWaitTrajReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AWaitTrajReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AWaitTrajReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AWaitTrajReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_do_list_.Clear();
  set_end_do_list_.Clear();
  set_ao_list_.Clear();
  set_end_ao_list_.Clear();
  traj_condition_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AWaitTrajReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IndyFramework.Protobuf.Shared.TrajCondition traj_condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_traj_condition(static_cast<::IndyFramework::Protobuf::Shared::TrajCondition>(val));
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AWaitTrajReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AWaitTrajReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IndyFramework.Protobuf.Shared.TrajCondition traj_condition = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_traj_condition(static_cast< ::IndyFramework::Protobuf::Shared::TrajCondition >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AWaitTrajReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AWaitTrajReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AWaitTrajReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AWaitTrajReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.TrajCondition traj_condition = 1;
  if (this->traj_condition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->traj_condition(), output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->set_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->set_end_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->set_ao_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->set_end_ao_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AWaitTrajReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AWaitTrajReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AWaitTrajReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.TrajCondition traj_condition = 1;
  if (this->traj_condition() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->traj_condition(), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->set_do_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->set_end_do_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->set_ao_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->set_end_ao_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AWaitTrajReq)
  return target;
}

size_t AWaitTrajReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AWaitTrajReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->set_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->set_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_ao_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_ao_list(static_cast<int>(i)));
    }
  }

  // .IndyFramework.Protobuf.Shared.TrajCondition traj_condition = 1;
  if (this->traj_condition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->traj_condition());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AWaitTrajReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AWaitTrajReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AWaitTrajReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AWaitTrajReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AWaitTrajReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AWaitTrajReq)
    MergeFrom(*source);
  }
}

void AWaitTrajReq::MergeFrom(const AWaitTrajReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AWaitTrajReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_do_list_.MergeFrom(from.set_do_list_);
  set_end_do_list_.MergeFrom(from.set_end_do_list_);
  set_ao_list_.MergeFrom(from.set_ao_list_);
  set_end_ao_list_.MergeFrom(from.set_end_ao_list_);
  if (from.traj_condition() != 0) {
    set_traj_condition(from.traj_condition());
  }
}

void AWaitTrajReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AWaitTrajReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AWaitTrajReq::CopyFrom(const AWaitTrajReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AWaitTrajReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AWaitTrajReq::IsInitialized() const {
  return true;
}

void AWaitTrajReq::Swap(AWaitTrajReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AWaitTrajReq::InternalSwap(AWaitTrajReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&set_do_list_)->InternalSwap(CastToBase(&other->set_do_list_));
  CastToBase(&set_end_do_list_)->InternalSwap(CastToBase(&other->set_end_do_list_));
  CastToBase(&set_ao_list_)->InternalSwap(CastToBase(&other->set_ao_list_));
  CastToBase(&set_end_ao_list_)->InternalSwap(CastToBase(&other->set_end_ao_list_));
  swap(traj_condition_, other->traj_condition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AWaitTrajReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AWaitTrajRes::InitAsDefaultInstance() {
}
class AWaitTrajRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AWaitTrajRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AWaitTrajRes::AWaitTrajRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AWaitTrajRes)
}
AWaitTrajRes::AWaitTrajRes(const AWaitTrajRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AWaitTrajRes)
}

void AWaitTrajRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AWaitTrajRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AWaitTrajRes::~AWaitTrajRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AWaitTrajRes)
  SharedDtor();
}

void AWaitTrajRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AWaitTrajRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AWaitTrajRes& AWaitTrajRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AWaitTrajRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AWaitTrajRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AWaitTrajRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AWaitTrajRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.AWaitTrajRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AWaitTrajRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AWaitTrajRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.AWaitTrajRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AWaitTrajRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AWaitTrajRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AWaitTrajRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AWaitTrajRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AWaitTrajRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AWaitTrajRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* AWaitTrajRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AWaitTrajRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AWaitTrajRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AWaitTrajRes)
  return target;
}

size_t AWaitTrajRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AWaitTrajRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AWaitTrajRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AWaitTrajRes)
  GOOGLE_DCHECK_NE(&from, this);
  const AWaitTrajRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AWaitTrajRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AWaitTrajRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AWaitTrajRes)
    MergeFrom(*source);
  }
}

void AWaitTrajRes::MergeFrom(const AWaitTrajRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AWaitTrajRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AWaitTrajRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AWaitTrajRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AWaitTrajRes::CopyFrom(const AWaitTrajRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AWaitTrajRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AWaitTrajRes::IsInitialized() const {
  return true;
}

void AWaitTrajRes::Swap(AWaitTrajRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AWaitTrajRes::InternalSwap(AWaitTrajRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AWaitTrajRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMotionStopReq::InitAsDefaultInstance() {
}
class AMotionStopReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMotionStopReq::AMotionStopReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMotionStopReq)
}
AMotionStopReq::AMotionStopReq(const AMotionStopReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMotionStopReq)
}

void AMotionStopReq::SharedCtor() {
}

AMotionStopReq::~AMotionStopReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMotionStopReq)
  SharedDtor();
}

void AMotionStopReq::SharedDtor() {
}

void AMotionStopReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMotionStopReq& AMotionStopReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMotionStopReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMotionStopReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMotionStopReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMotionStopReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMotionStopReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMotionStopReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMotionStopReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMotionStopReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMotionStopReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMotionStopReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMotionStopReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMotionStopReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMotionStopReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMotionStopReq)
  return target;
}

size_t AMotionStopReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMotionStopReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMotionStopReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMotionStopReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AMotionStopReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMotionStopReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMotionStopReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMotionStopReq)
    MergeFrom(*source);
  }
}

void AMotionStopReq::MergeFrom(const AMotionStopReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMotionStopReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AMotionStopReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMotionStopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMotionStopReq::CopyFrom(const AMotionStopReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMotionStopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMotionStopReq::IsInitialized() const {
  return true;
}

void AMotionStopReq::Swap(AMotionStopReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMotionStopReq::InternalSwap(AMotionStopReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AMotionStopReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMotionStopRes::InitAsDefaultInstance() {
}
class AMotionStopRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AMotionStopRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AMotionStopRes::AMotionStopRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AMotionStopRes)
}
AMotionStopRes::AMotionStopRes(const AMotionStopRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AMotionStopRes)
}

void AMotionStopRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AMotionStopRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AMotionStopRes::~AMotionStopRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AMotionStopRes)
  SharedDtor();
}

void AMotionStopRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AMotionStopRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMotionStopRes& AMotionStopRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMotionStopRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AMotionStopRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AMotionStopRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AMotionStopRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.AMotionStopRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AMotionStopRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AMotionStopRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.AMotionStopRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AMotionStopRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AMotionStopRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AMotionStopRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AMotionStopRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMotionStopRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AMotionStopRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* AMotionStopRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AMotionStopRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AMotionStopRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AMotionStopRes)
  return target;
}

size_t AMotionStopRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AMotionStopRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMotionStopRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AMotionStopRes)
  GOOGLE_DCHECK_NE(&from, this);
  const AMotionStopRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMotionStopRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AMotionStopRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AMotionStopRes)
    MergeFrom(*source);
  }
}

void AMotionStopRes::MergeFrom(const AMotionStopRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AMotionStopRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AMotionStopRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AMotionStopRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMotionStopRes::CopyFrom(const AMotionStopRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AMotionStopRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMotionStopRes::IsInitialized() const {
  return true;
}

void AMotionStopRes::Swap(AMotionStopRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AMotionStopRes::InternalSwap(AMotionStopRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AMotionStopRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AWaitRadiusReq::InitAsDefaultInstance() {
}
class AWaitRadiusReq::HasBitSetters {
 public:
};

void AWaitRadiusReq::clear_set_do_list() {
  set_do_list_.Clear();
}
void AWaitRadiusReq::clear_set_end_do_list() {
  set_end_do_list_.Clear();
}
void AWaitRadiusReq::clear_set_ao_list() {
  set_ao_list_.Clear();
}
void AWaitRadiusReq::clear_set_end_ao_list() {
  set_end_ao_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AWaitRadiusReq::kRadiusFieldNumber;
const int AWaitRadiusReq::kSetDoListFieldNumber;
const int AWaitRadiusReq::kSetEndDoListFieldNumber;
const int AWaitRadiusReq::kSetAoListFieldNumber;
const int AWaitRadiusReq::kSetEndAoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AWaitRadiusReq::AWaitRadiusReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AWaitRadiusReq)
}
AWaitRadiusReq::AWaitRadiusReq(const AWaitRadiusReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      set_do_list_(from.set_do_list_),
      set_end_do_list_(from.set_end_do_list_),
      set_ao_list_(from.set_ao_list_),
      set_end_ao_list_(from.set_end_ao_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AWaitRadiusReq)
}

void AWaitRadiusReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AWaitRadiusReq_control_5fmsgs_2eproto.base);
  radius_ = 0;
}

AWaitRadiusReq::~AWaitRadiusReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  SharedDtor();
}

void AWaitRadiusReq::SharedDtor() {
}

void AWaitRadiusReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AWaitRadiusReq& AWaitRadiusReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AWaitRadiusReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AWaitRadiusReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_do_list_.Clear();
  set_end_do_list_.Clear();
  set_ao_list_.Clear();
  set_end_ao_list_.Clear();
  radius_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AWaitRadiusReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_set_end_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AWaitRadiusReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 radius = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_set_end_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AWaitRadiusReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 radius = 1;
  if (this->radius() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->radius(), output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->set_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->set_end_do_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->set_ao_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->set_end_ao_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AWaitRadiusReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AWaitRadiusReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 radius = 1;
  if (this->radius() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->radius(), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->set_do_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->set_end_do_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->set_ao_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->set_end_ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->set_end_ao_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  return target;
}

size_t AWaitRadiusReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_do_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->set_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal set_end_do_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_ao_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->set_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_ao_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal set_end_ao_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->set_end_ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->set_end_ao_list(static_cast<int>(i)));
    }
  }

  // int32 radius = 1;
  if (this->radius() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->radius());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AWaitRadiusReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AWaitRadiusReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AWaitRadiusReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AWaitRadiusReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AWaitRadiusReq)
    MergeFrom(*source);
  }
}

void AWaitRadiusReq::MergeFrom(const AWaitRadiusReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  set_do_list_.MergeFrom(from.set_do_list_);
  set_end_do_list_.MergeFrom(from.set_end_do_list_);
  set_ao_list_.MergeFrom(from.set_ao_list_);
  set_end_ao_list_.MergeFrom(from.set_end_ao_list_);
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
}

void AWaitRadiusReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AWaitRadiusReq::CopyFrom(const AWaitRadiusReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AWaitRadiusReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AWaitRadiusReq::IsInitialized() const {
  return true;
}

void AWaitRadiusReq::Swap(AWaitRadiusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AWaitRadiusReq::InternalSwap(AWaitRadiusReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&set_do_list_)->InternalSwap(CastToBase(&other->set_do_list_));
  CastToBase(&set_end_do_list_)->InternalSwap(CastToBase(&other->set_end_do_list_));
  CastToBase(&set_ao_list_)->InternalSwap(CastToBase(&other->set_ao_list_));
  CastToBase(&set_end_ao_list_)->InternalSwap(CastToBase(&other->set_end_ao_list_));
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AWaitRadiusReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AWaitRadiusRes::InitAsDefaultInstance() {
}
class AWaitRadiusRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AWaitRadiusRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AWaitRadiusRes::AWaitRadiusRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.AWaitRadiusRes)
}
AWaitRadiusRes::AWaitRadiusRes(const AWaitRadiusRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.AWaitRadiusRes)
}

void AWaitRadiusRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AWaitRadiusRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AWaitRadiusRes::~AWaitRadiusRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  SharedDtor();
}

void AWaitRadiusRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AWaitRadiusRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AWaitRadiusRes& AWaitRadiusRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AWaitRadiusRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AWaitRadiusRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AWaitRadiusRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.AWaitRadiusRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AWaitRadiusRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.AWaitRadiusRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AWaitRadiusRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AWaitRadiusRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.AWaitRadiusRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* AWaitRadiusRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.AWaitRadiusRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  return target;
}

size_t AWaitRadiusRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AWaitRadiusRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  GOOGLE_DCHECK_NE(&from, this);
  const AWaitRadiusRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AWaitRadiusRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.AWaitRadiusRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.AWaitRadiusRes)
    MergeFrom(*source);
  }
}

void AWaitRadiusRes::MergeFrom(const AWaitRadiusRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AWaitRadiusRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AWaitRadiusRes::CopyFrom(const AWaitRadiusRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.AWaitRadiusRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AWaitRadiusRes::IsInitialized() const {
  return true;
}

void AWaitRadiusRes::Swap(AWaitRadiusRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AWaitRadiusRes::InternalSwap(AWaitRadiusRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AWaitRadiusRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSJReq::InitAsDefaultInstance() {
}
class MoveSJReq::HasBitSetters {
 public:
};

void MoveSJReq::clear_points() {
  points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSJReq::kPointsFieldNumber;
const int MoveSJReq::kBlendingTypeFieldNumber;
const int MoveSJReq::kBaseTypeFieldNumber;
const int MoveSJReq::kBlendingRadiusFieldNumber;
const int MoveSJReq::kVelFieldNumber;
const int MoveSJReq::kAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSJReq::MoveSJReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.MoveSJReq)
}
MoveSJReq::MoveSJReq(const MoveSJReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blending_type_, &from.blending_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&vel_) -
    reinterpret_cast<char*>(&blending_type_)) + sizeof(vel_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.MoveSJReq)
}

void MoveSJReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveSJReq_control_5fmsgs_2eproto.base);
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(vel_));
}

MoveSJReq::~MoveSJReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.MoveSJReq)
  SharedDtor();
}

void MoveSJReq::SharedDtor() {
}

void MoveSJReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSJReq& MoveSJReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSJReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSJReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.MoveSJReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(vel_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSJReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.MoveSJPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_blending_type(static_cast<::IndyFramework::Protobuf::Shared::BlendingType>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::IndyFramework::Protobuf::Shared::JointBaseType>(val));
        } else goto handle_unusual;
        continue;
      // float blending_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float vel = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float acc = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSJReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.MoveSJReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.MoveSJPoint points = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blending_type(static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::IndyFramework::Protobuf::Shared::JointBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vel = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (173 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (181 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.MoveSJReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.MoveSJReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSJReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.MoveSJReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.MoveSJPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->points(static_cast<int>(i)),
      output);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->blending_type(), output);
  }

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->base_type(), output);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->blending_radius(), output);
  }

  // float vel = 21;
  if (!(this->vel() <= 0 && this->vel() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(21, this->vel(), output);
  }

  // float acc = 22;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(22, this->acc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.MoveSJReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSJReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.MoveSJReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.MoveSJPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), target);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->blending_type(), target);
  }

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->base_type(), target);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->blending_radius(), target);
  }

  // float vel = 21;
  if (!(this->vel() <= 0 && this->vel() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->vel(), target);
  }

  // float acc = 22;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->acc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.MoveSJReq)
  return target;
}

size_t MoveSJReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.MoveSJReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.MoveSJPoint points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->blending_type());
  }

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 4;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  // float acc = 22;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    total_size += 2 + 4;
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float vel = 21;
  if (!(this->vel() <= 0 && this->vel() >= 0)) {
    total_size += 2 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSJReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.MoveSJReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSJReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSJReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.MoveSJReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.MoveSJReq)
    MergeFrom(*source);
  }
}

void MoveSJReq::MergeFrom(const MoveSJReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.MoveSJReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.blending_type() != 0) {
    set_blending_type(from.blending_type());
  }
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
  if (!(from.acc() <= 0 && from.acc() >= 0)) {
    set_acc(from.acc());
  }
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
  if (!(from.vel() <= 0 && from.vel() >= 0)) {
    set_vel(from.vel());
  }
}

void MoveSJReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.MoveSJReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSJReq::CopyFrom(const MoveSJReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.MoveSJReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSJReq::IsInitialized() const {
  return true;
}

void MoveSJReq::Swap(MoveSJReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSJReq::InternalSwap(MoveSJReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  swap(blending_type_, other->blending_type_);
  swap(base_type_, other->base_type_);
  swap(acc_, other->acc_);
  swap(blending_radius_, other->blending_radius_);
  swap(vel_, other->vel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSJReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSJRes::InitAsDefaultInstance() {
}
class MoveSJRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSJRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSJRes::MoveSJRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.MoveSJRes)
}
MoveSJRes::MoveSJRes(const MoveSJRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.MoveSJRes)
}

void MoveSJRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveSJRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoveSJRes::~MoveSJRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.MoveSJRes)
  SharedDtor();
}

void MoveSJRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveSJRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSJRes& MoveSJRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSJRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSJRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.MoveSJRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSJRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.MoveSJRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSJRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.MoveSJRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.MoveSJRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.MoveSJRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.MoveSJRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSJRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.MoveSJRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.MoveSJRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.MoveSJRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSJRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.MoveSJRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.MoveSJRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.MoveSJRes)
  return target;
}

size_t MoveSJRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.MoveSJRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSJRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.MoveSJRes)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSJRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSJRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.MoveSJRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.MoveSJRes)
    MergeFrom(*source);
  }
}

void MoveSJRes::MergeFrom(const MoveSJRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.MoveSJRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void MoveSJRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.MoveSJRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSJRes::CopyFrom(const MoveSJRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.MoveSJRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSJRes::IsInitialized() const {
  return true;
}

void MoveSJRes::Swap(MoveSJRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSJRes::InternalSwap(MoveSJRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSJRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSLReq::InitAsDefaultInstance() {
}
class MoveSLReq::HasBitSetters {
 public:
};

void MoveSLReq::clear_points() {
  points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSLReq::kPointsFieldNumber;
const int MoveSLReq::kBlendingTypeFieldNumber;
const int MoveSLReq::kBaseTypeFieldNumber;
const int MoveSLReq::kBlendingRadiusFieldNumber;
const int MoveSLReq::kDispVelFieldNumber;
const int MoveSLReq::kDispAccFieldNumber;
const int MoveSLReq::kRotVelFieldNumber;
const int MoveSLReq::kRotAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSLReq::MoveSLReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.MoveSLReq)
}
MoveSLReq::MoveSLReq(const MoveSLReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blending_type_, &from.blending_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&rot_vel_) -
    reinterpret_cast<char*>(&blending_type_)) + sizeof(rot_vel_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.MoveSLReq)
}

void MoveSLReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveSLReq_control_5fmsgs_2eproto.base);
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rot_vel_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(rot_vel_));
}

MoveSLReq::~MoveSLReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.MoveSLReq)
  SharedDtor();
}

void MoveSLReq::SharedDtor() {
}

void MoveSLReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSLReq& MoveSLReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSLReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSLReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.MoveSLReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rot_vel_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(rot_vel_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSLReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.MoveSLPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_blending_type(static_cast<::IndyFramework::Protobuf::Shared::BlendingType>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::IndyFramework::Protobuf::Shared::TaskBaseType>(val));
        } else goto handle_unusual;
        continue;
      // float blending_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float disp_vel = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          disp_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float disp_acc = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          disp_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rot_vel = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          rot_vel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rot_acc = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          rot_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSLReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.MoveSLReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.MoveSLPoint points = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blending_type(static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float disp_vel = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (173 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &disp_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float disp_acc = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (181 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &disp_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_vel = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (189 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rot_acc = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (197 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.MoveSLReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.MoveSLReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSLReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.MoveSLReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.MoveSLPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->points(static_cast<int>(i)),
      output);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->blending_type(), output);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->base_type(), output);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->blending_radius(), output);
  }

  // float disp_vel = 21;
  if (!(this->disp_vel() <= 0 && this->disp_vel() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(21, this->disp_vel(), output);
  }

  // float disp_acc = 22;
  if (!(this->disp_acc() <= 0 && this->disp_acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(22, this->disp_acc(), output);
  }

  // float rot_vel = 23;
  if (!(this->rot_vel() <= 0 && this->rot_vel() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(23, this->rot_vel(), output);
  }

  // float rot_acc = 24;
  if (!(this->rot_acc() <= 0 && this->rot_acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(24, this->rot_acc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.MoveSLReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSLReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.MoveSLReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.MoveSLPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), target);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->blending_type(), target);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->base_type(), target);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->blending_radius(), target);
  }

  // float disp_vel = 21;
  if (!(this->disp_vel() <= 0 && this->disp_vel() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->disp_vel(), target);
  }

  // float disp_acc = 22;
  if (!(this->disp_acc() <= 0 && this->disp_acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->disp_acc(), target);
  }

  // float rot_vel = 23;
  if (!(this->rot_vel() <= 0 && this->rot_vel() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->rot_vel(), target);
  }

  // float rot_acc = 24;
  if (!(this->rot_acc() <= 0 && this->rot_acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->rot_acc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.MoveSLReq)
  return target;
}

size_t MoveSLReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.MoveSLReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.MoveSLPoint points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->blending_type());
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  // float rot_acc = 24;
  if (!(this->rot_acc() <= 0 && this->rot_acc() >= 0)) {
    total_size += 2 + 4;
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float disp_vel = 21;
  if (!(this->disp_vel() <= 0 && this->disp_vel() >= 0)) {
    total_size += 2 + 4;
  }

  // float disp_acc = 22;
  if (!(this->disp_acc() <= 0 && this->disp_acc() >= 0)) {
    total_size += 2 + 4;
  }

  // float rot_vel = 23;
  if (!(this->rot_vel() <= 0 && this->rot_vel() >= 0)) {
    total_size += 2 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSLReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.MoveSLReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSLReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSLReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.MoveSLReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.MoveSLReq)
    MergeFrom(*source);
  }
}

void MoveSLReq::MergeFrom(const MoveSLReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.MoveSLReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.blending_type() != 0) {
    set_blending_type(from.blending_type());
  }
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
  if (!(from.rot_acc() <= 0 && from.rot_acc() >= 0)) {
    set_rot_acc(from.rot_acc());
  }
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
  if (!(from.disp_vel() <= 0 && from.disp_vel() >= 0)) {
    set_disp_vel(from.disp_vel());
  }
  if (!(from.disp_acc() <= 0 && from.disp_acc() >= 0)) {
    set_disp_acc(from.disp_acc());
  }
  if (!(from.rot_vel() <= 0 && from.rot_vel() >= 0)) {
    set_rot_vel(from.rot_vel());
  }
}

void MoveSLReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.MoveSLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSLReq::CopyFrom(const MoveSLReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.MoveSLReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSLReq::IsInitialized() const {
  return true;
}

void MoveSLReq::Swap(MoveSLReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSLReq::InternalSwap(MoveSLReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  swap(blending_type_, other->blending_type_);
  swap(base_type_, other->base_type_);
  swap(rot_acc_, other->rot_acc_);
  swap(blending_radius_, other->blending_radius_);
  swap(disp_vel_, other->disp_vel_);
  swap(disp_acc_, other->disp_acc_);
  swap(rot_vel_, other->rot_vel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSLReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSLRes::InitAsDefaultInstance() {
}
class MoveSLRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSLRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSLRes::MoveSLRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.MoveSLRes)
}
MoveSLRes::MoveSLRes(const MoveSLRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.MoveSLRes)
}

void MoveSLRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveSLRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoveSLRes::~MoveSLRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.MoveSLRes)
  SharedDtor();
}

void MoveSLRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveSLRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSLRes& MoveSLRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSLRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSLRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.MoveSLRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSLRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.MoveSLRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSLRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.MoveSLRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.MoveSLRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.MoveSLRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.MoveSLRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSLRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.MoveSLRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.MoveSLRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.MoveSLRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSLRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.MoveSLRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.MoveSLRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.MoveSLRes)
  return target;
}

size_t MoveSLRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.MoveSLRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSLRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.MoveSLRes)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSLRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSLRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.MoveSLRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.MoveSLRes)
    MergeFrom(*source);
  }
}

void MoveSLRes::MergeFrom(const MoveSLRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.MoveSLRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void MoveSLRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.MoveSLRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSLRes::CopyFrom(const MoveSLRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.MoveSLRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSLRes::IsInitialized() const {
  return true;
}

void MoveSLRes::Swap(MoveSLRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSLRes::InternalSwap(MoveSLRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSLRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSJTReq::InitAsDefaultInstance() {
}
class MoveSJTReq::HasBitSetters {
 public:
};

void MoveSJTReq::clear_points() {
  points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSJTReq::kPointsFieldNumber;
const int MoveSJTReq::kBaseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSJTReq::MoveSJTReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.MoveSJTReq)
}
MoveSJTReq::MoveSJTReq(const MoveSJTReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_type_ = from.base_type_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.MoveSJTReq)
}

void MoveSJTReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveSJTReq_control_5fmsgs_2eproto.base);
  base_type_ = 0;
}

MoveSJTReq::~MoveSJTReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.MoveSJTReq)
  SharedDtor();
}

void MoveSJTReq::SharedDtor() {
}

void MoveSJTReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSJTReq& MoveSJTReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSJTReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSJTReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.MoveSJTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  base_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSJTReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.MoveSJTPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::IndyFramework::Protobuf::Shared::JointBaseType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSJTReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.MoveSJTReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.MoveSJTPoint points = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::IndyFramework::Protobuf::Shared::JointBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.MoveSJTReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.MoveSJTReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSJTReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.MoveSJTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.MoveSJTPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->points(static_cast<int>(i)),
      output);
  }

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 2;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->base_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.MoveSJTReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSJTReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.MoveSJTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.MoveSJTPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), target);
  }

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 2;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->base_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.MoveSJTReq)
  return target;
}

size_t MoveSJTReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.MoveSJTReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.MoveSJTPoint points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // .IndyFramework.Protobuf.Shared.JointBaseType base_type = 2;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSJTReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.MoveSJTReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSJTReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSJTReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.MoveSJTReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.MoveSJTReq)
    MergeFrom(*source);
  }
}

void MoveSJTReq::MergeFrom(const MoveSJTReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.MoveSJTReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
}

void MoveSJTReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.MoveSJTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSJTReq::CopyFrom(const MoveSJTReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.MoveSJTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSJTReq::IsInitialized() const {
  return true;
}

void MoveSJTReq::Swap(MoveSJTReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSJTReq::InternalSwap(MoveSJTReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  swap(base_type_, other->base_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSJTReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSJTRes::InitAsDefaultInstance() {
}
class MoveSJTRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSJTRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSJTRes::MoveSJTRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.MoveSJTRes)
}
MoveSJTRes::MoveSJTRes(const MoveSJTRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.MoveSJTRes)
}

void MoveSJTRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveSJTRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoveSJTRes::~MoveSJTRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.MoveSJTRes)
  SharedDtor();
}

void MoveSJTRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveSJTRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSJTRes& MoveSJTRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSJTRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSJTRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.MoveSJTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSJTRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.MoveSJTRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSJTRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.MoveSJTRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.MoveSJTRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.MoveSJTRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.MoveSJTRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSJTRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.MoveSJTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.MoveSJTRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.MoveSJTRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSJTRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.MoveSJTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.MoveSJTRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.MoveSJTRes)
  return target;
}

size_t MoveSJTRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.MoveSJTRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSJTRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.MoveSJTRes)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSJTRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSJTRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.MoveSJTRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.MoveSJTRes)
    MergeFrom(*source);
  }
}

void MoveSJTRes::MergeFrom(const MoveSJTRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.MoveSJTRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void MoveSJTRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.MoveSJTRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSJTRes::CopyFrom(const MoveSJTRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.MoveSJTRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSJTRes::IsInitialized() const {
  return true;
}

void MoveSJTRes::Swap(MoveSJTRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSJTRes::InternalSwap(MoveSJTRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSJTRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSLTReq::InitAsDefaultInstance() {
}
class MoveSLTReq::HasBitSetters {
 public:
};

void MoveSLTReq::clear_points() {
  points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSLTReq::kPointsFieldNumber;
const int MoveSLTReq::kBlendingTypeFieldNumber;
const int MoveSLTReq::kBaseTypeFieldNumber;
const int MoveSLTReq::kBlendingRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSLTReq::MoveSLTReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.MoveSLTReq)
}
MoveSLTReq::MoveSLTReq(const MoveSLTReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blending_type_, &from.blending_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&blending_radius_) -
    reinterpret_cast<char*>(&blending_type_)) + sizeof(blending_radius_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.MoveSLTReq)
}

void MoveSLTReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveSLTReq_control_5fmsgs_2eproto.base);
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blending_radius_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(blending_radius_));
}

MoveSLTReq::~MoveSLTReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.MoveSLTReq)
  SharedDtor();
}

void MoveSLTReq::SharedDtor() {
}

void MoveSLTReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSLTReq& MoveSLTReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSLTReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSLTReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.MoveSLTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  ::memset(&blending_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blending_radius_) -
      reinterpret_cast<char*>(&blending_type_)) + sizeof(blending_radius_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSLTReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.MoveSLTPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_blending_type(static_cast<::IndyFramework::Protobuf::Shared::BlendingType>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::IndyFramework::Protobuf::Shared::TaskBaseType>(val));
        } else goto handle_unusual;
        continue;
      // float blending_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSLTReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.MoveSLTReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.MoveSLTPoint points = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_blending_type(static_cast< ::IndyFramework::Protobuf::Shared::BlendingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.MoveSLTReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.MoveSLTReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSLTReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.MoveSLTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.MoveSLTPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->points(static_cast<int>(i)),
      output);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->blending_type(), output);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->base_type(), output);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->blending_radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.MoveSLTReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSLTReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.MoveSLTReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.MoveSLTPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), target);
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->blending_type(), target);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->base_type(), target);
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->blending_radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.MoveSLTReq)
  return target;
}

size_t MoveSLTReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.MoveSLTReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.MoveSLTPoint points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // .IndyFramework.Protobuf.Shared.BlendingType blending_type = 3;
  if (this->blending_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->blending_type());
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 4;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  // float blending_radius = 5;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSLTReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.MoveSLTReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSLTReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSLTReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.MoveSLTReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.MoveSLTReq)
    MergeFrom(*source);
  }
}

void MoveSLTReq::MergeFrom(const MoveSLTReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.MoveSLTReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.blending_type() != 0) {
    set_blending_type(from.blending_type());
  }
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
}

void MoveSLTReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.MoveSLTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSLTReq::CopyFrom(const MoveSLTReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.MoveSLTReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSLTReq::IsInitialized() const {
  return true;
}

void MoveSLTReq::Swap(MoveSLTReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSLTReq::InternalSwap(MoveSLTReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  swap(blending_type_, other->blending_type_);
  swap(base_type_, other->base_type_);
  swap(blending_radius_, other->blending_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSLTReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSLTRes::InitAsDefaultInstance() {
}
class MoveSLTRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSLTRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSLTRes::MoveSLTRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.MoveSLTRes)
}
MoveSLTRes::MoveSLTRes(const MoveSLTRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.MoveSLTRes)
}

void MoveSLTRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveSLTRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoveSLTRes::~MoveSLTRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.MoveSLTRes)
  SharedDtor();
}

void MoveSLTRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveSLTRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSLTRes& MoveSLTRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSLTRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSLTRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.MoveSLTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSLTRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.MoveSLTRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSLTRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.MoveSLTRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.MoveSLTRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.MoveSLTRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.MoveSLTRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSLTRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.MoveSLTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.MoveSLTRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.MoveSLTRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSLTRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.MoveSLTRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.MoveSLTRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.MoveSLTRes)
  return target;
}

size_t MoveSLTRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.MoveSLTRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSLTRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.MoveSLTRes)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSLTRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSLTRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.MoveSLTRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.MoveSLTRes)
    MergeFrom(*source);
  }
}

void MoveSLTRes::MergeFrom(const MoveSLTRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.MoveSLTRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void MoveSLTRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.MoveSLTRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSLTRes::CopyFrom(const MoveSLTRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.MoveSLTRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSLTRes::IsInitialized() const {
  return true;
}

void MoveSLTRes::Swap(MoveSLTRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSLTRes::InternalSwap(MoveSLTRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSLTRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSpiralReq::InitAsDefaultInstance() {
}
class MoveSpiralReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSpiralReq::MoveSpiralReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.MoveSpiralReq)
}
MoveSpiralReq::MoveSpiralReq(const MoveSpiralReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.MoveSpiralReq)
}

void MoveSpiralReq::SharedCtor() {
}

MoveSpiralReq::~MoveSpiralReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.MoveSpiralReq)
  SharedDtor();
}

void MoveSpiralReq::SharedDtor() {
}

void MoveSpiralReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSpiralReq& MoveSpiralReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSpiralReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSpiralReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.MoveSpiralReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSpiralReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSpiralReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.MoveSpiralReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.MoveSpiralReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.MoveSpiralReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSpiralReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.MoveSpiralReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.MoveSpiralReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSpiralReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.MoveSpiralReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.MoveSpiralReq)
  return target;
}

size_t MoveSpiralReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.MoveSpiralReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSpiralReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.MoveSpiralReq)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSpiralReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSpiralReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.MoveSpiralReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.MoveSpiralReq)
    MergeFrom(*source);
  }
}

void MoveSpiralReq::MergeFrom(const MoveSpiralReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.MoveSpiralReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MoveSpiralReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.MoveSpiralReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSpiralReq::CopyFrom(const MoveSpiralReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.MoveSpiralReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSpiralReq::IsInitialized() const {
  return true;
}

void MoveSpiralReq::Swap(MoveSpiralReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSpiralReq::InternalSwap(MoveSpiralReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSpiralReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSpiralRes::InitAsDefaultInstance() {
}
class MoveSpiralRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSpiralRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSpiralRes::MoveSpiralRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.MoveSpiralRes)
}
MoveSpiralRes::MoveSpiralRes(const MoveSpiralRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.MoveSpiralRes)
}

void MoveSpiralRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveSpiralRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MoveSpiralRes::~MoveSpiralRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.MoveSpiralRes)
  SharedDtor();
}

void MoveSpiralRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MoveSpiralRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSpiralRes& MoveSpiralRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSpiralRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSpiralRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.MoveSpiralRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSpiralRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.MoveSpiralRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSpiralRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.MoveSpiralRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.MoveSpiralRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.MoveSpiralRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.MoveSpiralRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSpiralRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.MoveSpiralRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.MoveSpiralRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.MoveSpiralRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSpiralRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.MoveSpiralRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.MoveSpiralRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.MoveSpiralRes)
  return target;
}

size_t MoveSpiralRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.MoveSpiralRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSpiralRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.MoveSpiralRes)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSpiralRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSpiralRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.MoveSpiralRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.MoveSpiralRes)
    MergeFrom(*source);
  }
}

void MoveSpiralRes::MergeFrom(const MoveSpiralRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.MoveSpiralRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void MoveSpiralRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.MoveSpiralRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSpiralRes::CopyFrom(const MoveSpiralRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.MoveSpiralRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSpiralRes::IsInitialized() const {
  return true;
}

void MoveSpiralRes::Swap(MoveSpiralRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSpiralRes::InternalSwap(MoveSpiralRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSpiralRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRefFrameReq::InitAsDefaultInstance() {
}
class SetRefFrameReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRefFrameReq::kRefFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRefFrameReq::SetRefFrameReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetRefFrameReq)
}
SetRefFrameReq::SetRefFrameReq(const SetRefFrameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ref_frame_(from.ref_frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetRefFrameReq)
}

void SetRefFrameReq::SharedCtor() {
}

SetRefFrameReq::~SetRefFrameReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetRefFrameReq)
  SharedDtor();
}

void SetRefFrameReq::SharedDtor() {
}

void SetRefFrameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRefFrameReq& SetRefFrameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRefFrameReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetRefFrameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetRefFrameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ref_frame_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetRefFrameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float ref_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_ref_frame(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_ref_frame(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetRefFrameReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetRefFrameReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float ref_frame = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ref_frame())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_ref_frame())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetRefFrameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetRefFrameReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetRefFrameReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetRefFrameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float ref_frame = 1;
  if (this->ref_frame_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ref_frame_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->ref_frame().data(), this->ref_frame_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetRefFrameReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRefFrameReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetRefFrameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float ref_frame = 1;
  if (this->ref_frame_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ref_frame_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ref_frame_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetRefFrameReq)
  return target;
}

size_t SetRefFrameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetRefFrameReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float ref_frame = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ref_frame_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ref_frame_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRefFrameReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetRefFrameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRefFrameReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRefFrameReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetRefFrameReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetRefFrameReq)
    MergeFrom(*source);
  }
}

void SetRefFrameReq::MergeFrom(const SetRefFrameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetRefFrameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ref_frame_.MergeFrom(from.ref_frame_);
}

void SetRefFrameReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetRefFrameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRefFrameReq::CopyFrom(const SetRefFrameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetRefFrameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRefFrameReq::IsInitialized() const {
  return true;
}

void SetRefFrameReq::Swap(SetRefFrameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRefFrameReq::InternalSwap(SetRefFrameReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ref_frame_.InternalSwap(&other->ref_frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRefFrameReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRefFrameRes::InitAsDefaultInstance() {
}
class SetRefFrameRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRefFrameRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRefFrameRes::SetRefFrameRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetRefFrameRes)
}
SetRefFrameRes::SetRefFrameRes(const SetRefFrameRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetRefFrameRes)
}

void SetRefFrameRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRefFrameRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetRefFrameRes::~SetRefFrameRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetRefFrameRes)
  SharedDtor();
}

void SetRefFrameRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetRefFrameRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRefFrameRes& SetRefFrameRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRefFrameRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetRefFrameRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetRefFrameRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetRefFrameRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetRefFrameRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetRefFrameRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetRefFrameRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetRefFrameRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetRefFrameRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetRefFrameRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetRefFrameRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetRefFrameRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetRefFrameRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetRefFrameRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRefFrameRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetRefFrameRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetRefFrameRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetRefFrameRes)
  return target;
}

size_t SetRefFrameRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetRefFrameRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRefFrameRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetRefFrameRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRefFrameRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRefFrameRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetRefFrameRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetRefFrameRes)
    MergeFrom(*source);
  }
}

void SetRefFrameRes::MergeFrom(const SetRefFrameRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetRefFrameRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetRefFrameRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetRefFrameRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRefFrameRes::CopyFrom(const SetRefFrameRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetRefFrameRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRefFrameRes::IsInitialized() const {
  return true;
}

void SetRefFrameRes::Swap(SetRefFrameRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRefFrameRes::InternalSwap(SetRefFrameRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRefFrameRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRefFramePlanarReq::InitAsDefaultInstance() {
}
class SetRefFramePlanarReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRefFramePlanarReq::kTpos0FieldNumber;
const int SetRefFramePlanarReq::kTpos1FieldNumber;
const int SetRefFramePlanarReq::kTpos2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRefFramePlanarReq::SetRefFramePlanarReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
}
SetRefFramePlanarReq::SetRefFramePlanarReq(const SetRefFramePlanarReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos0_(from.tpos0_),
      tpos1_(from.tpos1_),
      tpos2_(from.tpos2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
}

void SetRefFramePlanarReq::SharedCtor() {
}

SetRefFramePlanarReq::~SetRefFramePlanarReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  SharedDtor();
}

void SetRefFramePlanarReq::SharedDtor() {
}

void SetRefFramePlanarReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRefFramePlanarReq& SetRefFramePlanarReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRefFramePlanarReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetRefFramePlanarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos0_.Clear();
  tpos1_.Clear();
  tpos2_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetRefFramePlanarReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos0(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos0(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tpos1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_tpos1(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tpos2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_tpos2(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetRefFramePlanarReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos0 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos0())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos0())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tpos1 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos1())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tpos1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tpos2 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_tpos2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetRefFramePlanarReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos0 = 1;
  if (this->tpos0_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos0_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos0().data(), this->tpos0_size(), output);
  }

  // repeated float tpos1 = 2;
  if (this->tpos1_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos1_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos1().data(), this->tpos1_size(), output);
  }

  // repeated float tpos2 = 3;
  if (this->tpos2_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos2_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos2().data(), this->tpos2_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRefFramePlanarReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos0 = 1;
  if (this->tpos0_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos0_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos0_, target);
  }

  // repeated float tpos1 = 2;
  if (this->tpos1_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos1_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos1_, target);
  }

  // repeated float tpos2 = 3;
  if (this->tpos2_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos2_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos2_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  return target;
}

size_t SetRefFramePlanarReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos0 = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos0_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos0_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tpos1 = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos1_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tpos2 = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos2_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRefFramePlanarReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRefFramePlanarReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRefFramePlanarReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
    MergeFrom(*source);
  }
}

void SetRefFramePlanarReq::MergeFrom(const SetRefFramePlanarReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos0_.MergeFrom(from.tpos0_);
  tpos1_.MergeFrom(from.tpos1_);
  tpos2_.MergeFrom(from.tpos2_);
}

void SetRefFramePlanarReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRefFramePlanarReq::CopyFrom(const SetRefFramePlanarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetRefFramePlanarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRefFramePlanarReq::IsInitialized() const {
  return true;
}

void SetRefFramePlanarReq::Swap(SetRefFramePlanarReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRefFramePlanarReq::InternalSwap(SetRefFramePlanarReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos0_.InternalSwap(&other->tpos0_);
  tpos1_.InternalSwap(&other->tpos1_);
  tpos2_.InternalSwap(&other->tpos2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRefFramePlanarReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRefFramePlanarRes::InitAsDefaultInstance() {
}
class SetRefFramePlanarRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRefFramePlanarRes::kRefFrameFieldNumber;
const int SetRefFramePlanarRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRefFramePlanarRes::SetRefFramePlanarRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
}
SetRefFramePlanarRes::SetRefFramePlanarRes(const SetRefFramePlanarRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ref_frame_(from.ref_frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
}

void SetRefFramePlanarRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRefFramePlanarRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetRefFramePlanarRes::~SetRefFramePlanarRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  SharedDtor();
}

void SetRefFramePlanarRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetRefFramePlanarRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRefFramePlanarRes& SetRefFramePlanarRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRefFramePlanarRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetRefFramePlanarRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ref_frame_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetRefFramePlanarRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float ref_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_ref_frame(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_ref_frame(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetRefFramePlanarRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetRefFramePlanarRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float ref_frame = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ref_frame())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_ref_frame())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetRefFramePlanarRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetRefFramePlanarRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float ref_frame = 1;
  if (this->ref_frame_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ref_frame_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->ref_frame().data(), this->ref_frame_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetRefFramePlanarRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRefFramePlanarRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float ref_frame = 1;
  if (this->ref_frame_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ref_frame_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ref_frame_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetRefFramePlanarRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  return target;
}

size_t SetRefFramePlanarRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float ref_frame = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ref_frame_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ref_frame_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRefFramePlanarRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRefFramePlanarRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRefFramePlanarRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
    MergeFrom(*source);
  }
}

void SetRefFramePlanarRes::MergeFrom(const SetRefFramePlanarRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ref_frame_.MergeFrom(from.ref_frame_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetRefFramePlanarRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRefFramePlanarRes::CopyFrom(const SetRefFramePlanarRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetRefFramePlanarRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRefFramePlanarRes::IsInitialized() const {
  return true;
}

void SetRefFramePlanarRes::Swap(SetRefFramePlanarRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRefFramePlanarRes::InternalSwap(SetRefFramePlanarRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ref_frame_.InternalSwap(&other->ref_frame_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRefFramePlanarRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetToolFrameReq::InitAsDefaultInstance() {
}
class SetToolFrameReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetToolFrameReq::kToolFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetToolFrameReq::SetToolFrameReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetToolFrameReq)
}
SetToolFrameReq::SetToolFrameReq(const SetToolFrameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tool_frame_(from.tool_frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetToolFrameReq)
}

void SetToolFrameReq::SharedCtor() {
}

SetToolFrameReq::~SetToolFrameReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetToolFrameReq)
  SharedDtor();
}

void SetToolFrameReq::SharedDtor() {
}

void SetToolFrameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetToolFrameReq& SetToolFrameReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetToolFrameReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetToolFrameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetToolFrameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tool_frame_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetToolFrameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tool_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tool_frame(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tool_frame(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetToolFrameReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetToolFrameReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tool_frame = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tool_frame())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tool_frame())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetToolFrameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetToolFrameReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetToolFrameReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetToolFrameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tool_frame = 1;
  if (this->tool_frame_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tool_frame_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tool_frame().data(), this->tool_frame_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetToolFrameReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetToolFrameReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetToolFrameReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tool_frame = 1;
  if (this->tool_frame_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tool_frame_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tool_frame_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetToolFrameReq)
  return target;
}

size_t SetToolFrameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetToolFrameReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tool_frame = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tool_frame_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tool_frame_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetToolFrameReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetToolFrameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetToolFrameReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetToolFrameReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetToolFrameReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetToolFrameReq)
    MergeFrom(*source);
  }
}

void SetToolFrameReq::MergeFrom(const SetToolFrameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetToolFrameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tool_frame_.MergeFrom(from.tool_frame_);
}

void SetToolFrameReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetToolFrameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetToolFrameReq::CopyFrom(const SetToolFrameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetToolFrameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetToolFrameReq::IsInitialized() const {
  return true;
}

void SetToolFrameReq::Swap(SetToolFrameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetToolFrameReq::InternalSwap(SetToolFrameReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tool_frame_.InternalSwap(&other->tool_frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetToolFrameReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetToolFrameRes::InitAsDefaultInstance() {
}
class SetToolFrameRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetToolFrameRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetToolFrameRes::SetToolFrameRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetToolFrameRes)
}
SetToolFrameRes::SetToolFrameRes(const SetToolFrameRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetToolFrameRes)
}

void SetToolFrameRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetToolFrameRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetToolFrameRes::~SetToolFrameRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetToolFrameRes)
  SharedDtor();
}

void SetToolFrameRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetToolFrameRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetToolFrameRes& SetToolFrameRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetToolFrameRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetToolFrameRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetToolFrameRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetToolFrameRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetToolFrameRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetToolFrameRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetToolFrameRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetToolFrameRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetToolFrameRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetToolFrameRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetToolFrameRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetToolFrameRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetToolFrameRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetToolFrameRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetToolFrameRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetToolFrameRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetToolFrameRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetToolFrameRes)
  return target;
}

size_t SetToolFrameRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetToolFrameRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetToolFrameRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetToolFrameRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetToolFrameRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetToolFrameRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetToolFrameRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetToolFrameRes)
    MergeFrom(*source);
  }
}

void SetToolFrameRes::MergeFrom(const SetToolFrameRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetToolFrameRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetToolFrameRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetToolFrameRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetToolFrameRes::CopyFrom(const SetToolFrameRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetToolFrameRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetToolFrameRes::IsInitialized() const {
  return true;
}

void SetToolFrameRes::Swap(SetToolFrameRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetToolFrameRes::InternalSwap(SetToolFrameRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetToolFrameRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetSpeedRatioReq::InitAsDefaultInstance() {
}
class SetSpeedRatioReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSpeedRatioReq::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSpeedRatioReq::SetSpeedRatioReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
}
SetSpeedRatioReq::SetSpeedRatioReq(const SetSpeedRatioReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ratio_ = from.ratio_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
}

void SetSpeedRatioReq::SharedCtor() {
  ratio_ = 0;
}

SetSpeedRatioReq::~SetSpeedRatioReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  SharedDtor();
}

void SetSpeedRatioReq::SharedDtor() {
}

void SetSpeedRatioReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSpeedRatioReq& SetSpeedRatioReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetSpeedRatioReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetSpeedRatioReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratio_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetSpeedRatioReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetSpeedRatioReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ratio = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetSpeedRatioReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSpeedRatioReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  return target;
}

size_t SetSpeedRatioReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ratio());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSpeedRatioReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSpeedRatioReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetSpeedRatioReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
    MergeFrom(*source);
  }
}

void SetSpeedRatioReq::MergeFrom(const SetSpeedRatioReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ratio() != 0) {
    set_ratio(from.ratio());
  }
}

void SetSpeedRatioReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSpeedRatioReq::CopyFrom(const SetSpeedRatioReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetSpeedRatioReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSpeedRatioReq::IsInitialized() const {
  return true;
}

void SetSpeedRatioReq::Swap(SetSpeedRatioReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSpeedRatioReq::InternalSwap(SetSpeedRatioReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ratio_, other->ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSpeedRatioReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetSpeedRatioRes::InitAsDefaultInstance() {
}
class SetSpeedRatioRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSpeedRatioRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSpeedRatioRes::SetSpeedRatioRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
}
SetSpeedRatioRes::SetSpeedRatioRes(const SetSpeedRatioRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
}

void SetSpeedRatioRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetSpeedRatioRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetSpeedRatioRes::~SetSpeedRatioRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  SharedDtor();
}

void SetSpeedRatioRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetSpeedRatioRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSpeedRatioRes& SetSpeedRatioRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetSpeedRatioRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetSpeedRatioRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetSpeedRatioRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetSpeedRatioRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetSpeedRatioRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetSpeedRatioRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetSpeedRatioRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetSpeedRatioRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSpeedRatioRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetSpeedRatioRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  return target;
}

size_t SetSpeedRatioRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSpeedRatioRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSpeedRatioRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetSpeedRatioRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
    MergeFrom(*source);
  }
}

void SetSpeedRatioRes::MergeFrom(const SetSpeedRatioRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetSpeedRatioRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSpeedRatioRes::CopyFrom(const SetSpeedRatioRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetSpeedRatioRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSpeedRatioRes::IsInitialized() const {
  return true;
}

void SetSpeedRatioRes::Swap(SetSpeedRatioRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSpeedRatioRes::InternalSwap(SetSpeedRatioRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSpeedRatioRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCommandSpeedRatioReq::InitAsDefaultInstance() {
}
class SetCommandSpeedRatioReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetCommandSpeedRatioReq::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetCommandSpeedRatioReq::SetCommandSpeedRatioReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
}
SetCommandSpeedRatioReq::SetCommandSpeedRatioReq(const SetCommandSpeedRatioReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ratio_ = from.ratio_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
}

void SetCommandSpeedRatioReq::SharedCtor() {
  ratio_ = 0;
}

SetCommandSpeedRatioReq::~SetCommandSpeedRatioReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  SharedDtor();
}

void SetCommandSpeedRatioReq::SharedDtor() {
}

void SetCommandSpeedRatioReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCommandSpeedRatioReq& SetCommandSpeedRatioReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCommandSpeedRatioReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetCommandSpeedRatioReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ratio_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetCommandSpeedRatioReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetCommandSpeedRatioReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ratio = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetCommandSpeedRatioReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ratio(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCommandSpeedRatioReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ratio(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  return target;
}

size_t SetCommandSpeedRatioReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ratio = 1;
  if (this->ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ratio());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCommandSpeedRatioReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCommandSpeedRatioReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCommandSpeedRatioReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
    MergeFrom(*source);
  }
}

void SetCommandSpeedRatioReq::MergeFrom(const SetCommandSpeedRatioReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ratio() != 0) {
    set_ratio(from.ratio());
  }
}

void SetCommandSpeedRatioReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCommandSpeedRatioReq::CopyFrom(const SetCommandSpeedRatioReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCommandSpeedRatioReq::IsInitialized() const {
  return true;
}

void SetCommandSpeedRatioReq::Swap(SetCommandSpeedRatioReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetCommandSpeedRatioReq::InternalSwap(SetCommandSpeedRatioReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ratio_, other->ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCommandSpeedRatioReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCommandSpeedRatioRes::InitAsDefaultInstance() {
}
class SetCommandSpeedRatioRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetCommandSpeedRatioRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetCommandSpeedRatioRes::SetCommandSpeedRatioRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
}
SetCommandSpeedRatioRes::SetCommandSpeedRatioRes(const SetCommandSpeedRatioRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
}

void SetCommandSpeedRatioRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetCommandSpeedRatioRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetCommandSpeedRatioRes::~SetCommandSpeedRatioRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  SharedDtor();
}

void SetCommandSpeedRatioRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetCommandSpeedRatioRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCommandSpeedRatioRes& SetCommandSpeedRatioRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCommandSpeedRatioRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetCommandSpeedRatioRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetCommandSpeedRatioRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetCommandSpeedRatioRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetCommandSpeedRatioRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCommandSpeedRatioRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  return target;
}

size_t SetCommandSpeedRatioRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCommandSpeedRatioRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCommandSpeedRatioRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCommandSpeedRatioRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
    MergeFrom(*source);
  }
}

void SetCommandSpeedRatioRes::MergeFrom(const SetCommandSpeedRatioRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetCommandSpeedRatioRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCommandSpeedRatioRes::CopyFrom(const SetCommandSpeedRatioRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetCommandSpeedRatioRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCommandSpeedRatioRes::IsInitialized() const {
  return true;
}

void SetCommandSpeedRatioRes::Swap(SetCommandSpeedRatioRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetCommandSpeedRatioRes::InternalSwap(SetCommandSpeedRatioRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCommandSpeedRatioRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopReq::InitAsDefaultInstance() {
}
class StopReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopReq::kStopCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopReq::StopReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.StopReq)
}
StopReq::StopReq(const StopReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stop_category_ = from.stop_category_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.StopReq)
}

void StopReq::SharedCtor() {
  stop_category_ = 0;
}

StopReq::~StopReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.StopReq)
  SharedDtor();
}

void StopReq::SharedDtor() {
}

void StopReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopReq& StopReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void StopReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.StopReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_category_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IndyFramework.Protobuf.Shared.StopCategory stop_category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_stop_category(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.StopReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IndyFramework.Protobuf.Shared.StopCategory stop_category = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stop_category(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.StopReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.StopReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.StopReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.StopCategory stop_category = 1;
  if (this->stop_category() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->stop_category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.StopReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* StopReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.StopReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.StopCategory stop_category = 1;
  if (this->stop_category() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->stop_category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.StopReq)
  return target;
}

size_t StopReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.StopReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.StopCategory stop_category = 1;
  if (this->stop_category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->stop_category());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.StopReq)
  GOOGLE_DCHECK_NE(&from, this);
  const StopReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.StopReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.StopReq)
    MergeFrom(*source);
  }
}

void StopReq::MergeFrom(const StopReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.StopReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stop_category() != 0) {
    set_stop_category(from.stop_category());
  }
}

void StopReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.StopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopReq::CopyFrom(const StopReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.StopReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopReq::IsInitialized() const {
  return true;
}

void StopReq::Swap(StopReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopReq::InternalSwap(StopReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stop_category_, other->stop_category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopRes::InitAsDefaultInstance() {
}
class StopRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopRes::StopRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.StopRes)
}
StopRes::StopRes(const StopRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.StopRes)
}

void StopRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StopRes::~StopRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.StopRes)
  SharedDtor();
}

void StopRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopRes& StopRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void StopRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.StopRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.StopRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.StopRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.StopRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.StopRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.StopRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.StopRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.StopRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.StopRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* StopRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.StopRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.StopRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.StopRes)
  return target;
}

size_t StopRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.StopRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.StopRes)
  GOOGLE_DCHECK_NE(&from, this);
  const StopRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.StopRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.StopRes)
    MergeFrom(*source);
  }
}

void StopRes::MergeFrom(const StopRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.StopRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void StopRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.StopRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRes::CopyFrom(const StopRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.StopRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRes::IsInitialized() const {
  return true;
}

void StopRes::Swap(StopRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopRes::InternalSwap(StopRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PauseReq::InitAsDefaultInstance() {
}
class PauseReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PauseReq::kPauseCategoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PauseReq::PauseReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.PauseReq)
}
PauseReq::PauseReq(const PauseReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pause_category_ = from.pause_category_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.PauseReq)
}

void PauseReq::SharedCtor() {
  pause_category_ = 0;
}

PauseReq::~PauseReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.PauseReq)
  SharedDtor();
}

void PauseReq::SharedDtor() {
}

void PauseReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PauseReq& PauseReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PauseReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PauseReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.PauseReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pause_category_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PauseReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IndyFramework.Protobuf.Shared.PauseCategory pause_category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_pause_category(static_cast<::IndyFramework::Protobuf::Shared::PauseCategory>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PauseReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.PauseReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IndyFramework.Protobuf.Shared.PauseCategory pause_category = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pause_category(static_cast< ::IndyFramework::Protobuf::Shared::PauseCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.PauseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.PauseReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PauseReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.PauseReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.PauseCategory pause_category = 1;
  if (this->pause_category() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->pause_category(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.PauseReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* PauseReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.PauseReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.PauseCategory pause_category = 1;
  if (this->pause_category() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->pause_category(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.PauseReq)
  return target;
}

size_t PauseReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.PauseReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.PauseCategory pause_category = 1;
  if (this->pause_category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->pause_category());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PauseReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.PauseReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PauseReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PauseReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.PauseReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.PauseReq)
    MergeFrom(*source);
  }
}

void PauseReq::MergeFrom(const PauseReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.PauseReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pause_category() != 0) {
    set_pause_category(from.pause_category());
  }
}

void PauseReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.PauseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseReq::CopyFrom(const PauseReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.PauseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseReq::IsInitialized() const {
  return true;
}

void PauseReq::Swap(PauseReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PauseReq::InternalSwap(PauseReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pause_category_, other->pause_category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PauseRes::InitAsDefaultInstance() {
}
class PauseRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PauseRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PauseRes::PauseRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.PauseRes)
}
PauseRes::PauseRes(const PauseRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.PauseRes)
}

void PauseRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PauseRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PauseRes::~PauseRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.PauseRes)
  SharedDtor();
}

void PauseRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PauseRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PauseRes& PauseRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PauseRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PauseRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.PauseRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PauseRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.PauseRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PauseRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.PauseRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.PauseRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.PauseRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.PauseRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PauseRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.PauseRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.PauseRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.PauseRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* PauseRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.PauseRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.PauseRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.PauseRes)
  return target;
}

size_t PauseRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.PauseRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PauseRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.PauseRes)
  GOOGLE_DCHECK_NE(&from, this);
  const PauseRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PauseRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.PauseRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.PauseRes)
    MergeFrom(*source);
  }
}

void PauseRes::MergeFrom(const PauseRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.PauseRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void PauseRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.PauseRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseRes::CopyFrom(const PauseRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.PauseRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseRes::IsInitialized() const {
  return true;
}

void PauseRes::Swap(PauseRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PauseRes::InternalSwap(PauseRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResumeReq::InitAsDefaultInstance() {
}
class ResumeReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResumeReq::ResumeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.ResumeReq)
}
ResumeReq::ResumeReq(const ResumeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.ResumeReq)
}

void ResumeReq::SharedCtor() {
}

ResumeReq::~ResumeReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.ResumeReq)
  SharedDtor();
}

void ResumeReq::SharedDtor() {
}

void ResumeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResumeReq& ResumeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResumeReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ResumeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.ResumeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResumeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResumeReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.ResumeReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.ResumeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.ResumeReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResumeReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.ResumeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.ResumeReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResumeReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.ResumeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.ResumeReq)
  return target;
}

size_t ResumeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.ResumeReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResumeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.ResumeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ResumeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResumeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.ResumeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.ResumeReq)
    MergeFrom(*source);
  }
}

void ResumeReq::MergeFrom(const ResumeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.ResumeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResumeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.ResumeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResumeReq::CopyFrom(const ResumeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.ResumeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResumeReq::IsInitialized() const {
  return true;
}

void ResumeReq::Swap(ResumeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResumeReq::InternalSwap(ResumeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResumeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResumeRes::InitAsDefaultInstance() {
}
class ResumeRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResumeRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResumeRes::ResumeRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.ResumeRes)
}
ResumeRes::ResumeRes(const ResumeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.ResumeRes)
}

void ResumeRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResumeRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResumeRes::~ResumeRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.ResumeRes)
  SharedDtor();
}

void ResumeRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResumeRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResumeRes& ResumeRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResumeRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ResumeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.ResumeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResumeRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.ResumeRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResumeRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.ResumeRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.ResumeRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.ResumeRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.ResumeRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResumeRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.ResumeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.ResumeRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.ResumeRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResumeRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.ResumeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.ResumeRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.ResumeRes)
  return target;
}

size_t ResumeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.ResumeRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResumeRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.ResumeRes)
  GOOGLE_DCHECK_NE(&from, this);
  const ResumeRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResumeRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.ResumeRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.ResumeRes)
    MergeFrom(*source);
  }
}

void ResumeRes::MergeFrom(const ResumeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.ResumeRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void ResumeRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.ResumeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResumeRes::CopyFrom(const ResumeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.ResumeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResumeRes::IsInitialized() const {
  return true;
}

void ResumeRes::Swap(ResumeRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResumeRes::InternalSwap(ResumeRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResumeRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RebootReq::InitAsDefaultInstance() {
}
class RebootReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RebootReq::RebootReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.RebootReq)
}
RebootReq::RebootReq(const RebootReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.RebootReq)
}

void RebootReq::SharedCtor() {
}

RebootReq::~RebootReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.RebootReq)
  SharedDtor();
}

void RebootReq::SharedDtor() {
}

void RebootReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RebootReq& RebootReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RebootReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void RebootReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.RebootReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RebootReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RebootReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.RebootReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.RebootReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.RebootReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RebootReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.RebootReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.RebootReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* RebootReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.RebootReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.RebootReq)
  return target;
}

size_t RebootReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.RebootReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RebootReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.RebootReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RebootReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RebootReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.RebootReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.RebootReq)
    MergeFrom(*source);
  }
}

void RebootReq::MergeFrom(const RebootReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.RebootReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RebootReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.RebootReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RebootReq::CopyFrom(const RebootReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.RebootReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebootReq::IsInitialized() const {
  return true;
}

void RebootReq::Swap(RebootReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RebootReq::InternalSwap(RebootReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RebootReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RebootRes::InitAsDefaultInstance() {
}
class RebootRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RebootRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RebootRes::RebootRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.RebootRes)
}
RebootRes::RebootRes(const RebootRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.RebootRes)
}

void RebootRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RebootRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RebootRes::~RebootRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.RebootRes)
  SharedDtor();
}

void RebootRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RebootRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RebootRes& RebootRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RebootRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void RebootRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.RebootRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RebootRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.RebootRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RebootRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.RebootRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.RebootRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.RebootRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.RebootRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RebootRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.RebootRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.RebootRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.RebootRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* RebootRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.RebootRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.RebootRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.RebootRes)
  return target;
}

size_t RebootRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.RebootRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RebootRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.RebootRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RebootRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RebootRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.RebootRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.RebootRes)
    MergeFrom(*source);
  }
}

void RebootRes::MergeFrom(const RebootRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.RebootRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void RebootRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.RebootRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RebootRes::CopyFrom(const RebootRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.RebootRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebootRes::IsInitialized() const {
  return true;
}

void RebootRes::Swap(RebootRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RebootRes::InternalSwap(RebootRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RebootRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecoverReq::InitAsDefaultInstance() {
}
class RecoverReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoverReq::RecoverReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.RecoverReq)
}
RecoverReq::RecoverReq(const RecoverReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.RecoverReq)
}

void RecoverReq::SharedCtor() {
}

RecoverReq::~RecoverReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.RecoverReq)
  SharedDtor();
}

void RecoverReq::SharedDtor() {
}

void RecoverReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecoverReq& RecoverReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecoverReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void RecoverReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.RecoverReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecoverReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecoverReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.RecoverReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.RecoverReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.RecoverReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecoverReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.RecoverReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.RecoverReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecoverReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.RecoverReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.RecoverReq)
  return target;
}

size_t RecoverReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.RecoverReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoverReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.RecoverReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoverReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecoverReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.RecoverReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.RecoverReq)
    MergeFrom(*source);
  }
}

void RecoverReq::MergeFrom(const RecoverReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.RecoverReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RecoverReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.RecoverReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverReq::CopyFrom(const RecoverReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.RecoverReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverReq::IsInitialized() const {
  return true;
}

void RecoverReq::Swap(RecoverReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoverReq::InternalSwap(RecoverReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoverReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RecoverRes::InitAsDefaultInstance() {
}
class RecoverRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecoverRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoverRes::RecoverRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.RecoverRes)
}
RecoverRes::RecoverRes(const RecoverRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.RecoverRes)
}

void RecoverRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecoverRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RecoverRes::~RecoverRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.RecoverRes)
  SharedDtor();
}

void RecoverRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecoverRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecoverRes& RecoverRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecoverRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void RecoverRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.RecoverRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecoverRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.RecoverRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecoverRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.RecoverRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.RecoverRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.RecoverRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.RecoverRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecoverRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.RecoverRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.RecoverRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.RecoverRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* RecoverRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.RecoverRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.RecoverRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.RecoverRes)
  return target;
}

size_t RecoverRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.RecoverRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoverRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.RecoverRes)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoverRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecoverRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.RecoverRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.RecoverRes)
    MergeFrom(*source);
  }
}

void RecoverRes::MergeFrom(const RecoverRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.RecoverRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void RecoverRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.RecoverRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverRes::CopyFrom(const RecoverRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.RecoverRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverRes::IsInitialized() const {
  return true;
}

void RecoverRes::Swap(RecoverRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoverRes::InternalSwap(RecoverRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoverRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BrakeReq::InitAsDefaultInstance() {
}
class BrakeReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrakeReq::kOnListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrakeReq::BrakeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.BrakeReq)
}
BrakeReq::BrakeReq(const BrakeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      on_list_(from.on_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.BrakeReq)
}

void BrakeReq::SharedCtor() {
}

BrakeReq::~BrakeReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.BrakeReq)
  SharedDtor();
}

void BrakeReq::SharedDtor() {
}

void BrakeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrakeReq& BrakeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BrakeReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void BrakeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.BrakeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  on_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BrakeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool on_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_on_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_on_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BrakeReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.BrakeReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool on_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_on_list())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10u, input, this->mutable_on_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.BrakeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.BrakeReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BrakeReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.BrakeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool on_list = 1;
  if (this->on_list_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_on_list_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->on_list().data(), this->on_list_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.BrakeReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* BrakeReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.BrakeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool on_list = 1;
  if (this->on_list_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _on_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->on_list_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.BrakeReq)
  return target;
}

size_t BrakeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.BrakeReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool on_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->on_list_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _on_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrakeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.BrakeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BrakeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BrakeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.BrakeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.BrakeReq)
    MergeFrom(*source);
  }
}

void BrakeReq::MergeFrom(const BrakeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.BrakeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  on_list_.MergeFrom(from.on_list_);
}

void BrakeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.BrakeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrakeReq::CopyFrom(const BrakeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.BrakeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrakeReq::IsInitialized() const {
  return true;
}

void BrakeReq::Swap(BrakeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrakeReq::InternalSwap(BrakeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  on_list_.InternalSwap(&other->on_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BrakeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BrakeRes::InitAsDefaultInstance() {
}
class BrakeRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrakeRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrakeRes::BrakeRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.BrakeRes)
}
BrakeRes::BrakeRes(const BrakeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.BrakeRes)
}

void BrakeRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BrakeRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BrakeRes::~BrakeRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.BrakeRes)
  SharedDtor();
}

void BrakeRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BrakeRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrakeRes& BrakeRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BrakeRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void BrakeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.BrakeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BrakeRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.BrakeRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BrakeRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.BrakeRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.BrakeRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.BrakeRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.BrakeRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BrakeRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.BrakeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.BrakeRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.BrakeRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* BrakeRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.BrakeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.BrakeRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.BrakeRes)
  return target;
}

size_t BrakeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.BrakeRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrakeRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.BrakeRes)
  GOOGLE_DCHECK_NE(&from, this);
  const BrakeRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BrakeRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.BrakeRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.BrakeRes)
    MergeFrom(*source);
  }
}

void BrakeRes::MergeFrom(const BrakeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.BrakeRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void BrakeRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.BrakeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrakeRes::CopyFrom(const BrakeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.BrakeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrakeRes::IsInitialized() const {
  return true;
}

void BrakeRes::Swap(BrakeRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrakeRes::InternalSwap(BrakeRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BrakeRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServoReq::InitAsDefaultInstance() {
}
class ServoReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoReq::kOnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoReq::ServoReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.ServoReq)
}
ServoReq::ServoReq(const ServoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  on_ = from.on_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.ServoReq)
}

void ServoReq::SharedCtor() {
  on_ = false;
}

ServoReq::~ServoReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.ServoReq)
  SharedDtor();
}

void ServoReq::SharedDtor() {
}

void ServoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServoReq& ServoReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServoReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ServoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.ServoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  on_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServoReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.ServoReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool on = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.ServoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.ServoReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServoReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.ServoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->on(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.ServoReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServoReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.ServoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->on(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.ServoReq)
  return target;
}

size_t ServoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.ServoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.ServoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.ServoReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.ServoReq)
    MergeFrom(*source);
  }
}

void ServoReq::MergeFrom(const ServoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.ServoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.on() != 0) {
    set_on(from.on());
  }
}

void ServoReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.ServoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoReq::CopyFrom(const ServoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.ServoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoReq::IsInitialized() const {
  return true;
}

void ServoReq::Swap(ServoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoReq::InternalSwap(ServoReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(on_, other->on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServoReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServoRes::InitAsDefaultInstance() {
}
class ServoRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoRes::ServoRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.ServoRes)
}
ServoRes::ServoRes(const ServoRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.ServoRes)
}

void ServoRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServoRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServoRes::~ServoRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.ServoRes)
  SharedDtor();
}

void ServoRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServoRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServoRes& ServoRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServoRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ServoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.ServoRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServoRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.ServoRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServoRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.ServoRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.ServoRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.ServoRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.ServoRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServoRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.ServoRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.ServoRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.ServoRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServoRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.ServoRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.ServoRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.ServoRes)
  return target;
}

size_t ServoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.ServoRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.ServoRes)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServoRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.ServoRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.ServoRes)
    MergeFrom(*source);
  }
}

void ServoRes::MergeFrom(const ServoRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.ServoRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void ServoRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.ServoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoRes::CopyFrom(const ServoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.ServoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoRes::IsInitialized() const {
  return true;
}

void ServoRes::Swap(ServoRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoRes::InternalSwap(ServoRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServoRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAutoServoOffReq::InitAsDefaultInstance() {
}
class SetAutoServoOffReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAutoServoOffReq::kEnableFieldNumber;
const int SetAutoServoOffReq::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAutoServoOffReq::SetAutoServoOffReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
}
SetAutoServoOffReq::SetAutoServoOffReq(const SetAutoServoOffReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
}

void SetAutoServoOffReq::SharedCtor() {
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(time_));
}

SetAutoServoOffReq::~SetAutoServoOffReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  SharedDtor();
}

void SetAutoServoOffReq::SharedDtor() {
}

void SetAutoServoOffReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAutoServoOffReq& SetAutoServoOffReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAutoServoOffReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetAutoServoOffReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetAutoServoOffReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetAutoServoOffReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetAutoServoOffReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // float time = 2;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAutoServoOffReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // float time = 2;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  return target;
}

size_t SetAutoServoOffReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // float time = 2;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAutoServoOffReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAutoServoOffReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAutoServoOffReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
    MergeFrom(*source);
  }
}

void SetAutoServoOffReq::MergeFrom(const SetAutoServoOffReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    set_time(from.time());
  }
}

void SetAutoServoOffReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAutoServoOffReq::CopyFrom(const SetAutoServoOffReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetAutoServoOffReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAutoServoOffReq::IsInitialized() const {
  return true;
}

void SetAutoServoOffReq::Swap(SetAutoServoOffReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAutoServoOffReq::InternalSwap(SetAutoServoOffReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(enable_, other->enable_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAutoServoOffReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAutoServoOffRes::InitAsDefaultInstance() {
}
class SetAutoServoOffRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAutoServoOffRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAutoServoOffRes::SetAutoServoOffRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
}
SetAutoServoOffRes::SetAutoServoOffRes(const SetAutoServoOffRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
}

void SetAutoServoOffRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAutoServoOffRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetAutoServoOffRes::~SetAutoServoOffRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  SharedDtor();
}

void SetAutoServoOffRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAutoServoOffRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAutoServoOffRes& SetAutoServoOffRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAutoServoOffRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetAutoServoOffRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetAutoServoOffRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetAutoServoOffRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetAutoServoOffRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetAutoServoOffRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetAutoServoOffRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetAutoServoOffRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAutoServoOffRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetAutoServoOffRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  return target;
}

size_t SetAutoServoOffRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAutoServoOffRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAutoServoOffRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAutoServoOffRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
    MergeFrom(*source);
  }
}

void SetAutoServoOffRes::MergeFrom(const SetAutoServoOffRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetAutoServoOffRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAutoServoOffRes::CopyFrom(const SetAutoServoOffRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetAutoServoOffRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAutoServoOffRes::IsInitialized() const {
  return true;
}

void SetAutoServoOffRes::Swap(SetAutoServoOffRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAutoServoOffRes::InternalSwap(SetAutoServoOffRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAutoServoOffRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAutoServoOffReq::InitAsDefaultInstance() {
}
class GetAutoServoOffReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAutoServoOffReq::GetAutoServoOffReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
}
GetAutoServoOffReq::GetAutoServoOffReq(const GetAutoServoOffReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
}

void GetAutoServoOffReq::SharedCtor() {
}

GetAutoServoOffReq::~GetAutoServoOffReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  SharedDtor();
}

void GetAutoServoOffReq::SharedDtor() {
}

void GetAutoServoOffReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAutoServoOffReq& GetAutoServoOffReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAutoServoOffReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetAutoServoOffReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAutoServoOffReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAutoServoOffReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAutoServoOffReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAutoServoOffReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  return target;
}

size_t GetAutoServoOffReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAutoServoOffReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAutoServoOffReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAutoServoOffReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
    MergeFrom(*source);
  }
}

void GetAutoServoOffReq::MergeFrom(const GetAutoServoOffReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetAutoServoOffReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAutoServoOffReq::CopyFrom(const GetAutoServoOffReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetAutoServoOffReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAutoServoOffReq::IsInitialized() const {
  return true;
}

void GetAutoServoOffReq::Swap(GetAutoServoOffReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAutoServoOffReq::InternalSwap(GetAutoServoOffReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAutoServoOffReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAutoServoOffRes::InitAsDefaultInstance() {
}
class GetAutoServoOffRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAutoServoOffRes::kEnableFieldNumber;
const int GetAutoServoOffRes::kTimeFieldNumber;
const int GetAutoServoOffRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAutoServoOffRes::GetAutoServoOffRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
}
GetAutoServoOffRes::GetAutoServoOffRes(const GetAutoServoOffRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
}

void GetAutoServoOffRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAutoServoOffRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(time_));
}

GetAutoServoOffRes::~GetAutoServoOffRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  SharedDtor();
}

void GetAutoServoOffRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAutoServoOffRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAutoServoOffRes& GetAutoServoOffRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAutoServoOffRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetAutoServoOffRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAutoServoOffRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetAutoServoOffRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAutoServoOffRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetAutoServoOffRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAutoServoOffRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // float time = 2;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->time(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetAutoServoOffRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAutoServoOffRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // float time = 2;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->time(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetAutoServoOffRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  return target;
}

size_t GetAutoServoOffRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // float time = 2;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAutoServoOffRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAutoServoOffRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAutoServoOffRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
    MergeFrom(*source);
  }
}

void GetAutoServoOffRes::MergeFrom(const GetAutoServoOffRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    set_time(from.time());
  }
}

void GetAutoServoOffRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAutoServoOffRes::CopyFrom(const GetAutoServoOffRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetAutoServoOffRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAutoServoOffRes::IsInitialized() const {
  return true;
}

void GetAutoServoOffRes::Swap(GetAutoServoOffRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAutoServoOffRes::InternalSwap(GetAutoServoOffRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enable_, other->enable_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAutoServoOffRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulationModeReq::InitAsDefaultInstance() {
}
class SimulationModeReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimulationModeReq::kOnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimulationModeReq::SimulationModeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SimulationModeReq)
}
SimulationModeReq::SimulationModeReq(const SimulationModeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  on_ = from.on_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SimulationModeReq)
}

void SimulationModeReq::SharedCtor() {
  on_ = false;
}

SimulationModeReq::~SimulationModeReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SimulationModeReq)
  SharedDtor();
}

void SimulationModeReq::SharedDtor() {
}

void SimulationModeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationModeReq& SimulationModeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationModeReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SimulationModeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SimulationModeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  on_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimulationModeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimulationModeReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SimulationModeReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool on = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SimulationModeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SimulationModeReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimulationModeReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SimulationModeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->on(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SimulationModeReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationModeReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SimulationModeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->on(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SimulationModeReq)
  return target;
}

size_t SimulationModeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SimulationModeReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationModeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SimulationModeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationModeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationModeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SimulationModeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SimulationModeReq)
    MergeFrom(*source);
  }
}

void SimulationModeReq::MergeFrom(const SimulationModeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SimulationModeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.on() != 0) {
    set_on(from.on());
  }
}

void SimulationModeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SimulationModeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationModeReq::CopyFrom(const SimulationModeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SimulationModeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationModeReq::IsInitialized() const {
  return true;
}

void SimulationModeReq::Swap(SimulationModeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimulationModeReq::InternalSwap(SimulationModeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(on_, other->on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationModeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimulationModeRes::InitAsDefaultInstance() {
}
class SimulationModeRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimulationModeRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimulationModeRes::SimulationModeRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SimulationModeRes)
}
SimulationModeRes::SimulationModeRes(const SimulationModeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SimulationModeRes)
}

void SimulationModeRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimulationModeRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SimulationModeRes::~SimulationModeRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SimulationModeRes)
  SharedDtor();
}

void SimulationModeRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SimulationModeRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimulationModeRes& SimulationModeRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimulationModeRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SimulationModeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SimulationModeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimulationModeRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SimulationModeRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimulationModeRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SimulationModeRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SimulationModeRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SimulationModeRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SimulationModeRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimulationModeRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SimulationModeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SimulationModeRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SimulationModeRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationModeRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SimulationModeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SimulationModeRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SimulationModeRes)
  return target;
}

size_t SimulationModeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SimulationModeRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationModeRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SimulationModeRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationModeRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationModeRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SimulationModeRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SimulationModeRes)
    MergeFrom(*source);
  }
}

void SimulationModeRes::MergeFrom(const SimulationModeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SimulationModeRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SimulationModeRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SimulationModeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationModeRes::CopyFrom(const SimulationModeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SimulationModeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationModeRes::IsInitialized() const {
  return true;
}

void SimulationModeRes::Swap(SimulationModeRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimulationModeRes::InternalSwap(SimulationModeRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationModeRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DirectTeachingModeReq::InitAsDefaultInstance() {
}
class DirectTeachingModeReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectTeachingModeReq::kOnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectTeachingModeReq::DirectTeachingModeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
}
DirectTeachingModeReq::DirectTeachingModeReq(const DirectTeachingModeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  on_ = from.on_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
}

void DirectTeachingModeReq::SharedCtor() {
  on_ = false;
}

DirectTeachingModeReq::~DirectTeachingModeReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  SharedDtor();
}

void DirectTeachingModeReq::SharedDtor() {
}

void DirectTeachingModeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectTeachingModeReq& DirectTeachingModeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectTeachingModeReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void DirectTeachingModeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  on_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DirectTeachingModeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool on = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DirectTeachingModeReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool on = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DirectTeachingModeReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->on(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectTeachingModeReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->on(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  return target;
}

size_t DirectTeachingModeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool on = 1;
  if (this->on() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectTeachingModeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectTeachingModeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectTeachingModeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
    MergeFrom(*source);
  }
}

void DirectTeachingModeReq::MergeFrom(const DirectTeachingModeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.on() != 0) {
    set_on(from.on());
  }
}

void DirectTeachingModeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectTeachingModeReq::CopyFrom(const DirectTeachingModeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.DirectTeachingModeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectTeachingModeReq::IsInitialized() const {
  return true;
}

void DirectTeachingModeReq::Swap(DirectTeachingModeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectTeachingModeReq::InternalSwap(DirectTeachingModeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(on_, other->on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectTeachingModeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DirectTeachingModeRes::InitAsDefaultInstance() {
}
class DirectTeachingModeRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectTeachingModeRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectTeachingModeRes::DirectTeachingModeRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
}
DirectTeachingModeRes::DirectTeachingModeRes(const DirectTeachingModeRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
}

void DirectTeachingModeRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DirectTeachingModeRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DirectTeachingModeRes::~DirectTeachingModeRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  SharedDtor();
}

void DirectTeachingModeRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectTeachingModeRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DirectTeachingModeRes& DirectTeachingModeRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DirectTeachingModeRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void DirectTeachingModeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DirectTeachingModeRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.DirectTeachingModeRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DirectTeachingModeRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.DirectTeachingModeRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DirectTeachingModeRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.DirectTeachingModeRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectTeachingModeRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.DirectTeachingModeRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  return target;
}

size_t DirectTeachingModeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectTeachingModeRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectTeachingModeRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectTeachingModeRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
    MergeFrom(*source);
  }
}

void DirectTeachingModeRes::MergeFrom(const DirectTeachingModeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void DirectTeachingModeRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectTeachingModeRes::CopyFrom(const DirectTeachingModeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.DirectTeachingModeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectTeachingModeRes::IsInitialized() const {
  return true;
}

void DirectTeachingModeRes::Swap(DirectTeachingModeRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectTeachingModeRes::InternalSwap(DirectTeachingModeRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectTeachingModeRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InverseKinematicsReq::InitAsDefaultInstance() {
}
class InverseKinematicsReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InverseKinematicsReq::kTposFieldNumber;
const int InverseKinematicsReq::kInitJposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InverseKinematicsReq::InverseKinematicsReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.InverseKinematicsReq)
}
InverseKinematicsReq::InverseKinematicsReq(const InverseKinematicsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_),
      init_jpos_(from.init_jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.InverseKinematicsReq)
}

void InverseKinematicsReq::SharedCtor() {
}

InverseKinematicsReq::~InverseKinematicsReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  SharedDtor();
}

void InverseKinematicsReq::SharedDtor() {
}

void InverseKinematicsReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InverseKinematicsReq& InverseKinematicsReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InverseKinematicsReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void InverseKinematicsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  init_jpos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InverseKinematicsReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float init_jpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_init_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_init_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InverseKinematicsReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float init_jpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_init_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_init_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InverseKinematicsReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // repeated float init_jpos = 2;
  if (this->init_jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_init_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->init_jpos().data(), this->init_jpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.InverseKinematicsReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* InverseKinematicsReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // repeated float init_jpos = 2;
  if (this->init_jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _init_jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->init_jpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  return target;
}

size_t InverseKinematicsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float init_jpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->init_jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _init_jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InverseKinematicsReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  GOOGLE_DCHECK_NE(&from, this);
  const InverseKinematicsReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InverseKinematicsReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.InverseKinematicsReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.InverseKinematicsReq)
    MergeFrom(*source);
  }
}

void InverseKinematicsReq::MergeFrom(const InverseKinematicsReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  init_jpos_.MergeFrom(from.init_jpos_);
}

void InverseKinematicsReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InverseKinematicsReq::CopyFrom(const InverseKinematicsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.InverseKinematicsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InverseKinematicsReq::IsInitialized() const {
  return true;
}

void InverseKinematicsReq::Swap(InverseKinematicsReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InverseKinematicsReq::InternalSwap(InverseKinematicsReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  init_jpos_.InternalSwap(&other->init_jpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InverseKinematicsReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InverseKinematicsRes::InitAsDefaultInstance() {
}
class InverseKinematicsRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InverseKinematicsRes::kJposFieldNumber;
const int InverseKinematicsRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InverseKinematicsRes::InverseKinematicsRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.InverseKinematicsRes)
}
InverseKinematicsRes::InverseKinematicsRes(const InverseKinematicsRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      jpos_(from.jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.InverseKinematicsRes)
}

void InverseKinematicsRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InverseKinematicsRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InverseKinematicsRes::~InverseKinematicsRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  SharedDtor();
}

void InverseKinematicsRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InverseKinematicsRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InverseKinematicsRes& InverseKinematicsRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InverseKinematicsRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void InverseKinematicsRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpos_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InverseKinematicsRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float jpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.InverseKinematicsRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InverseKinematicsRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float jpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.InverseKinematicsRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InverseKinematicsRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.InverseKinematicsRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.InverseKinematicsRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* InverseKinematicsRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.InverseKinematicsRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  return target;
}

size_t InverseKinematicsRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InverseKinematicsRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  GOOGLE_DCHECK_NE(&from, this);
  const InverseKinematicsRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InverseKinematicsRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.InverseKinematicsRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.InverseKinematicsRes)
    MergeFrom(*source);
  }
}

void InverseKinematicsRes::MergeFrom(const InverseKinematicsRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jpos_.MergeFrom(from.jpos_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void InverseKinematicsRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InverseKinematicsRes::CopyFrom(const InverseKinematicsRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.InverseKinematicsRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InverseKinematicsRes::IsInitialized() const {
  return true;
}

void InverseKinematicsRes::Swap(InverseKinematicsRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InverseKinematicsRes::InternalSwap(InverseKinematicsRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpos_.InternalSwap(&other->jpos_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InverseKinematicsRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckAproachRetractValidReq::InitAsDefaultInstance() {
}
class CheckAproachRetractValidReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckAproachRetractValidReq::kTposFieldNumber;
const int CheckAproachRetractValidReq::kInitJposFieldNumber;
const int CheckAproachRetractValidReq::kPreTposFieldNumber;
const int CheckAproachRetractValidReq::kPostTposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAproachRetractValidReq::CheckAproachRetractValidReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
}
CheckAproachRetractValidReq::CheckAproachRetractValidReq(const CheckAproachRetractValidReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_),
      init_jpos_(from.init_jpos_),
      pre_tpos_(from.pre_tpos_),
      post_tpos_(from.post_tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
}

void CheckAproachRetractValidReq::SharedCtor() {
}

CheckAproachRetractValidReq::~CheckAproachRetractValidReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  SharedDtor();
}

void CheckAproachRetractValidReq::SharedDtor() {
}

void CheckAproachRetractValidReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckAproachRetractValidReq& CheckAproachRetractValidReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckAproachRetractValidReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CheckAproachRetractValidReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  init_jpos_.Clear();
  pre_tpos_.Clear();
  post_tpos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckAproachRetractValidReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float init_jpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_init_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_init_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pre_tpos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_pre_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_pre_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float post_tpos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_post_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_post_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckAproachRetractValidReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float init_jpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_init_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_init_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pre_tpos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pre_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_pre_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float post_tpos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_post_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_post_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckAproachRetractValidReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // repeated float init_jpos = 2;
  if (this->init_jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_init_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->init_jpos().data(), this->init_jpos_size(), output);
  }

  // repeated float pre_tpos = 3;
  if (this->pre_tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pre_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->pre_tpos().data(), this->pre_tpos_size(), output);
  }

  // repeated float post_tpos = 4;
  if (this->post_tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_post_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->post_tpos().data(), this->post_tpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckAproachRetractValidReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // repeated float init_jpos = 2;
  if (this->init_jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _init_jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->init_jpos_, target);
  }

  // repeated float pre_tpos = 3;
  if (this->pre_tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pre_tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pre_tpos_, target);
  }

  // repeated float post_tpos = 4;
  if (this->post_tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _post_tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->post_tpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  return target;
}

size_t CheckAproachRetractValidReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float init_jpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->init_jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _init_jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pre_tpos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pre_tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pre_tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float post_tpos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->post_tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _post_tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckAproachRetractValidReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckAproachRetractValidReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckAproachRetractValidReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
    MergeFrom(*source);
  }
}

void CheckAproachRetractValidReq::MergeFrom(const CheckAproachRetractValidReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  init_jpos_.MergeFrom(from.init_jpos_);
  pre_tpos_.MergeFrom(from.pre_tpos_);
  post_tpos_.MergeFrom(from.post_tpos_);
}

void CheckAproachRetractValidReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAproachRetractValidReq::CopyFrom(const CheckAproachRetractValidReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAproachRetractValidReq::IsInitialized() const {
  return true;
}

void CheckAproachRetractValidReq::Swap(CheckAproachRetractValidReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAproachRetractValidReq::InternalSwap(CheckAproachRetractValidReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  init_jpos_.InternalSwap(&other->init_jpos_);
  pre_tpos_.InternalSwap(&other->pre_tpos_);
  post_tpos_.InternalSwap(&other->post_tpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckAproachRetractValidReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckAproachRetractValidRes::InitAsDefaultInstance() {
}
class CheckAproachRetractValidRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckAproachRetractValidRes::kIsValidFieldNumber;
const int CheckAproachRetractValidRes::kTarPosFieldNumber;
const int CheckAproachRetractValidRes::kApproachPosFieldNumber;
const int CheckAproachRetractValidRes::kRetractPosFieldNumber;
const int CheckAproachRetractValidRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckAproachRetractValidRes::CheckAproachRetractValidRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
}
CheckAproachRetractValidRes::CheckAproachRetractValidRes(const CheckAproachRetractValidRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tar_pos_(from.tar_pos_),
      approach_pos_(from.approach_pos_),
      retract_pos_(from.retract_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  is_valid_ = from.is_valid_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
}

void CheckAproachRetractValidRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckAproachRetractValidRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_valid_ = false;
}

CheckAproachRetractValidRes::~CheckAproachRetractValidRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  SharedDtor();
}

void CheckAproachRetractValidRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckAproachRetractValidRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckAproachRetractValidRes& CheckAproachRetractValidRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckAproachRetractValidRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CheckAproachRetractValidRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tar_pos_.Clear();
  approach_pos_.Clear();
  retract_pos_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_valid_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CheckAproachRetractValidRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float tar_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tar_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_tar_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float approach_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_approach_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_approach_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float retract_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_retract_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_retract_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CheckAproachRetractValidRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_valid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tar_pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tar_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tar_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float approach_pos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_approach_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_approach_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float retract_pos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_retract_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_retract_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CheckAproachRetractValidRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_valid = 1;
  if (this->is_valid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_valid(), output);
  }

  // repeated float tar_pos = 2;
  if (this->tar_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tar_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tar_pos().data(), this->tar_pos_size(), output);
  }

  // repeated float approach_pos = 3;
  if (this->approach_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_approach_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->approach_pos().data(), this->approach_pos_size(), output);
  }

  // repeated float retract_pos = 4;
  if (this->retract_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_retract_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->retract_pos().data(), this->retract_pos_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckAproachRetractValidRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_valid = 1;
  if (this->is_valid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_valid(), target);
  }

  // repeated float tar_pos = 2;
  if (this->tar_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tar_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tar_pos_, target);
  }

  // repeated float approach_pos = 3;
  if (this->approach_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _approach_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->approach_pos_, target);
  }

  // repeated float retract_pos = 4;
  if (this->retract_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _retract_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->retract_pos_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.CheckAproachRetractValidRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  return target;
}

size_t CheckAproachRetractValidRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tar_pos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tar_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tar_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float approach_pos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->approach_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _approach_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float retract_pos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->retract_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _retract_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // bool is_valid = 1;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckAproachRetractValidRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckAproachRetractValidRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckAproachRetractValidRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
    MergeFrom(*source);
  }
}

void CheckAproachRetractValidRes::MergeFrom(const CheckAproachRetractValidRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tar_pos_.MergeFrom(from.tar_pos_);
  approach_pos_.MergeFrom(from.approach_pos_);
  retract_pos_.MergeFrom(from.retract_pos_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
}

void CheckAproachRetractValidRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckAproachRetractValidRes::CopyFrom(const CheckAproachRetractValidRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.CheckAproachRetractValidRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckAproachRetractValidRes::IsInitialized() const {
  return true;
}

void CheckAproachRetractValidRes::Swap(CheckAproachRetractValidRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckAproachRetractValidRes::InternalSwap(CheckAproachRetractValidRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tar_pos_.InternalSwap(&other->tar_pos_);
  approach_pos_.InternalSwap(&other->approach_pos_);
  retract_pos_.InternalSwap(&other->retract_pos_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_valid_, other->is_valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckAproachRetractValidRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPalletPointListReq::InitAsDefaultInstance() {
}
class GetPalletPointListReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPalletPointListReq::kTposFieldNumber;
const int GetPalletPointListReq::kJposFieldNumber;
const int GetPalletPointListReq::kPreTposFieldNumber;
const int GetPalletPointListReq::kPostTposFieldNumber;
const int GetPalletPointListReq::kPalletPatternFieldNumber;
const int GetPalletPointListReq::kWidthFieldNumber;
const int GetPalletPointListReq::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPalletPointListReq::GetPalletPointListReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetPalletPointListReq)
}
GetPalletPointListReq::GetPalletPointListReq(const GetPalletPointListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_),
      jpos_(from.jpos_),
      pre_tpos_(from.pre_tpos_),
      post_tpos_(from.post_tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pallet_pattern_, &from.pallet_pattern_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&pallet_pattern_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetPalletPointListReq)
}

void GetPalletPointListReq::SharedCtor() {
  ::memset(&pallet_pattern_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&pallet_pattern_)) + sizeof(height_));
}

GetPalletPointListReq::~GetPalletPointListReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  SharedDtor();
}

void GetPalletPointListReq::SharedDtor() {
}

void GetPalletPointListReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPalletPointListReq& GetPalletPointListReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPalletPointListReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetPalletPointListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  jpos_.Clear();
  pre_tpos_.Clear();
  post_tpos_.Clear();
  ::memset(&pallet_pattern_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&pallet_pattern_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetPalletPointListReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float jpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pre_tpos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_pre_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_pre_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float post_tpos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_post_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_post_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 pallet_pattern = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          pallet_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetPalletPointListReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float jpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pre_tpos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pre_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_pre_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float post_tpos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_post_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_post_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pallet_pattern = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pallet_pattern_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetPalletPointListReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // repeated float jpos = 2;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  // repeated float pre_tpos = 3;
  if (this->pre_tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pre_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->pre_tpos().data(), this->pre_tpos_size(), output);
  }

  // repeated float post_tpos = 4;
  if (this->post_tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_post_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->post_tpos().data(), this->post_tpos_size(), output);
  }

  // int32 pallet_pattern = 5;
  if (this->pallet_pattern() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->pallet_pattern(), output);
  }

  // int32 width = 6;
  if (this->width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->width(), output);
  }

  // int32 height = 7;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetPalletPointListReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPalletPointListReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // repeated float jpos = 2;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  // repeated float pre_tpos = 3;
  if (this->pre_tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pre_tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pre_tpos_, target);
  }

  // repeated float post_tpos = 4;
  if (this->post_tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _post_tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->post_tpos_, target);
  }

  // int32 pallet_pattern = 5;
  if (this->pallet_pattern() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->pallet_pattern(), target);
  }

  // int32 width = 6;
  if (this->width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->width(), target);
  }

  // int32 height = 7;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  return target;
}

size_t GetPalletPointListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float jpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pre_tpos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->pre_tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pre_tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float post_tpos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->post_tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _post_tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 pallet_pattern = 5;
  if (this->pallet_pattern() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pallet_pattern());
  }

  // int32 width = 6;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 7;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPalletPointListReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPalletPointListReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPalletPointListReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetPalletPointListReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetPalletPointListReq)
    MergeFrom(*source);
  }
}

void GetPalletPointListReq::MergeFrom(const GetPalletPointListReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  jpos_.MergeFrom(from.jpos_);
  pre_tpos_.MergeFrom(from.pre_tpos_);
  post_tpos_.MergeFrom(from.post_tpos_);
  if (from.pallet_pattern() != 0) {
    set_pallet_pattern(from.pallet_pattern());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void GetPalletPointListReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPalletPointListReq::CopyFrom(const GetPalletPointListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetPalletPointListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPalletPointListReq::IsInitialized() const {
  return true;
}

void GetPalletPointListReq::Swap(GetPalletPointListReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPalletPointListReq::InternalSwap(GetPalletPointListReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  jpos_.InternalSwap(&other->jpos_);
  pre_tpos_.InternalSwap(&other->pre_tpos_);
  post_tpos_.InternalSwap(&other->post_tpos_);
  swap(pallet_pattern_, other->pallet_pattern_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPalletPointListReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPalletPointListRes::InitAsDefaultInstance() {
}
class GetPalletPointListRes::HasBitSetters {
 public:
};

void GetPalletPointListRes::clear_pallet_points() {
  pallet_points_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetPalletPointListRes::kPalletPointsFieldNumber;
const int GetPalletPointListRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetPalletPointListRes::GetPalletPointListRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetPalletPointListRes)
}
GetPalletPointListRes::GetPalletPointListRes(const GetPalletPointListRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pallet_points_(from.pallet_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetPalletPointListRes)
}

void GetPalletPointListRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPalletPointListRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPalletPointListRes::~GetPalletPointListRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  SharedDtor();
}

void GetPalletPointListRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPalletPointListRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPalletPointListRes& GetPalletPointListRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPalletPointListRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetPalletPointListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pallet_points_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetPalletPointListRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.PalletPoint pallet_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pallet_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetPalletPointListRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetPalletPointListRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.PalletPoint pallet_points = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pallet_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetPalletPointListRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetPalletPointListRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.PalletPoint pallet_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pallet_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->pallet_points(static_cast<int>(i)),
      output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetPalletPointListRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetPalletPointListRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPalletPointListRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.PalletPoint pallet_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pallet_points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pallet_points(static_cast<int>(i)), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetPalletPointListRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  return target;
}

size_t GetPalletPointListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.PalletPoint pallet_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pallet_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pallet_points(static_cast<int>(i)));
    }
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPalletPointListRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPalletPointListRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPalletPointListRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetPalletPointListRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetPalletPointListRes)
    MergeFrom(*source);
  }
}

void GetPalletPointListRes::MergeFrom(const GetPalletPointListRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pallet_points_.MergeFrom(from.pallet_points_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetPalletPointListRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPalletPointListRes::CopyFrom(const GetPalletPointListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetPalletPointListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPalletPointListRes::IsInitialized() const {
  return true;
}

void GetPalletPointListRes::Swap(GetPalletPointListRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetPalletPointListRes::InternalSwap(GetPalletPointListRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&pallet_points_)->InternalSwap(CastToBase(&other->pallet_points_));
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPalletPointListRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculateRelativePoseReq::InitAsDefaultInstance() {
}
class CalculateRelativePoseReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalculateRelativePoseReq::kStartPosFieldNumber;
const int CalculateRelativePoseReq::kEndPosFieldNumber;
const int CalculateRelativePoseReq::kBaseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalculateRelativePoseReq::CalculateRelativePoseReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
}
CalculateRelativePoseReq::CalculateRelativePoseReq(const CalculateRelativePoseReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      start_pos_(from.start_pos_),
      end_pos_(from.end_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_type_ = from.base_type_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
}

void CalculateRelativePoseReq::SharedCtor() {
  base_type_ = 0;
}

CalculateRelativePoseReq::~CalculateRelativePoseReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  SharedDtor();
}

void CalculateRelativePoseReq::SharedDtor() {
}

void CalculateRelativePoseReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculateRelativePoseReq& CalculateRelativePoseReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculateRelativePoseReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CalculateRelativePoseReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_pos_.Clear();
  end_pos_.Clear();
  base_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalculateRelativePoseReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float start_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_start_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_start_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float end_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_end_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_end_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::IndyFramework::Protobuf::Shared::TaskBaseType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalculateRelativePoseReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float start_pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_start_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_start_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float end_pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_end_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_end_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalculateRelativePoseReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float start_pos = 1;
  if (this->start_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_start_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->start_pos().data(), this->start_pos_size(), output);
  }

  // repeated float end_pos = 2;
  if (this->end_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_end_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->end_pos().data(), this->end_pos_size(), output);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->base_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculateRelativePoseReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float start_pos = 1;
  if (this->start_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _start_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->start_pos_, target);
  }

  // repeated float end_pos = 2;
  if (this->end_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _end_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->end_pos_, target);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->base_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  return target;
}

size_t CalculateRelativePoseReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float start_pos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->start_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _start_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float end_pos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->end_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _end_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculateRelativePoseReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculateRelativePoseReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculateRelativePoseReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
    MergeFrom(*source);
  }
}

void CalculateRelativePoseReq::MergeFrom(const CalculateRelativePoseReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  start_pos_.MergeFrom(from.start_pos_);
  end_pos_.MergeFrom(from.end_pos_);
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
}

void CalculateRelativePoseReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculateRelativePoseReq::CopyFrom(const CalculateRelativePoseReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.CalculateRelativePoseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculateRelativePoseReq::IsInitialized() const {
  return true;
}

void CalculateRelativePoseReq::Swap(CalculateRelativePoseReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalculateRelativePoseReq::InternalSwap(CalculateRelativePoseReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  start_pos_.InternalSwap(&other->start_pos_);
  end_pos_.InternalSwap(&other->end_pos_);
  swap(base_type_, other->base_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculateRelativePoseReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculateRelativePoseRes::InitAsDefaultInstance() {
}
class CalculateRelativePoseRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalculateRelativePoseRes::kRelativePosFieldNumber;
const int CalculateRelativePoseRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalculateRelativePoseRes::CalculateRelativePoseRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
}
CalculateRelativePoseRes::CalculateRelativePoseRes(const CalculateRelativePoseRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      relative_pos_(from.relative_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
}

void CalculateRelativePoseRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalculateRelativePoseRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CalculateRelativePoseRes::~CalculateRelativePoseRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  SharedDtor();
}

void CalculateRelativePoseRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CalculateRelativePoseRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculateRelativePoseRes& CalculateRelativePoseRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculateRelativePoseRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CalculateRelativePoseRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relative_pos_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalculateRelativePoseRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float relative_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_relative_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_relative_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.CalculateRelativePoseRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalculateRelativePoseRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float relative_pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_relative_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_relative_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.CalculateRelativePoseRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalculateRelativePoseRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float relative_pos = 1;
  if (this->relative_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_relative_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->relative_pos().data(), this->relative_pos_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.CalculateRelativePoseRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculateRelativePoseRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float relative_pos = 1;
  if (this->relative_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _relative_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->relative_pos_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.CalculateRelativePoseRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  return target;
}

size_t CalculateRelativePoseRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float relative_pos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->relative_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relative_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculateRelativePoseRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculateRelativePoseRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculateRelativePoseRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
    MergeFrom(*source);
  }
}

void CalculateRelativePoseRes::MergeFrom(const CalculateRelativePoseRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relative_pos_.MergeFrom(from.relative_pos_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void CalculateRelativePoseRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculateRelativePoseRes::CopyFrom(const CalculateRelativePoseRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.CalculateRelativePoseRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculateRelativePoseRes::IsInitialized() const {
  return true;
}

void CalculateRelativePoseRes::Swap(CalculateRelativePoseRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalculateRelativePoseRes::InternalSwap(CalculateRelativePoseRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  relative_pos_.InternalSwap(&other->relative_pos_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculateRelativePoseRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculateCurrentPoseRelReq::InitAsDefaultInstance() {
}
class CalculateCurrentPoseRelReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalculateCurrentPoseRelReq::kCurrentPosFieldNumber;
const int CalculateCurrentPoseRelReq::kRelativePosFieldNumber;
const int CalculateCurrentPoseRelReq::kBaseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalculateCurrentPoseRelReq::CalculateCurrentPoseRelReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
}
CalculateCurrentPoseRelReq::CalculateCurrentPoseRelReq(const CalculateCurrentPoseRelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      current_pos_(from.current_pos_),
      relative_pos_(from.relative_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_type_ = from.base_type_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
}

void CalculateCurrentPoseRelReq::SharedCtor() {
  base_type_ = 0;
}

CalculateCurrentPoseRelReq::~CalculateCurrentPoseRelReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  SharedDtor();
}

void CalculateCurrentPoseRelReq::SharedDtor() {
}

void CalculateCurrentPoseRelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculateCurrentPoseRelReq& CalculateCurrentPoseRelReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculateCurrentPoseRelReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CalculateCurrentPoseRelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_pos_.Clear();
  relative_pos_.Clear();
  base_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalculateCurrentPoseRelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float current_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_current_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_current_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float relative_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_relative_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_relative_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_base_type(static_cast<::IndyFramework::Protobuf::Shared::TaskBaseType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalculateCurrentPoseRelReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float current_pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_current_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_current_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float relative_pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_relative_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_relative_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_base_type(static_cast< ::IndyFramework::Protobuf::Shared::TaskBaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalculateCurrentPoseRelReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float current_pos = 1;
  if (this->current_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_current_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->current_pos().data(), this->current_pos_size(), output);
  }

  // repeated float relative_pos = 2;
  if (this->relative_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_relative_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->relative_pos().data(), this->relative_pos_size(), output);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->base_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculateCurrentPoseRelReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float current_pos = 1;
  if (this->current_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _current_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->current_pos_, target);
  }

  // repeated float relative_pos = 2;
  if (this->relative_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _relative_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->relative_pos_, target);
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->base_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  return target;
}

size_t CalculateCurrentPoseRelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float current_pos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->current_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _current_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float relative_pos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->relative_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _relative_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .IndyFramework.Protobuf.Shared.TaskBaseType base_type = 3;
  if (this->base_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->base_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculateCurrentPoseRelReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculateCurrentPoseRelReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculateCurrentPoseRelReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
    MergeFrom(*source);
  }
}

void CalculateCurrentPoseRelReq::MergeFrom(const CalculateCurrentPoseRelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_pos_.MergeFrom(from.current_pos_);
  relative_pos_.MergeFrom(from.relative_pos_);
  if (from.base_type() != 0) {
    set_base_type(from.base_type());
  }
}

void CalculateCurrentPoseRelReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculateCurrentPoseRelReq::CopyFrom(const CalculateCurrentPoseRelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculateCurrentPoseRelReq::IsInitialized() const {
  return true;
}

void CalculateCurrentPoseRelReq::Swap(CalculateCurrentPoseRelReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalculateCurrentPoseRelReq::InternalSwap(CalculateCurrentPoseRelReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  current_pos_.InternalSwap(&other->current_pos_);
  relative_pos_.InternalSwap(&other->relative_pos_);
  swap(base_type_, other->base_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculateCurrentPoseRelReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalculateCurrentPoseRelRes::InitAsDefaultInstance() {
}
class CalculateCurrentPoseRelRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CalculateCurrentPoseRelRes::kCalculatedPosFieldNumber;
const int CalculateCurrentPoseRelRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CalculateCurrentPoseRelRes::CalculateCurrentPoseRelRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
}
CalculateCurrentPoseRelRes::CalculateCurrentPoseRelRes(const CalculateCurrentPoseRelRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      calculated_pos_(from.calculated_pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
}

void CalculateCurrentPoseRelRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CalculateCurrentPoseRelRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CalculateCurrentPoseRelRes::~CalculateCurrentPoseRelRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  SharedDtor();
}

void CalculateCurrentPoseRelRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CalculateCurrentPoseRelRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalculateCurrentPoseRelRes& CalculateCurrentPoseRelRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalculateCurrentPoseRelRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void CalculateCurrentPoseRelRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calculated_pos_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CalculateCurrentPoseRelRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float calculated_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_calculated_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_calculated_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CalculateCurrentPoseRelRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float calculated_pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_calculated_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_calculated_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CalculateCurrentPoseRelRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float calculated_pos = 1;
  if (this->calculated_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_calculated_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->calculated_pos().data(), this->calculated_pos_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculateCurrentPoseRelRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float calculated_pos = 1;
  if (this->calculated_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _calculated_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->calculated_pos_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  return target;
}

size_t CalculateCurrentPoseRelRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float calculated_pos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->calculated_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _calculated_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculateCurrentPoseRelRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculateCurrentPoseRelRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculateCurrentPoseRelRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
    MergeFrom(*source);
  }
}

void CalculateCurrentPoseRelRes::MergeFrom(const CalculateCurrentPoseRelRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calculated_pos_.MergeFrom(from.calculated_pos_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void CalculateCurrentPoseRelRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculateCurrentPoseRelRes::CopyFrom(const CalculateCurrentPoseRelRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.CalculateCurrentPoseRelRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculateCurrentPoseRelRes::IsInitialized() const {
  return true;
}

void CalculateCurrentPoseRelRes::Swap(CalculateCurrentPoseRelRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CalculateCurrentPoseRelRes::InternalSwap(CalculateCurrentPoseRelRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  calculated_pos_.InternalSwap(&other->calculated_pos_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculateCurrentPoseRelRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetDIReq::InitAsDefaultInstance() {
}
class SetDIReq::HasBitSetters {
 public:
};

void SetDIReq::clear_di_list() {
  di_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetDIReq::kDiListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetDIReq::SetDIReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetDIReq)
}
SetDIReq::SetDIReq(const SetDIReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      di_list_(from.di_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetDIReq)
}

void SetDIReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetDIReq_control_5fmsgs_2eproto.base);
}

SetDIReq::~SetDIReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetDIReq)
  SharedDtor();
}

void SetDIReq::SharedDtor() {
}

void SetDIReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetDIReq& SetDIReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetDIReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetDIReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetDIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  di_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetDIReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_di_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetDIReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetDIReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_di_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetDIReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetDIReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetDIReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetDIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->di_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->di_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetDIReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDIReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetDIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->di_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->di_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetDIReq)
  return target;
}

size_t SetDIReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetDIReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->di_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->di_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDIReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetDIReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetDIReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetDIReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetDIReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetDIReq)
    MergeFrom(*source);
  }
}

void SetDIReq::MergeFrom(const SetDIReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetDIReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  di_list_.MergeFrom(from.di_list_);
}

void SetDIReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetDIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDIReq::CopyFrom(const SetDIReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetDIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDIReq::IsInitialized() const {
  return true;
}

void SetDIReq::Swap(SetDIReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetDIReq::InternalSwap(SetDIReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&di_list_)->InternalSwap(CastToBase(&other->di_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDIReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetDIRes::InitAsDefaultInstance() {
}
class SetDIRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetDIRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetDIRes::SetDIRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetDIRes)
}
SetDIRes::SetDIRes(const SetDIRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetDIRes)
}

void SetDIRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetDIRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetDIRes::~SetDIRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetDIRes)
  SharedDtor();
}

void SetDIRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetDIRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetDIRes& SetDIRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetDIRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetDIRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetDIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetDIRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetDIRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetDIRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetDIRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetDIRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetDIRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetDIRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetDIRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetDIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetDIRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetDIRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDIRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetDIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetDIRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetDIRes)
  return target;
}

size_t SetDIRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetDIRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDIRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetDIRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetDIRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetDIRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetDIRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetDIRes)
    MergeFrom(*source);
  }
}

void SetDIRes::MergeFrom(const SetDIRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetDIRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetDIRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetDIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDIRes::CopyFrom(const SetDIRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetDIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDIRes::IsInitialized() const {
  return true;
}

void SetDIRes::Swap(SetDIRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetDIRes::InternalSwap(SetDIRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDIRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDIReq::InitAsDefaultInstance() {
}
class GetDIReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDIReq::GetDIReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetDIReq)
}
GetDIReq::GetDIReq(const GetDIReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetDIReq)
}

void GetDIReq::SharedCtor() {
}

GetDIReq::~GetDIReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetDIReq)
  SharedDtor();
}

void GetDIReq::SharedDtor() {
}

void GetDIReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDIReq& GetDIReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDIReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetDIReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetDIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetDIReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetDIReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetDIReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetDIReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetDIReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetDIReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetDIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetDIReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDIReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetDIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetDIReq)
  return target;
}

size_t GetDIReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetDIReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDIReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetDIReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDIReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDIReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetDIReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetDIReq)
    MergeFrom(*source);
  }
}

void GetDIReq::MergeFrom(const GetDIReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetDIReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetDIReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetDIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDIReq::CopyFrom(const GetDIReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetDIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDIReq::IsInitialized() const {
  return true;
}

void GetDIReq::Swap(GetDIReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDIReq::InternalSwap(GetDIReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDIReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDIRes::InitAsDefaultInstance() {
}
class GetDIRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDIRes::kDiFieldNumber;
const int GetDIRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDIRes::GetDIRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetDIRes)
}
GetDIRes::GetDIRes(const GetDIRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      di_(from.di_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetDIRes)
}

void GetDIRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDIRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetDIRes::~GetDIRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetDIRes)
  SharedDtor();
}

void GetDIRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDIRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDIRes& GetDIRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDIRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetDIRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetDIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  di_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetDIRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool di = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_di(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_di(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetDIRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetDIRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetDIRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool di = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_di())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10u, input, this->mutable_di())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetDIRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetDIRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetDIRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetDIRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetDIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool di = 1;
  if (this->di_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_di_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->di().data(), this->di_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetDIRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetDIRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDIRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetDIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool di = 1;
  if (this->di_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _di_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->di_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetDIRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetDIRes)
  return target;
}

size_t GetDIRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetDIRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool di = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->di_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _di_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDIRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetDIRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDIRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDIRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetDIRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetDIRes)
    MergeFrom(*source);
  }
}

void GetDIRes::MergeFrom(const GetDIRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetDIRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  di_.MergeFrom(from.di_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetDIRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetDIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDIRes::CopyFrom(const GetDIRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetDIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDIRes::IsInitialized() const {
  return true;
}

void GetDIRes::Swap(GetDIRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDIRes::InternalSwap(GetDIRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  di_.InternalSwap(&other->di_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDIRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetDOReq::InitAsDefaultInstance() {
}
class SetDOReq::HasBitSetters {
 public:
};

void SetDOReq::clear_do_list() {
  do_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetDOReq::kDoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetDOReq::SetDOReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetDOReq)
}
SetDOReq::SetDOReq(const SetDOReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      do_list_(from.do_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetDOReq)
}

void SetDOReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetDOReq_control_5fmsgs_2eproto.base);
}

SetDOReq::~SetDOReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetDOReq)
  SharedDtor();
}

void SetDOReq::SharedDtor() {
}

void SetDOReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetDOReq& SetDOReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetDOReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetDOReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetDOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  do_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetDOReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetDOReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetDOReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetDOReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetDOReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetDOReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetDOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->do_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetDOReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDOReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetDOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->do_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetDOReq)
  return target;
}

size_t SetDOReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetDOReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->do_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDOReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetDOReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetDOReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetDOReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetDOReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetDOReq)
    MergeFrom(*source);
  }
}

void SetDOReq::MergeFrom(const SetDOReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetDOReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  do_list_.MergeFrom(from.do_list_);
}

void SetDOReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetDOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDOReq::CopyFrom(const SetDOReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetDOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDOReq::IsInitialized() const {
  return true;
}

void SetDOReq::Swap(SetDOReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetDOReq::InternalSwap(SetDOReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&do_list_)->InternalSwap(CastToBase(&other->do_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDOReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetDORes::InitAsDefaultInstance() {
}
class SetDORes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetDORes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetDORes::SetDORes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetDORes)
}
SetDORes::SetDORes(const SetDORes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetDORes)
}

void SetDORes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetDORes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetDORes::~SetDORes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetDORes)
  SharedDtor();
}

void SetDORes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetDORes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetDORes& SetDORes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetDORes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetDORes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetDORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetDORes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetDORes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetDORes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetDORes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetDORes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetDORes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetDORes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetDORes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetDORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetDORes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetDORes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDORes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetDORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetDORes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetDORes)
  return target;
}

size_t SetDORes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetDORes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetDORes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetDORes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetDORes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetDORes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetDORes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetDORes)
    MergeFrom(*source);
  }
}

void SetDORes::MergeFrom(const SetDORes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetDORes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetDORes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetDORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDORes::CopyFrom(const SetDORes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetDORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDORes::IsInitialized() const {
  return true;
}

void SetDORes::Swap(SetDORes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetDORes::InternalSwap(SetDORes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDORes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDOReq::InitAsDefaultInstance() {
}
class GetDOReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDOReq::GetDOReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetDOReq)
}
GetDOReq::GetDOReq(const GetDOReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetDOReq)
}

void GetDOReq::SharedCtor() {
}

GetDOReq::~GetDOReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetDOReq)
  SharedDtor();
}

void GetDOReq::SharedDtor() {
}

void GetDOReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDOReq& GetDOReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDOReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetDOReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetDOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetDOReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetDOReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetDOReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetDOReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetDOReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetDOReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetDOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetDOReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDOReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetDOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetDOReq)
  return target;
}

size_t GetDOReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetDOReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDOReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetDOReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDOReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDOReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetDOReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetDOReq)
    MergeFrom(*source);
  }
}

void GetDOReq::MergeFrom(const GetDOReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetDOReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetDOReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetDOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDOReq::CopyFrom(const GetDOReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetDOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDOReq::IsInitialized() const {
  return true;
}

void GetDOReq::Swap(GetDOReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDOReq::InternalSwap(GetDOReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDOReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDORes::InitAsDefaultInstance() {
}
class GetDORes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDORes::kDoFieldNumber;
const int GetDORes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDORes::GetDORes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetDORes)
}
GetDORes::GetDORes(const GetDORes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      do__(from.do__) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetDORes)
}

void GetDORes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDORes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetDORes::~GetDORes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetDORes)
  SharedDtor();
}

void GetDORes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetDORes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDORes& GetDORes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDORes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetDORes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetDORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  do__.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetDORes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool do = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_do_(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_do_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetDORes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetDORes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetDORes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool do = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_do_())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10u, input, this->mutable_do_())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetDORes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetDORes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetDORes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetDORes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetDORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool do = 1;
  if (this->do__size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_do__cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->do_().data(), this->do__size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetDORes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetDORes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDORes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetDORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool do = 1;
  if (this->do__size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _do__cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->do__, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetDORes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetDORes)
  return target;
}

size_t GetDORes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetDORes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool do = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->do__size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _do__cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDORes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetDORes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDORes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDORes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetDORes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetDORes)
    MergeFrom(*source);
  }
}

void GetDORes::MergeFrom(const GetDORes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetDORes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  do__.MergeFrom(from.do__);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetDORes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetDORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDORes::CopyFrom(const GetDORes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetDORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDORes::IsInitialized() const {
  return true;
}

void GetDORes::Swap(GetDORes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDORes::InternalSwap(GetDORes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  do__.InternalSwap(&other->do__);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDORes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAIReq::InitAsDefaultInstance() {
}
class SetAIReq::HasBitSetters {
 public:
};

void SetAIReq::clear_ai_list() {
  ai_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAIReq::kAiListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAIReq::SetAIReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetAIReq)
}
SetAIReq::SetAIReq(const SetAIReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ai_list_(from.ai_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetAIReq)
}

void SetAIReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAIReq_control_5fmsgs_2eproto.base);
}

SetAIReq::~SetAIReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetAIReq)
  SharedDtor();
}

void SetAIReq::SharedDtor() {
}

void SetAIReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAIReq& SetAIReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAIReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetAIReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetAIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ai_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetAIReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ai_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetAIReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetAIReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ai_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetAIReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetAIReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetAIReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetAIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ai_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->ai_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetAIReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAIReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetAIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ai_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->ai_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetAIReq)
  return target;
}

size_t SetAIReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetAIReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ai_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ai_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAIReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetAIReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAIReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAIReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetAIReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetAIReq)
    MergeFrom(*source);
  }
}

void SetAIReq::MergeFrom(const SetAIReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetAIReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ai_list_.MergeFrom(from.ai_list_);
}

void SetAIReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetAIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAIReq::CopyFrom(const SetAIReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetAIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAIReq::IsInitialized() const {
  return true;
}

void SetAIReq::Swap(SetAIReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAIReq::InternalSwap(SetAIReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ai_list_)->InternalSwap(CastToBase(&other->ai_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAIReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAIRes::InitAsDefaultInstance() {
}
class SetAIRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAIRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAIRes::SetAIRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetAIRes)
}
SetAIRes::SetAIRes(const SetAIRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetAIRes)
}

void SetAIRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAIRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetAIRes::~SetAIRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetAIRes)
  SharedDtor();
}

void SetAIRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAIRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAIRes& SetAIRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAIRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetAIRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetAIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetAIRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetAIRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetAIRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetAIRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetAIRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetAIRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetAIRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetAIRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetAIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetAIRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetAIRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAIRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetAIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetAIRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetAIRes)
  return target;
}

size_t SetAIRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetAIRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAIRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetAIRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAIRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAIRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetAIRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetAIRes)
    MergeFrom(*source);
  }
}

void SetAIRes::MergeFrom(const SetAIRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetAIRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetAIRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetAIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAIRes::CopyFrom(const SetAIRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetAIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAIRes::IsInitialized() const {
  return true;
}

void SetAIRes::Swap(SetAIRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAIRes::InternalSwap(SetAIRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAIRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAIReq::InitAsDefaultInstance() {
}
class GetAIReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAIReq::GetAIReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetAIReq)
}
GetAIReq::GetAIReq(const GetAIReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetAIReq)
}

void GetAIReq::SharedCtor() {
}

GetAIReq::~GetAIReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetAIReq)
  SharedDtor();
}

void GetAIReq::SharedDtor() {
}

void GetAIReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAIReq& GetAIReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAIReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetAIReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetAIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAIReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAIReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetAIReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetAIReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetAIReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAIReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetAIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetAIReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAIReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetAIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetAIReq)
  return target;
}

size_t GetAIReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetAIReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAIReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetAIReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAIReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAIReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetAIReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetAIReq)
    MergeFrom(*source);
  }
}

void GetAIReq::MergeFrom(const GetAIReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetAIReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetAIReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetAIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAIReq::CopyFrom(const GetAIReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetAIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAIReq::IsInitialized() const {
  return true;
}

void GetAIReq::Swap(GetAIReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAIReq::InternalSwap(GetAIReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAIReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAIRes::InitAsDefaultInstance() {
}
class GetAIRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAIRes::kAiFieldNumber;
const int GetAIRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAIRes::GetAIRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetAIRes)
}
GetAIRes::GetAIRes(const GetAIRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ai_(from.ai_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetAIRes)
}

void GetAIRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAIRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAIRes::~GetAIRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetAIRes)
  SharedDtor();
}

void GetAIRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAIRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAIRes& GetAIRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAIRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetAIRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetAIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ai_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAIRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 ai = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_ai(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_ai(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetAIRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAIRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetAIRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ai = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ai())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_ai())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetAIRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetAIRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetAIRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAIRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetAIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ai = 1;
  if (this->ai_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ai_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ai_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->ai(i), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetAIRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetAIRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAIRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetAIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ai = 1;
  if (this->ai_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ai_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ai_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetAIRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetAIRes)
  return target;
}

size_t GetAIRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetAIRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ai = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ai_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ai_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAIRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetAIRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAIRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAIRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetAIRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetAIRes)
    MergeFrom(*source);
  }
}

void GetAIRes::MergeFrom(const GetAIRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetAIRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ai_.MergeFrom(from.ai_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetAIRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetAIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAIRes::CopyFrom(const GetAIRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetAIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAIRes::IsInitialized() const {
  return true;
}

void GetAIRes::Swap(GetAIRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAIRes::InternalSwap(GetAIRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ai_.InternalSwap(&other->ai_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAIRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAOReq::InitAsDefaultInstance() {
}
class GetAOReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAOReq::GetAOReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetAOReq)
}
GetAOReq::GetAOReq(const GetAOReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetAOReq)
}

void GetAOReq::SharedCtor() {
}

GetAOReq::~GetAOReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetAOReq)
  SharedDtor();
}

void GetAOReq::SharedDtor() {
}

void GetAOReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAOReq& GetAOReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAOReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetAOReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetAOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAOReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAOReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetAOReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetAOReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetAOReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAOReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetAOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetAOReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAOReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetAOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetAOReq)
  return target;
}

size_t GetAOReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetAOReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAOReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetAOReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAOReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAOReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetAOReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetAOReq)
    MergeFrom(*source);
  }
}

void GetAOReq::MergeFrom(const GetAOReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetAOReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetAOReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetAOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAOReq::CopyFrom(const GetAOReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetAOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAOReq::IsInitialized() const {
  return true;
}

void GetAOReq::Swap(GetAOReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAOReq::InternalSwap(GetAOReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAOReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAORes::InitAsDefaultInstance() {
}
class GetAORes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAORes::kAoFieldNumber;
const int GetAORes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAORes::GetAORes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetAORes)
}
GetAORes::GetAORes(const GetAORes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ao_(from.ao_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetAORes)
}

void GetAORes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAORes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAORes::~GetAORes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetAORes)
  SharedDtor();
}

void GetAORes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAORes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAORes& GetAORes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAORes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetAORes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetAORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ao_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetAORes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 ao = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_ao(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_ao(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetAORes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetAORes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetAORes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ao = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ao())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_ao())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetAORes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetAORes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetAORes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetAORes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetAORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ao = 1;
  if (this->ao_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ao_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ao_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->ao(i), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetAORes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetAORes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAORes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetAORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ao = 1;
  if (this->ao_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ao_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ao_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetAORes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetAORes)
  return target;
}

size_t GetAORes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetAORes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ao = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ao_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ao_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAORes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetAORes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAORes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAORes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetAORes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetAORes)
    MergeFrom(*source);
  }
}

void GetAORes::MergeFrom(const GetAORes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetAORes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ao_.MergeFrom(from.ao_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetAORes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetAORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAORes::CopyFrom(const GetAORes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetAORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAORes::IsInitialized() const {
  return true;
}

void GetAORes::Swap(GetAORes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAORes::InternalSwap(GetAORes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ao_.InternalSwap(&other->ao_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAORes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAOReq::InitAsDefaultInstance() {
}
class SetAOReq::HasBitSetters {
 public:
};

void SetAOReq::clear_ao_list() {
  ao_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAOReq::kAoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAOReq::SetAOReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetAOReq)
}
SetAOReq::SetAOReq(const SetAOReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ao_list_(from.ao_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetAOReq)
}

void SetAOReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAOReq_control_5fmsgs_2eproto.base);
}

SetAOReq::~SetAOReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetAOReq)
  SharedDtor();
}

void SetAOReq::SharedDtor() {
}

void SetAOReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAOReq& SetAOReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAOReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetAOReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetAOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ao_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetAOReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetAOReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetAOReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetAOReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetAOReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetAOReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetAOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->ao_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetAOReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAOReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetAOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->ao_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetAOReq)
  return target;
}

size_t SetAOReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetAOReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ao_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAOReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetAOReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAOReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAOReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetAOReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetAOReq)
    MergeFrom(*source);
  }
}

void SetAOReq::MergeFrom(const SetAOReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetAOReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ao_list_.MergeFrom(from.ao_list_);
}

void SetAOReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetAOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAOReq::CopyFrom(const SetAOReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetAOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAOReq::IsInitialized() const {
  return true;
}

void SetAOReq::Swap(SetAOReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAOReq::InternalSwap(SetAOReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ao_list_)->InternalSwap(CastToBase(&other->ao_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAOReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAORes::InitAsDefaultInstance() {
}
class SetAORes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetAORes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetAORes::SetAORes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetAORes)
}
SetAORes::SetAORes(const SetAORes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetAORes)
}

void SetAORes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAORes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetAORes::~SetAORes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetAORes)
  SharedDtor();
}

void SetAORes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAORes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAORes& SetAORes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAORes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetAORes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetAORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetAORes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetAORes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetAORes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetAORes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetAORes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetAORes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetAORes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetAORes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetAORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetAORes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetAORes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAORes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetAORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetAORes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetAORes)
  return target;
}

size_t SetAORes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetAORes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAORes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetAORes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAORes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAORes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetAORes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetAORes)
    MergeFrom(*source);
  }
}

void SetAORes::MergeFrom(const SetAORes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetAORes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetAORes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetAORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAORes::CopyFrom(const SetAORes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetAORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAORes::IsInitialized() const {
  return true;
}

void SetAORes::Swap(SetAORes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetAORes::InternalSwap(SetAORes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAORes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEndDIReq::InitAsDefaultInstance() {
}
class GetEndDIReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEndDIReq::GetEndDIReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetEndDIReq)
}
GetEndDIReq::GetEndDIReq(const GetEndDIReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetEndDIReq)
}

void GetEndDIReq::SharedCtor() {
}

GetEndDIReq::~GetEndDIReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetEndDIReq)
  SharedDtor();
}

void GetEndDIReq::SharedDtor() {
}

void GetEndDIReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEndDIReq& GetEndDIReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEndDIReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetEndDIReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetEndDIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetEndDIReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetEndDIReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetEndDIReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetEndDIReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetEndDIReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetEndDIReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetEndDIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetEndDIReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEndDIReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetEndDIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetEndDIReq)
  return target;
}

size_t GetEndDIReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetEndDIReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEndDIReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetEndDIReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEndDIReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEndDIReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetEndDIReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetEndDIReq)
    MergeFrom(*source);
  }
}

void GetEndDIReq::MergeFrom(const GetEndDIReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetEndDIReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetEndDIReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetEndDIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEndDIReq::CopyFrom(const GetEndDIReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetEndDIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEndDIReq::IsInitialized() const {
  return true;
}

void GetEndDIReq::Swap(GetEndDIReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEndDIReq::InternalSwap(GetEndDIReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEndDIReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEndDIRes::InitAsDefaultInstance() {
}
class GetEndDIRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEndDIRes::kDiFieldNumber;
const int GetEndDIRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEndDIRes::GetEndDIRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetEndDIRes)
}
GetEndDIRes::GetEndDIRes(const GetEndDIRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      di_(from.di_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetEndDIRes)
}

void GetEndDIRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetEndDIRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetEndDIRes::~GetEndDIRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetEndDIRes)
  SharedDtor();
}

void GetEndDIRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEndDIRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEndDIRes& GetEndDIRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEndDIRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetEndDIRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetEndDIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  di_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetEndDIRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool di = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_di(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_di(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetEndDIRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetEndDIRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetEndDIRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool di = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_di())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10u, input, this->mutable_di())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetEndDIRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetEndDIRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetEndDIRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetEndDIRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetEndDIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool di = 1;
  if (this->di_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_di_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->di().data(), this->di_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetEndDIRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetEndDIRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEndDIRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetEndDIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool di = 1;
  if (this->di_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _di_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->di_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetEndDIRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetEndDIRes)
  return target;
}

size_t GetEndDIRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetEndDIRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool di = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->di_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _di_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEndDIRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetEndDIRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEndDIRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEndDIRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetEndDIRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetEndDIRes)
    MergeFrom(*source);
  }
}

void GetEndDIRes::MergeFrom(const GetEndDIRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetEndDIRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  di_.MergeFrom(from.di_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetEndDIRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetEndDIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEndDIRes::CopyFrom(const GetEndDIRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetEndDIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEndDIRes::IsInitialized() const {
  return true;
}

void GetEndDIRes::Swap(GetEndDIRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEndDIRes::InternalSwap(GetEndDIRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  di_.InternalSwap(&other->di_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEndDIRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetEndDIReq::InitAsDefaultInstance() {
}
class SetEndDIReq::HasBitSetters {
 public:
};

void SetEndDIReq::clear_di_list() {
  di_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetEndDIReq::kDiListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetEndDIReq::SetEndDIReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetEndDIReq)
}
SetEndDIReq::SetEndDIReq(const SetEndDIReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      di_list_(from.di_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetEndDIReq)
}

void SetEndDIReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetEndDIReq_control_5fmsgs_2eproto.base);
}

SetEndDIReq::~SetEndDIReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetEndDIReq)
  SharedDtor();
}

void SetEndDIReq::SharedDtor() {
}

void SetEndDIReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetEndDIReq& SetEndDIReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetEndDIReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetEndDIReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetEndDIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  di_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetEndDIReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_di_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetEndDIReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetEndDIReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_di_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetEndDIReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetEndDIReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetEndDIReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetEndDIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->di_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->di_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetEndDIReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetEndDIReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetEndDIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->di_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->di_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetEndDIReq)
  return target;
}

size_t SetEndDIReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetEndDIReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal di_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->di_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->di_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEndDIReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetEndDIReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetEndDIReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetEndDIReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetEndDIReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetEndDIReq)
    MergeFrom(*source);
  }
}

void SetEndDIReq::MergeFrom(const SetEndDIReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetEndDIReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  di_list_.MergeFrom(from.di_list_);
}

void SetEndDIReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetEndDIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetEndDIReq::CopyFrom(const SetEndDIReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetEndDIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEndDIReq::IsInitialized() const {
  return true;
}

void SetEndDIReq::Swap(SetEndDIReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetEndDIReq::InternalSwap(SetEndDIReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&di_list_)->InternalSwap(CastToBase(&other->di_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEndDIReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetEndDIRes::InitAsDefaultInstance() {
}
class SetEndDIRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetEndDIRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetEndDIRes::SetEndDIRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetEndDIRes)
}
SetEndDIRes::SetEndDIRes(const SetEndDIRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetEndDIRes)
}

void SetEndDIRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetEndDIRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetEndDIRes::~SetEndDIRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetEndDIRes)
  SharedDtor();
}

void SetEndDIRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetEndDIRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetEndDIRes& SetEndDIRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetEndDIRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetEndDIRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetEndDIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetEndDIRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetEndDIRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetEndDIRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetEndDIRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetEndDIRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetEndDIRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetEndDIRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetEndDIRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetEndDIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetEndDIRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetEndDIRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetEndDIRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetEndDIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetEndDIRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetEndDIRes)
  return target;
}

size_t SetEndDIRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetEndDIRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEndDIRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetEndDIRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetEndDIRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetEndDIRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetEndDIRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetEndDIRes)
    MergeFrom(*source);
  }
}

void SetEndDIRes::MergeFrom(const SetEndDIRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetEndDIRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetEndDIRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetEndDIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetEndDIRes::CopyFrom(const SetEndDIRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetEndDIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEndDIRes::IsInitialized() const {
  return true;
}

void SetEndDIRes::Swap(SetEndDIRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetEndDIRes::InternalSwap(SetEndDIRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEndDIRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEndDOReq::InitAsDefaultInstance() {
}
class GetEndDOReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEndDOReq::GetEndDOReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetEndDOReq)
}
GetEndDOReq::GetEndDOReq(const GetEndDOReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetEndDOReq)
}

void GetEndDOReq::SharedCtor() {
}

GetEndDOReq::~GetEndDOReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetEndDOReq)
  SharedDtor();
}

void GetEndDOReq::SharedDtor() {
}

void GetEndDOReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEndDOReq& GetEndDOReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEndDOReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetEndDOReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetEndDOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetEndDOReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetEndDOReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetEndDOReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetEndDOReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetEndDOReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetEndDOReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetEndDOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetEndDOReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEndDOReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetEndDOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetEndDOReq)
  return target;
}

size_t GetEndDOReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetEndDOReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEndDOReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetEndDOReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEndDOReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEndDOReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetEndDOReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetEndDOReq)
    MergeFrom(*source);
  }
}

void GetEndDOReq::MergeFrom(const GetEndDOReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetEndDOReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetEndDOReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetEndDOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEndDOReq::CopyFrom(const GetEndDOReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetEndDOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEndDOReq::IsInitialized() const {
  return true;
}

void GetEndDOReq::Swap(GetEndDOReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEndDOReq::InternalSwap(GetEndDOReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEndDOReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEndDORes::InitAsDefaultInstance() {
}
class GetEndDORes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEndDORes::kDoFieldNumber;
const int GetEndDORes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEndDORes::GetEndDORes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetEndDORes)
}
GetEndDORes::GetEndDORes(const GetEndDORes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      do__(from.do__) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetEndDORes)
}

void GetEndDORes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetEndDORes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetEndDORes::~GetEndDORes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetEndDORes)
  SharedDtor();
}

void GetEndDORes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEndDORes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEndDORes& GetEndDORes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEndDORes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetEndDORes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetEndDORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  do__.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetEndDORes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool do = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_do_(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_do_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetEndDORes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetEndDORes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetEndDORes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool do = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_do_())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10u, input, this->mutable_do_())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetEndDORes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetEndDORes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetEndDORes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetEndDORes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetEndDORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool do = 1;
  if (this->do__size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_do__cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->do_().data(), this->do__size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetEndDORes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetEndDORes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEndDORes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetEndDORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool do = 1;
  if (this->do__size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _do__cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->do__, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetEndDORes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetEndDORes)
  return target;
}

size_t GetEndDORes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetEndDORes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool do = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->do__size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _do__cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEndDORes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetEndDORes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEndDORes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEndDORes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetEndDORes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetEndDORes)
    MergeFrom(*source);
  }
}

void GetEndDORes::MergeFrom(const GetEndDORes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetEndDORes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  do__.MergeFrom(from.do__);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetEndDORes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetEndDORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEndDORes::CopyFrom(const GetEndDORes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetEndDORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEndDORes::IsInitialized() const {
  return true;
}

void GetEndDORes::Swap(GetEndDORes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEndDORes::InternalSwap(GetEndDORes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  do__.InternalSwap(&other->do__);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEndDORes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetEndDOReq::InitAsDefaultInstance() {
}
class SetEndDOReq::HasBitSetters {
 public:
};

void SetEndDOReq::clear_do_list() {
  do_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetEndDOReq::kDoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetEndDOReq::SetEndDOReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetEndDOReq)
}
SetEndDOReq::SetEndDOReq(const SetEndDOReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      do_list_(from.do_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetEndDOReq)
}

void SetEndDOReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetEndDOReq_control_5fmsgs_2eproto.base);
}

SetEndDOReq::~SetEndDOReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetEndDOReq)
  SharedDtor();
}

void SetEndDOReq::SharedDtor() {
}

void SetEndDOReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetEndDOReq& SetEndDOReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetEndDOReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetEndDOReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetEndDOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  do_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetEndDOReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetEndDOReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetEndDOReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetEndDOReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetEndDOReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetEndDOReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetEndDOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->do_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetEndDOReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetEndDOReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetEndDOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->do_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetEndDOReq)
  return target;
}

size_t SetEndDOReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetEndDOReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->do_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEndDOReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetEndDOReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetEndDOReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetEndDOReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetEndDOReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetEndDOReq)
    MergeFrom(*source);
  }
}

void SetEndDOReq::MergeFrom(const SetEndDOReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetEndDOReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  do_list_.MergeFrom(from.do_list_);
}

void SetEndDOReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetEndDOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetEndDOReq::CopyFrom(const SetEndDOReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetEndDOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEndDOReq::IsInitialized() const {
  return true;
}

void SetEndDOReq::Swap(SetEndDOReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetEndDOReq::InternalSwap(SetEndDOReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&do_list_)->InternalSwap(CastToBase(&other->do_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEndDOReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetEndDORes::InitAsDefaultInstance() {
}
class SetEndDORes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetEndDORes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetEndDORes::SetEndDORes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetEndDORes)
}
SetEndDORes::SetEndDORes(const SetEndDORes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetEndDORes)
}

void SetEndDORes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetEndDORes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetEndDORes::~SetEndDORes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetEndDORes)
  SharedDtor();
}

void SetEndDORes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetEndDORes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetEndDORes& SetEndDORes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetEndDORes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetEndDORes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetEndDORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetEndDORes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetEndDORes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetEndDORes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetEndDORes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetEndDORes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetEndDORes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetEndDORes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetEndDORes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetEndDORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetEndDORes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetEndDORes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetEndDORes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetEndDORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetEndDORes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetEndDORes)
  return target;
}

size_t SetEndDORes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetEndDORes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEndDORes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetEndDORes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetEndDORes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetEndDORes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetEndDORes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetEndDORes)
    MergeFrom(*source);
  }
}

void SetEndDORes::MergeFrom(const SetEndDORes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetEndDORes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetEndDORes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetEndDORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetEndDORes::CopyFrom(const SetEndDORes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetEndDORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEndDORes::IsInitialized() const {
  return true;
}

void SetEndDORes::Swap(SetEndDORes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetEndDORes::InternalSwap(SetEndDORes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEndDORes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetEndAIReq::InitAsDefaultInstance() {
}
class SetEndAIReq::HasBitSetters {
 public:
};

void SetEndAIReq::clear_ai_list() {
  ai_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetEndAIReq::kAiListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetEndAIReq::SetEndAIReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetEndAIReq)
}
SetEndAIReq::SetEndAIReq(const SetEndAIReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ai_list_(from.ai_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetEndAIReq)
}

void SetEndAIReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetEndAIReq_control_5fmsgs_2eproto.base);
}

SetEndAIReq::~SetEndAIReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetEndAIReq)
  SharedDtor();
}

void SetEndAIReq::SharedDtor() {
}

void SetEndAIReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetEndAIReq& SetEndAIReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetEndAIReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetEndAIReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetEndAIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ai_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetEndAIReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ai_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetEndAIReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetEndAIReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ai_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetEndAIReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetEndAIReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetEndAIReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetEndAIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ai_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->ai_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetEndAIReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetEndAIReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetEndAIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ai_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->ai_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetEndAIReq)
  return target;
}

size_t SetEndAIReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetEndAIReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ai_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ai_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ai_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEndAIReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetEndAIReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetEndAIReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetEndAIReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetEndAIReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetEndAIReq)
    MergeFrom(*source);
  }
}

void SetEndAIReq::MergeFrom(const SetEndAIReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetEndAIReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ai_list_.MergeFrom(from.ai_list_);
}

void SetEndAIReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetEndAIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetEndAIReq::CopyFrom(const SetEndAIReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetEndAIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEndAIReq::IsInitialized() const {
  return true;
}

void SetEndAIReq::Swap(SetEndAIReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetEndAIReq::InternalSwap(SetEndAIReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ai_list_)->InternalSwap(CastToBase(&other->ai_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEndAIReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetEndAIRes::InitAsDefaultInstance() {
}
class SetEndAIRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetEndAIRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetEndAIRes::SetEndAIRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetEndAIRes)
}
SetEndAIRes::SetEndAIRes(const SetEndAIRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetEndAIRes)
}

void SetEndAIRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetEndAIRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetEndAIRes::~SetEndAIRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetEndAIRes)
  SharedDtor();
}

void SetEndAIRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetEndAIRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetEndAIRes& SetEndAIRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetEndAIRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetEndAIRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetEndAIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetEndAIRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetEndAIRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetEndAIRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetEndAIRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetEndAIRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetEndAIRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetEndAIRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetEndAIRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetEndAIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetEndAIRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetEndAIRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetEndAIRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetEndAIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetEndAIRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetEndAIRes)
  return target;
}

size_t SetEndAIRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetEndAIRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEndAIRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetEndAIRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetEndAIRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetEndAIRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetEndAIRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetEndAIRes)
    MergeFrom(*source);
  }
}

void SetEndAIRes::MergeFrom(const SetEndAIRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetEndAIRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetEndAIRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetEndAIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetEndAIRes::CopyFrom(const SetEndAIRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetEndAIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEndAIRes::IsInitialized() const {
  return true;
}

void SetEndAIRes::Swap(SetEndAIRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetEndAIRes::InternalSwap(SetEndAIRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEndAIRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEndAIReq::InitAsDefaultInstance() {
}
class GetEndAIReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEndAIReq::GetEndAIReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetEndAIReq)
}
GetEndAIReq::GetEndAIReq(const GetEndAIReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetEndAIReq)
}

void GetEndAIReq::SharedCtor() {
}

GetEndAIReq::~GetEndAIReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetEndAIReq)
  SharedDtor();
}

void GetEndAIReq::SharedDtor() {
}

void GetEndAIReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEndAIReq& GetEndAIReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEndAIReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetEndAIReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetEndAIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetEndAIReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetEndAIReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetEndAIReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetEndAIReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetEndAIReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetEndAIReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetEndAIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetEndAIReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEndAIReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetEndAIReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetEndAIReq)
  return target;
}

size_t GetEndAIReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetEndAIReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEndAIReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetEndAIReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEndAIReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEndAIReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetEndAIReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetEndAIReq)
    MergeFrom(*source);
  }
}

void GetEndAIReq::MergeFrom(const GetEndAIReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetEndAIReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetEndAIReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetEndAIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEndAIReq::CopyFrom(const GetEndAIReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetEndAIReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEndAIReq::IsInitialized() const {
  return true;
}

void GetEndAIReq::Swap(GetEndAIReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEndAIReq::InternalSwap(GetEndAIReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEndAIReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEndAIRes::InitAsDefaultInstance() {
}
class GetEndAIRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEndAIRes::kAiFieldNumber;
const int GetEndAIRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEndAIRes::GetEndAIRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetEndAIRes)
}
GetEndAIRes::GetEndAIRes(const GetEndAIRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ai_(from.ai_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetEndAIRes)
}

void GetEndAIRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetEndAIRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetEndAIRes::~GetEndAIRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetEndAIRes)
  SharedDtor();
}

void GetEndAIRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEndAIRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEndAIRes& GetEndAIRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEndAIRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetEndAIRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetEndAIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ai_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetEndAIRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 ai = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_ai(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_ai(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetEndAIRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetEndAIRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetEndAIRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ai = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ai())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_ai())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetEndAIRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetEndAIRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetEndAIRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetEndAIRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetEndAIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ai = 1;
  if (this->ai_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ai_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ai_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->ai(i), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetEndAIRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetEndAIRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEndAIRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetEndAIRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ai = 1;
  if (this->ai_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ai_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ai_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetEndAIRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetEndAIRes)
  return target;
}

size_t GetEndAIRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetEndAIRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ai = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ai_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ai_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEndAIRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetEndAIRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEndAIRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEndAIRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetEndAIRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetEndAIRes)
    MergeFrom(*source);
  }
}

void GetEndAIRes::MergeFrom(const GetEndAIRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetEndAIRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ai_.MergeFrom(from.ai_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetEndAIRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetEndAIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEndAIRes::CopyFrom(const GetEndAIRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetEndAIRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEndAIRes::IsInitialized() const {
  return true;
}

void GetEndAIRes::Swap(GetEndAIRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEndAIRes::InternalSwap(GetEndAIRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ai_.InternalSwap(&other->ai_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEndAIRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEndAOReq::InitAsDefaultInstance() {
}
class GetEndAOReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEndAOReq::GetEndAOReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetEndAOReq)
}
GetEndAOReq::GetEndAOReq(const GetEndAOReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetEndAOReq)
}

void GetEndAOReq::SharedCtor() {
}

GetEndAOReq::~GetEndAOReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetEndAOReq)
  SharedDtor();
}

void GetEndAOReq::SharedDtor() {
}

void GetEndAOReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEndAOReq& GetEndAOReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEndAOReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetEndAOReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetEndAOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetEndAOReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetEndAOReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetEndAOReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetEndAOReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetEndAOReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetEndAOReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetEndAOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetEndAOReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEndAOReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetEndAOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetEndAOReq)
  return target;
}

size_t GetEndAOReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetEndAOReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEndAOReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetEndAOReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEndAOReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEndAOReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetEndAOReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetEndAOReq)
    MergeFrom(*source);
  }
}

void GetEndAOReq::MergeFrom(const GetEndAOReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetEndAOReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetEndAOReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetEndAOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEndAOReq::CopyFrom(const GetEndAOReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetEndAOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEndAOReq::IsInitialized() const {
  return true;
}

void GetEndAOReq::Swap(GetEndAOReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEndAOReq::InternalSwap(GetEndAOReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEndAOReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEndAORes::InitAsDefaultInstance() {
}
class GetEndAORes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEndAORes::kAoFieldNumber;
const int GetEndAORes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEndAORes::GetEndAORes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetEndAORes)
}
GetEndAORes::GetEndAORes(const GetEndAORes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ao_(from.ao_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetEndAORes)
}

void GetEndAORes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetEndAORes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetEndAORes::~GetEndAORes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetEndAORes)
  SharedDtor();
}

void GetEndAORes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEndAORes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEndAORes& GetEndAORes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEndAORes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetEndAORes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetEndAORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ao_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetEndAORes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 ao = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_ao(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_ao(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetEndAORes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetEndAORes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetEndAORes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ao = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ao())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_ao())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetEndAORes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetEndAORes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetEndAORes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetEndAORes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetEndAORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ao = 1;
  if (this->ao_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ao_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ao_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->ao(i), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetEndAORes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetEndAORes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEndAORes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetEndAORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 ao = 1;
  if (this->ao_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ao_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ao_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetEndAORes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetEndAORes)
  return target;
}

size_t GetEndAORes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetEndAORes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ao = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ao_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ao_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEndAORes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetEndAORes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEndAORes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEndAORes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetEndAORes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetEndAORes)
    MergeFrom(*source);
  }
}

void GetEndAORes::MergeFrom(const GetEndAORes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetEndAORes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ao_.MergeFrom(from.ao_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetEndAORes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetEndAORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEndAORes::CopyFrom(const GetEndAORes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetEndAORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEndAORes::IsInitialized() const {
  return true;
}

void GetEndAORes::Swap(GetEndAORes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEndAORes::InternalSwap(GetEndAORes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ao_.InternalSwap(&other->ao_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEndAORes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetEndAOReq::InitAsDefaultInstance() {
}
class SetEndAOReq::HasBitSetters {
 public:
};

void SetEndAOReq::clear_ao_list() {
  ao_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetEndAOReq::kAoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetEndAOReq::SetEndAOReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetEndAOReq)
}
SetEndAOReq::SetEndAOReq(const SetEndAOReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ao_list_(from.ao_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetEndAOReq)
}

void SetEndAOReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetEndAOReq_control_5fmsgs_2eproto.base);
}

SetEndAOReq::~SetEndAOReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetEndAOReq)
  SharedDtor();
}

void SetEndAOReq::SharedDtor() {
}

void SetEndAOReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetEndAOReq& SetEndAOReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetEndAOReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetEndAOReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetEndAOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ao_list_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetEndAOReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ao_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetEndAOReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetEndAOReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ao_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetEndAOReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetEndAOReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetEndAOReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetEndAOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ao_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->ao_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetEndAOReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetEndAOReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetEndAOReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ao_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->ao_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetEndAOReq)
  return target;
}

size_t SetEndAOReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetEndAOReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.AnalogSignal ao_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ao_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ao_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEndAOReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetEndAOReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetEndAOReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetEndAOReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetEndAOReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetEndAOReq)
    MergeFrom(*source);
  }
}

void SetEndAOReq::MergeFrom(const SetEndAOReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetEndAOReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ao_list_.MergeFrom(from.ao_list_);
}

void SetEndAOReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetEndAOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetEndAOReq::CopyFrom(const SetEndAOReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetEndAOReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEndAOReq::IsInitialized() const {
  return true;
}

void SetEndAOReq::Swap(SetEndAOReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetEndAOReq::InternalSwap(SetEndAOReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ao_list_)->InternalSwap(CastToBase(&other->ao_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEndAOReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetEndAORes::InitAsDefaultInstance() {
}
class SetEndAORes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetEndAORes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetEndAORes::SetEndAORes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetEndAORes)
}
SetEndAORes::SetEndAORes(const SetEndAORes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetEndAORes)
}

void SetEndAORes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetEndAORes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetEndAORes::~SetEndAORes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetEndAORes)
  SharedDtor();
}

void SetEndAORes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetEndAORes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetEndAORes& SetEndAORes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetEndAORes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetEndAORes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetEndAORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetEndAORes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetEndAORes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetEndAORes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetEndAORes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetEndAORes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetEndAORes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetEndAORes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetEndAORes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetEndAORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetEndAORes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetEndAORes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetEndAORes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetEndAORes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetEndAORes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetEndAORes)
  return target;
}

size_t SetEndAORes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetEndAORes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEndAORes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetEndAORes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetEndAORes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetEndAORes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetEndAORes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetEndAORes)
    MergeFrom(*source);
  }
}

void SetEndAORes::MergeFrom(const SetEndAORes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetEndAORes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetEndAORes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetEndAORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetEndAORes::CopyFrom(const SetEndAORes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetEndAORes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEndAORes::IsInitialized() const {
  return true;
}

void SetEndAORes::Swap(SetEndAORes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetEndAORes::InternalSwap(SetEndAORes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetEndAORes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetJointControlGainReq::InitAsDefaultInstance() {
}
class SetJointControlGainReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetJointControlGainReq::kKpFieldNumber;
const int SetJointControlGainReq::kKvFieldNumber;
const int SetJointControlGainReq::kKl2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetJointControlGainReq::SetJointControlGainReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetJointControlGainReq)
}
SetJointControlGainReq::SetJointControlGainReq(const SetJointControlGainReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      kp_(from.kp_),
      kv_(from.kv_),
      kl2_(from.kl2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetJointControlGainReq)
}

void SetJointControlGainReq::SharedCtor() {
}

SetJointControlGainReq::~SetJointControlGainReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  SharedDtor();
}

void SetJointControlGainReq::SharedDtor() {
}

void SetJointControlGainReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetJointControlGainReq& SetJointControlGainReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetJointControlGainReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetJointControlGainReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kp_.Clear();
  kv_.Clear();
  kl2_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetJointControlGainReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float kp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_kp(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kv(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_kv(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float kl2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kl2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_kl2(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetJointControlGainReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float kp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kp())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_kp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kv = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kv())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_kv())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kl2 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kl2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_kl2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetJointControlGainReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float kp = 1;
  if (this->kp_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kp_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kp().data(), this->kp_size(), output);
  }

  // repeated float kv = 2;
  if (this->kv_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kv_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kv().data(), this->kv_size(), output);
  }

  // repeated float kl2 = 3;
  if (this->kl2_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kl2_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kl2().data(), this->kl2_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetJointControlGainReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetJointControlGainReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float kp = 1;
  if (this->kp_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kp_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kp_, target);
  }

  // repeated float kv = 2;
  if (this->kv_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kv_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kv_, target);
  }

  // repeated float kl2 = 3;
  if (this->kl2_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kl2_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kl2_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  return target;
}

size_t SetJointControlGainReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float kp = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->kp_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float kv = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->kv_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kv_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float kl2 = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->kl2_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kl2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetJointControlGainReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetJointControlGainReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetJointControlGainReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetJointControlGainReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetJointControlGainReq)
    MergeFrom(*source);
  }
}

void SetJointControlGainReq::MergeFrom(const SetJointControlGainReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kp_.MergeFrom(from.kp_);
  kv_.MergeFrom(from.kv_);
  kl2_.MergeFrom(from.kl2_);
}

void SetJointControlGainReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetJointControlGainReq::CopyFrom(const SetJointControlGainReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetJointControlGainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetJointControlGainReq::IsInitialized() const {
  return true;
}

void SetJointControlGainReq::Swap(SetJointControlGainReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetJointControlGainReq::InternalSwap(SetJointControlGainReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kp_.InternalSwap(&other->kp_);
  kv_.InternalSwap(&other->kv_);
  kl2_.InternalSwap(&other->kl2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetJointControlGainReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetJointControlGainRes::InitAsDefaultInstance() {
}
class SetJointControlGainRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetJointControlGainRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetJointControlGainRes::SetJointControlGainRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetJointControlGainRes)
}
SetJointControlGainRes::SetJointControlGainRes(const SetJointControlGainRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetJointControlGainRes)
}

void SetJointControlGainRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetJointControlGainRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetJointControlGainRes::~SetJointControlGainRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  SharedDtor();
}

void SetJointControlGainRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetJointControlGainRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetJointControlGainRes& SetJointControlGainRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetJointControlGainRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetJointControlGainRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetJointControlGainRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetJointControlGainRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetJointControlGainRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetJointControlGainRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetJointControlGainRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetJointControlGainRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetJointControlGainRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetJointControlGainRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetJointControlGainRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  return target;
}

size_t SetJointControlGainRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetJointControlGainRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetJointControlGainRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetJointControlGainRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetJointControlGainRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetJointControlGainRes)
    MergeFrom(*source);
  }
}

void SetJointControlGainRes::MergeFrom(const SetJointControlGainRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetJointControlGainRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetJointControlGainRes::CopyFrom(const SetJointControlGainRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetJointControlGainRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetJointControlGainRes::IsInitialized() const {
  return true;
}

void SetJointControlGainRes::Swap(SetJointControlGainRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetJointControlGainRes::InternalSwap(SetJointControlGainRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetJointControlGainRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetJointControlGainReq::InitAsDefaultInstance() {
}
class GetJointControlGainReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetJointControlGainReq::GetJointControlGainReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetJointControlGainReq)
}
GetJointControlGainReq::GetJointControlGainReq(const GetJointControlGainReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetJointControlGainReq)
}

void GetJointControlGainReq::SharedCtor() {
}

GetJointControlGainReq::~GetJointControlGainReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  SharedDtor();
}

void GetJointControlGainReq::SharedDtor() {
}

void GetJointControlGainReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetJointControlGainReq& GetJointControlGainReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetJointControlGainReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetJointControlGainReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetJointControlGainReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetJointControlGainReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetJointControlGainReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetJointControlGainReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetJointControlGainReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  return target;
}

size_t GetJointControlGainReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetJointControlGainReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetJointControlGainReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetJointControlGainReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetJointControlGainReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetJointControlGainReq)
    MergeFrom(*source);
  }
}

void GetJointControlGainReq::MergeFrom(const GetJointControlGainReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetJointControlGainReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetJointControlGainReq::CopyFrom(const GetJointControlGainReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetJointControlGainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJointControlGainReq::IsInitialized() const {
  return true;
}

void GetJointControlGainReq::Swap(GetJointControlGainReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetJointControlGainReq::InternalSwap(GetJointControlGainReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetJointControlGainReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetJointControlGainRes::InitAsDefaultInstance() {
}
class GetJointControlGainRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetJointControlGainRes::kKpFieldNumber;
const int GetJointControlGainRes::kKvFieldNumber;
const int GetJointControlGainRes::kKl2FieldNumber;
const int GetJointControlGainRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetJointControlGainRes::GetJointControlGainRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetJointControlGainRes)
}
GetJointControlGainRes::GetJointControlGainRes(const GetJointControlGainRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      kp_(from.kp_),
      kv_(from.kv_),
      kl2_(from.kl2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetJointControlGainRes)
}

void GetJointControlGainRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetJointControlGainRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetJointControlGainRes::~GetJointControlGainRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  SharedDtor();
}

void GetJointControlGainRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetJointControlGainRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetJointControlGainRes& GetJointControlGainRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetJointControlGainRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetJointControlGainRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kp_.Clear();
  kv_.Clear();
  kl2_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetJointControlGainRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float kp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_kp(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kv(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_kv(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float kl2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kl2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_kl2(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetJointControlGainRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetJointControlGainRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float kp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kp())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_kp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kv = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kv())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_kv())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kl2 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kl2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_kl2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetJointControlGainRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetJointControlGainRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float kp = 1;
  if (this->kp_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kp_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kp().data(), this->kp_size(), output);
  }

  // repeated float kv = 2;
  if (this->kv_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kv_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kv().data(), this->kv_size(), output);
  }

  // repeated float kl2 = 3;
  if (this->kl2_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kl2_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kl2().data(), this->kl2_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetJointControlGainRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetJointControlGainRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetJointControlGainRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float kp = 1;
  if (this->kp_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kp_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kp_, target);
  }

  // repeated float kv = 2;
  if (this->kv_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kv_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kv_, target);
  }

  // repeated float kl2 = 3;
  if (this->kl2_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kl2_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kl2_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetJointControlGainRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  return target;
}

size_t GetJointControlGainRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float kp = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->kp_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float kv = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->kv_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kv_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float kl2 = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->kl2_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kl2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetJointControlGainRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetJointControlGainRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetJointControlGainRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetJointControlGainRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetJointControlGainRes)
    MergeFrom(*source);
  }
}

void GetJointControlGainRes::MergeFrom(const GetJointControlGainRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kp_.MergeFrom(from.kp_);
  kv_.MergeFrom(from.kv_);
  kl2_.MergeFrom(from.kl2_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetJointControlGainRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetJointControlGainRes::CopyFrom(const GetJointControlGainRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetJointControlGainRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJointControlGainRes::IsInitialized() const {
  return true;
}

void GetJointControlGainRes::Swap(GetJointControlGainRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetJointControlGainRes::InternalSwap(GetJointControlGainRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kp_.InternalSwap(&other->kp_);
  kv_.InternalSwap(&other->kv_);
  kl2_.InternalSwap(&other->kl2_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetJointControlGainRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetTaskControlGainReq::InitAsDefaultInstance() {
}
class SetTaskControlGainReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetTaskControlGainReq::kKpFieldNumber;
const int SetTaskControlGainReq::kKvFieldNumber;
const int SetTaskControlGainReq::kKl2FieldNumber;
const int SetTaskControlGainReq::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTaskControlGainReq::SetTaskControlGainReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
}
SetTaskControlGainReq::SetTaskControlGainReq(const SetTaskControlGainReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      kp_(from.kp_),
      kv_(from.kv_),
      kl2_(from.kl2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
}

void SetTaskControlGainReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetTaskControlGainReq_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetTaskControlGainReq::~SetTaskControlGainReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  SharedDtor();
}

void SetTaskControlGainReq::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetTaskControlGainReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetTaskControlGainReq& SetTaskControlGainReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetTaskControlGainReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetTaskControlGainReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kp_.Clear();
  kv_.Clear();
  kl2_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetTaskControlGainReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float kp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_kp(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kv(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_kv(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float kl2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kl2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_kl2(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetTaskControlGainReq.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetTaskControlGainReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float kp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kp())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_kp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kv = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kv())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_kv())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kl2 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kl2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_kl2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetTaskControlGainReq.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetTaskControlGainReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float kp = 1;
  if (this->kp_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kp_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kp().data(), this->kp_size(), output);
  }

  // repeated float kv = 2;
  if (this->kv_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kv_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kv().data(), this->kv_size(), output);
  }

  // repeated float kl2 = 3;
  if (this->kl2_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kl2_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kl2().data(), this->kl2_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetTaskControlGainReq.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTaskControlGainReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float kp = 1;
  if (this->kp_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kp_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kp_, target);
  }

  // repeated float kv = 2;
  if (this->kv_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kv_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kv_, target);
  }

  // repeated float kl2 = 3;
  if (this->kl2_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kl2_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kl2_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetTaskControlGainReq.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  return target;
}

size_t SetTaskControlGainReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float kp = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->kp_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float kv = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->kv_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kv_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float kl2 = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->kl2_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kl2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTaskControlGainReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTaskControlGainReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTaskControlGainReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
    MergeFrom(*source);
  }
}

void SetTaskControlGainReq::MergeFrom(const SetTaskControlGainReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kp_.MergeFrom(from.kp_);
  kv_.MergeFrom(from.kv_);
  kl2_.MergeFrom(from.kl2_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetTaskControlGainReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTaskControlGainReq::CopyFrom(const SetTaskControlGainReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetTaskControlGainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTaskControlGainReq::IsInitialized() const {
  return true;
}

void SetTaskControlGainReq::Swap(SetTaskControlGainReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTaskControlGainReq::InternalSwap(SetTaskControlGainReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kp_.InternalSwap(&other->kp_);
  kv_.InternalSwap(&other->kv_);
  kl2_.InternalSwap(&other->kl2_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTaskControlGainReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetTaskControlGainRes::InitAsDefaultInstance() {
}
class SetTaskControlGainRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetTaskControlGainRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetTaskControlGainRes::SetTaskControlGainRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
}
SetTaskControlGainRes::SetTaskControlGainRes(const SetTaskControlGainRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
}

void SetTaskControlGainRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetTaskControlGainRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetTaskControlGainRes::~SetTaskControlGainRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  SharedDtor();
}

void SetTaskControlGainRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetTaskControlGainRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetTaskControlGainRes& SetTaskControlGainRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetTaskControlGainRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetTaskControlGainRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetTaskControlGainRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetTaskControlGainRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetTaskControlGainRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetTaskControlGainRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetTaskControlGainRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetTaskControlGainRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTaskControlGainRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetTaskControlGainRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  return target;
}

size_t SetTaskControlGainRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTaskControlGainRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTaskControlGainRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTaskControlGainRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
    MergeFrom(*source);
  }
}

void SetTaskControlGainRes::MergeFrom(const SetTaskControlGainRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetTaskControlGainRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTaskControlGainRes::CopyFrom(const SetTaskControlGainRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetTaskControlGainRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTaskControlGainRes::IsInitialized() const {
  return true;
}

void SetTaskControlGainRes::Swap(SetTaskControlGainRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetTaskControlGainRes::InternalSwap(SetTaskControlGainRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTaskControlGainRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTaskControlGainReq::InitAsDefaultInstance() {
}
class GetTaskControlGainReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTaskControlGainReq::GetTaskControlGainReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
}
GetTaskControlGainReq::GetTaskControlGainReq(const GetTaskControlGainReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
}

void GetTaskControlGainReq::SharedCtor() {
}

GetTaskControlGainReq::~GetTaskControlGainReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  SharedDtor();
}

void GetTaskControlGainReq::SharedDtor() {
}

void GetTaskControlGainReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTaskControlGainReq& GetTaskControlGainReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTaskControlGainReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetTaskControlGainReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTaskControlGainReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTaskControlGainReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetTaskControlGainReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTaskControlGainReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  return target;
}

size_t GetTaskControlGainReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTaskControlGainReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTaskControlGainReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTaskControlGainReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
    MergeFrom(*source);
  }
}

void GetTaskControlGainReq::MergeFrom(const GetTaskControlGainReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetTaskControlGainReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTaskControlGainReq::CopyFrom(const GetTaskControlGainReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetTaskControlGainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskControlGainReq::IsInitialized() const {
  return true;
}

void GetTaskControlGainReq::Swap(GetTaskControlGainReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTaskControlGainReq::InternalSwap(GetTaskControlGainReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTaskControlGainReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTaskControlGainRes::InitAsDefaultInstance() {
}
class GetTaskControlGainRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTaskControlGainRes::kKpFieldNumber;
const int GetTaskControlGainRes::kKvFieldNumber;
const int GetTaskControlGainRes::kKl2FieldNumber;
const int GetTaskControlGainRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTaskControlGainRes::GetTaskControlGainRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
}
GetTaskControlGainRes::GetTaskControlGainRes(const GetTaskControlGainRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      kp_(from.kp_),
      kv_(from.kv_),
      kl2_(from.kl2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
}

void GetTaskControlGainRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTaskControlGainRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetTaskControlGainRes::~GetTaskControlGainRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  SharedDtor();
}

void GetTaskControlGainRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTaskControlGainRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTaskControlGainRes& GetTaskControlGainRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTaskControlGainRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetTaskControlGainRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kp_.Clear();
  kv_.Clear();
  kl2_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetTaskControlGainRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float kp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_kp(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kv(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_kv(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float kl2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kl2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_kl2(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetTaskControlGainRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetTaskControlGainRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float kp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kp())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_kp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kv = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kv())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_kv())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kl2 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kl2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_kl2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetTaskControlGainRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetTaskControlGainRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float kp = 1;
  if (this->kp_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kp_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kp().data(), this->kp_size(), output);
  }

  // repeated float kv = 2;
  if (this->kv_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kv_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kv().data(), this->kv_size(), output);
  }

  // repeated float kl2 = 3;
  if (this->kl2_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kl2_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kl2().data(), this->kl2_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetTaskControlGainRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTaskControlGainRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float kp = 1;
  if (this->kp_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kp_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kp_, target);
  }

  // repeated float kv = 2;
  if (this->kv_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kv_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kv_, target);
  }

  // repeated float kl2 = 3;
  if (this->kl2_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kl2_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kl2_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetTaskControlGainRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  return target;
}

size_t GetTaskControlGainRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float kp = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->kp_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float kv = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->kv_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kv_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float kl2 = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->kl2_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kl2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTaskControlGainRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTaskControlGainRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTaskControlGainRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
    MergeFrom(*source);
  }
}

void GetTaskControlGainRes::MergeFrom(const GetTaskControlGainRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kp_.MergeFrom(from.kp_);
  kv_.MergeFrom(from.kv_);
  kl2_.MergeFrom(from.kl2_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetTaskControlGainRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTaskControlGainRes::CopyFrom(const GetTaskControlGainRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetTaskControlGainRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskControlGainRes::IsInitialized() const {
  return true;
}

void GetTaskControlGainRes::Swap(GetTaskControlGainRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTaskControlGainRes::InternalSwap(GetTaskControlGainRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  kp_.InternalSwap(&other->kp_);
  kv_.InternalSwap(&other->kv_);
  kl2_.InternalSwap(&other->kl2_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTaskControlGainRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetImpedanceControlGainReq::InitAsDefaultInstance() {
}
class SetImpedanceControlGainReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetImpedanceControlGainReq::kMassFieldNumber;
const int SetImpedanceControlGainReq::kDampingFieldNumber;
const int SetImpedanceControlGainReq::kStiffnessFieldNumber;
const int SetImpedanceControlGainReq::kKl2FieldNumber;
const int SetImpedanceControlGainReq::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetImpedanceControlGainReq::SetImpedanceControlGainReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
}
SetImpedanceControlGainReq::SetImpedanceControlGainReq(const SetImpedanceControlGainReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      mass_(from.mass_),
      damping_(from.damping_),
      stiffness_(from.stiffness_),
      kl2_(from.kl2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
}

void SetImpedanceControlGainReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetImpedanceControlGainReq_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetImpedanceControlGainReq::~SetImpedanceControlGainReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  SharedDtor();
}

void SetImpedanceControlGainReq::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetImpedanceControlGainReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetImpedanceControlGainReq& SetImpedanceControlGainReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetImpedanceControlGainReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetImpedanceControlGainReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mass_.Clear();
  damping_.Clear();
  stiffness_.Clear();
  kl2_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetImpedanceControlGainReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float mass = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_mass(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_mass(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float damping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_damping(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_damping(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float stiffness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_stiffness(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_stiffness(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float kl2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kl2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_kl2(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetImpedanceControlGainReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float mass = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mass())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_mass())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float damping = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_damping())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_damping())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float stiffness = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_stiffness())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_stiffness())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kl2 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kl2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_kl2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetImpedanceControlGainReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float mass = 1;
  if (this->mass_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mass_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->mass().data(), this->mass_size(), output);
  }

  // repeated float damping = 2;
  if (this->damping_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_damping_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->damping().data(), this->damping_size(), output);
  }

  // repeated float stiffness = 3;
  if (this->stiffness_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stiffness_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->stiffness().data(), this->stiffness_size(), output);
  }

  // repeated float kl2 = 4;
  if (this->kl2_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kl2_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kl2().data(), this->kl2_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetImpedanceControlGainReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float mass = 1;
  if (this->mass_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _mass_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mass_, target);
  }

  // repeated float damping = 2;
  if (this->damping_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _damping_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->damping_, target);
  }

  // repeated float stiffness = 3;
  if (this->stiffness_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _stiffness_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->stiffness_, target);
  }

  // repeated float kl2 = 4;
  if (this->kl2_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kl2_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kl2_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetImpedanceControlGainReq.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  return target;
}

size_t SetImpedanceControlGainReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mass = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mass_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mass_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float damping = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->damping_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _damping_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float stiffness = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->stiffness_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stiffness_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float kl2 = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->kl2_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kl2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetImpedanceControlGainReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetImpedanceControlGainReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetImpedanceControlGainReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
    MergeFrom(*source);
  }
}

void SetImpedanceControlGainReq::MergeFrom(const SetImpedanceControlGainReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mass_.MergeFrom(from.mass_);
  damping_.MergeFrom(from.damping_);
  stiffness_.MergeFrom(from.stiffness_);
  kl2_.MergeFrom(from.kl2_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetImpedanceControlGainReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetImpedanceControlGainReq::CopyFrom(const SetImpedanceControlGainReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetImpedanceControlGainReq::IsInitialized() const {
  return true;
}

void SetImpedanceControlGainReq::Swap(SetImpedanceControlGainReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetImpedanceControlGainReq::InternalSwap(SetImpedanceControlGainReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mass_.InternalSwap(&other->mass_);
  damping_.InternalSwap(&other->damping_);
  stiffness_.InternalSwap(&other->stiffness_);
  kl2_.InternalSwap(&other->kl2_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetImpedanceControlGainReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetImpedanceControlGainRes::InitAsDefaultInstance() {
}
class SetImpedanceControlGainRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetImpedanceControlGainRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetImpedanceControlGainRes::SetImpedanceControlGainRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
}
SetImpedanceControlGainRes::SetImpedanceControlGainRes(const SetImpedanceControlGainRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
}

void SetImpedanceControlGainRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetImpedanceControlGainRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetImpedanceControlGainRes::~SetImpedanceControlGainRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  SharedDtor();
}

void SetImpedanceControlGainRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetImpedanceControlGainRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetImpedanceControlGainRes& SetImpedanceControlGainRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetImpedanceControlGainRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetImpedanceControlGainRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetImpedanceControlGainRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetImpedanceControlGainRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetImpedanceControlGainRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetImpedanceControlGainRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetImpedanceControlGainRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetImpedanceControlGainRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetImpedanceControlGainRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetImpedanceControlGainRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  return target;
}

size_t SetImpedanceControlGainRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetImpedanceControlGainRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetImpedanceControlGainRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetImpedanceControlGainRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
    MergeFrom(*source);
  }
}

void SetImpedanceControlGainRes::MergeFrom(const SetImpedanceControlGainRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetImpedanceControlGainRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetImpedanceControlGainRes::CopyFrom(const SetImpedanceControlGainRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetImpedanceControlGainRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetImpedanceControlGainRes::IsInitialized() const {
  return true;
}

void SetImpedanceControlGainRes::Swap(SetImpedanceControlGainRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetImpedanceControlGainRes::InternalSwap(SetImpedanceControlGainRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetImpedanceControlGainRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetImpedanceControlGainReq::InitAsDefaultInstance() {
}
class GetImpedanceControlGainReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetImpedanceControlGainReq::GetImpedanceControlGainReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
}
GetImpedanceControlGainReq::GetImpedanceControlGainReq(const GetImpedanceControlGainReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
}

void GetImpedanceControlGainReq::SharedCtor() {
}

GetImpedanceControlGainReq::~GetImpedanceControlGainReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  SharedDtor();
}

void GetImpedanceControlGainReq::SharedDtor() {
}

void GetImpedanceControlGainReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetImpedanceControlGainReq& GetImpedanceControlGainReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetImpedanceControlGainReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetImpedanceControlGainReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetImpedanceControlGainReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetImpedanceControlGainReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetImpedanceControlGainReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetImpedanceControlGainReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  return target;
}

size_t GetImpedanceControlGainReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetImpedanceControlGainReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetImpedanceControlGainReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetImpedanceControlGainReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
    MergeFrom(*source);
  }
}

void GetImpedanceControlGainReq::MergeFrom(const GetImpedanceControlGainReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetImpedanceControlGainReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImpedanceControlGainReq::CopyFrom(const GetImpedanceControlGainReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImpedanceControlGainReq::IsInitialized() const {
  return true;
}

void GetImpedanceControlGainReq::Swap(GetImpedanceControlGainReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetImpedanceControlGainReq::InternalSwap(GetImpedanceControlGainReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImpedanceControlGainReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetImpedanceControlGainRes::InitAsDefaultInstance() {
}
class GetImpedanceControlGainRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetImpedanceControlGainRes::kMassFieldNumber;
const int GetImpedanceControlGainRes::kDampingFieldNumber;
const int GetImpedanceControlGainRes::kStiffnessFieldNumber;
const int GetImpedanceControlGainRes::kKl2FieldNumber;
const int GetImpedanceControlGainRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetImpedanceControlGainRes::GetImpedanceControlGainRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
}
GetImpedanceControlGainRes::GetImpedanceControlGainRes(const GetImpedanceControlGainRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      mass_(from.mass_),
      damping_(from.damping_),
      stiffness_(from.stiffness_),
      kl2_(from.kl2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
}

void GetImpedanceControlGainRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetImpedanceControlGainRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetImpedanceControlGainRes::~GetImpedanceControlGainRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  SharedDtor();
}

void GetImpedanceControlGainRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetImpedanceControlGainRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetImpedanceControlGainRes& GetImpedanceControlGainRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetImpedanceControlGainRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetImpedanceControlGainRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mass_.Clear();
  damping_.Clear();
  stiffness_.Clear();
  kl2_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetImpedanceControlGainRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float mass = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_mass(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_mass(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float damping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_damping(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_damping(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float stiffness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_stiffness(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_stiffness(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float kl2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_kl2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_kl2(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetImpedanceControlGainRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float mass = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_mass())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_mass())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float damping = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_damping())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_damping())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float stiffness = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_stiffness())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_stiffness())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float kl2 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_kl2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_kl2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetImpedanceControlGainRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float mass = 1;
  if (this->mass_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mass_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->mass().data(), this->mass_size(), output);
  }

  // repeated float damping = 2;
  if (this->damping_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_damping_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->damping().data(), this->damping_size(), output);
  }

  // repeated float stiffness = 3;
  if (this->stiffness_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_stiffness_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->stiffness().data(), this->stiffness_size(), output);
  }

  // repeated float kl2 = 4;
  if (this->kl2_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_kl2_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->kl2().data(), this->kl2_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetImpedanceControlGainRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float mass = 1;
  if (this->mass_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _mass_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->mass_, target);
  }

  // repeated float damping = 2;
  if (this->damping_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _damping_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->damping_, target);
  }

  // repeated float stiffness = 3;
  if (this->stiffness_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _stiffness_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->stiffness_, target);
  }

  // repeated float kl2 = 4;
  if (this->kl2_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _kl2_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->kl2_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetImpedanceControlGainRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  return target;
}

size_t GetImpedanceControlGainRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mass = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mass_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mass_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float damping = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->damping_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _damping_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float stiffness = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->stiffness_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _stiffness_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float kl2 = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->kl2_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _kl2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetImpedanceControlGainRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetImpedanceControlGainRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetImpedanceControlGainRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
    MergeFrom(*source);
  }
}

void GetImpedanceControlGainRes::MergeFrom(const GetImpedanceControlGainRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mass_.MergeFrom(from.mass_);
  damping_.MergeFrom(from.damping_);
  stiffness_.MergeFrom(from.stiffness_);
  kl2_.MergeFrom(from.kl2_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetImpedanceControlGainRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImpedanceControlGainRes::CopyFrom(const GetImpedanceControlGainRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetImpedanceControlGainRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImpedanceControlGainRes::IsInitialized() const {
  return true;
}

void GetImpedanceControlGainRes::Swap(GetImpedanceControlGainRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetImpedanceControlGainRes::InternalSwap(GetImpedanceControlGainRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mass_.InternalSwap(&other->mass_);
  damping_.InternalSwap(&other->damping_);
  stiffness_.InternalSwap(&other->stiffness_);
  kl2_.InternalSwap(&other->kl2_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImpedanceControlGainRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetFricCompReq::InitAsDefaultInstance() {
}
class SetFricCompReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetFricCompReq::kControlCompFieldNumber;
const int SetFricCompReq::kControlCompLevelsFieldNumber;
const int SetFricCompReq::kDtCompFieldNumber;
const int SetFricCompReq::kDtCompLevelsFieldNumber;
const int SetFricCompReq::kIdJointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetFricCompReq::SetFricCompReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetFricCompReq)
}
SetFricCompReq::SetFricCompReq(const SetFricCompReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      control_comp_levels_(from.control_comp_levels_),
      dt_comp_levels_(from.dt_comp_levels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&control_comp_, &from.control_comp_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_joint_) -
    reinterpret_cast<char*>(&control_comp_)) + sizeof(id_joint_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetFricCompReq)
}

void SetFricCompReq::SharedCtor() {
  ::memset(&control_comp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_joint_) -
      reinterpret_cast<char*>(&control_comp_)) + sizeof(id_joint_));
}

SetFricCompReq::~SetFricCompReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetFricCompReq)
  SharedDtor();
}

void SetFricCompReq::SharedDtor() {
}

void SetFricCompReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetFricCompReq& SetFricCompReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetFricCompReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetFricCompReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetFricCompReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_comp_levels_.Clear();
  dt_comp_levels_.Clear();
  ::memset(&control_comp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_joint_) -
      reinterpret_cast<char*>(&control_comp_)) + sizeof(id_joint_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetFricCompReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool control_comp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          control_comp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 control_comp_levels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_control_comp_levels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_control_comp_levels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool dt_comp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dt_comp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 dt_comp_levels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_dt_comp_levels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          add_dt_comp_levels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id_joint = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          id_joint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetFricCompReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetFricCompReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool control_comp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &control_comp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 control_comp_levels = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_control_comp_levels())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_control_comp_levels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dt_comp = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dt_comp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dt_comp_levels = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dt_comp_levels())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_dt_comp_levels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id_joint = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_joint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetFricCompReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetFricCompReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetFricCompReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetFricCompReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool control_comp = 1;
  if (this->control_comp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->control_comp(), output);
  }

  // repeated int32 control_comp_levels = 2;
  if (this->control_comp_levels_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_control_comp_levels_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->control_comp_levels_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->control_comp_levels(i), output);
  }

  // bool dt_comp = 5;
  if (this->dt_comp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->dt_comp(), output);
  }

  // repeated int32 dt_comp_levels = 6;
  if (this->dt_comp_levels_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dt_comp_levels_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->dt_comp_levels_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->dt_comp_levels(i), output);
  }

  // int32 id_joint = 10;
  if (this->id_joint() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->id_joint(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetFricCompReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetFricCompReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetFricCompReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool control_comp = 1;
  if (this->control_comp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->control_comp(), target);
  }

  // repeated int32 control_comp_levels = 2;
  if (this->control_comp_levels_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _control_comp_levels_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->control_comp_levels_, target);
  }

  // bool dt_comp = 5;
  if (this->dt_comp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->dt_comp(), target);
  }

  // repeated int32 dt_comp_levels = 6;
  if (this->dt_comp_levels_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _dt_comp_levels_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dt_comp_levels_, target);
  }

  // int32 id_joint = 10;
  if (this->id_joint() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->id_joint(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetFricCompReq)
  return target;
}

size_t SetFricCompReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetFricCompReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 control_comp_levels = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->control_comp_levels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _control_comp_levels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 dt_comp_levels = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dt_comp_levels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dt_comp_levels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool control_comp = 1;
  if (this->control_comp() != 0) {
    total_size += 1 + 1;
  }

  // bool dt_comp = 5;
  if (this->dt_comp() != 0) {
    total_size += 1 + 1;
  }

  // int32 id_joint = 10;
  if (this->id_joint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id_joint());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetFricCompReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetFricCompReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetFricCompReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetFricCompReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetFricCompReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetFricCompReq)
    MergeFrom(*source);
  }
}

void SetFricCompReq::MergeFrom(const SetFricCompReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetFricCompReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  control_comp_levels_.MergeFrom(from.control_comp_levels_);
  dt_comp_levels_.MergeFrom(from.dt_comp_levels_);
  if (from.control_comp() != 0) {
    set_control_comp(from.control_comp());
  }
  if (from.dt_comp() != 0) {
    set_dt_comp(from.dt_comp());
  }
  if (from.id_joint() != 0) {
    set_id_joint(from.id_joint());
  }
}

void SetFricCompReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetFricCompReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetFricCompReq::CopyFrom(const SetFricCompReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetFricCompReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFricCompReq::IsInitialized() const {
  return true;
}

void SetFricCompReq::Swap(SetFricCompReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetFricCompReq::InternalSwap(SetFricCompReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  control_comp_levels_.InternalSwap(&other->control_comp_levels_);
  dt_comp_levels_.InternalSwap(&other->dt_comp_levels_);
  swap(control_comp_, other->control_comp_);
  swap(dt_comp_, other->dt_comp_);
  swap(id_joint_, other->id_joint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetFricCompReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetFricCompRes::InitAsDefaultInstance() {
}
class SetFricCompRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetFricCompRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetFricCompRes::SetFricCompRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetFricCompRes)
}
SetFricCompRes::SetFricCompRes(const SetFricCompRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetFricCompRes)
}

void SetFricCompRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetFricCompRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetFricCompRes::~SetFricCompRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetFricCompRes)
  SharedDtor();
}

void SetFricCompRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetFricCompRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetFricCompRes& SetFricCompRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetFricCompRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetFricCompRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetFricCompRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetFricCompRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetFricCompRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetFricCompRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetFricCompRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetFricCompRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetFricCompRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetFricCompRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetFricCompRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetFricCompRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetFricCompRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetFricCompRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetFricCompRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetFricCompRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetFricCompRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetFricCompRes)
  return target;
}

size_t SetFricCompRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetFricCompRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetFricCompRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetFricCompRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetFricCompRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetFricCompRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetFricCompRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetFricCompRes)
    MergeFrom(*source);
  }
}

void SetFricCompRes::MergeFrom(const SetFricCompRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetFricCompRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetFricCompRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetFricCompRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetFricCompRes::CopyFrom(const SetFricCompRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetFricCompRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFricCompRes::IsInitialized() const {
  return true;
}

void SetFricCompRes::Swap(SetFricCompRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetFricCompRes::InternalSwap(SetFricCompRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetFricCompRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFricCompReq::InitAsDefaultInstance() {
}
class GetFricCompReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFricCompReq::GetFricCompReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetFricCompReq)
}
GetFricCompReq::GetFricCompReq(const GetFricCompReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetFricCompReq)
}

void GetFricCompReq::SharedCtor() {
}

GetFricCompReq::~GetFricCompReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetFricCompReq)
  SharedDtor();
}

void GetFricCompReq::SharedDtor() {
}

void GetFricCompReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFricCompReq& GetFricCompReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFricCompReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetFricCompReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetFricCompReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetFricCompReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetFricCompReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetFricCompReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetFricCompReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetFricCompReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetFricCompReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetFricCompReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetFricCompReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFricCompReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetFricCompReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetFricCompReq)
  return target;
}

size_t GetFricCompReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetFricCompReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFricCompReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetFricCompReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFricCompReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFricCompReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetFricCompReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetFricCompReq)
    MergeFrom(*source);
  }
}

void GetFricCompReq::MergeFrom(const GetFricCompReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetFricCompReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetFricCompReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetFricCompReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFricCompReq::CopyFrom(const GetFricCompReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetFricCompReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFricCompReq::IsInitialized() const {
  return true;
}

void GetFricCompReq::Swap(GetFricCompReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFricCompReq::InternalSwap(GetFricCompReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFricCompReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFricCompRes::InitAsDefaultInstance() {
}
class GetFricCompRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetFricCompRes::kControlCompFieldNumber;
const int GetFricCompRes::kControlCompLevelsFieldNumber;
const int GetFricCompRes::kDtCompFieldNumber;
const int GetFricCompRes::kDtCompLevelsFieldNumber;
const int GetFricCompRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetFricCompRes::GetFricCompRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetFricCompRes)
}
GetFricCompRes::GetFricCompRes(const GetFricCompRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      control_comp_levels_(from.control_comp_levels_),
      dt_comp_levels_(from.dt_comp_levels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&control_comp_, &from.control_comp_,
    static_cast<size_t>(reinterpret_cast<char*>(&dt_comp_) -
    reinterpret_cast<char*>(&control_comp_)) + sizeof(dt_comp_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetFricCompRes)
}

void GetFricCompRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFricCompRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&control_comp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dt_comp_) -
      reinterpret_cast<char*>(&control_comp_)) + sizeof(dt_comp_));
}

GetFricCompRes::~GetFricCompRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetFricCompRes)
  SharedDtor();
}

void GetFricCompRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFricCompRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFricCompRes& GetFricCompRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFricCompRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetFricCompRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetFricCompRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_comp_levels_.Clear();
  dt_comp_levels_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&control_comp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dt_comp_) -
      reinterpret_cast<char*>(&control_comp_)) + sizeof(dt_comp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetFricCompRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool control_comp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          control_comp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 control_comp_levels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_control_comp_levels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_control_comp_levels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool dt_comp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dt_comp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 dt_comp_levels = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_dt_comp_levels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          add_dt_comp_levels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetFricCompRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetFricCompRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetFricCompRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool control_comp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &control_comp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 control_comp_levels = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_control_comp_levels())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_control_comp_levels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dt_comp = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dt_comp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dt_comp_levels = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dt_comp_levels())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_dt_comp_levels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetFricCompRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetFricCompRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetFricCompRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetFricCompRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetFricCompRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool control_comp = 1;
  if (this->control_comp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->control_comp(), output);
  }

  // repeated int32 control_comp_levels = 2;
  if (this->control_comp_levels_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_control_comp_levels_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->control_comp_levels_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->control_comp_levels(i), output);
  }

  // bool dt_comp = 5;
  if (this->dt_comp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->dt_comp(), output);
  }

  // repeated int32 dt_comp_levels = 6;
  if (this->dt_comp_levels_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dt_comp_levels_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->dt_comp_levels_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->dt_comp_levels(i), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetFricCompRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetFricCompRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFricCompRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetFricCompRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool control_comp = 1;
  if (this->control_comp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->control_comp(), target);
  }

  // repeated int32 control_comp_levels = 2;
  if (this->control_comp_levels_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _control_comp_levels_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->control_comp_levels_, target);
  }

  // bool dt_comp = 5;
  if (this->dt_comp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->dt_comp(), target);
  }

  // repeated int32 dt_comp_levels = 6;
  if (this->dt_comp_levels_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _dt_comp_levels_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dt_comp_levels_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetFricCompRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetFricCompRes)
  return target;
}

size_t GetFricCompRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetFricCompRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 control_comp_levels = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->control_comp_levels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _control_comp_levels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 dt_comp_levels = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dt_comp_levels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dt_comp_levels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // bool control_comp = 1;
  if (this->control_comp() != 0) {
    total_size += 1 + 1;
  }

  // bool dt_comp = 5;
  if (this->dt_comp() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFricCompRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetFricCompRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFricCompRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFricCompRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetFricCompRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetFricCompRes)
    MergeFrom(*source);
  }
}

void GetFricCompRes::MergeFrom(const GetFricCompRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetFricCompRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  control_comp_levels_.MergeFrom(from.control_comp_levels_);
  dt_comp_levels_.MergeFrom(from.dt_comp_levels_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.control_comp() != 0) {
    set_control_comp(from.control_comp());
  }
  if (from.dt_comp() != 0) {
    set_dt_comp(from.dt_comp());
  }
}

void GetFricCompRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetFricCompRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFricCompRes::CopyFrom(const GetFricCompRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetFricCompRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFricCompRes::IsInitialized() const {
  return true;
}

void GetFricCompRes::Swap(GetFricCompRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetFricCompRes::InternalSwap(GetFricCompRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  control_comp_levels_.InternalSwap(&other->control_comp_levels_);
  dt_comp_levels_.InternalSwap(&other->dt_comp_levels_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(control_comp_, other->control_comp_);
  swap(dt_comp_, other->dt_comp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFricCompRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSafetyLimitConfigReq::InitAsDefaultInstance() {
}
class GetSafetyLimitConfigReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSafetyLimitConfigReq::GetSafetyLimitConfigReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
}
GetSafetyLimitConfigReq::GetSafetyLimitConfigReq(const GetSafetyLimitConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
}

void GetSafetyLimitConfigReq::SharedCtor() {
}

GetSafetyLimitConfigReq::~GetSafetyLimitConfigReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  SharedDtor();
}

void GetSafetyLimitConfigReq::SharedDtor() {
}

void GetSafetyLimitConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSafetyLimitConfigReq& GetSafetyLimitConfigReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSafetyLimitConfigReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetSafetyLimitConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetSafetyLimitConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetSafetyLimitConfigReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetSafetyLimitConfigReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSafetyLimitConfigReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  return target;
}

size_t GetSafetyLimitConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSafetyLimitConfigReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSafetyLimitConfigReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSafetyLimitConfigReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
    MergeFrom(*source);
  }
}

void GetSafetyLimitConfigReq::MergeFrom(const GetSafetyLimitConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetSafetyLimitConfigReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSafetyLimitConfigReq::CopyFrom(const GetSafetyLimitConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSafetyLimitConfigReq::IsInitialized() const {
  return true;
}

void GetSafetyLimitConfigReq::Swap(GetSafetyLimitConfigReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSafetyLimitConfigReq::InternalSwap(GetSafetyLimitConfigReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSafetyLimitConfigReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSafetyLimitConfigRes::InitAsDefaultInstance() {
}
class GetSafetyLimitConfigRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSafetyLimitConfigRes::kPowerLimitFieldNumber;
const int GetSafetyLimitConfigRes::kPowerLimitRatioFieldNumber;
const int GetSafetyLimitConfigRes::kTcpForceLimitFieldNumber;
const int GetSafetyLimitConfigRes::kTcpForceLimitRatioFieldNumber;
const int GetSafetyLimitConfigRes::kTcpSpeedLimitFieldNumber;
const int GetSafetyLimitConfigRes::kTcpSpeedLimitRatioFieldNumber;
const int GetSafetyLimitConfigRes::kJointLimitsFieldNumber;
const int GetSafetyLimitConfigRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSafetyLimitConfigRes::GetSafetyLimitConfigRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
}
GetSafetyLimitConfigRes::GetSafetyLimitConfigRes(const GetSafetyLimitConfigRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      joint_limits_(from.joint_limits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&power_limit_, &from.power_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_speed_limit_ratio_) -
    reinterpret_cast<char*>(&power_limit_)) + sizeof(tcp_speed_limit_ratio_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
}

void GetSafetyLimitConfigRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSafetyLimitConfigRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&power_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_speed_limit_ratio_) -
      reinterpret_cast<char*>(&power_limit_)) + sizeof(tcp_speed_limit_ratio_));
}

GetSafetyLimitConfigRes::~GetSafetyLimitConfigRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  SharedDtor();
}

void GetSafetyLimitConfigRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSafetyLimitConfigRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSafetyLimitConfigRes& GetSafetyLimitConfigRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSafetyLimitConfigRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetSafetyLimitConfigRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_limits_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&power_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_speed_limit_ratio_) -
      reinterpret_cast<char*>(&power_limit_)) + sizeof(tcp_speed_limit_ratio_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetSafetyLimitConfigRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float power_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          power_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float power_limit_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          power_limit_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tcp_force_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          tcp_force_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tcp_force_limit_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          tcp_force_limit_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tcp_speed_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          tcp_speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tcp_speed_limit_ratio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          tcp_speed_limit_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float joint_limits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_joint_limits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          add_joint_limits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetSafetyLimitConfigRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float power_limit = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float power_limit_ratio = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_limit_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tcp_force_limit = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_force_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tcp_force_limit_ratio = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_force_limit_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tcp_speed_limit = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tcp_speed_limit_ratio = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_speed_limit_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float joint_limits = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_joint_limits())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58u, input, this->mutable_joint_limits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetSafetyLimitConfigRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float power_limit = 1;
  if (!(this->power_limit() <= 0 && this->power_limit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->power_limit(), output);
  }

  // float power_limit_ratio = 2;
  if (!(this->power_limit_ratio() <= 0 && this->power_limit_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->power_limit_ratio(), output);
  }

  // float tcp_force_limit = 3;
  if (!(this->tcp_force_limit() <= 0 && this->tcp_force_limit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->tcp_force_limit(), output);
  }

  // float tcp_force_limit_ratio = 4;
  if (!(this->tcp_force_limit_ratio() <= 0 && this->tcp_force_limit_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->tcp_force_limit_ratio(), output);
  }

  // float tcp_speed_limit = 5;
  if (!(this->tcp_speed_limit() <= 0 && this->tcp_speed_limit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->tcp_speed_limit(), output);
  }

  // float tcp_speed_limit_ratio = 6;
  if (!(this->tcp_speed_limit_ratio() <= 0 && this->tcp_speed_limit_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->tcp_speed_limit_ratio(), output);
  }

  // repeated float joint_limits = 7;
  if (this->joint_limits_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_joint_limits_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->joint_limits().data(), this->joint_limits_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSafetyLimitConfigRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float power_limit = 1;
  if (!(this->power_limit() <= 0 && this->power_limit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->power_limit(), target);
  }

  // float power_limit_ratio = 2;
  if (!(this->power_limit_ratio() <= 0 && this->power_limit_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->power_limit_ratio(), target);
  }

  // float tcp_force_limit = 3;
  if (!(this->tcp_force_limit() <= 0 && this->tcp_force_limit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->tcp_force_limit(), target);
  }

  // float tcp_force_limit_ratio = 4;
  if (!(this->tcp_force_limit_ratio() <= 0 && this->tcp_force_limit_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->tcp_force_limit_ratio(), target);
  }

  // float tcp_speed_limit = 5;
  if (!(this->tcp_speed_limit() <= 0 && this->tcp_speed_limit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->tcp_speed_limit(), target);
  }

  // float tcp_speed_limit_ratio = 6;
  if (!(this->tcp_speed_limit_ratio() <= 0 && this->tcp_speed_limit_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->tcp_speed_limit_ratio(), target);
  }

  // repeated float joint_limits = 7;
  if (this->joint_limits_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _joint_limits_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->joint_limits_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  return target;
}

size_t GetSafetyLimitConfigRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float joint_limits = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_limits_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _joint_limits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // float power_limit = 1;
  if (!(this->power_limit() <= 0 && this->power_limit() >= 0)) {
    total_size += 1 + 4;
  }

  // float power_limit_ratio = 2;
  if (!(this->power_limit_ratio() <= 0 && this->power_limit_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float tcp_force_limit = 3;
  if (!(this->tcp_force_limit() <= 0 && this->tcp_force_limit() >= 0)) {
    total_size += 1 + 4;
  }

  // float tcp_force_limit_ratio = 4;
  if (!(this->tcp_force_limit_ratio() <= 0 && this->tcp_force_limit_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float tcp_speed_limit = 5;
  if (!(this->tcp_speed_limit() <= 0 && this->tcp_speed_limit() >= 0)) {
    total_size += 1 + 4;
  }

  // float tcp_speed_limit_ratio = 6;
  if (!(this->tcp_speed_limit_ratio() <= 0 && this->tcp_speed_limit_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSafetyLimitConfigRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSafetyLimitConfigRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSafetyLimitConfigRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
    MergeFrom(*source);
  }
}

void GetSafetyLimitConfigRes::MergeFrom(const GetSafetyLimitConfigRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_limits_.MergeFrom(from.joint_limits_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (!(from.power_limit() <= 0 && from.power_limit() >= 0)) {
    set_power_limit(from.power_limit());
  }
  if (!(from.power_limit_ratio() <= 0 && from.power_limit_ratio() >= 0)) {
    set_power_limit_ratio(from.power_limit_ratio());
  }
  if (!(from.tcp_force_limit() <= 0 && from.tcp_force_limit() >= 0)) {
    set_tcp_force_limit(from.tcp_force_limit());
  }
  if (!(from.tcp_force_limit_ratio() <= 0 && from.tcp_force_limit_ratio() >= 0)) {
    set_tcp_force_limit_ratio(from.tcp_force_limit_ratio());
  }
  if (!(from.tcp_speed_limit() <= 0 && from.tcp_speed_limit() >= 0)) {
    set_tcp_speed_limit(from.tcp_speed_limit());
  }
  if (!(from.tcp_speed_limit_ratio() <= 0 && from.tcp_speed_limit_ratio() >= 0)) {
    set_tcp_speed_limit_ratio(from.tcp_speed_limit_ratio());
  }
}

void GetSafetyLimitConfigRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSafetyLimitConfigRes::CopyFrom(const GetSafetyLimitConfigRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetSafetyLimitConfigRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSafetyLimitConfigRes::IsInitialized() const {
  return true;
}

void GetSafetyLimitConfigRes::Swap(GetSafetyLimitConfigRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSafetyLimitConfigRes::InternalSwap(GetSafetyLimitConfigRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  joint_limits_.InternalSwap(&other->joint_limits_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(power_limit_, other->power_limit_);
  swap(power_limit_ratio_, other->power_limit_ratio_);
  swap(tcp_force_limit_, other->tcp_force_limit_);
  swap(tcp_force_limit_ratio_, other->tcp_force_limit_ratio_);
  swap(tcp_speed_limit_, other->tcp_speed_limit_);
  swap(tcp_speed_limit_ratio_, other->tcp_speed_limit_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSafetyLimitConfigRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetSafetyLimitConfigReq::InitAsDefaultInstance() {
}
class SetSafetyLimitConfigReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSafetyLimitConfigReq::kPowerLimitFieldNumber;
const int SetSafetyLimitConfigReq::kPowerLimitRatioFieldNumber;
const int SetSafetyLimitConfigReq::kTcpForceLimitFieldNumber;
const int SetSafetyLimitConfigReq::kTcpForceLimitRatioFieldNumber;
const int SetSafetyLimitConfigReq::kTcpSpeedLimitFieldNumber;
const int SetSafetyLimitConfigReq::kTcpSpeedLimitRatioFieldNumber;
const int SetSafetyLimitConfigReq::kJointLimitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSafetyLimitConfigReq::SetSafetyLimitConfigReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
}
SetSafetyLimitConfigReq::SetSafetyLimitConfigReq(const SetSafetyLimitConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      joint_limits_(from.joint_limits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&power_limit_, &from.power_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_speed_limit_ratio_) -
    reinterpret_cast<char*>(&power_limit_)) + sizeof(tcp_speed_limit_ratio_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
}

void SetSafetyLimitConfigReq::SharedCtor() {
  ::memset(&power_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_speed_limit_ratio_) -
      reinterpret_cast<char*>(&power_limit_)) + sizeof(tcp_speed_limit_ratio_));
}

SetSafetyLimitConfigReq::~SetSafetyLimitConfigReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  SharedDtor();
}

void SetSafetyLimitConfigReq::SharedDtor() {
}

void SetSafetyLimitConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSafetyLimitConfigReq& SetSafetyLimitConfigReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetSafetyLimitConfigReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetSafetyLimitConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_limits_.Clear();
  ::memset(&power_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_speed_limit_ratio_) -
      reinterpret_cast<char*>(&power_limit_)) + sizeof(tcp_speed_limit_ratio_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetSafetyLimitConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float power_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          power_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float power_limit_ratio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          power_limit_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tcp_force_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          tcp_force_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tcp_force_limit_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          tcp_force_limit_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tcp_speed_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          tcp_speed_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tcp_speed_limit_ratio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          tcp_speed_limit_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float joint_limits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_joint_limits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          add_joint_limits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetSafetyLimitConfigReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float power_limit = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float power_limit_ratio = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_limit_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tcp_force_limit = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_force_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tcp_force_limit_ratio = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_force_limit_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tcp_speed_limit = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tcp_speed_limit_ratio = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_speed_limit_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float joint_limits = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_joint_limits())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58u, input, this->mutable_joint_limits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetSafetyLimitConfigReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float power_limit = 1;
  if (!(this->power_limit() <= 0 && this->power_limit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->power_limit(), output);
  }

  // float power_limit_ratio = 2;
  if (!(this->power_limit_ratio() <= 0 && this->power_limit_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->power_limit_ratio(), output);
  }

  // float tcp_force_limit = 3;
  if (!(this->tcp_force_limit() <= 0 && this->tcp_force_limit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->tcp_force_limit(), output);
  }

  // float tcp_force_limit_ratio = 4;
  if (!(this->tcp_force_limit_ratio() <= 0 && this->tcp_force_limit_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->tcp_force_limit_ratio(), output);
  }

  // float tcp_speed_limit = 5;
  if (!(this->tcp_speed_limit() <= 0 && this->tcp_speed_limit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->tcp_speed_limit(), output);
  }

  // float tcp_speed_limit_ratio = 6;
  if (!(this->tcp_speed_limit_ratio() <= 0 && this->tcp_speed_limit_ratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->tcp_speed_limit_ratio(), output);
  }

  // repeated float joint_limits = 7;
  if (this->joint_limits_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_joint_limits_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->joint_limits().data(), this->joint_limits_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSafetyLimitConfigReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float power_limit = 1;
  if (!(this->power_limit() <= 0 && this->power_limit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->power_limit(), target);
  }

  // float power_limit_ratio = 2;
  if (!(this->power_limit_ratio() <= 0 && this->power_limit_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->power_limit_ratio(), target);
  }

  // float tcp_force_limit = 3;
  if (!(this->tcp_force_limit() <= 0 && this->tcp_force_limit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->tcp_force_limit(), target);
  }

  // float tcp_force_limit_ratio = 4;
  if (!(this->tcp_force_limit_ratio() <= 0 && this->tcp_force_limit_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->tcp_force_limit_ratio(), target);
  }

  // float tcp_speed_limit = 5;
  if (!(this->tcp_speed_limit() <= 0 && this->tcp_speed_limit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->tcp_speed_limit(), target);
  }

  // float tcp_speed_limit_ratio = 6;
  if (!(this->tcp_speed_limit_ratio() <= 0 && this->tcp_speed_limit_ratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->tcp_speed_limit_ratio(), target);
  }

  // repeated float joint_limits = 7;
  if (this->joint_limits_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _joint_limits_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->joint_limits_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  return target;
}

size_t SetSafetyLimitConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float joint_limits = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->joint_limits_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _joint_limits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float power_limit = 1;
  if (!(this->power_limit() <= 0 && this->power_limit() >= 0)) {
    total_size += 1 + 4;
  }

  // float power_limit_ratio = 2;
  if (!(this->power_limit_ratio() <= 0 && this->power_limit_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float tcp_force_limit = 3;
  if (!(this->tcp_force_limit() <= 0 && this->tcp_force_limit() >= 0)) {
    total_size += 1 + 4;
  }

  // float tcp_force_limit_ratio = 4;
  if (!(this->tcp_force_limit_ratio() <= 0 && this->tcp_force_limit_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  // float tcp_speed_limit = 5;
  if (!(this->tcp_speed_limit() <= 0 && this->tcp_speed_limit() >= 0)) {
    total_size += 1 + 4;
  }

  // float tcp_speed_limit_ratio = 6;
  if (!(this->tcp_speed_limit_ratio() <= 0 && this->tcp_speed_limit_ratio() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSafetyLimitConfigReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSafetyLimitConfigReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetSafetyLimitConfigReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
    MergeFrom(*source);
  }
}

void SetSafetyLimitConfigReq::MergeFrom(const SetSafetyLimitConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_limits_.MergeFrom(from.joint_limits_);
  if (!(from.power_limit() <= 0 && from.power_limit() >= 0)) {
    set_power_limit(from.power_limit());
  }
  if (!(from.power_limit_ratio() <= 0 && from.power_limit_ratio() >= 0)) {
    set_power_limit_ratio(from.power_limit_ratio());
  }
  if (!(from.tcp_force_limit() <= 0 && from.tcp_force_limit() >= 0)) {
    set_tcp_force_limit(from.tcp_force_limit());
  }
  if (!(from.tcp_force_limit_ratio() <= 0 && from.tcp_force_limit_ratio() >= 0)) {
    set_tcp_force_limit_ratio(from.tcp_force_limit_ratio());
  }
  if (!(from.tcp_speed_limit() <= 0 && from.tcp_speed_limit() >= 0)) {
    set_tcp_speed_limit(from.tcp_speed_limit());
  }
  if (!(from.tcp_speed_limit_ratio() <= 0 && from.tcp_speed_limit_ratio() >= 0)) {
    set_tcp_speed_limit_ratio(from.tcp_speed_limit_ratio());
  }
}

void SetSafetyLimitConfigReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSafetyLimitConfigReq::CopyFrom(const SetSafetyLimitConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSafetyLimitConfigReq::IsInitialized() const {
  return true;
}

void SetSafetyLimitConfigReq::Swap(SetSafetyLimitConfigReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSafetyLimitConfigReq::InternalSwap(SetSafetyLimitConfigReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  joint_limits_.InternalSwap(&other->joint_limits_);
  swap(power_limit_, other->power_limit_);
  swap(power_limit_ratio_, other->power_limit_ratio_);
  swap(tcp_force_limit_, other->tcp_force_limit_);
  swap(tcp_force_limit_ratio_, other->tcp_force_limit_ratio_);
  swap(tcp_speed_limit_, other->tcp_speed_limit_);
  swap(tcp_speed_limit_ratio_, other->tcp_speed_limit_ratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSafetyLimitConfigReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetSafetyLimitConfigRes::InitAsDefaultInstance() {
}
class SetSafetyLimitConfigRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSafetyLimitConfigRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSafetyLimitConfigRes::SetSafetyLimitConfigRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
}
SetSafetyLimitConfigRes::SetSafetyLimitConfigRes(const SetSafetyLimitConfigRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
}

void SetSafetyLimitConfigRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetSafetyLimitConfigRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetSafetyLimitConfigRes::~SetSafetyLimitConfigRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  SharedDtor();
}

void SetSafetyLimitConfigRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetSafetyLimitConfigRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSafetyLimitConfigRes& SetSafetyLimitConfigRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetSafetyLimitConfigRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetSafetyLimitConfigRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetSafetyLimitConfigRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetSafetyLimitConfigRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetSafetyLimitConfigRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSafetyLimitConfigRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  return target;
}

size_t SetSafetyLimitConfigRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSafetyLimitConfigRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSafetyLimitConfigRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetSafetyLimitConfigRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
    MergeFrom(*source);
  }
}

void SetSafetyLimitConfigRes::MergeFrom(const SetSafetyLimitConfigRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetSafetyLimitConfigRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSafetyLimitConfigRes::CopyFrom(const SetSafetyLimitConfigRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetSafetyLimitConfigRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSafetyLimitConfigRes::IsInitialized() const {
  return true;
}

void SetSafetyLimitConfigRes::Swap(SetSafetyLimitConfigRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSafetyLimitConfigRes::InternalSwap(SetSafetyLimitConfigRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSafetyLimitConfigRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetSafetyStopConfigReq::InitAsDefaultInstance() {
}
class SetSafetyStopConfigReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSafetyStopConfigReq::kJointPositionLimitStopCatFieldNumber;
const int SetSafetyStopConfigReq::kJointSpeedLimitStopCatFieldNumber;
const int SetSafetyStopConfigReq::kJointTorqueLimitStopCatFieldNumber;
const int SetSafetyStopConfigReq::kTcpSpeedLimitStopCatFieldNumber;
const int SetSafetyStopConfigReq::kTcpForceLimitStopCatFieldNumber;
const int SetSafetyStopConfigReq::kPowerLimitStopCatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSafetyStopConfigReq::SetSafetyStopConfigReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
}
SetSafetyStopConfigReq::SetSafetyStopConfigReq(const SetSafetyStopConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&joint_position_limit_stop_cat_, &from.joint_position_limit_stop_cat_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_limit_stop_cat_) -
    reinterpret_cast<char*>(&joint_position_limit_stop_cat_)) + sizeof(power_limit_stop_cat_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
}

void SetSafetyStopConfigReq::SharedCtor() {
  ::memset(&joint_position_limit_stop_cat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_limit_stop_cat_) -
      reinterpret_cast<char*>(&joint_position_limit_stop_cat_)) + sizeof(power_limit_stop_cat_));
}

SetSafetyStopConfigReq::~SetSafetyStopConfigReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  SharedDtor();
}

void SetSafetyStopConfigReq::SharedDtor() {
}

void SetSafetyStopConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSafetyStopConfigReq& SetSafetyStopConfigReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetSafetyStopConfigReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetSafetyStopConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&joint_position_limit_stop_cat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_limit_stop_cat_) -
      reinterpret_cast<char*>(&joint_position_limit_stop_cat_)) + sizeof(power_limit_stop_cat_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetSafetyStopConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_joint_position_limit_stop_cat(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_joint_speed_limit_stop_cat(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_joint_torque_limit_stop_cat(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_tcp_speed_limit_stop_cat(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_tcp_force_limit_stop_cat(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_power_limit_stop_cat(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetSafetyStopConfigReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_joint_position_limit_stop_cat(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_joint_speed_limit_stop_cat(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_joint_torque_limit_stop_cat(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tcp_speed_limit_stop_cat(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tcp_force_limit_stop_cat(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_power_limit_stop_cat(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetSafetyStopConfigReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
  if (this->joint_position_limit_stop_cat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->joint_position_limit_stop_cat(), output);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
  if (this->joint_speed_limit_stop_cat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->joint_speed_limit_stop_cat(), output);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
  if (this->joint_torque_limit_stop_cat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->joint_torque_limit_stop_cat(), output);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
  if (this->tcp_speed_limit_stop_cat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->tcp_speed_limit_stop_cat(), output);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
  if (this->tcp_force_limit_stop_cat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->tcp_force_limit_stop_cat(), output);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
  if (this->power_limit_stop_cat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->power_limit_stop_cat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSafetyStopConfigReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
  if (this->joint_position_limit_stop_cat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->joint_position_limit_stop_cat(), target);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
  if (this->joint_speed_limit_stop_cat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->joint_speed_limit_stop_cat(), target);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
  if (this->joint_torque_limit_stop_cat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->joint_torque_limit_stop_cat(), target);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
  if (this->tcp_speed_limit_stop_cat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->tcp_speed_limit_stop_cat(), target);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
  if (this->tcp_force_limit_stop_cat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->tcp_force_limit_stop_cat(), target);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
  if (this->power_limit_stop_cat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->power_limit_stop_cat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  return target;
}

size_t SetSafetyStopConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
  if (this->joint_position_limit_stop_cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->joint_position_limit_stop_cat());
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
  if (this->joint_speed_limit_stop_cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->joint_speed_limit_stop_cat());
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
  if (this->joint_torque_limit_stop_cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->joint_torque_limit_stop_cat());
  }

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
  if (this->tcp_speed_limit_stop_cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tcp_speed_limit_stop_cat());
  }

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
  if (this->tcp_force_limit_stop_cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tcp_force_limit_stop_cat());
  }

  // .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
  if (this->power_limit_stop_cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->power_limit_stop_cat());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSafetyStopConfigReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSafetyStopConfigReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetSafetyStopConfigReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
    MergeFrom(*source);
  }
}

void SetSafetyStopConfigReq::MergeFrom(const SetSafetyStopConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.joint_position_limit_stop_cat() != 0) {
    set_joint_position_limit_stop_cat(from.joint_position_limit_stop_cat());
  }
  if (from.joint_speed_limit_stop_cat() != 0) {
    set_joint_speed_limit_stop_cat(from.joint_speed_limit_stop_cat());
  }
  if (from.joint_torque_limit_stop_cat() != 0) {
    set_joint_torque_limit_stop_cat(from.joint_torque_limit_stop_cat());
  }
  if (from.tcp_speed_limit_stop_cat() != 0) {
    set_tcp_speed_limit_stop_cat(from.tcp_speed_limit_stop_cat());
  }
  if (from.tcp_force_limit_stop_cat() != 0) {
    set_tcp_force_limit_stop_cat(from.tcp_force_limit_stop_cat());
  }
  if (from.power_limit_stop_cat() != 0) {
    set_power_limit_stop_cat(from.power_limit_stop_cat());
  }
}

void SetSafetyStopConfigReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSafetyStopConfigReq::CopyFrom(const SetSafetyStopConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSafetyStopConfigReq::IsInitialized() const {
  return true;
}

void SetSafetyStopConfigReq::Swap(SetSafetyStopConfigReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSafetyStopConfigReq::InternalSwap(SetSafetyStopConfigReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(joint_position_limit_stop_cat_, other->joint_position_limit_stop_cat_);
  swap(joint_speed_limit_stop_cat_, other->joint_speed_limit_stop_cat_);
  swap(joint_torque_limit_stop_cat_, other->joint_torque_limit_stop_cat_);
  swap(tcp_speed_limit_stop_cat_, other->tcp_speed_limit_stop_cat_);
  swap(tcp_force_limit_stop_cat_, other->tcp_force_limit_stop_cat_);
  swap(power_limit_stop_cat_, other->power_limit_stop_cat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSafetyStopConfigReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetSafetyStopConfigRes::InitAsDefaultInstance() {
}
class SetSafetyStopConfigRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSafetyStopConfigRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSafetyStopConfigRes::SetSafetyStopConfigRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
}
SetSafetyStopConfigRes::SetSafetyStopConfigRes(const SetSafetyStopConfigRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
}

void SetSafetyStopConfigRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetSafetyStopConfigRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetSafetyStopConfigRes::~SetSafetyStopConfigRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  SharedDtor();
}

void SetSafetyStopConfigRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetSafetyStopConfigRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetSafetyStopConfigRes& SetSafetyStopConfigRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetSafetyStopConfigRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetSafetyStopConfigRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetSafetyStopConfigRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetSafetyStopConfigRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetSafetyStopConfigRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetSafetyStopConfigRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetSafetyStopConfigRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetSafetyStopConfigRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetSafetyStopConfigRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetSafetyStopConfigRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  return target;
}

size_t SetSafetyStopConfigRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSafetyStopConfigRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSafetyStopConfigRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetSafetyStopConfigRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
    MergeFrom(*source);
  }
}

void SetSafetyStopConfigRes::MergeFrom(const SetSafetyStopConfigRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetSafetyStopConfigRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSafetyStopConfigRes::CopyFrom(const SetSafetyStopConfigRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetSafetyStopConfigRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSafetyStopConfigRes::IsInitialized() const {
  return true;
}

void SetSafetyStopConfigRes::Swap(SetSafetyStopConfigRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSafetyStopConfigRes::InternalSwap(SetSafetyStopConfigRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetSafetyStopConfigRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSafetyStopConfigReq::InitAsDefaultInstance() {
}
class GetSafetyStopConfigReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSafetyStopConfigReq::GetSafetyStopConfigReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
}
GetSafetyStopConfigReq::GetSafetyStopConfigReq(const GetSafetyStopConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
}

void GetSafetyStopConfigReq::SharedCtor() {
}

GetSafetyStopConfigReq::~GetSafetyStopConfigReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  SharedDtor();
}

void GetSafetyStopConfigReq::SharedDtor() {
}

void GetSafetyStopConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSafetyStopConfigReq& GetSafetyStopConfigReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSafetyStopConfigReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetSafetyStopConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetSafetyStopConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetSafetyStopConfigReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetSafetyStopConfigReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSafetyStopConfigReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  return target;
}

size_t GetSafetyStopConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSafetyStopConfigReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSafetyStopConfigReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSafetyStopConfigReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
    MergeFrom(*source);
  }
}

void GetSafetyStopConfigReq::MergeFrom(const GetSafetyStopConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetSafetyStopConfigReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSafetyStopConfigReq::CopyFrom(const GetSafetyStopConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSafetyStopConfigReq::IsInitialized() const {
  return true;
}

void GetSafetyStopConfigReq::Swap(GetSafetyStopConfigReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSafetyStopConfigReq::InternalSwap(GetSafetyStopConfigReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSafetyStopConfigReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSafetyStopConfigRes::InitAsDefaultInstance() {
}
class GetSafetyStopConfigRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSafetyStopConfigRes::kJointPositionLimitStopCatFieldNumber;
const int GetSafetyStopConfigRes::kJointSpeedLimitStopCatFieldNumber;
const int GetSafetyStopConfigRes::kJointTorqueLimitStopCatFieldNumber;
const int GetSafetyStopConfigRes::kTcpSpeedLimitStopCatFieldNumber;
const int GetSafetyStopConfigRes::kTcpForceLimitStopCatFieldNumber;
const int GetSafetyStopConfigRes::kPowerLimitStopCatFieldNumber;
const int GetSafetyStopConfigRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSafetyStopConfigRes::GetSafetyStopConfigRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
}
GetSafetyStopConfigRes::GetSafetyStopConfigRes(const GetSafetyStopConfigRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&joint_position_limit_stop_cat_, &from.joint_position_limit_stop_cat_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_limit_stop_cat_) -
    reinterpret_cast<char*>(&joint_position_limit_stop_cat_)) + sizeof(power_limit_stop_cat_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
}

void GetSafetyStopConfigRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSafetyStopConfigRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&joint_position_limit_stop_cat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_limit_stop_cat_) -
      reinterpret_cast<char*>(&joint_position_limit_stop_cat_)) + sizeof(power_limit_stop_cat_));
}

GetSafetyStopConfigRes::~GetSafetyStopConfigRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  SharedDtor();
}

void GetSafetyStopConfigRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSafetyStopConfigRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSafetyStopConfigRes& GetSafetyStopConfigRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSafetyStopConfigRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetSafetyStopConfigRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&joint_position_limit_stop_cat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_limit_stop_cat_) -
      reinterpret_cast<char*>(&joint_position_limit_stop_cat_)) + sizeof(power_limit_stop_cat_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetSafetyStopConfigRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_joint_position_limit_stop_cat(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_joint_speed_limit_stop_cat(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_joint_torque_limit_stop_cat(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_tcp_speed_limit_stop_cat(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_tcp_force_limit_stop_cat(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_power_limit_stop_cat(static_cast<::IndyFramework::Protobuf::Shared::StopCategory>(val));
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetSafetyStopConfigRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_joint_position_limit_stop_cat(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_joint_speed_limit_stop_cat(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_joint_torque_limit_stop_cat(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tcp_speed_limit_stop_cat(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tcp_force_limit_stop_cat(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_power_limit_stop_cat(static_cast< ::IndyFramework::Protobuf::Shared::StopCategory >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetSafetyStopConfigRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
  if (this->joint_position_limit_stop_cat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->joint_position_limit_stop_cat(), output);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
  if (this->joint_speed_limit_stop_cat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->joint_speed_limit_stop_cat(), output);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
  if (this->joint_torque_limit_stop_cat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->joint_torque_limit_stop_cat(), output);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
  if (this->tcp_speed_limit_stop_cat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->tcp_speed_limit_stop_cat(), output);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
  if (this->tcp_force_limit_stop_cat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->tcp_force_limit_stop_cat(), output);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
  if (this->power_limit_stop_cat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->power_limit_stop_cat(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSafetyStopConfigRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
  if (this->joint_position_limit_stop_cat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->joint_position_limit_stop_cat(), target);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
  if (this->joint_speed_limit_stop_cat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->joint_speed_limit_stop_cat(), target);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
  if (this->joint_torque_limit_stop_cat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->joint_torque_limit_stop_cat(), target);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
  if (this->tcp_speed_limit_stop_cat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->tcp_speed_limit_stop_cat(), target);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
  if (this->tcp_force_limit_stop_cat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->tcp_force_limit_stop_cat(), target);
  }

  // .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
  if (this->power_limit_stop_cat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->power_limit_stop_cat(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSafetyStopConfigRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  return target;
}

size_t GetSafetyStopConfigRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_position_limit_stop_cat = 1;
  if (this->joint_position_limit_stop_cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->joint_position_limit_stop_cat());
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_speed_limit_stop_cat = 2;
  if (this->joint_speed_limit_stop_cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->joint_speed_limit_stop_cat());
  }

  // .IndyFramework.Protobuf.Shared.StopCategory joint_torque_limit_stop_cat = 3;
  if (this->joint_torque_limit_stop_cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->joint_torque_limit_stop_cat());
  }

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_speed_limit_stop_cat = 4;
  if (this->tcp_speed_limit_stop_cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tcp_speed_limit_stop_cat());
  }

  // .IndyFramework.Protobuf.Shared.StopCategory tcp_force_limit_stop_cat = 5;
  if (this->tcp_force_limit_stop_cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tcp_force_limit_stop_cat());
  }

  // .IndyFramework.Protobuf.Shared.StopCategory power_limit_stop_cat = 6;
  if (this->power_limit_stop_cat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->power_limit_stop_cat());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSafetyStopConfigRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSafetyStopConfigRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSafetyStopConfigRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
    MergeFrom(*source);
  }
}

void GetSafetyStopConfigRes::MergeFrom(const GetSafetyStopConfigRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.joint_position_limit_stop_cat() != 0) {
    set_joint_position_limit_stop_cat(from.joint_position_limit_stop_cat());
  }
  if (from.joint_speed_limit_stop_cat() != 0) {
    set_joint_speed_limit_stop_cat(from.joint_speed_limit_stop_cat());
  }
  if (from.joint_torque_limit_stop_cat() != 0) {
    set_joint_torque_limit_stop_cat(from.joint_torque_limit_stop_cat());
  }
  if (from.tcp_speed_limit_stop_cat() != 0) {
    set_tcp_speed_limit_stop_cat(from.tcp_speed_limit_stop_cat());
  }
  if (from.tcp_force_limit_stop_cat() != 0) {
    set_tcp_force_limit_stop_cat(from.tcp_force_limit_stop_cat());
  }
  if (from.power_limit_stop_cat() != 0) {
    set_power_limit_stop_cat(from.power_limit_stop_cat());
  }
}

void GetSafetyStopConfigRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSafetyStopConfigRes::CopyFrom(const GetSafetyStopConfigRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetSafetyStopConfigRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSafetyStopConfigRes::IsInitialized() const {
  return true;
}

void GetSafetyStopConfigRes::Swap(GetSafetyStopConfigRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSafetyStopConfigRes::InternalSwap(GetSafetyStopConfigRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(joint_position_limit_stop_cat_, other->joint_position_limit_stop_cat_);
  swap(joint_speed_limit_stop_cat_, other->joint_speed_limit_stop_cat_);
  swap(joint_torque_limit_stop_cat_, other->joint_torque_limit_stop_cat_);
  swap(tcp_speed_limit_stop_cat_, other->tcp_speed_limit_stop_cat_);
  swap(tcp_force_limit_stop_cat_, other->tcp_force_limit_stop_cat_);
  swap(power_limit_stop_cat_, other->power_limit_stop_cat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSafetyStopConfigRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetMountPosReq::InitAsDefaultInstance() {
}
class SetMountPosReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMountPosReq::kRyFieldNumber;
const int SetMountPosReq::kRzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMountPosReq::SetMountPosReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetMountPosReq)
}
SetMountPosReq::SetMountPosReq(const SetMountPosReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ry_, &from.ry_,
    static_cast<size_t>(reinterpret_cast<char*>(&rz_) -
    reinterpret_cast<char*>(&ry_)) + sizeof(rz_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetMountPosReq)
}

void SetMountPosReq::SharedCtor() {
  ::memset(&ry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rz_) -
      reinterpret_cast<char*>(&ry_)) + sizeof(rz_));
}

SetMountPosReq::~SetMountPosReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetMountPosReq)
  SharedDtor();
}

void SetMountPosReq::SharedDtor() {
}

void SetMountPosReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMountPosReq& SetMountPosReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMountPosReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetMountPosReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetMountPosReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rz_) -
      reinterpret_cast<char*>(&ry_)) + sizeof(rz_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetMountPosReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float ry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          rz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetMountPosReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetMountPosReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float ry = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rz = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetMountPosReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetMountPosReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetMountPosReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetMountPosReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ry = 1;
  if (!(this->ry() <= 0 && this->ry() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->ry(), output);
  }

  // float rz = 2;
  if (!(this->rz() <= 0 && this->rz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->rz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetMountPosReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMountPosReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetMountPosReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ry = 1;
  if (!(this->ry() <= 0 && this->ry() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->ry(), target);
  }

  // float rz = 2;
  if (!(this->rz() <= 0 && this->rz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->rz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetMountPosReq)
  return target;
}

size_t SetMountPosReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetMountPosReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float ry = 1;
  if (!(this->ry() <= 0 && this->ry() >= 0)) {
    total_size += 1 + 4;
  }

  // float rz = 2;
  if (!(this->rz() <= 0 && this->rz() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMountPosReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetMountPosReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMountPosReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetMountPosReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetMountPosReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetMountPosReq)
    MergeFrom(*source);
  }
}

void SetMountPosReq::MergeFrom(const SetMountPosReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetMountPosReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ry() <= 0 && from.ry() >= 0)) {
    set_ry(from.ry());
  }
  if (!(from.rz() <= 0 && from.rz() >= 0)) {
    set_rz(from.rz());
  }
}

void SetMountPosReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetMountPosReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMountPosReq::CopyFrom(const SetMountPosReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetMountPosReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMountPosReq::IsInitialized() const {
  return true;
}

void SetMountPosReq::Swap(SetMountPosReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMountPosReq::InternalSwap(SetMountPosReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ry_, other->ry_);
  swap(rz_, other->rz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMountPosReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetMountPosRes::InitAsDefaultInstance() {
}
class SetMountPosRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetMountPosRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetMountPosRes::SetMountPosRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetMountPosRes)
}
SetMountPosRes::SetMountPosRes(const SetMountPosRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetMountPosRes)
}

void SetMountPosRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetMountPosRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetMountPosRes::~SetMountPosRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetMountPosRes)
  SharedDtor();
}

void SetMountPosRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetMountPosRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMountPosRes& SetMountPosRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMountPosRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetMountPosRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetMountPosRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetMountPosRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetMountPosRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetMountPosRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetMountPosRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetMountPosRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetMountPosRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetMountPosRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetMountPosRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetMountPosRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetMountPosRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetMountPosRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMountPosRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetMountPosRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetMountPosRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetMountPosRes)
  return target;
}

size_t SetMountPosRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetMountPosRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMountPosRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetMountPosRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMountPosRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetMountPosRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetMountPosRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetMountPosRes)
    MergeFrom(*source);
  }
}

void SetMountPosRes::MergeFrom(const SetMountPosRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetMountPosRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetMountPosRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetMountPosRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMountPosRes::CopyFrom(const SetMountPosRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetMountPosRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMountPosRes::IsInitialized() const {
  return true;
}

void SetMountPosRes::Swap(SetMountPosRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetMountPosRes::InternalSwap(SetMountPosRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMountPosRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMountPosReq::InitAsDefaultInstance() {
}
class GetMountPosReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMountPosReq::GetMountPosReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetMountPosReq)
}
GetMountPosReq::GetMountPosReq(const GetMountPosReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetMountPosReq)
}

void GetMountPosReq::SharedCtor() {
}

GetMountPosReq::~GetMountPosReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetMountPosReq)
  SharedDtor();
}

void GetMountPosReq::SharedDtor() {
}

void GetMountPosReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMountPosReq& GetMountPosReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMountPosReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetMountPosReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetMountPosReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMountPosReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMountPosReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetMountPosReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetMountPosReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetMountPosReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMountPosReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetMountPosReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetMountPosReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMountPosReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetMountPosReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetMountPosReq)
  return target;
}

size_t GetMountPosReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetMountPosReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMountPosReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetMountPosReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMountPosReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMountPosReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetMountPosReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetMountPosReq)
    MergeFrom(*source);
  }
}

void GetMountPosReq::MergeFrom(const GetMountPosReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetMountPosReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetMountPosReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetMountPosReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMountPosReq::CopyFrom(const GetMountPosReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetMountPosReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMountPosReq::IsInitialized() const {
  return true;
}

void GetMountPosReq::Swap(GetMountPosReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMountPosReq::InternalSwap(GetMountPosReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMountPosReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMountPosRes::InitAsDefaultInstance() {
}
class GetMountPosRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMountPosRes::kRyFieldNumber;
const int GetMountPosRes::kRzFieldNumber;
const int GetMountPosRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMountPosRes::GetMountPosRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetMountPosRes)
}
GetMountPosRes::GetMountPosRes(const GetMountPosRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&ry_, &from.ry_,
    static_cast<size_t>(reinterpret_cast<char*>(&rz_) -
    reinterpret_cast<char*>(&ry_)) + sizeof(rz_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetMountPosRes)
}

void GetMountPosRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMountPosRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rz_) -
      reinterpret_cast<char*>(&ry_)) + sizeof(rz_));
}

GetMountPosRes::~GetMountPosRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetMountPosRes)
  SharedDtor();
}

void GetMountPosRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetMountPosRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMountPosRes& GetMountPosRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMountPosRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetMountPosRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetMountPosRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rz_) -
      reinterpret_cast<char*>(&ry_)) + sizeof(rz_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMountPosRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float ry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          rz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetMountPosRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMountPosRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetMountPosRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float ry = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rz = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetMountPosRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetMountPosRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetMountPosRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMountPosRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetMountPosRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ry = 1;
  if (!(this->ry() <= 0 && this->ry() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->ry(), output);
  }

  // float rz = 2;
  if (!(this->rz() <= 0 && this->rz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->rz(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetMountPosRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetMountPosRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMountPosRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetMountPosRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ry = 1;
  if (!(this->ry() <= 0 && this->ry() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->ry(), target);
  }

  // float rz = 2;
  if (!(this->rz() <= 0 && this->rz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->rz(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetMountPosRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetMountPosRes)
  return target;
}

size_t GetMountPosRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetMountPosRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // float ry = 1;
  if (!(this->ry() <= 0 && this->ry() >= 0)) {
    total_size += 1 + 4;
  }

  // float rz = 2;
  if (!(this->rz() <= 0 && this->rz() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMountPosRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetMountPosRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMountPosRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMountPosRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetMountPosRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetMountPosRes)
    MergeFrom(*source);
  }
}

void GetMountPosRes::MergeFrom(const GetMountPosRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetMountPosRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (!(from.ry() <= 0 && from.ry() >= 0)) {
    set_ry(from.ry());
  }
  if (!(from.rz() <= 0 && from.rz() >= 0)) {
    set_rz(from.rz());
  }
}

void GetMountPosRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetMountPosRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMountPosRes::CopyFrom(const GetMountPosRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetMountPosRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMountPosRes::IsInitialized() const {
  return true;
}

void GetMountPosRes::Swap(GetMountPosRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMountPosRes::InternalSwap(GetMountPosRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ry_, other->ry_);
  swap(rz_, other->rz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMountPosRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetToolPropertyReq::InitAsDefaultInstance() {
}
class SetToolPropertyReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetToolPropertyReq::kMassFieldNumber;
const int SetToolPropertyReq::kCenterOfMassFieldNumber;
const int SetToolPropertyReq::kInertiaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetToolPropertyReq::SetToolPropertyReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetToolPropertyReq)
}
SetToolPropertyReq::SetToolPropertyReq(const SetToolPropertyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      center_of_mass_(from.center_of_mass_),
      inertia_(from.inertia_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mass_ = from.mass_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetToolPropertyReq)
}

void SetToolPropertyReq::SharedCtor() {
  mass_ = 0;
}

SetToolPropertyReq::~SetToolPropertyReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  SharedDtor();
}

void SetToolPropertyReq::SharedDtor() {
}

void SetToolPropertyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetToolPropertyReq& SetToolPropertyReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetToolPropertyReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetToolPropertyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  center_of_mass_.Clear();
  inertia_.Clear();
  mass_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetToolPropertyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float mass = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          mass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float center_of_mass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_center_of_mass(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_center_of_mass(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float inertia = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_inertia(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_inertia(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetToolPropertyReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float mass = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float center_of_mass = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_center_of_mass())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_center_of_mass())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float inertia = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_inertia())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_inertia())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetToolPropertyReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float mass = 1;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->mass(), output);
  }

  // repeated float center_of_mass = 2;
  if (this->center_of_mass_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_center_of_mass_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->center_of_mass().data(), this->center_of_mass_size(), output);
  }

  // repeated float inertia = 3;
  if (this->inertia_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_inertia_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->inertia().data(), this->inertia_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetToolPropertyReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetToolPropertyReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float mass = 1;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->mass(), target);
  }

  // repeated float center_of_mass = 2;
  if (this->center_of_mass_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _center_of_mass_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->center_of_mass_, target);
  }

  // repeated float inertia = 3;
  if (this->inertia_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _inertia_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->inertia_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  return target;
}

size_t SetToolPropertyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float center_of_mass = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->center_of_mass_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _center_of_mass_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float inertia = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->inertia_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _inertia_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float mass = 1;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetToolPropertyReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetToolPropertyReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetToolPropertyReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetToolPropertyReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetToolPropertyReq)
    MergeFrom(*source);
  }
}

void SetToolPropertyReq::MergeFrom(const SetToolPropertyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  center_of_mass_.MergeFrom(from.center_of_mass_);
  inertia_.MergeFrom(from.inertia_);
  if (!(from.mass() <= 0 && from.mass() >= 0)) {
    set_mass(from.mass());
  }
}

void SetToolPropertyReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetToolPropertyReq::CopyFrom(const SetToolPropertyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetToolPropertyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetToolPropertyReq::IsInitialized() const {
  return true;
}

void SetToolPropertyReq::Swap(SetToolPropertyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetToolPropertyReq::InternalSwap(SetToolPropertyReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  center_of_mass_.InternalSwap(&other->center_of_mass_);
  inertia_.InternalSwap(&other->inertia_);
  swap(mass_, other->mass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetToolPropertyReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetToolPropertyRes::InitAsDefaultInstance() {
}
class SetToolPropertyRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetToolPropertyRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetToolPropertyRes::SetToolPropertyRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetToolPropertyRes)
}
SetToolPropertyRes::SetToolPropertyRes(const SetToolPropertyRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetToolPropertyRes)
}

void SetToolPropertyRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetToolPropertyRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetToolPropertyRes::~SetToolPropertyRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  SharedDtor();
}

void SetToolPropertyRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetToolPropertyRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetToolPropertyRes& SetToolPropertyRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetToolPropertyRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetToolPropertyRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetToolPropertyRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetToolPropertyRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetToolPropertyRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetToolPropertyRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetToolPropertyRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetToolPropertyRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetToolPropertyRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetToolPropertyRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetToolPropertyRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  return target;
}

size_t SetToolPropertyRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetToolPropertyRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetToolPropertyRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetToolPropertyRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetToolPropertyRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetToolPropertyRes)
    MergeFrom(*source);
  }
}

void SetToolPropertyRes::MergeFrom(const SetToolPropertyRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetToolPropertyRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetToolPropertyRes::CopyFrom(const SetToolPropertyRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetToolPropertyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetToolPropertyRes::IsInitialized() const {
  return true;
}

void SetToolPropertyRes::Swap(SetToolPropertyRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetToolPropertyRes::InternalSwap(SetToolPropertyRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetToolPropertyRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetToolPropertyReq::InitAsDefaultInstance() {
}
class GetToolPropertyReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetToolPropertyReq::GetToolPropertyReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetToolPropertyReq)
}
GetToolPropertyReq::GetToolPropertyReq(const GetToolPropertyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetToolPropertyReq)
}

void GetToolPropertyReq::SharedCtor() {
}

GetToolPropertyReq::~GetToolPropertyReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  SharedDtor();
}

void GetToolPropertyReq::SharedDtor() {
}

void GetToolPropertyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetToolPropertyReq& GetToolPropertyReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetToolPropertyReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetToolPropertyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetToolPropertyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetToolPropertyReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetToolPropertyReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetToolPropertyReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetToolPropertyReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  return target;
}

size_t GetToolPropertyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetToolPropertyReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetToolPropertyReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetToolPropertyReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetToolPropertyReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetToolPropertyReq)
    MergeFrom(*source);
  }
}

void GetToolPropertyReq::MergeFrom(const GetToolPropertyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetToolPropertyReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetToolPropertyReq::CopyFrom(const GetToolPropertyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetToolPropertyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetToolPropertyReq::IsInitialized() const {
  return true;
}

void GetToolPropertyReq::Swap(GetToolPropertyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetToolPropertyReq::InternalSwap(GetToolPropertyReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetToolPropertyReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetToolPropertyRes::InitAsDefaultInstance() {
}
class GetToolPropertyRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetToolPropertyRes::kMassFieldNumber;
const int GetToolPropertyRes::kCenterOfMassFieldNumber;
const int GetToolPropertyRes::kInertiaFieldNumber;
const int GetToolPropertyRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetToolPropertyRes::GetToolPropertyRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetToolPropertyRes)
}
GetToolPropertyRes::GetToolPropertyRes(const GetToolPropertyRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      center_of_mass_(from.center_of_mass_),
      inertia_(from.inertia_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  mass_ = from.mass_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetToolPropertyRes)
}

void GetToolPropertyRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetToolPropertyRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mass_ = 0;
}

GetToolPropertyRes::~GetToolPropertyRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  SharedDtor();
}

void GetToolPropertyRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetToolPropertyRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetToolPropertyRes& GetToolPropertyRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetToolPropertyRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetToolPropertyRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  center_of_mass_.Clear();
  inertia_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mass_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetToolPropertyRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float mass = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          mass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float center_of_mass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_center_of_mass(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_center_of_mass(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float inertia = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_inertia(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_inertia(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetToolPropertyRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetToolPropertyRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float mass = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float center_of_mass = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_center_of_mass())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_center_of_mass())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float inertia = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_inertia())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_inertia())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetToolPropertyRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetToolPropertyRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float mass = 1;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->mass(), output);
  }

  // repeated float center_of_mass = 2;
  if (this->center_of_mass_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_center_of_mass_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->center_of_mass().data(), this->center_of_mass_size(), output);
  }

  // repeated float inertia = 3;
  if (this->inertia_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_inertia_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->inertia().data(), this->inertia_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetToolPropertyRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetToolPropertyRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetToolPropertyRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float mass = 1;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->mass(), target);
  }

  // repeated float center_of_mass = 2;
  if (this->center_of_mass_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _center_of_mass_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->center_of_mass_, target);
  }

  // repeated float inertia = 3;
  if (this->inertia_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _inertia_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->inertia_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetToolPropertyRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  return target;
}

size_t GetToolPropertyRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float center_of_mass = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->center_of_mass_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _center_of_mass_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float inertia = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->inertia_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _inertia_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // float mass = 1;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetToolPropertyRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetToolPropertyRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetToolPropertyRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetToolPropertyRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetToolPropertyRes)
    MergeFrom(*source);
  }
}

void GetToolPropertyRes::MergeFrom(const GetToolPropertyRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  center_of_mass_.MergeFrom(from.center_of_mass_);
  inertia_.MergeFrom(from.inertia_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (!(from.mass() <= 0 && from.mass() >= 0)) {
    set_mass(from.mass());
  }
}

void GetToolPropertyRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetToolPropertyRes::CopyFrom(const GetToolPropertyRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetToolPropertyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetToolPropertyRes::IsInitialized() const {
  return true;
}

void GetToolPropertyRes::Swap(GetToolPropertyRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetToolPropertyRes::InternalSwap(GetToolPropertyRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  center_of_mass_.InternalSwap(&other->center_of_mass_);
  inertia_.InternalSwap(&other->inertia_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mass_, other->mass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetToolPropertyRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCollSensLevelReq::InitAsDefaultInstance() {
}
class SetCollSensLevelReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetCollSensLevelReq::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetCollSensLevelReq::SetCollSensLevelReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
}
SetCollSensLevelReq::SetCollSensLevelReq(const SetCollSensLevelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
}

void SetCollSensLevelReq::SharedCtor() {
  level_ = 0;
}

SetCollSensLevelReq::~SetCollSensLevelReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  SharedDtor();
}

void SetCollSensLevelReq::SharedDtor() {
}

void SetCollSensLevelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCollSensLevelReq& SetCollSensLevelReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCollSensLevelReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetCollSensLevelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetCollSensLevelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetCollSensLevelReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 level = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetCollSensLevelReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCollSensLevelReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  return target;
}

size_t SetCollSensLevelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCollSensLevelReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCollSensLevelReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCollSensLevelReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
    MergeFrom(*source);
  }
}

void SetCollSensLevelReq::MergeFrom(const SetCollSensLevelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    set_level(from.level());
  }
}

void SetCollSensLevelReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCollSensLevelReq::CopyFrom(const SetCollSensLevelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetCollSensLevelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCollSensLevelReq::IsInitialized() const {
  return true;
}

void SetCollSensLevelReq::Swap(SetCollSensLevelReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetCollSensLevelReq::InternalSwap(SetCollSensLevelReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCollSensLevelReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCollSensLevelRes::InitAsDefaultInstance() {
}
class SetCollSensLevelRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetCollSensLevelRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetCollSensLevelRes::SetCollSensLevelRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
}
SetCollSensLevelRes::SetCollSensLevelRes(const SetCollSensLevelRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
}

void SetCollSensLevelRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetCollSensLevelRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetCollSensLevelRes::~SetCollSensLevelRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  SharedDtor();
}

void SetCollSensLevelRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetCollSensLevelRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCollSensLevelRes& SetCollSensLevelRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCollSensLevelRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetCollSensLevelRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetCollSensLevelRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetCollSensLevelRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetCollSensLevelRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetCollSensLevelRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetCollSensLevelRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetCollSensLevelRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCollSensLevelRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetCollSensLevelRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  return target;
}

size_t SetCollSensLevelRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCollSensLevelRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCollSensLevelRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCollSensLevelRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
    MergeFrom(*source);
  }
}

void SetCollSensLevelRes::MergeFrom(const SetCollSensLevelRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetCollSensLevelRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCollSensLevelRes::CopyFrom(const SetCollSensLevelRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetCollSensLevelRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCollSensLevelRes::IsInitialized() const {
  return true;
}

void SetCollSensLevelRes::Swap(SetCollSensLevelRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetCollSensLevelRes::InternalSwap(SetCollSensLevelRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCollSensLevelRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollSensLevelReq::InitAsDefaultInstance() {
}
class GetCollSensLevelReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCollSensLevelReq::GetCollSensLevelReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
}
GetCollSensLevelReq::GetCollSensLevelReq(const GetCollSensLevelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
}

void GetCollSensLevelReq::SharedCtor() {
}

GetCollSensLevelReq::~GetCollSensLevelReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  SharedDtor();
}

void GetCollSensLevelReq::SharedDtor() {
}

void GetCollSensLevelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollSensLevelReq& GetCollSensLevelReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollSensLevelReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetCollSensLevelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCollSensLevelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCollSensLevelReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCollSensLevelReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollSensLevelReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  return target;
}

size_t GetCollSensLevelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollSensLevelReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollSensLevelReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollSensLevelReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
    MergeFrom(*source);
  }
}

void GetCollSensLevelReq::MergeFrom(const GetCollSensLevelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetCollSensLevelReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollSensLevelReq::CopyFrom(const GetCollSensLevelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetCollSensLevelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollSensLevelReq::IsInitialized() const {
  return true;
}

void GetCollSensLevelReq::Swap(GetCollSensLevelReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCollSensLevelReq::InternalSwap(GetCollSensLevelReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollSensLevelReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollSensLevelRes::InitAsDefaultInstance() {
}
class GetCollSensLevelRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCollSensLevelRes::kLevelFieldNumber;
const int GetCollSensLevelRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCollSensLevelRes::GetCollSensLevelRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
}
GetCollSensLevelRes::GetCollSensLevelRes(const GetCollSensLevelRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
}

void GetCollSensLevelRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCollSensLevelRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
}

GetCollSensLevelRes::~GetCollSensLevelRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  SharedDtor();
}

void GetCollSensLevelRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCollSensLevelRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollSensLevelRes& GetCollSensLevelRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollSensLevelRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetCollSensLevelRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCollSensLevelRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetCollSensLevelRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCollSensLevelRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 level = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetCollSensLevelRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCollSensLevelRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCollSensLevelRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollSensLevelRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 level = 1;
  if (this->level() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCollSensLevelRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  return target;
}

size_t GetCollSensLevelRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->level());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollSensLevelRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollSensLevelRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollSensLevelRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
    MergeFrom(*source);
  }
}

void GetCollSensLevelRes::MergeFrom(const GetCollSensLevelRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void GetCollSensLevelRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollSensLevelRes::CopyFrom(const GetCollSensLevelRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetCollSensLevelRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollSensLevelRes::IsInitialized() const {
  return true;
}

void GetCollSensLevelRes::Swap(GetCollSensLevelRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCollSensLevelRes::InternalSwap(GetCollSensLevelRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollSensLevelRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCollSensParamReq::InitAsDefaultInstance() {
}
class SetCollSensParamReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetCollSensParamReq::kJTorqueBasesFieldNumber;
const int SetCollSensParamReq::kJTorqueTangentsFieldNumber;
const int SetCollSensParamReq::kTTorqueBasesFieldNumber;
const int SetCollSensParamReq::kTTorqueTangentsFieldNumber;
const int SetCollSensParamReq::kErrorBasesFieldNumber;
const int SetCollSensParamReq::kErrorTangentsFieldNumber;
const int SetCollSensParamReq::kTConstvelTorqueBasesFieldNumber;
const int SetCollSensParamReq::kTConstvelTorqueTangentsFieldNumber;
const int SetCollSensParamReq::kTConveyorTorqueBasesFieldNumber;
const int SetCollSensParamReq::kTConveyorTorqueTangentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetCollSensParamReq::SetCollSensParamReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetCollSensParamReq)
}
SetCollSensParamReq::SetCollSensParamReq(const SetCollSensParamReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      j_torque_bases_(from.j_torque_bases_),
      j_torque_tangents_(from.j_torque_tangents_),
      t_torque_bases_(from.t_torque_bases_),
      t_torque_tangents_(from.t_torque_tangents_),
      error_bases_(from.error_bases_),
      error_tangents_(from.error_tangents_),
      t_constvel_torque_bases_(from.t_constvel_torque_bases_),
      t_constvel_torque_tangents_(from.t_constvel_torque_tangents_),
      t_conveyor_torque_bases_(from.t_conveyor_torque_bases_),
      t_conveyor_torque_tangents_(from.t_conveyor_torque_tangents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetCollSensParamReq)
}

void SetCollSensParamReq::SharedCtor() {
}

SetCollSensParamReq::~SetCollSensParamReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  SharedDtor();
}

void SetCollSensParamReq::SharedDtor() {
}

void SetCollSensParamReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCollSensParamReq& SetCollSensParamReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCollSensParamReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetCollSensParamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  j_torque_bases_.Clear();
  j_torque_tangents_.Clear();
  t_torque_bases_.Clear();
  t_torque_tangents_.Clear();
  error_bases_.Clear();
  error_tangents_.Clear();
  t_constvel_torque_bases_.Clear();
  t_constvel_torque_tangents_.Clear();
  t_conveyor_torque_bases_.Clear();
  t_conveyor_torque_tangents_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetCollSensParamReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float j_torque_bases = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_j_torque_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_j_torque_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float j_torque_tangents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_j_torque_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_j_torque_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_torque_bases = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_torque_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_t_torque_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_torque_tangents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_torque_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_t_torque_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float error_bases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_error_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          add_error_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float error_tangents = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_error_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          add_error_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_constvel_torque_bases = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_constvel_torque_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          add_t_constvel_torque_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_constvel_torque_tangents = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_constvel_torque_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69) {
          add_t_constvel_torque_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_conveyor_torque_bases = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_conveyor_torque_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          add_t_conveyor_torque_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_conveyor_torque_tangents = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_conveyor_torque_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85) {
          add_t_conveyor_torque_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetCollSensParamReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float j_torque_bases = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_j_torque_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_j_torque_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float j_torque_tangents = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_j_torque_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_j_torque_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_torque_bases = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_torque_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_t_torque_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_torque_tangents = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_torque_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_t_torque_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float error_bases = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_error_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_error_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float error_tangents = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_error_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_error_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_constvel_torque_bases = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_constvel_torque_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58u, input, this->mutable_t_constvel_torque_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_constvel_torque_tangents = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_constvel_torque_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66u, input, this->mutable_t_constvel_torque_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_conveyor_torque_bases = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_conveyor_torque_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74u, input, this->mutable_t_conveyor_torque_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_conveyor_torque_tangents = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_conveyor_torque_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_t_conveyor_torque_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetCollSensParamReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float j_torque_bases = 1;
  if (this->j_torque_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_j_torque_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->j_torque_bases().data(), this->j_torque_bases_size(), output);
  }

  // repeated float j_torque_tangents = 2;
  if (this->j_torque_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_j_torque_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->j_torque_tangents().data(), this->j_torque_tangents_size(), output);
  }

  // repeated float t_torque_bases = 3;
  if (this->t_torque_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_torque_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_torque_bases().data(), this->t_torque_bases_size(), output);
  }

  // repeated float t_torque_tangents = 4;
  if (this->t_torque_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_torque_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_torque_tangents().data(), this->t_torque_tangents_size(), output);
  }

  // repeated float error_bases = 5;
  if (this->error_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_error_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->error_bases().data(), this->error_bases_size(), output);
  }

  // repeated float error_tangents = 6;
  if (this->error_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_error_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->error_tangents().data(), this->error_tangents_size(), output);
  }

  // repeated float t_constvel_torque_bases = 7;
  if (this->t_constvel_torque_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_constvel_torque_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_constvel_torque_bases().data(), this->t_constvel_torque_bases_size(), output);
  }

  // repeated float t_constvel_torque_tangents = 8;
  if (this->t_constvel_torque_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(8, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_constvel_torque_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_constvel_torque_tangents().data(), this->t_constvel_torque_tangents_size(), output);
  }

  // repeated float t_conveyor_torque_bases = 9;
  if (this->t_conveyor_torque_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(9, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_conveyor_torque_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_conveyor_torque_bases().data(), this->t_conveyor_torque_bases_size(), output);
  }

  // repeated float t_conveyor_torque_tangents = 10;
  if (this->t_conveyor_torque_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(10, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_conveyor_torque_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_conveyor_torque_tangents().data(), this->t_conveyor_torque_tangents_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetCollSensParamReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCollSensParamReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float j_torque_bases = 1;
  if (this->j_torque_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _j_torque_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->j_torque_bases_, target);
  }

  // repeated float j_torque_tangents = 2;
  if (this->j_torque_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _j_torque_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->j_torque_tangents_, target);
  }

  // repeated float t_torque_bases = 3;
  if (this->t_torque_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_torque_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_torque_bases_, target);
  }

  // repeated float t_torque_tangents = 4;
  if (this->t_torque_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_torque_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_torque_tangents_, target);
  }

  // repeated float error_bases = 5;
  if (this->error_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _error_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->error_bases_, target);
  }

  // repeated float error_tangents = 6;
  if (this->error_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _error_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->error_tangents_, target);
  }

  // repeated float t_constvel_torque_bases = 7;
  if (this->t_constvel_torque_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_constvel_torque_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_constvel_torque_bases_, target);
  }

  // repeated float t_constvel_torque_tangents = 8;
  if (this->t_constvel_torque_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      8,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_constvel_torque_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_constvel_torque_tangents_, target);
  }

  // repeated float t_conveyor_torque_bases = 9;
  if (this->t_conveyor_torque_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      9,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_conveyor_torque_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_conveyor_torque_bases_, target);
  }

  // repeated float t_conveyor_torque_tangents = 10;
  if (this->t_conveyor_torque_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      10,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_conveyor_torque_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_conveyor_torque_tangents_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  return target;
}

size_t SetCollSensParamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float j_torque_bases = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->j_torque_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _j_torque_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float j_torque_tangents = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->j_torque_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _j_torque_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_torque_bases = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->t_torque_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_torque_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_torque_tangents = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->t_torque_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_torque_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float error_bases = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->error_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _error_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float error_tangents = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->error_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _error_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_constvel_torque_bases = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->t_constvel_torque_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_constvel_torque_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_constvel_torque_tangents = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->t_constvel_torque_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_constvel_torque_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_conveyor_torque_bases = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->t_conveyor_torque_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_conveyor_torque_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_conveyor_torque_tangents = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->t_conveyor_torque_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_conveyor_torque_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCollSensParamReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCollSensParamReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCollSensParamReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetCollSensParamReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetCollSensParamReq)
    MergeFrom(*source);
  }
}

void SetCollSensParamReq::MergeFrom(const SetCollSensParamReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  j_torque_bases_.MergeFrom(from.j_torque_bases_);
  j_torque_tangents_.MergeFrom(from.j_torque_tangents_);
  t_torque_bases_.MergeFrom(from.t_torque_bases_);
  t_torque_tangents_.MergeFrom(from.t_torque_tangents_);
  error_bases_.MergeFrom(from.error_bases_);
  error_tangents_.MergeFrom(from.error_tangents_);
  t_constvel_torque_bases_.MergeFrom(from.t_constvel_torque_bases_);
  t_constvel_torque_tangents_.MergeFrom(from.t_constvel_torque_tangents_);
  t_conveyor_torque_bases_.MergeFrom(from.t_conveyor_torque_bases_);
  t_conveyor_torque_tangents_.MergeFrom(from.t_conveyor_torque_tangents_);
}

void SetCollSensParamReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCollSensParamReq::CopyFrom(const SetCollSensParamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetCollSensParamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCollSensParamReq::IsInitialized() const {
  return true;
}

void SetCollSensParamReq::Swap(SetCollSensParamReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetCollSensParamReq::InternalSwap(SetCollSensParamReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  j_torque_bases_.InternalSwap(&other->j_torque_bases_);
  j_torque_tangents_.InternalSwap(&other->j_torque_tangents_);
  t_torque_bases_.InternalSwap(&other->t_torque_bases_);
  t_torque_tangents_.InternalSwap(&other->t_torque_tangents_);
  error_bases_.InternalSwap(&other->error_bases_);
  error_tangents_.InternalSwap(&other->error_tangents_);
  t_constvel_torque_bases_.InternalSwap(&other->t_constvel_torque_bases_);
  t_constvel_torque_tangents_.InternalSwap(&other->t_constvel_torque_tangents_);
  t_conveyor_torque_bases_.InternalSwap(&other->t_conveyor_torque_bases_);
  t_conveyor_torque_tangents_.InternalSwap(&other->t_conveyor_torque_tangents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCollSensParamReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCollSensParamRes::InitAsDefaultInstance() {
}
class SetCollSensParamRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetCollSensParamRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetCollSensParamRes::SetCollSensParamRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetCollSensParamRes)
}
SetCollSensParamRes::SetCollSensParamRes(const SetCollSensParamRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetCollSensParamRes)
}

void SetCollSensParamRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetCollSensParamRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetCollSensParamRes::~SetCollSensParamRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  SharedDtor();
}

void SetCollSensParamRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetCollSensParamRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCollSensParamRes& SetCollSensParamRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCollSensParamRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetCollSensParamRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetCollSensParamRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetCollSensParamRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetCollSensParamRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetCollSensParamRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetCollSensParamRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetCollSensParamRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetCollSensParamRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCollSensParamRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetCollSensParamRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  return target;
}

size_t SetCollSensParamRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCollSensParamRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCollSensParamRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCollSensParamRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetCollSensParamRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetCollSensParamRes)
    MergeFrom(*source);
  }
}

void SetCollSensParamRes::MergeFrom(const SetCollSensParamRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetCollSensParamRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCollSensParamRes::CopyFrom(const SetCollSensParamRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetCollSensParamRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCollSensParamRes::IsInitialized() const {
  return true;
}

void SetCollSensParamRes::Swap(SetCollSensParamRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetCollSensParamRes::InternalSwap(SetCollSensParamRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCollSensParamRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollSensParamReq::InitAsDefaultInstance() {
}
class GetCollSensParamReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCollSensParamReq::GetCollSensParamReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetCollSensParamReq)
}
GetCollSensParamReq::GetCollSensParamReq(const GetCollSensParamReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetCollSensParamReq)
}

void GetCollSensParamReq::SharedCtor() {
}

GetCollSensParamReq::~GetCollSensParamReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  SharedDtor();
}

void GetCollSensParamReq::SharedDtor() {
}

void GetCollSensParamReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollSensParamReq& GetCollSensParamReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollSensParamReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetCollSensParamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCollSensParamReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCollSensParamReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCollSensParamReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetCollSensParamReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollSensParamReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  return target;
}

size_t GetCollSensParamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollSensParamReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollSensParamReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollSensParamReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetCollSensParamReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetCollSensParamReq)
    MergeFrom(*source);
  }
}

void GetCollSensParamReq::MergeFrom(const GetCollSensParamReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetCollSensParamReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollSensParamReq::CopyFrom(const GetCollSensParamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetCollSensParamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollSensParamReq::IsInitialized() const {
  return true;
}

void GetCollSensParamReq::Swap(GetCollSensParamReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCollSensParamReq::InternalSwap(GetCollSensParamReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollSensParamReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollSensParamRes::InitAsDefaultInstance() {
}
class GetCollSensParamRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCollSensParamRes::kJTorqueBasesFieldNumber;
const int GetCollSensParamRes::kJTorqueTangentsFieldNumber;
const int GetCollSensParamRes::kTTorqueBasesFieldNumber;
const int GetCollSensParamRes::kTTorqueTangentsFieldNumber;
const int GetCollSensParamRes::kErrorBasesFieldNumber;
const int GetCollSensParamRes::kErrorTangentsFieldNumber;
const int GetCollSensParamRes::kTConstvelTorqueBasesFieldNumber;
const int GetCollSensParamRes::kTConstvelTorqueTangentsFieldNumber;
const int GetCollSensParamRes::kTConveyorTorqueBasesFieldNumber;
const int GetCollSensParamRes::kTConveyorTorqueTangentsFieldNumber;
const int GetCollSensParamRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCollSensParamRes::GetCollSensParamRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetCollSensParamRes)
}
GetCollSensParamRes::GetCollSensParamRes(const GetCollSensParamRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      j_torque_bases_(from.j_torque_bases_),
      j_torque_tangents_(from.j_torque_tangents_),
      t_torque_bases_(from.t_torque_bases_),
      t_torque_tangents_(from.t_torque_tangents_),
      error_bases_(from.error_bases_),
      error_tangents_(from.error_tangents_),
      t_constvel_torque_bases_(from.t_constvel_torque_bases_),
      t_constvel_torque_tangents_(from.t_constvel_torque_tangents_),
      t_conveyor_torque_bases_(from.t_conveyor_torque_bases_),
      t_conveyor_torque_tangents_(from.t_conveyor_torque_tangents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetCollSensParamRes)
}

void GetCollSensParamRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCollSensParamRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCollSensParamRes::~GetCollSensParamRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  SharedDtor();
}

void GetCollSensParamRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCollSensParamRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollSensParamRes& GetCollSensParamRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollSensParamRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetCollSensParamRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  j_torque_bases_.Clear();
  j_torque_tangents_.Clear();
  t_torque_bases_.Clear();
  t_torque_tangents_.Clear();
  error_bases_.Clear();
  error_tangents_.Clear();
  t_constvel_torque_bases_.Clear();
  t_constvel_torque_tangents_.Clear();
  t_conveyor_torque_bases_.Clear();
  t_conveyor_torque_tangents_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCollSensParamRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float j_torque_bases = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_j_torque_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_j_torque_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float j_torque_tangents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_j_torque_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_j_torque_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_torque_bases = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_torque_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_t_torque_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_torque_tangents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_torque_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_t_torque_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float error_bases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_error_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          add_error_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float error_tangents = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_error_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          add_error_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_constvel_torque_bases = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_constvel_torque_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          add_t_constvel_torque_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_constvel_torque_tangents = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_constvel_torque_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69) {
          add_t_constvel_torque_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_conveyor_torque_bases = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_conveyor_torque_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          add_t_conveyor_torque_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_conveyor_torque_tangents = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_conveyor_torque_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85) {
          add_t_conveyor_torque_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetCollSensParamRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCollSensParamRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float j_torque_bases = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_j_torque_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_j_torque_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float j_torque_tangents = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_j_torque_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_j_torque_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_torque_bases = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_torque_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_t_torque_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_torque_tangents = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_torque_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_t_torque_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float error_bases = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_error_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_error_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float error_tangents = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_error_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_error_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_constvel_torque_bases = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_constvel_torque_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58u, input, this->mutable_t_constvel_torque_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_constvel_torque_tangents = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_constvel_torque_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66u, input, this->mutable_t_constvel_torque_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_conveyor_torque_bases = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_conveyor_torque_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74u, input, this->mutable_t_conveyor_torque_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_conveyor_torque_tangents = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_conveyor_torque_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_t_conveyor_torque_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetCollSensParamRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCollSensParamRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float j_torque_bases = 1;
  if (this->j_torque_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_j_torque_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->j_torque_bases().data(), this->j_torque_bases_size(), output);
  }

  // repeated float j_torque_tangents = 2;
  if (this->j_torque_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_j_torque_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->j_torque_tangents().data(), this->j_torque_tangents_size(), output);
  }

  // repeated float t_torque_bases = 3;
  if (this->t_torque_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_torque_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_torque_bases().data(), this->t_torque_bases_size(), output);
  }

  // repeated float t_torque_tangents = 4;
  if (this->t_torque_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_torque_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_torque_tangents().data(), this->t_torque_tangents_size(), output);
  }

  // repeated float error_bases = 5;
  if (this->error_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_error_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->error_bases().data(), this->error_bases_size(), output);
  }

  // repeated float error_tangents = 6;
  if (this->error_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_error_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->error_tangents().data(), this->error_tangents_size(), output);
  }

  // repeated float t_constvel_torque_bases = 7;
  if (this->t_constvel_torque_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_constvel_torque_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_constvel_torque_bases().data(), this->t_constvel_torque_bases_size(), output);
  }

  // repeated float t_constvel_torque_tangents = 8;
  if (this->t_constvel_torque_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(8, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_constvel_torque_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_constvel_torque_tangents().data(), this->t_constvel_torque_tangents_size(), output);
  }

  // repeated float t_conveyor_torque_bases = 9;
  if (this->t_conveyor_torque_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(9, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_conveyor_torque_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_conveyor_torque_bases().data(), this->t_conveyor_torque_bases_size(), output);
  }

  // repeated float t_conveyor_torque_tangents = 10;
  if (this->t_conveyor_torque_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(10, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_conveyor_torque_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_conveyor_torque_tangents().data(), this->t_conveyor_torque_tangents_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCollSensParamRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetCollSensParamRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollSensParamRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float j_torque_bases = 1;
  if (this->j_torque_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _j_torque_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->j_torque_bases_, target);
  }

  // repeated float j_torque_tangents = 2;
  if (this->j_torque_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _j_torque_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->j_torque_tangents_, target);
  }

  // repeated float t_torque_bases = 3;
  if (this->t_torque_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_torque_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_torque_bases_, target);
  }

  // repeated float t_torque_tangents = 4;
  if (this->t_torque_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_torque_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_torque_tangents_, target);
  }

  // repeated float error_bases = 5;
  if (this->error_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _error_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->error_bases_, target);
  }

  // repeated float error_tangents = 6;
  if (this->error_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _error_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->error_tangents_, target);
  }

  // repeated float t_constvel_torque_bases = 7;
  if (this->t_constvel_torque_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_constvel_torque_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_constvel_torque_bases_, target);
  }

  // repeated float t_constvel_torque_tangents = 8;
  if (this->t_constvel_torque_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      8,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_constvel_torque_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_constvel_torque_tangents_, target);
  }

  // repeated float t_conveyor_torque_bases = 9;
  if (this->t_conveyor_torque_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      9,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_conveyor_torque_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_conveyor_torque_bases_, target);
  }

  // repeated float t_conveyor_torque_tangents = 10;
  if (this->t_conveyor_torque_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      10,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_conveyor_torque_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_conveyor_torque_tangents_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCollSensParamRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  return target;
}

size_t GetCollSensParamRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float j_torque_bases = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->j_torque_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _j_torque_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float j_torque_tangents = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->j_torque_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _j_torque_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_torque_bases = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->t_torque_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_torque_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_torque_tangents = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->t_torque_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_torque_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float error_bases = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->error_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _error_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float error_tangents = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->error_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _error_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_constvel_torque_bases = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->t_constvel_torque_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_constvel_torque_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_constvel_torque_tangents = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->t_constvel_torque_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_constvel_torque_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_conveyor_torque_bases = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->t_conveyor_torque_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_conveyor_torque_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_conveyor_torque_tangents = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->t_conveyor_torque_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_conveyor_torque_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollSensParamRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollSensParamRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollSensParamRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetCollSensParamRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetCollSensParamRes)
    MergeFrom(*source);
  }
}

void GetCollSensParamRes::MergeFrom(const GetCollSensParamRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  j_torque_bases_.MergeFrom(from.j_torque_bases_);
  j_torque_tangents_.MergeFrom(from.j_torque_tangents_);
  t_torque_bases_.MergeFrom(from.t_torque_bases_);
  t_torque_tangents_.MergeFrom(from.t_torque_tangents_);
  error_bases_.MergeFrom(from.error_bases_);
  error_tangents_.MergeFrom(from.error_tangents_);
  t_constvel_torque_bases_.MergeFrom(from.t_constvel_torque_bases_);
  t_constvel_torque_tangents_.MergeFrom(from.t_constvel_torque_tangents_);
  t_conveyor_torque_bases_.MergeFrom(from.t_conveyor_torque_bases_);
  t_conveyor_torque_tangents_.MergeFrom(from.t_conveyor_torque_tangents_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetCollSensParamRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollSensParamRes::CopyFrom(const GetCollSensParamRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetCollSensParamRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollSensParamRes::IsInitialized() const {
  return true;
}

void GetCollSensParamRes::Swap(GetCollSensParamRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCollSensParamRes::InternalSwap(GetCollSensParamRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  j_torque_bases_.InternalSwap(&other->j_torque_bases_);
  j_torque_tangents_.InternalSwap(&other->j_torque_tangents_);
  t_torque_bases_.InternalSwap(&other->t_torque_bases_);
  t_torque_tangents_.InternalSwap(&other->t_torque_tangents_);
  error_bases_.InternalSwap(&other->error_bases_);
  error_tangents_.InternalSwap(&other->error_tangents_);
  t_constvel_torque_bases_.InternalSwap(&other->t_constvel_torque_bases_);
  t_constvel_torque_tangents_.InternalSwap(&other->t_constvel_torque_tangents_);
  t_conveyor_torque_bases_.InternalSwap(&other->t_conveyor_torque_bases_);
  t_conveyor_torque_tangents_.InternalSwap(&other->t_conveyor_torque_tangents_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollSensParamRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCollPolicyReq::InitAsDefaultInstance() {
}
class SetCollPolicyReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetCollPolicyReq::kPolicyFieldNumber;
const int SetCollPolicyReq::kSleepTimeFieldNumber;
const int SetCollPolicyReq::kGravityTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetCollPolicyReq::SetCollPolicyReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetCollPolicyReq)
}
SetCollPolicyReq::SetCollPolicyReq(const SetCollPolicyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&policy_, &from.policy_,
    static_cast<size_t>(reinterpret_cast<char*>(&gravity_time_) -
    reinterpret_cast<char*>(&policy_)) + sizeof(gravity_time_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetCollPolicyReq)
}

void SetCollPolicyReq::SharedCtor() {
  ::memset(&policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gravity_time_) -
      reinterpret_cast<char*>(&policy_)) + sizeof(gravity_time_));
}

SetCollPolicyReq::~SetCollPolicyReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  SharedDtor();
}

void SetCollPolicyReq::SharedDtor() {
}

void SetCollPolicyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCollPolicyReq& SetCollPolicyReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCollPolicyReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetCollPolicyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gravity_time_) -
      reinterpret_cast<char*>(&policy_)) + sizeof(gravity_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetCollPolicyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_policy(static_cast<::IndyFramework::Protobuf::Shared::CollisionPolicy>(val));
        } else goto handle_unusual;
        continue;
      // float sleep_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          sleep_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gravity_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          gravity_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetCollPolicyReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_policy(static_cast< ::IndyFramework::Protobuf::Shared::CollisionPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sleep_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sleep_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gravity_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravity_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetCollPolicyReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
  if (this->policy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->policy(), output);
  }

  // float sleep_time = 2;
  if (!(this->sleep_time() <= 0 && this->sleep_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->sleep_time(), output);
  }

  // float gravity_time = 3;
  if (!(this->gravity_time() <= 0 && this->gravity_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->gravity_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetCollPolicyReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCollPolicyReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
  if (this->policy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->policy(), target);
  }

  // float sleep_time = 2;
  if (!(this->sleep_time() <= 0 && this->sleep_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->sleep_time(), target);
  }

  // float gravity_time = 3;
  if (!(this->gravity_time() <= 0 && this->gravity_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->gravity_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  return target;
}

size_t SetCollPolicyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
  if (this->policy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->policy());
  }

  // float sleep_time = 2;
  if (!(this->sleep_time() <= 0 && this->sleep_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float gravity_time = 3;
  if (!(this->gravity_time() <= 0 && this->gravity_time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCollPolicyReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCollPolicyReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCollPolicyReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetCollPolicyReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetCollPolicyReq)
    MergeFrom(*source);
  }
}

void SetCollPolicyReq::MergeFrom(const SetCollPolicyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.policy() != 0) {
    set_policy(from.policy());
  }
  if (!(from.sleep_time() <= 0 && from.sleep_time() >= 0)) {
    set_sleep_time(from.sleep_time());
  }
  if (!(from.gravity_time() <= 0 && from.gravity_time() >= 0)) {
    set_gravity_time(from.gravity_time());
  }
}

void SetCollPolicyReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCollPolicyReq::CopyFrom(const SetCollPolicyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetCollPolicyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCollPolicyReq::IsInitialized() const {
  return true;
}

void SetCollPolicyReq::Swap(SetCollPolicyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetCollPolicyReq::InternalSwap(SetCollPolicyReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(policy_, other->policy_);
  swap(sleep_time_, other->sleep_time_);
  swap(gravity_time_, other->gravity_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCollPolicyReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCollPolicyRes::InitAsDefaultInstance() {
}
class SetCollPolicyRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetCollPolicyRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetCollPolicyRes::SetCollPolicyRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetCollPolicyRes)
}
SetCollPolicyRes::SetCollPolicyRes(const SetCollPolicyRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetCollPolicyRes)
}

void SetCollPolicyRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetCollPolicyRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetCollPolicyRes::~SetCollPolicyRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  SharedDtor();
}

void SetCollPolicyRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetCollPolicyRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCollPolicyRes& SetCollPolicyRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCollPolicyRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetCollPolicyRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetCollPolicyRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetCollPolicyRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetCollPolicyRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetCollPolicyRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetCollPolicyRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetCollPolicyRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetCollPolicyRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCollPolicyRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetCollPolicyRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  return target;
}

size_t SetCollPolicyRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCollPolicyRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCollPolicyRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCollPolicyRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetCollPolicyRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetCollPolicyRes)
    MergeFrom(*source);
  }
}

void SetCollPolicyRes::MergeFrom(const SetCollPolicyRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetCollPolicyRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCollPolicyRes::CopyFrom(const SetCollPolicyRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetCollPolicyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCollPolicyRes::IsInitialized() const {
  return true;
}

void SetCollPolicyRes::Swap(SetCollPolicyRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetCollPolicyRes::InternalSwap(SetCollPolicyRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCollPolicyRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollPolicyReq::InitAsDefaultInstance() {
}
class GetCollPolicyReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCollPolicyReq::GetCollPolicyReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetCollPolicyReq)
}
GetCollPolicyReq::GetCollPolicyReq(const GetCollPolicyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetCollPolicyReq)
}

void GetCollPolicyReq::SharedCtor() {
}

GetCollPolicyReq::~GetCollPolicyReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  SharedDtor();
}

void GetCollPolicyReq::SharedDtor() {
}

void GetCollPolicyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollPolicyReq& GetCollPolicyReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollPolicyReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetCollPolicyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCollPolicyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCollPolicyReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCollPolicyReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetCollPolicyReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollPolicyReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  return target;
}

size_t GetCollPolicyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollPolicyReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollPolicyReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollPolicyReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetCollPolicyReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetCollPolicyReq)
    MergeFrom(*source);
  }
}

void GetCollPolicyReq::MergeFrom(const GetCollPolicyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetCollPolicyReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollPolicyReq::CopyFrom(const GetCollPolicyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetCollPolicyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollPolicyReq::IsInitialized() const {
  return true;
}

void GetCollPolicyReq::Swap(GetCollPolicyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCollPolicyReq::InternalSwap(GetCollPolicyReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollPolicyReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollPolicyRes::InitAsDefaultInstance() {
}
class GetCollPolicyRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCollPolicyRes::kPolicyFieldNumber;
const int GetCollPolicyRes::kSleepTimeFieldNumber;
const int GetCollPolicyRes::kGravityTimeFieldNumber;
const int GetCollPolicyRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCollPolicyRes::GetCollPolicyRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetCollPolicyRes)
}
GetCollPolicyRes::GetCollPolicyRes(const GetCollPolicyRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&policy_, &from.policy_,
    static_cast<size_t>(reinterpret_cast<char*>(&gravity_time_) -
    reinterpret_cast<char*>(&policy_)) + sizeof(gravity_time_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetCollPolicyRes)
}

void GetCollPolicyRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCollPolicyRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gravity_time_) -
      reinterpret_cast<char*>(&policy_)) + sizeof(gravity_time_));
}

GetCollPolicyRes::~GetCollPolicyRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  SharedDtor();
}

void GetCollPolicyRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCollPolicyRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollPolicyRes& GetCollPolicyRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollPolicyRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetCollPolicyRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gravity_time_) -
      reinterpret_cast<char*>(&policy_)) + sizeof(gravity_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCollPolicyRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_policy(static_cast<::IndyFramework::Protobuf::Shared::CollisionPolicy>(val));
        } else goto handle_unusual;
        continue;
      // float sleep_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          sleep_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float gravity_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          gravity_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetCollPolicyRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCollPolicyRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_policy(static_cast< ::IndyFramework::Protobuf::Shared::CollisionPolicy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sleep_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sleep_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float gravity_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravity_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetCollPolicyRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCollPolicyRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
  if (this->policy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->policy(), output);
  }

  // float sleep_time = 2;
  if (!(this->sleep_time() <= 0 && this->sleep_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->sleep_time(), output);
  }

  // float gravity_time = 3;
  if (!(this->gravity_time() <= 0 && this->gravity_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->gravity_time(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCollPolicyRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetCollPolicyRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollPolicyRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
  if (this->policy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->policy(), target);
  }

  // float sleep_time = 2;
  if (!(this->sleep_time() <= 0 && this->sleep_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->sleep_time(), target);
  }

  // float gravity_time = 3;
  if (!(this->gravity_time() <= 0 && this->gravity_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->gravity_time(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCollPolicyRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  return target;
}

size_t GetCollPolicyRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // .IndyFramework.Protobuf.Shared.CollisionPolicy policy = 1;
  if (this->policy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->policy());
  }

  // float sleep_time = 2;
  if (!(this->sleep_time() <= 0 && this->sleep_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float gravity_time = 3;
  if (!(this->gravity_time() <= 0 && this->gravity_time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollPolicyRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollPolicyRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollPolicyRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetCollPolicyRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetCollPolicyRes)
    MergeFrom(*source);
  }
}

void GetCollPolicyRes::MergeFrom(const GetCollPolicyRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.policy() != 0) {
    set_policy(from.policy());
  }
  if (!(from.sleep_time() <= 0 && from.sleep_time() >= 0)) {
    set_sleep_time(from.sleep_time());
  }
  if (!(from.gravity_time() <= 0 && from.gravity_time() >= 0)) {
    set_gravity_time(from.gravity_time());
  }
}

void GetCollPolicyRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollPolicyRes::CopyFrom(const GetCollPolicyRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetCollPolicyRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollPolicyRes::IsInitialized() const {
  return true;
}

void GetCollPolicyRes::Swap(GetCollPolicyRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCollPolicyRes::InternalSwap(GetCollPolicyRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(policy_, other->policy_);
  swap(sleep_time_, other->sleep_time_);
  swap(gravity_time_, other->gravity_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollPolicyRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollTuningParamReq::InitAsDefaultInstance() {
}
class GetCollTuningParamReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCollTuningParamReq::GetCollTuningParamReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
}
GetCollTuningParamReq::GetCollTuningParamReq(const GetCollTuningParamReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
}

void GetCollTuningParamReq::SharedCtor() {
}

GetCollTuningParamReq::~GetCollTuningParamReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  SharedDtor();
}

void GetCollTuningParamReq::SharedDtor() {
}

void GetCollTuningParamReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollTuningParamReq& GetCollTuningParamReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollTuningParamReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetCollTuningParamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCollTuningParamReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCollTuningParamReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCollTuningParamReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollTuningParamReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  return target;
}

size_t GetCollTuningParamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollTuningParamReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollTuningParamReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollTuningParamReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
    MergeFrom(*source);
  }
}

void GetCollTuningParamReq::MergeFrom(const GetCollTuningParamReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetCollTuningParamReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollTuningParamReq::CopyFrom(const GetCollTuningParamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetCollTuningParamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollTuningParamReq::IsInitialized() const {
  return true;
}

void GetCollTuningParamReq::Swap(GetCollTuningParamReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCollTuningParamReq::InternalSwap(GetCollTuningParamReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollTuningParamReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCollTuningParamRes::InitAsDefaultInstance() {
}
class GetCollTuningParamRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCollTuningParamRes::kJTorqueBasesFieldNumber;
const int GetCollTuningParamRes::kJTorqueTangentsFieldNumber;
const int GetCollTuningParamRes::kTTorqueBasesFieldNumber;
const int GetCollTuningParamRes::kTTorqueTangentsFieldNumber;
const int GetCollTuningParamRes::kErrorBasesFieldNumber;
const int GetCollTuningParamRes::kErrorTangentsFieldNumber;
const int GetCollTuningParamRes::kTConstvelTorqueBasesFieldNumber;
const int GetCollTuningParamRes::kTConstvelTorqueTangentsFieldNumber;
const int GetCollTuningParamRes::kTConveyorTorqueBasesFieldNumber;
const int GetCollTuningParamRes::kTConveyorTorqueTangentsFieldNumber;
const int GetCollTuningParamRes::kIsCalcDoneFieldNumber;
const int GetCollTuningParamRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCollTuningParamRes::GetCollTuningParamRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
}
GetCollTuningParamRes::GetCollTuningParamRes(const GetCollTuningParamRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      j_torque_bases_(from.j_torque_bases_),
      j_torque_tangents_(from.j_torque_tangents_),
      t_torque_bases_(from.t_torque_bases_),
      t_torque_tangents_(from.t_torque_tangents_),
      error_bases_(from.error_bases_),
      error_tangents_(from.error_tangents_),
      t_constvel_torque_bases_(from.t_constvel_torque_bases_),
      t_constvel_torque_tangents_(from.t_constvel_torque_tangents_),
      t_conveyor_torque_bases_(from.t_conveyor_torque_bases_),
      t_conveyor_torque_tangents_(from.t_conveyor_torque_tangents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  is_calc_done_ = from.is_calc_done_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
}

void GetCollTuningParamRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCollTuningParamRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_calc_done_ = false;
}

GetCollTuningParamRes::~GetCollTuningParamRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  SharedDtor();
}

void GetCollTuningParamRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCollTuningParamRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCollTuningParamRes& GetCollTuningParamRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCollTuningParamRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetCollTuningParamRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  j_torque_bases_.Clear();
  j_torque_tangents_.Clear();
  t_torque_bases_.Clear();
  t_torque_tangents_.Clear();
  error_bases_.Clear();
  error_tangents_.Clear();
  t_constvel_torque_bases_.Clear();
  t_constvel_torque_tangents_.Clear();
  t_conveyor_torque_bases_.Clear();
  t_conveyor_torque_tangents_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_calc_done_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCollTuningParamRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float j_torque_bases = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_j_torque_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_j_torque_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float j_torque_tangents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_j_torque_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_j_torque_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_torque_bases = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_torque_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_t_torque_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_torque_tangents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_torque_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_t_torque_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float error_bases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_error_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          add_error_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float error_tangents = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_error_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          add_error_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_constvel_torque_bases = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_constvel_torque_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          add_t_constvel_torque_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_constvel_torque_tangents = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_constvel_torque_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69) {
          add_t_constvel_torque_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_conveyor_torque_bases = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_conveyor_torque_bases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          add_t_conveyor_torque_bases(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float t_conveyor_torque_tangents = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_t_conveyor_torque_tangents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85) {
          add_t_conveyor_torque_tangents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool is_calc_done = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          is_calc_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetCollTuningParamRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCollTuningParamRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float j_torque_bases = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_j_torque_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_j_torque_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float j_torque_tangents = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_j_torque_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_j_torque_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_torque_bases = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_torque_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_t_torque_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_torque_tangents = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_torque_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_t_torque_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float error_bases = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_error_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_error_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float error_tangents = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_error_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50u, input, this->mutable_error_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_constvel_torque_bases = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_constvel_torque_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58u, input, this->mutable_t_constvel_torque_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_constvel_torque_tangents = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_constvel_torque_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66u, input, this->mutable_t_constvel_torque_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_conveyor_torque_bases = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_conveyor_torque_bases())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74u, input, this->mutable_t_conveyor_torque_bases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float t_conveyor_torque_tangents = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_t_conveyor_torque_tangents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_t_conveyor_torque_tangents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_calc_done = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_calc_done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetCollTuningParamRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCollTuningParamRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float j_torque_bases = 1;
  if (this->j_torque_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_j_torque_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->j_torque_bases().data(), this->j_torque_bases_size(), output);
  }

  // repeated float j_torque_tangents = 2;
  if (this->j_torque_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_j_torque_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->j_torque_tangents().data(), this->j_torque_tangents_size(), output);
  }

  // repeated float t_torque_bases = 3;
  if (this->t_torque_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_torque_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_torque_bases().data(), this->t_torque_bases_size(), output);
  }

  // repeated float t_torque_tangents = 4;
  if (this->t_torque_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_torque_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_torque_tangents().data(), this->t_torque_tangents_size(), output);
  }

  // repeated float error_bases = 5;
  if (this->error_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_error_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->error_bases().data(), this->error_bases_size(), output);
  }

  // repeated float error_tangents = 6;
  if (this->error_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_error_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->error_tangents().data(), this->error_tangents_size(), output);
  }

  // repeated float t_constvel_torque_bases = 7;
  if (this->t_constvel_torque_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_constvel_torque_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_constvel_torque_bases().data(), this->t_constvel_torque_bases_size(), output);
  }

  // repeated float t_constvel_torque_tangents = 8;
  if (this->t_constvel_torque_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(8, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_constvel_torque_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_constvel_torque_tangents().data(), this->t_constvel_torque_tangents_size(), output);
  }

  // repeated float t_conveyor_torque_bases = 9;
  if (this->t_conveyor_torque_bases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(9, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_conveyor_torque_bases_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_conveyor_torque_bases().data(), this->t_conveyor_torque_bases_size(), output);
  }

  // repeated float t_conveyor_torque_tangents = 10;
  if (this->t_conveyor_torque_tangents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(10, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_t_conveyor_torque_tangents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->t_conveyor_torque_tangents().data(), this->t_conveyor_torque_tangents_size(), output);
  }

  // bool is_calc_done = 11;
  if (this->is_calc_done() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->is_calc_done(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCollTuningParamRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCollTuningParamRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float j_torque_bases = 1;
  if (this->j_torque_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _j_torque_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->j_torque_bases_, target);
  }

  // repeated float j_torque_tangents = 2;
  if (this->j_torque_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _j_torque_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->j_torque_tangents_, target);
  }

  // repeated float t_torque_bases = 3;
  if (this->t_torque_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_torque_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_torque_bases_, target);
  }

  // repeated float t_torque_tangents = 4;
  if (this->t_torque_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_torque_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_torque_tangents_, target);
  }

  // repeated float error_bases = 5;
  if (this->error_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _error_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->error_bases_, target);
  }

  // repeated float error_tangents = 6;
  if (this->error_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _error_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->error_tangents_, target);
  }

  // repeated float t_constvel_torque_bases = 7;
  if (this->t_constvel_torque_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_constvel_torque_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_constvel_torque_bases_, target);
  }

  // repeated float t_constvel_torque_tangents = 8;
  if (this->t_constvel_torque_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      8,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_constvel_torque_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_constvel_torque_tangents_, target);
  }

  // repeated float t_conveyor_torque_bases = 9;
  if (this->t_conveyor_torque_bases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      9,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_conveyor_torque_bases_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_conveyor_torque_bases_, target);
  }

  // repeated float t_conveyor_torque_tangents = 10;
  if (this->t_conveyor_torque_tangents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      10,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _t_conveyor_torque_tangents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->t_conveyor_torque_tangents_, target);
  }

  // bool is_calc_done = 11;
  if (this->is_calc_done() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->is_calc_done(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCollTuningParamRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  return target;
}

size_t GetCollTuningParamRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float j_torque_bases = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->j_torque_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _j_torque_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float j_torque_tangents = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->j_torque_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _j_torque_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_torque_bases = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->t_torque_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_torque_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_torque_tangents = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->t_torque_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_torque_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float error_bases = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->error_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _error_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float error_tangents = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->error_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _error_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_constvel_torque_bases = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->t_constvel_torque_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_constvel_torque_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_constvel_torque_tangents = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->t_constvel_torque_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_constvel_torque_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_conveyor_torque_bases = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->t_conveyor_torque_bases_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_conveyor_torque_bases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float t_conveyor_torque_tangents = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->t_conveyor_torque_tangents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _t_conveyor_torque_tangents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // bool is_calc_done = 11;
  if (this->is_calc_done() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCollTuningParamRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCollTuningParamRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCollTuningParamRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
    MergeFrom(*source);
  }
}

void GetCollTuningParamRes::MergeFrom(const GetCollTuningParamRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  j_torque_bases_.MergeFrom(from.j_torque_bases_);
  j_torque_tangents_.MergeFrom(from.j_torque_tangents_);
  t_torque_bases_.MergeFrom(from.t_torque_bases_);
  t_torque_tangents_.MergeFrom(from.t_torque_tangents_);
  error_bases_.MergeFrom(from.error_bases_);
  error_tangents_.MergeFrom(from.error_tangents_);
  t_constvel_torque_bases_.MergeFrom(from.t_constvel_torque_bases_);
  t_constvel_torque_tangents_.MergeFrom(from.t_constvel_torque_tangents_);
  t_conveyor_torque_bases_.MergeFrom(from.t_conveyor_torque_bases_);
  t_conveyor_torque_tangents_.MergeFrom(from.t_conveyor_torque_tangents_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.is_calc_done() != 0) {
    set_is_calc_done(from.is_calc_done());
  }
}

void GetCollTuningParamRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollTuningParamRes::CopyFrom(const GetCollTuningParamRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetCollTuningParamRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollTuningParamRes::IsInitialized() const {
  return true;
}

void GetCollTuningParamRes::Swap(GetCollTuningParamRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCollTuningParamRes::InternalSwap(GetCollTuningParamRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  j_torque_bases_.InternalSwap(&other->j_torque_bases_);
  j_torque_tangents_.InternalSwap(&other->j_torque_tangents_);
  t_torque_bases_.InternalSwap(&other->t_torque_bases_);
  t_torque_tangents_.InternalSwap(&other->t_torque_tangents_);
  error_bases_.InternalSwap(&other->error_bases_);
  error_tangents_.InternalSwap(&other->error_tangents_);
  t_constvel_torque_bases_.InternalSwap(&other->t_constvel_torque_bases_);
  t_constvel_torque_tangents_.InternalSwap(&other->t_constvel_torque_tangents_);
  t_conveyor_torque_bases_.InternalSwap(&other->t_conveyor_torque_bases_);
  t_conveyor_torque_tangents_.InternalSwap(&other->t_conveyor_torque_tangents_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_calc_done_, other->is_calc_done_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCollTuningParamRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRTControlDataReq::InitAsDefaultInstance() {
}
class GetRTControlDataReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRTControlDataReq::GetRTControlDataReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetRTControlDataReq)
}
GetRTControlDataReq::GetRTControlDataReq(const GetRTControlDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetRTControlDataReq)
}

void GetRTControlDataReq::SharedCtor() {
}

GetRTControlDataReq::~GetRTControlDataReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  SharedDtor();
}

void GetRTControlDataReq::SharedDtor() {
}

void GetRTControlDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRTControlDataReq& GetRTControlDataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRTControlDataReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetRTControlDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRTControlDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRTControlDataReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRTControlDataReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetRTControlDataReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRTControlDataReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  return target;
}

size_t GetRTControlDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRTControlDataReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRTControlDataReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRTControlDataReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetRTControlDataReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetRTControlDataReq)
    MergeFrom(*source);
  }
}

void GetRTControlDataReq::MergeFrom(const GetRTControlDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetRTControlDataReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRTControlDataReq::CopyFrom(const GetRTControlDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetRTControlDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRTControlDataReq::IsInitialized() const {
  return true;
}

void GetRTControlDataReq::Swap(GetRTControlDataReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRTControlDataReq::InternalSwap(GetRTControlDataReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRTControlDataReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRTControlDataRes::InitAsDefaultInstance() {
}
class GetRTControlDataRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRTControlDataRes::kQFieldNumber;
const int GetRTControlDataRes::kQdotFieldNumber;
const int GetRTControlDataRes::kQddotFieldNumber;
const int GetRTControlDataRes::kPFieldNumber;
const int GetRTControlDataRes::kPdotFieldNumber;
const int GetRTControlDataRes::kPddotFieldNumber;
const int GetRTControlDataRes::kRefFrameFieldNumber;
const int GetRTControlDataRes::kToolFrameFieldNumber;
const int GetRTControlDataRes::kRunningTimeFieldNumber;
const int GetRTControlDataRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRTControlDataRes::GetRTControlDataRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetRTControlDataRes)
}
GetRTControlDataRes::GetRTControlDataRes(const GetRTControlDataRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      q_(from.q_),
      qdot_(from.qdot_),
      qddot_(from.qddot_),
      p_(from.p_),
      pdot_(from.pdot_),
      pddot_(from.pddot_),
      ref_frame_(from.ref_frame_),
      tool_frame_(from.tool_frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  running_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.running_time().size() > 0) {
    running_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.running_time_);
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetRTControlDataRes)
}

void GetRTControlDataRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRTControlDataRes_control_5fmsgs_2eproto.base);
  running_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRTControlDataRes::~GetRTControlDataRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  SharedDtor();
}

void GetRTControlDataRes::SharedDtor() {
  running_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRTControlDataRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRTControlDataRes& GetRTControlDataRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRTControlDataRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetRTControlDataRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  q_.Clear();
  qdot_.Clear();
  qddot_.Clear();
  p_.Clear();
  pdot_.Clear();
  pddot_.Clear();
  ref_frame_.Clear();
  tool_frame_.Clear();
  running_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetRTControlDataRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float q = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_q(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float qdot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_qdot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_qdot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float qddot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_qddot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_qddot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float p = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_p(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93) {
          add_p(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pdot = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_pdot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101) {
          add_pdot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float pddot = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_pddot(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109) {
          add_pddot(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float ref_frame = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_ref_frame(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173) {
          add_ref_frame(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tool_frame = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tool_frame(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181) {
          add_tool_frame(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string running_time = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_running_time(), ptr, ctx, "IndyFramework.Protobuf.Control.GetRTControlDataRes.running_time");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetRTControlDataRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetRTControlDataRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float q = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_q())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_q())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float qdot = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_qdot())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_qdot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float qddot = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_qddot())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_qddot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float p = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_p())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_p())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pdot = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pdot())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_pdot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float pddot = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_pddot())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 106u, input, this->mutable_pddot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float ref_frame = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_ref_frame())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (173 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 170u, input, this->mutable_ref_frame())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tool_frame = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tool_frame())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (181 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 178u, input, this->mutable_tool_frame())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string running_time = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_running_time()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->running_time().data(), static_cast<int>(this->running_time().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetRTControlDataRes.running_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetRTControlDataRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetRTControlDataRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float q = 1;
  if (this->q_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_q_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->q().data(), this->q_size(), output);
  }

  // repeated float qdot = 2;
  if (this->qdot_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_qdot_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->qdot().data(), this->qdot_size(), output);
  }

  // repeated float qddot = 3;
  if (this->qddot_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_qddot_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->qddot().data(), this->qddot_size(), output);
  }

  // repeated float p = 11;
  if (this->p_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(11, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_p_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->p().data(), this->p_size(), output);
  }

  // repeated float pdot = 12;
  if (this->pdot_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(12, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pdot_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->pdot().data(), this->pdot_size(), output);
  }

  // repeated float pddot = 13;
  if (this->pddot_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(13, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pddot_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->pddot().data(), this->pddot_size(), output);
  }

  // repeated float ref_frame = 21;
  if (this->ref_frame_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(21, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ref_frame_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->ref_frame().data(), this->ref_frame_size(), output);
  }

  // repeated float tool_frame = 22;
  if (this->tool_frame_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(22, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tool_frame_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tool_frame().data(), this->tool_frame_size(), output);
  }

  // string running_time = 31;
  if (this->running_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->running_time().data(), static_cast<int>(this->running_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetRTControlDataRes.running_time");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->running_time(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetRTControlDataRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetRTControlDataRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRTControlDataRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float q = 1;
  if (this->q_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _q_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->q_, target);
  }

  // repeated float qdot = 2;
  if (this->qdot_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _qdot_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->qdot_, target);
  }

  // repeated float qddot = 3;
  if (this->qddot_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _qddot_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->qddot_, target);
  }

  // repeated float p = 11;
  if (this->p_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      11,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _p_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->p_, target);
  }

  // repeated float pdot = 12;
  if (this->pdot_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pdot_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pdot_, target);
  }

  // repeated float pddot = 13;
  if (this->pddot_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      13,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pddot_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->pddot_, target);
  }

  // repeated float ref_frame = 21;
  if (this->ref_frame_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      21,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ref_frame_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->ref_frame_, target);
  }

  // repeated float tool_frame = 22;
  if (this->tool_frame_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      22,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tool_frame_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tool_frame_, target);
  }

  // string running_time = 31;
  if (this->running_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->running_time().data(), static_cast<int>(this->running_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetRTControlDataRes.running_time");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        31, this->running_time(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetRTControlDataRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  return target;
}

size_t GetRTControlDataRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float q = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->q_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _q_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float qdot = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->qdot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _qdot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float qddot = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->qddot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _qddot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float p = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->p_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _p_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pdot = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->pdot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pdot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float pddot = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->pddot_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pddot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float ref_frame = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->ref_frame_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ref_frame_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tool_frame = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->tool_frame_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tool_frame_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string running_time = 31;
  if (this->running_time().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->running_time());
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRTControlDataRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRTControlDataRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRTControlDataRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetRTControlDataRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetRTControlDataRes)
    MergeFrom(*source);
  }
}

void GetRTControlDataRes::MergeFrom(const GetRTControlDataRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  q_.MergeFrom(from.q_);
  qdot_.MergeFrom(from.qdot_);
  qddot_.MergeFrom(from.qddot_);
  p_.MergeFrom(from.p_);
  pdot_.MergeFrom(from.pdot_);
  pddot_.MergeFrom(from.pddot_);
  ref_frame_.MergeFrom(from.ref_frame_);
  tool_frame_.MergeFrom(from.tool_frame_);
  if (from.running_time().size() > 0) {

    running_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.running_time_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetRTControlDataRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRTControlDataRes::CopyFrom(const GetRTControlDataRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetRTControlDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRTControlDataRes::IsInitialized() const {
  return true;
}

void GetRTControlDataRes::Swap(GetRTControlDataRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRTControlDataRes::InternalSwap(GetRTControlDataRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  q_.InternalSwap(&other->q_);
  qdot_.InternalSwap(&other->qdot_);
  qddot_.InternalSwap(&other->qddot_);
  p_.InternalSwap(&other->p_);
  pdot_.InternalSwap(&other->pdot_);
  pddot_.InternalSwap(&other->pddot_);
  ref_frame_.InternalSwap(&other->ref_frame_);
  tool_frame_.InternalSwap(&other->tool_frame_);
  running_time_.Swap(&other->running_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRTControlDataRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIODataReq::InitAsDefaultInstance() {
}
class GetIODataReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetIODataReq::GetIODataReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetIODataReq)
}
GetIODataReq::GetIODataReq(const GetIODataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetIODataReq)
}

void GetIODataReq::SharedCtor() {
}

GetIODataReq::~GetIODataReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetIODataReq)
  SharedDtor();
}

void GetIODataReq::SharedDtor() {
}

void GetIODataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIODataReq& GetIODataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIODataReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetIODataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetIODataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetIODataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetIODataReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetIODataReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetIODataReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetIODataReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetIODataReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetIODataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetIODataReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIODataReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetIODataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetIODataReq)
  return target;
}

size_t GetIODataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetIODataReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIODataReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetIODataReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIODataReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIODataReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetIODataReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetIODataReq)
    MergeFrom(*source);
  }
}

void GetIODataReq::MergeFrom(const GetIODataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetIODataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetIODataReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetIODataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIODataReq::CopyFrom(const GetIODataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetIODataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIODataReq::IsInitialized() const {
  return true;
}

void GetIODataReq::Swap(GetIODataReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetIODataReq::InternalSwap(GetIODataReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIODataReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIODataRes::InitAsDefaultInstance() {
}
class GetIODataRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetIODataRes::kDiFieldNumber;
const int GetIODataRes::kDoFieldNumber;
const int GetIODataRes::kAiFieldNumber;
const int GetIODataRes::kAoFieldNumber;
const int GetIODataRes::kEndDiFieldNumber;
const int GetIODataRes::kEndDoFieldNumber;
const int GetIODataRes::kEndAiFieldNumber;
const int GetIODataRes::kEndAoFieldNumber;
const int GetIODataRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetIODataRes::GetIODataRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetIODataRes)
}
GetIODataRes::GetIODataRes(const GetIODataRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      di_(from.di_),
      do__(from.do__),
      ai_(from.ai_),
      ao_(from.ao_),
      end_di_(from.end_di_),
      end_do_(from.end_do_),
      end_ai_(from.end_ai_),
      end_ao_(from.end_ao_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetIODataRes)
}

void GetIODataRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIODataRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetIODataRes::~GetIODataRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetIODataRes)
  SharedDtor();
}

void GetIODataRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetIODataRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIODataRes& GetIODataRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIODataRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetIODataRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetIODataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  di_.Clear();
  do__.Clear();
  ai_.Clear();
  ao_.Clear();
  end_di_.Clear();
  end_do_.Clear();
  end_ai_.Clear();
  end_ao_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetIODataRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool di = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_di(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_di(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool do = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_do_(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_do_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ai = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_ai(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_ai(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ao = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_ao(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_ao(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool end_di = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_end_di(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          add_end_di(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool end_do = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_end_do(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          add_end_do(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 end_ai = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_end_ai(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          add_end_ai(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 end_ao = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_end_ao(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          add_end_ao(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetIODataRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetIODataRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetIODataRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool di = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_di())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10u, input, this->mutable_di())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool do = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_do_())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18u, input, this->mutable_do_())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 ai = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ai())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_ai())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 ao = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ao())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_ao())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool end_di = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_end_di())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 90u, input, this->mutable_end_di())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool end_do = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_end_do())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 98u, input, this->mutable_end_do())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 end_ai = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_end_ai())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 106u, input, this->mutable_end_ai())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 end_ao = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_end_ao())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 114u, input, this->mutable_end_ao())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetIODataRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetIODataRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetIODataRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetIODataRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetIODataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool di = 1;
  if (this->di_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_di_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->di().data(), this->di_size(), output);
  }

  // repeated bool do = 2;
  if (this->do__size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_do__cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->do_().data(), this->do__size(), output);
  }

  // repeated int32 ai = 3;
  if (this->ai_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ai_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ai_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->ai(i), output);
  }

  // repeated int32 ao = 4;
  if (this->ao_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ao_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->ao_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->ao(i), output);
  }

  // repeated bool end_di = 11;
  if (this->end_di_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(11, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_end_di_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->end_di().data(), this->end_di_size(), output);
  }

  // repeated bool end_do = 12;
  if (this->end_do_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(12, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_end_do_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->end_do().data(), this->end_do_size(), output);
  }

  // repeated int32 end_ai = 13;
  if (this->end_ai_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(13, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_end_ai_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->end_ai_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->end_ai(i), output);
  }

  // repeated int32 end_ao = 14;
  if (this->end_ao_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(14, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_end_ao_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->end_ao_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->end_ao(i), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetIODataRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetIODataRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIODataRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetIODataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool di = 1;
  if (this->di_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _di_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->di_, target);
  }

  // repeated bool do = 2;
  if (this->do__size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _do__cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->do__, target);
  }

  // repeated int32 ai = 3;
  if (this->ai_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ai_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ai_, target);
  }

  // repeated int32 ao = 4;
  if (this->ao_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _ao_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ao_, target);
  }

  // repeated bool end_di = 11;
  if (this->end_di_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      11,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _end_di_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->end_di_, target);
  }

  // repeated bool end_do = 12;
  if (this->end_do_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _end_do_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->end_do_, target);
  }

  // repeated int32 end_ai = 13;
  if (this->end_ai_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      13,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _end_ai_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->end_ai_, target);
  }

  // repeated int32 end_ao = 14;
  if (this->end_ao_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      14,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _end_ao_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->end_ao_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetIODataRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetIODataRes)
  return target;
}

size_t GetIODataRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetIODataRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool di = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->di_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _di_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool do = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->do__size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _do__cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 ai = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ai_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ai_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 ao = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ao_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ao_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool end_di = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->end_di_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _end_di_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool end_do = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->end_do_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _end_do_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 end_ai = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->end_ai_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _end_ai_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 end_ao = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->end_ao_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _end_ao_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIODataRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetIODataRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIODataRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIODataRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetIODataRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetIODataRes)
    MergeFrom(*source);
  }
}

void GetIODataRes::MergeFrom(const GetIODataRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetIODataRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  di_.MergeFrom(from.di_);
  do__.MergeFrom(from.do__);
  ai_.MergeFrom(from.ai_);
  ao_.MergeFrom(from.ao_);
  end_di_.MergeFrom(from.end_di_);
  end_do_.MergeFrom(from.end_do_);
  end_ai_.MergeFrom(from.end_ai_);
  end_ao_.MergeFrom(from.end_ao_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void GetIODataRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetIODataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIODataRes::CopyFrom(const GetIODataRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetIODataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIODataRes::IsInitialized() const {
  return true;
}

void GetIODataRes::Swap(GetIODataRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetIODataRes::InternalSwap(GetIODataRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  di_.InternalSwap(&other->di_);
  do__.InternalSwap(&other->do__);
  ai_.InternalSwap(&other->ai_);
  ao_.InternalSwap(&other->ao_);
  end_di_.InternalSwap(&other->end_di_);
  end_do_.InternalSwap(&other->end_do_);
  end_ai_.InternalSwap(&other->end_ai_);
  end_ao_.InternalSwap(&other->end_ao_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIODataRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCoreDataReq::InitAsDefaultInstance() {
}
class GetCoreDataReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCoreDataReq::GetCoreDataReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetCoreDataReq)
}
GetCoreDataReq::GetCoreDataReq(const GetCoreDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetCoreDataReq)
}

void GetCoreDataReq::SharedCtor() {
}

GetCoreDataReq::~GetCoreDataReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetCoreDataReq)
  SharedDtor();
}

void GetCoreDataReq::SharedDtor() {
}

void GetCoreDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCoreDataReq& GetCoreDataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCoreDataReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetCoreDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetCoreDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCoreDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCoreDataReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetCoreDataReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetCoreDataReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetCoreDataReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCoreDataReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetCoreDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetCoreDataReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCoreDataReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetCoreDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetCoreDataReq)
  return target;
}

size_t GetCoreDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetCoreDataReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCoreDataReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetCoreDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCoreDataReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCoreDataReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetCoreDataReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetCoreDataReq)
    MergeFrom(*source);
  }
}

void GetCoreDataReq::MergeFrom(const GetCoreDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetCoreDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetCoreDataReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetCoreDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCoreDataReq::CopyFrom(const GetCoreDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetCoreDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCoreDataReq::IsInitialized() const {
  return true;
}

void GetCoreDataReq::Swap(GetCoreDataReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCoreDataReq::InternalSwap(GetCoreDataReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCoreDataReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCoreDataRes::InitAsDefaultInstance() {
}
class GetCoreDataRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCoreDataRes::kTemperaturesFieldNumber;
const int GetCoreDataRes::kVoltagesFieldNumber;
const int GetCoreDataRes::kCurrentsFieldNumber;
const int GetCoreDataRes::kStatesFieldNumber;
const int GetCoreDataRes::kStateCodesFieldNumber;
const int GetCoreDataRes::kBrakeStatesFieldNumber;
const int GetCoreDataRes::kServoStateFieldNumber;
const int GetCoreDataRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCoreDataRes::GetCoreDataRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetCoreDataRes)
}
GetCoreDataRes::GetCoreDataRes(const GetCoreDataRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      temperatures_(from.temperatures_),
      voltages_(from.voltages_),
      currents_(from.currents_),
      states_(from.states_),
      state_codes_(from.state_codes_),
      brake_states_(from.brake_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  servo_state_ = from.servo_state_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetCoreDataRes)
}

void GetCoreDataRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCoreDataRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servo_state_ = false;
}

GetCoreDataRes::~GetCoreDataRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetCoreDataRes)
  SharedDtor();
}

void GetCoreDataRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCoreDataRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCoreDataRes& GetCoreDataRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCoreDataRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetCoreDataRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetCoreDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temperatures_.Clear();
  voltages_.Clear();
  currents_.Clear();
  states_.Clear();
  state_codes_.Clear();
  brake_states_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servo_state_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCoreDataRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float temperatures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_temperatures(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_temperatures(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float voltages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_voltages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_voltages(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float currents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_currents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_currents(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string states = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_states(), ptr, ctx, "IndyFramework.Protobuf.Control.GetCoreDataRes.states");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated string state_codes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_state_codes(), ptr, ctx, "IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated bool brake_states = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_brake_states(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          add_brake_states(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool servo_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          servo_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetCoreDataRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCoreDataRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetCoreDataRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float temperatures = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_temperatures())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_temperatures())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float voltages = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_voltages())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_voltages())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float currents = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_currents())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_currents())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string states = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_states()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->states(this->states_size() - 1).data(),
            static_cast<int>(this->states(this->states_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetCoreDataRes.states"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string state_codes = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_state_codes()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->state_codes(this->state_codes_size() - 1).data(),
            static_cast<int>(this->state_codes(this->state_codes_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool brake_states = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_brake_states())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 82u, input, this->mutable_brake_states())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool servo_state = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &servo_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetCoreDataRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetCoreDataRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetCoreDataRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCoreDataRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetCoreDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float temperatures = 2;
  if (this->temperatures_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_temperatures_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->temperatures().data(), this->temperatures_size(), output);
  }

  // repeated float voltages = 3;
  if (this->voltages_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_voltages_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->voltages().data(), this->voltages_size(), output);
  }

  // repeated float currents = 4;
  if (this->currents_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_currents_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->currents().data(), this->currents_size(), output);
  }

  // repeated string states = 5;
  for (int i = 0, n = this->states_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->states(i).data(), static_cast<int>(this->states(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCoreDataRes.states");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->states(i), output);
  }

  // repeated string state_codes = 6;
  for (int i = 0, n = this->state_codes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->state_codes(i).data(), static_cast<int>(this->state_codes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      6, this->state_codes(i), output);
  }

  // repeated bool brake_states = 10;
  if (this->brake_states_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(10, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_brake_states_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->brake_states().data(), this->brake_states_size(), output);
  }

  // bool servo_state = 11;
  if (this->servo_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->servo_state(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCoreDataRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetCoreDataRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCoreDataRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetCoreDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float temperatures = 2;
  if (this->temperatures_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _temperatures_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->temperatures_, target);
  }

  // repeated float voltages = 3;
  if (this->voltages_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _voltages_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->voltages_, target);
  }

  // repeated float currents = 4;
  if (this->currents_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _currents_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->currents_, target);
  }

  // repeated string states = 5;
  for (int i = 0, n = this->states_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->states(i).data(), static_cast<int>(this->states(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCoreDataRes.states");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(5, this->states(i), target);
  }

  // repeated string state_codes = 6;
  for (int i = 0, n = this->state_codes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->state_codes(i).data(), static_cast<int>(this->state_codes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCoreDataRes.state_codes");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(6, this->state_codes(i), target);
  }

  // repeated bool brake_states = 10;
  if (this->brake_states_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      10,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _brake_states_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->brake_states_, target);
  }

  // bool servo_state = 11;
  if (this->servo_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->servo_state(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetCoreDataRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetCoreDataRes)
  return target;
}

size_t GetCoreDataRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetCoreDataRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float temperatures = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->temperatures_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _temperatures_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float voltages = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->voltages_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _voltages_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float currents = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->currents_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _currents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string states = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->states_size());
  for (int i = 0, n = this->states_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->states(i));
  }

  // repeated string state_codes = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->state_codes_size());
  for (int i = 0, n = this->state_codes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->state_codes(i));
  }

  // repeated bool brake_states = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->brake_states_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _brake_states_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // bool servo_state = 11;
  if (this->servo_state() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCoreDataRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetCoreDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCoreDataRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCoreDataRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetCoreDataRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetCoreDataRes)
    MergeFrom(*source);
  }
}

void GetCoreDataRes::MergeFrom(const GetCoreDataRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetCoreDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  temperatures_.MergeFrom(from.temperatures_);
  voltages_.MergeFrom(from.voltages_);
  currents_.MergeFrom(from.currents_);
  states_.MergeFrom(from.states_);
  state_codes_.MergeFrom(from.state_codes_);
  brake_states_.MergeFrom(from.brake_states_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.servo_state() != 0) {
    set_servo_state(from.servo_state());
  }
}

void GetCoreDataRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetCoreDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCoreDataRes::CopyFrom(const GetCoreDataRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetCoreDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCoreDataRes::IsInitialized() const {
  return true;
}

void GetCoreDataRes::Swap(GetCoreDataRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCoreDataRes::InternalSwap(GetCoreDataRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  temperatures_.InternalSwap(&other->temperatures_);
  voltages_.InternalSwap(&other->voltages_);
  currents_.InternalSwap(&other->currents_);
  states_.InternalSwap(CastToBase(&other->states_));
  state_codes_.InternalSwap(CastToBase(&other->state_codes_));
  brake_states_.InternalSwap(&other->brake_states_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(servo_state_, other->servo_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCoreDataRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSystemInfoDataReq::InitAsDefaultInstance() {
}
class GetSystemInfoDataReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSystemInfoDataReq::GetSystemInfoDataReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
}
GetSystemInfoDataReq::GetSystemInfoDataReq(const GetSystemInfoDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
}

void GetSystemInfoDataReq::SharedCtor() {
}

GetSystemInfoDataReq::~GetSystemInfoDataReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  SharedDtor();
}

void GetSystemInfoDataReq::SharedDtor() {
}

void GetSystemInfoDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSystemInfoDataReq& GetSystemInfoDataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSystemInfoDataReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetSystemInfoDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetSystemInfoDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetSystemInfoDataReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetSystemInfoDataReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSystemInfoDataReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  return target;
}

size_t GetSystemInfoDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSystemInfoDataReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSystemInfoDataReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSystemInfoDataReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
    MergeFrom(*source);
  }
}

void GetSystemInfoDataReq::MergeFrom(const GetSystemInfoDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetSystemInfoDataReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemInfoDataReq::CopyFrom(const GetSystemInfoDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetSystemInfoDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemInfoDataReq::IsInitialized() const {
  return true;
}

void GetSystemInfoDataReq::Swap(GetSystemInfoDataReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSystemInfoDataReq::InternalSwap(GetSystemInfoDataReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSystemInfoDataReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSystemInfoDataRes::InitAsDefaultInstance() {
}
class GetSystemInfoDataRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSystemInfoDataRes::kControlTaskVerFieldNumber;
const int GetSystemInfoDataRes::kDofFieldNumber;
const int GetSystemInfoDataRes::kModelNameFieldNumber;
const int GetSystemInfoDataRes::kEndtoolPortTypeFieldNumber;
const int GetSystemInfoDataRes::kIoBoardFwVerFieldNumber;
const int GetSystemInfoDataRes::kCoreBoardFwVersFieldNumber;
const int GetSystemInfoDataRes::kEndtoolBoardFwVerFieldNumber;
const int GetSystemInfoDataRes::kRobotSnFieldNumber;
const int GetSystemInfoDataRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSystemInfoDataRes::GetSystemInfoDataRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
}
GetSystemInfoDataRes::GetSystemInfoDataRes(const GetSystemInfoDataRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      core_board_fw_vers_(from.core_board_fw_vers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  control_task_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.control_task_ver().size() > 0) {
    control_task_ver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.control_task_ver_);
  }
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.model_name().size() > 0) {
    model_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  io_board_fw_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.io_board_fw_ver().size() > 0) {
    io_board_fw_ver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.io_board_fw_ver_);
  }
  endtool_board_fw_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.endtool_board_fw_ver().size() > 0) {
    endtool_board_fw_ver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endtool_board_fw_ver_);
  }
  robot_sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.robot_sn().size() > 0) {
    robot_sn_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.robot_sn_);
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&dof_, &from.dof_,
    static_cast<size_t>(reinterpret_cast<char*>(&endtool_port_type_) -
    reinterpret_cast<char*>(&dof_)) + sizeof(endtool_port_type_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
}

void GetSystemInfoDataRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSystemInfoDataRes_control_5fmsgs_2eproto.base);
  control_task_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  io_board_fw_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endtool_board_fw_ver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  robot_sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtool_port_type_) -
      reinterpret_cast<char*>(&dof_)) + sizeof(endtool_port_type_));
}

GetSystemInfoDataRes::~GetSystemInfoDataRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  SharedDtor();
}

void GetSystemInfoDataRes::SharedDtor() {
  control_task_ver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  io_board_fw_ver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endtool_board_fw_ver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  robot_sn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSystemInfoDataRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSystemInfoDataRes& GetSystemInfoDataRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSystemInfoDataRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetSystemInfoDataRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  core_board_fw_vers_.Clear();
  control_task_ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  io_board_fw_ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endtool_board_fw_ver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  robot_sn_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dof_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endtool_port_type_) -
      reinterpret_cast<char*>(&dof_)) + sizeof(endtool_port_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetSystemInfoDataRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string control_task_ver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_control_task_ver(), ptr, ctx, "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.control_task_ver");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dof = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model_name(), ptr, ctx, "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.model_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.EndToolPortType endtool_port_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_endtool_port_type(static_cast<::IndyFramework::Protobuf::Shared::EndToolPortType>(val));
        } else goto handle_unusual;
        continue;
      // string io_board_fw_ver = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_io_board_fw_ver(), ptr, ctx, "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.io_board_fw_ver");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string core_board_fw_vers = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_core_board_fw_vers(), ptr, ctx, "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // string endtool_board_fw_ver = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_endtool_board_fw_ver(), ptr, ctx, "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_board_fw_ver");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string robot_sn = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_robot_sn(), ptr, ctx, "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.robot_sn");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetSystemInfoDataRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string control_task_ver = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_control_task_ver()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->control_task_ver().data(), static_cast<int>(this->control_task_ver().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.control_task_ver"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dof = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dof_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.model_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.EndToolPortType endtool_port_type = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_endtool_port_type(static_cast< ::IndyFramework::Protobuf::Shared::EndToolPortType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string io_board_fw_ver = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_io_board_fw_ver()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->io_board_fw_ver().data(), static_cast<int>(this->io_board_fw_ver().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.io_board_fw_ver"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string core_board_fw_vers = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_core_board_fw_vers()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->core_board_fw_vers(this->core_board_fw_vers_size() - 1).data(),
            static_cast<int>(this->core_board_fw_vers(this->core_board_fw_vers_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string endtool_board_fw_ver = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_endtool_board_fw_ver()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->endtool_board_fw_ver().data(), static_cast<int>(this->endtool_board_fw_ver().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_board_fw_ver"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string robot_sn = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_sn()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->robot_sn().data(), static_cast<int>(this->robot_sn().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.robot_sn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetSystemInfoDataRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string control_task_ver = 1;
  if (this->control_task_ver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->control_task_ver().data(), static_cast<int>(this->control_task_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.control_task_ver");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->control_task_ver(), output);
  }

  // int32 dof = 2;
  if (this->dof() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->dof(), output);
  }

  // string model_name = 3;
  if (this->model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.model_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model_name(), output);
  }

  // .IndyFramework.Protobuf.Shared.EndToolPortType endtool_port_type = 9;
  if (this->endtool_port_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->endtool_port_type(), output);
  }

  // string io_board_fw_ver = 10;
  if (this->io_board_fw_ver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->io_board_fw_ver().data(), static_cast<int>(this->io_board_fw_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.io_board_fw_ver");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->io_board_fw_ver(), output);
  }

  // repeated string core_board_fw_vers = 11;
  for (int i = 0, n = this->core_board_fw_vers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->core_board_fw_vers(i).data(), static_cast<int>(this->core_board_fw_vers(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      11, this->core_board_fw_vers(i), output);
  }

  // string endtool_board_fw_ver = 12;
  if (this->endtool_board_fw_ver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->endtool_board_fw_ver().data(), static_cast<int>(this->endtool_board_fw_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_board_fw_ver");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->endtool_board_fw_ver(), output);
  }

  // string robot_sn = 13;
  if (this->robot_sn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->robot_sn().data(), static_cast<int>(this->robot_sn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.robot_sn");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->robot_sn(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSystemInfoDataRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string control_task_ver = 1;
  if (this->control_task_ver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->control_task_ver().data(), static_cast<int>(this->control_task_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.control_task_ver");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->control_task_ver(), target);
  }

  // int32 dof = 2;
  if (this->dof() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->dof(), target);
  }

  // string model_name = 3;
  if (this->model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.model_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->model_name(), target);
  }

  // .IndyFramework.Protobuf.Shared.EndToolPortType endtool_port_type = 9;
  if (this->endtool_port_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->endtool_port_type(), target);
  }

  // string io_board_fw_ver = 10;
  if (this->io_board_fw_ver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->io_board_fw_ver().data(), static_cast<int>(this->io_board_fw_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.io_board_fw_ver");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->io_board_fw_ver(), target);
  }

  // repeated string core_board_fw_vers = 11;
  for (int i = 0, n = this->core_board_fw_vers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->core_board_fw_vers(i).data(), static_cast<int>(this->core_board_fw_vers(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.core_board_fw_vers");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(11, this->core_board_fw_vers(i), target);
  }

  // string endtool_board_fw_ver = 12;
  if (this->endtool_board_fw_ver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->endtool_board_fw_ver().data(), static_cast<int>(this->endtool_board_fw_ver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.endtool_board_fw_ver");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->endtool_board_fw_ver(), target);
  }

  // string robot_sn = 13;
  if (this->robot_sn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->robot_sn().data(), static_cast<int>(this->robot_sn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.robot_sn");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->robot_sn(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetSystemInfoDataRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  return target;
}

size_t GetSystemInfoDataRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string core_board_fw_vers = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->core_board_fw_vers_size());
  for (int i = 0, n = this->core_board_fw_vers_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->core_board_fw_vers(i));
  }

  // string control_task_ver = 1;
  if (this->control_task_ver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->control_task_ver());
  }

  // string model_name = 3;
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  // string io_board_fw_ver = 10;
  if (this->io_board_fw_ver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->io_board_fw_ver());
  }

  // string endtool_board_fw_ver = 12;
  if (this->endtool_board_fw_ver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->endtool_board_fw_ver());
  }

  // string robot_sn = 13;
  if (this->robot_sn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->robot_sn());
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int32 dof = 2;
  if (this->dof() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->dof());
  }

  // .IndyFramework.Protobuf.Shared.EndToolPortType endtool_port_type = 9;
  if (this->endtool_port_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->endtool_port_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSystemInfoDataRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSystemInfoDataRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSystemInfoDataRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
    MergeFrom(*source);
  }
}

void GetSystemInfoDataRes::MergeFrom(const GetSystemInfoDataRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  core_board_fw_vers_.MergeFrom(from.core_board_fw_vers_);
  if (from.control_task_ver().size() > 0) {

    control_task_ver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.control_task_ver_);
  }
  if (from.model_name().size() > 0) {

    model_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.io_board_fw_ver().size() > 0) {

    io_board_fw_ver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.io_board_fw_ver_);
  }
  if (from.endtool_board_fw_ver().size() > 0) {

    endtool_board_fw_ver_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endtool_board_fw_ver_);
  }
  if (from.robot_sn().size() > 0) {

    robot_sn_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.robot_sn_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.dof() != 0) {
    set_dof(from.dof());
  }
  if (from.endtool_port_type() != 0) {
    set_endtool_port_type(from.endtool_port_type());
  }
}

void GetSystemInfoDataRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemInfoDataRes::CopyFrom(const GetSystemInfoDataRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetSystemInfoDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemInfoDataRes::IsInitialized() const {
  return true;
}

void GetSystemInfoDataRes::Swap(GetSystemInfoDataRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSystemInfoDataRes::InternalSwap(GetSystemInfoDataRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  core_board_fw_vers_.InternalSwap(CastToBase(&other->core_board_fw_vers_));
  control_task_ver_.Swap(&other->control_task_ver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_name_.Swap(&other->model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  io_board_fw_ver_.Swap(&other->io_board_fw_ver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  endtool_board_fw_ver_.Swap(&other->endtool_board_fw_ver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  robot_sn_.Swap(&other->robot_sn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dof_, other->dof_);
  swap(endtool_port_type_, other->endtool_port_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSystemInfoDataRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStateDataReq::InitAsDefaultInstance() {
}
class GetStateDataReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStateDataReq::GetStateDataReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetStateDataReq)
}
GetStateDataReq::GetStateDataReq(const GetStateDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetStateDataReq)
}

void GetStateDataReq::SharedCtor() {
}

GetStateDataReq::~GetStateDataReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetStateDataReq)
  SharedDtor();
}

void GetStateDataReq::SharedDtor() {
}

void GetStateDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStateDataReq& GetStateDataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStateDataReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetStateDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetStateDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStateDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStateDataReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetStateDataReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetStateDataReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetStateDataReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStateDataReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetStateDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetStateDataReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStateDataReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetStateDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetStateDataReq)
  return target;
}

size_t GetStateDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetStateDataReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStateDataReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetStateDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStateDataReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStateDataReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetStateDataReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetStateDataReq)
    MergeFrom(*source);
  }
}

void GetStateDataReq::MergeFrom(const GetStateDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetStateDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetStateDataReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetStateDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStateDataReq::CopyFrom(const GetStateDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetStateDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStateDataReq::IsInitialized() const {
  return true;
}

void GetStateDataReq::Swap(GetStateDataReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStateDataReq::InternalSwap(GetStateDataReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStateDataReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStateDataRes::InitAsDefaultInstance() {
}
class GetStateDataRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStateDataRes::kIsSimulationModeFieldNumber;
const int GetStateDataRes::kStateFieldNumber;
const int GetStateDataRes::kViolationFieldNumber;
const int GetStateDataRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStateDataRes::GetStateDataRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetStateDataRes)
}
GetStateDataRes::GetStateDataRes(const GetStateDataRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  violation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.violation().size() > 0) {
    violation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.violation_);
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&is_simulation_mode_, &from.is_simulation_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&is_simulation_mode_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetStateDataRes)
}

void GetStateDataRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStateDataRes_control_5fmsgs_2eproto.base);
  violation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_simulation_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&is_simulation_mode_)) + sizeof(state_));
}

GetStateDataRes::~GetStateDataRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetStateDataRes)
  SharedDtor();
}

void GetStateDataRes::SharedDtor() {
  violation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetStateDataRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStateDataRes& GetStateDataRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStateDataRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetStateDataRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetStateDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  violation_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_simulation_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&is_simulation_mode_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetStateDataRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_simulation_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_simulation_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.OpState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::IndyFramework::Protobuf::Shared::OpState>(val));
        } else goto handle_unusual;
        continue;
      // string violation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_violation(), ptr, ctx, "IndyFramework.Protobuf.Control.GetStateDataRes.violation");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetStateDataRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetStateDataRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetStateDataRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_simulation_mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_simulation_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.OpState state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::IndyFramework::Protobuf::Shared::OpState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string violation = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_violation()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->violation().data(), static_cast<int>(this->violation().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetStateDataRes.violation"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetStateDataRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetStateDataRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetStateDataRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetStateDataRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetStateDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_simulation_mode = 1;
  if (this->is_simulation_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_simulation_mode(), output);
  }

  // .IndyFramework.Protobuf.Shared.OpState state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // string violation = 3;
  if (this->violation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->violation().data(), static_cast<int>(this->violation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetStateDataRes.violation");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->violation(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetStateDataRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetStateDataRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStateDataRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetStateDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_simulation_mode = 1;
  if (this->is_simulation_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_simulation_mode(), target);
  }

  // .IndyFramework.Protobuf.Shared.OpState state = 2;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // string violation = 3;
  if (this->violation().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->violation().data(), static_cast<int>(this->violation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetStateDataRes.violation");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->violation(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetStateDataRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetStateDataRes)
  return target;
}

size_t GetStateDataRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetStateDataRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string violation = 3;
  if (this->violation().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->violation());
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // bool is_simulation_mode = 1;
  if (this->is_simulation_mode() != 0) {
    total_size += 1 + 1;
  }

  // .IndyFramework.Protobuf.Shared.OpState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStateDataRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetStateDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStateDataRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStateDataRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetStateDataRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetStateDataRes)
    MergeFrom(*source);
  }
}

void GetStateDataRes::MergeFrom(const GetStateDataRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetStateDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.violation().size() > 0) {

    violation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.violation_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.is_simulation_mode() != 0) {
    set_is_simulation_mode(from.is_simulation_mode());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void GetStateDataRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetStateDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStateDataRes::CopyFrom(const GetStateDataRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetStateDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStateDataRes::IsInitialized() const {
  return true;
}

void GetStateDataRes::Swap(GetStateDataRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStateDataRes::InternalSwap(GetStateDataRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  violation_.Swap(&other->violation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_simulation_mode_, other->is_simulation_mode_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStateDataRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetViolationDataReq::InitAsDefaultInstance() {
}
class GetViolationDataReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetViolationDataReq::GetViolationDataReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetViolationDataReq)
}
GetViolationDataReq::GetViolationDataReq(const GetViolationDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetViolationDataReq)
}

void GetViolationDataReq::SharedCtor() {
}

GetViolationDataReq::~GetViolationDataReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetViolationDataReq)
  SharedDtor();
}

void GetViolationDataReq::SharedDtor() {
}

void GetViolationDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetViolationDataReq& GetViolationDataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetViolationDataReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetViolationDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetViolationDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetViolationDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetViolationDataReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetViolationDataReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetViolationDataReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetViolationDataReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetViolationDataReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetViolationDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetViolationDataReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetViolationDataReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetViolationDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetViolationDataReq)
  return target;
}

size_t GetViolationDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetViolationDataReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetViolationDataReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetViolationDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetViolationDataReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetViolationDataReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetViolationDataReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetViolationDataReq)
    MergeFrom(*source);
  }
}

void GetViolationDataReq::MergeFrom(const GetViolationDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetViolationDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetViolationDataReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetViolationDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetViolationDataReq::CopyFrom(const GetViolationDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetViolationDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetViolationDataReq::IsInitialized() const {
  return true;
}

void GetViolationDataReq::Swap(GetViolationDataReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetViolationDataReq::InternalSwap(GetViolationDataReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetViolationDataReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetViolationDataRes::InitAsDefaultInstance() {
}
class GetViolationDataRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetViolationDataRes::kViolationCodeFieldNumber;
const int GetViolationDataRes::kJIndexFieldNumber;
const int GetViolationDataRes::kIArgsFieldNumber;
const int GetViolationDataRes::kFArgsFieldNumber;
const int GetViolationDataRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetViolationDataRes::GetViolationDataRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetViolationDataRes)
}
GetViolationDataRes::GetViolationDataRes(const GetViolationDataRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      i_args_(from.i_args_),
      f_args_(from.f_args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&violation_code_, &from.violation_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&j_index_) -
    reinterpret_cast<char*>(&violation_code_)) + sizeof(j_index_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetViolationDataRes)
}

void GetViolationDataRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetViolationDataRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&violation_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&j_index_) -
      reinterpret_cast<char*>(&violation_code_)) + sizeof(j_index_));
}

GetViolationDataRes::~GetViolationDataRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetViolationDataRes)
  SharedDtor();
}

void GetViolationDataRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetViolationDataRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetViolationDataRes& GetViolationDataRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetViolationDataRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetViolationDataRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetViolationDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i_args_.Clear();
  f_args_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&violation_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&j_index_) -
      reinterpret_cast<char*>(&violation_code_)) + sizeof(j_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetViolationDataRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 violation_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          violation_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 j_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          j_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 i_args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_i_args(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_i_args(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float f_args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_f_args(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_f_args(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetViolationDataRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetViolationDataRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetViolationDataRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 violation_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &violation_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 j_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &j_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 i_args = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_i_args())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_i_args())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float f_args = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_f_args())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_f_args())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetViolationDataRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetViolationDataRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetViolationDataRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetViolationDataRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetViolationDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 violation_code = 1;
  if (this->violation_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->violation_code(), output);
  }

  // uint32 j_index = 2;
  if (this->j_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->j_index(), output);
  }

  // repeated int32 i_args = 3;
  if (this->i_args_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_i_args_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->i_args_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->i_args(i), output);
  }

  // repeated float f_args = 4;
  if (this->f_args_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_f_args_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->f_args().data(), this->f_args_size(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetViolationDataRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetViolationDataRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetViolationDataRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetViolationDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 violation_code = 1;
  if (this->violation_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->violation_code(), target);
  }

  // uint32 j_index = 2;
  if (this->j_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->j_index(), target);
  }

  // repeated int32 i_args = 3;
  if (this->i_args_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _i_args_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->i_args_, target);
  }

  // repeated float f_args = 4;
  if (this->f_args_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _f_args_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->f_args_, target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetViolationDataRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetViolationDataRes)
  return target;
}

size_t GetViolationDataRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetViolationDataRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 i_args = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->i_args_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _i_args_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float f_args = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->f_args_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _f_args_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // uint64 violation_code = 1;
  if (this->violation_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->violation_code());
  }

  // uint32 j_index = 2;
  if (this->j_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->j_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetViolationDataRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetViolationDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetViolationDataRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetViolationDataRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetViolationDataRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetViolationDataRes)
    MergeFrom(*source);
  }
}

void GetViolationDataRes::MergeFrom(const GetViolationDataRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetViolationDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  i_args_.MergeFrom(from.i_args_);
  f_args_.MergeFrom(from.f_args_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.violation_code() != 0) {
    set_violation_code(from.violation_code());
  }
  if (from.j_index() != 0) {
    set_j_index(from.j_index());
  }
}

void GetViolationDataRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetViolationDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetViolationDataRes::CopyFrom(const GetViolationDataRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetViolationDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetViolationDataRes::IsInitialized() const {
  return true;
}

void GetViolationDataRes::Swap(GetViolationDataRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetViolationDataRes::InternalSwap(GetViolationDataRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  i_args_.InternalSwap(&other->i_args_);
  f_args_.InternalSwap(&other->f_args_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(violation_code_, other->violation_code_);
  swap(j_index_, other->j_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetViolationDataRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetProgramStateReq::InitAsDefaultInstance() {
}
class SetProgramStateReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetProgramStateReq::kProgramStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetProgramStateReq::SetProgramStateReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetProgramStateReq)
}
SetProgramStateReq::SetProgramStateReq(const SetProgramStateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  program_state_ = from.program_state_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetProgramStateReq)
}

void SetProgramStateReq::SharedCtor() {
  program_state_ = 0;
}

SetProgramStateReq::~SetProgramStateReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetProgramStateReq)
  SharedDtor();
}

void SetProgramStateReq::SharedDtor() {
}

void SetProgramStateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetProgramStateReq& SetProgramStateReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetProgramStateReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetProgramStateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetProgramStateReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  program_state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetProgramStateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IndyFramework.Protobuf.Shared.ProgramState program_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_program_state(static_cast<::IndyFramework::Protobuf::Shared::ProgramState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetProgramStateReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetProgramStateReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IndyFramework.Protobuf.Shared.ProgramState program_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_program_state(static_cast< ::IndyFramework::Protobuf::Shared::ProgramState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetProgramStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetProgramStateReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetProgramStateReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetProgramStateReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.ProgramState program_state = 1;
  if (this->program_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->program_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetProgramStateReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetProgramStateReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetProgramStateReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.ProgramState program_state = 1;
  if (this->program_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->program_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetProgramStateReq)
  return target;
}

size_t SetProgramStateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetProgramStateReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.ProgramState program_state = 1;
  if (this->program_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->program_state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetProgramStateReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetProgramStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetProgramStateReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetProgramStateReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetProgramStateReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetProgramStateReq)
    MergeFrom(*source);
  }
}

void SetProgramStateReq::MergeFrom(const SetProgramStateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetProgramStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.program_state() != 0) {
    set_program_state(from.program_state());
  }
}

void SetProgramStateReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetProgramStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetProgramStateReq::CopyFrom(const SetProgramStateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetProgramStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProgramStateReq::IsInitialized() const {
  return true;
}

void SetProgramStateReq::Swap(SetProgramStateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetProgramStateReq::InternalSwap(SetProgramStateReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(program_state_, other->program_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProgramStateReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetProgramStateRes::InitAsDefaultInstance() {
}
class SetProgramStateRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetProgramStateRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetProgramStateRes::SetProgramStateRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.SetProgramStateRes)
}
SetProgramStateRes::SetProgramStateRes(const SetProgramStateRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.SetProgramStateRes)
}

void SetProgramStateRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetProgramStateRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetProgramStateRes::~SetProgramStateRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.SetProgramStateRes)
  SharedDtor();
}

void SetProgramStateRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetProgramStateRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetProgramStateRes& SetProgramStateRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetProgramStateRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void SetProgramStateRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.SetProgramStateRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetProgramStateRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.SetProgramStateRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetProgramStateRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.SetProgramStateRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.SetProgramStateRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.SetProgramStateRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.SetProgramStateRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetProgramStateRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.SetProgramStateRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetProgramStateRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.SetProgramStateRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetProgramStateRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.SetProgramStateRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.SetProgramStateRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.SetProgramStateRes)
  return target;
}

size_t SetProgramStateRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.SetProgramStateRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetProgramStateRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.SetProgramStateRes)
  GOOGLE_DCHECK_NE(&from, this);
  const SetProgramStateRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetProgramStateRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.SetProgramStateRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.SetProgramStateRes)
    MergeFrom(*source);
  }
}

void SetProgramStateRes::MergeFrom(const SetProgramStateRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.SetProgramStateRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SetProgramStateRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.SetProgramStateRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetProgramStateRes::CopyFrom(const SetProgramStateRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.SetProgramStateRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProgramStateRes::IsInitialized() const {
  return true;
}

void SetProgramStateRes::Swap(SetProgramStateRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetProgramStateRes::InternalSwap(SetProgramStateRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProgramStateRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMotionDataReq::InitAsDefaultInstance() {
}
class GetMotionDataReq::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMotionDataReq::GetMotionDataReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetMotionDataReq)
}
GetMotionDataReq::GetMotionDataReq(const GetMotionDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetMotionDataReq)
}

void GetMotionDataReq::SharedCtor() {
}

GetMotionDataReq::~GetMotionDataReq() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetMotionDataReq)
  SharedDtor();
}

void GetMotionDataReq::SharedDtor() {
}

void GetMotionDataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMotionDataReq& GetMotionDataReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMotionDataReq_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetMotionDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetMotionDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMotionDataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMotionDataReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetMotionDataReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetMotionDataReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetMotionDataReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMotionDataReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetMotionDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetMotionDataReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMotionDataReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetMotionDataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetMotionDataReq)
  return target;
}

size_t GetMotionDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetMotionDataReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMotionDataReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetMotionDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMotionDataReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMotionDataReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetMotionDataReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetMotionDataReq)
    MergeFrom(*source);
  }
}

void GetMotionDataReq::MergeFrom(const GetMotionDataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetMotionDataReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetMotionDataReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetMotionDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMotionDataReq::CopyFrom(const GetMotionDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetMotionDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMotionDataReq::IsInitialized() const {
  return true;
}

void GetMotionDataReq::Swap(GetMotionDataReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMotionDataReq::InternalSwap(GetMotionDataReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMotionDataReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMotionDataRes::InitAsDefaultInstance() {
}
class GetMotionDataRes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMotionDataRes::kTrajStateFieldNumber;
const int GetMotionDataRes::kTrajProgressFieldNumber;
const int GetMotionDataRes::kIsInMotionFieldNumber;
const int GetMotionDataRes::kIsMotionDoneFieldNumber;
const int GetMotionDataRes::kIsPausingFieldNumber;
const int GetMotionDataRes::kIsStoppingFieldNumber;
const int GetMotionDataRes::kHasMotionFieldNumber;
const int GetMotionDataRes::kSpeedRatioFieldNumber;
const int GetMotionDataRes::kMotionIdFieldNumber;
const int GetMotionDataRes::kRemainDistanceFieldNumber;
const int GetMotionDataRes::kMotionQueueSizeFieldNumber;
const int GetMotionDataRes::kCurTrajProgressFieldNumber;
const int GetMotionDataRes::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMotionDataRes::GetMotionDataRes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetMotionDataRes)
}
GetMotionDataRes::GetMotionDataRes(const GetMotionDataRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&traj_state_, &from.traj_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_traj_progress_) -
    reinterpret_cast<char*>(&traj_state_)) + sizeof(cur_traj_progress_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetMotionDataRes)
}

void GetMotionDataRes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMotionDataRes_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&traj_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_traj_progress_) -
      reinterpret_cast<char*>(&traj_state_)) + sizeof(cur_traj_progress_));
}

GetMotionDataRes::~GetMotionDataRes() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetMotionDataRes)
  SharedDtor();
}

void GetMotionDataRes::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetMotionDataRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMotionDataRes& GetMotionDataRes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMotionDataRes_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetMotionDataRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetMotionDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&traj_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_traj_progress_) -
      reinterpret_cast<char*>(&traj_state_)) + sizeof(cur_traj_progress_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetMotionDataRes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IndyFramework.Protobuf.Shared.TrajState traj_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_traj_state(static_cast<::IndyFramework::Protobuf::Shared::TrajState>(val));
        } else goto handle_unusual;
        continue;
      // int32 traj_progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          traj_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_in_motion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_in_motion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_motion_done = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_motion_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_pausing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_pausing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_stopping = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_stopping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_motion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          has_motion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 speed_ratio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          speed_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 motion_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          motion_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float remain_distance = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          remain_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 motion_queue_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          motion_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur_traj_progress = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cur_traj_progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetMotionDataRes.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetMotionDataRes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetMotionDataRes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IndyFramework.Protobuf.Shared.TrajState traj_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_traj_state(static_cast< ::IndyFramework::Protobuf::Shared::TrajState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 traj_progress = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &traj_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_in_motion = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_motion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_motion_done = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_motion_done_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pausing = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pausing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_stopping = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stopping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_motion = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_motion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 speed_ratio = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 motion_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &motion_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float remain_distance = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &remain_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 motion_queue_size = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &motion_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cur_traj_progress = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_traj_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetMotionDataRes.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetMotionDataRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetMotionDataRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetMotionDataRes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetMotionDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.TrajState traj_state = 1;
  if (this->traj_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->traj_state(), output);
  }

  // int32 traj_progress = 2;
  if (this->traj_progress() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->traj_progress(), output);
  }

  // bool is_in_motion = 3;
  if (this->is_in_motion() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_in_motion(), output);
  }

  // bool is_motion_done = 4;
  if (this->is_motion_done() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_motion_done(), output);
  }

  // bool is_pausing = 5;
  if (this->is_pausing() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->is_pausing(), output);
  }

  // bool is_stopping = 6;
  if (this->is_stopping() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_stopping(), output);
  }

  // bool has_motion = 7;
  if (this->has_motion() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->has_motion(), output);
  }

  // int32 speed_ratio = 8;
  if (this->speed_ratio() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->speed_ratio(), output);
  }

  // int32 motion_id = 9;
  if (this->motion_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->motion_id(), output);
  }

  // float remain_distance = 10;
  if (!(this->remain_distance() <= 0 && this->remain_distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->remain_distance(), output);
  }

  // uint32 motion_queue_size = 11;
  if (this->motion_queue_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->motion_queue_size(), output);
  }

  // int32 cur_traj_progress = 12;
  if (this->cur_traj_progress() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->cur_traj_progress(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetMotionDataRes.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetMotionDataRes)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMotionDataRes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetMotionDataRes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IndyFramework.Protobuf.Shared.TrajState traj_state = 1;
  if (this->traj_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->traj_state(), target);
  }

  // int32 traj_progress = 2;
  if (this->traj_progress() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->traj_progress(), target);
  }

  // bool is_in_motion = 3;
  if (this->is_in_motion() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_in_motion(), target);
  }

  // bool is_motion_done = 4;
  if (this->is_motion_done() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->is_motion_done(), target);
  }

  // bool is_pausing = 5;
  if (this->is_pausing() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->is_pausing(), target);
  }

  // bool is_stopping = 6;
  if (this->is_stopping() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->is_stopping(), target);
  }

  // bool has_motion = 7;
  if (this->has_motion() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->has_motion(), target);
  }

  // int32 speed_ratio = 8;
  if (this->speed_ratio() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->speed_ratio(), target);
  }

  // int32 motion_id = 9;
  if (this->motion_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->motion_id(), target);
  }

  // float remain_distance = 10;
  if (!(this->remain_distance() <= 0 && this->remain_distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->remain_distance(), target);
  }

  // uint32 motion_queue_size = 11;
  if (this->motion_queue_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->motion_queue_size(), target);
  }

  // int32 cur_traj_progress = 12;
  if (this->cur_traj_progress() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->cur_traj_progress(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetMotionDataRes.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetMotionDataRes)
  return target;
}

size_t GetMotionDataRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetMotionDataRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // .IndyFramework.Protobuf.Shared.TrajState traj_state = 1;
  if (this->traj_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->traj_state());
  }

  // int32 traj_progress = 2;
  if (this->traj_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->traj_progress());
  }

  // bool is_in_motion = 3;
  if (this->is_in_motion() != 0) {
    total_size += 1 + 1;
  }

  // bool is_motion_done = 4;
  if (this->is_motion_done() != 0) {
    total_size += 1 + 1;
  }

  // bool is_pausing = 5;
  if (this->is_pausing() != 0) {
    total_size += 1 + 1;
  }

  // bool is_stopping = 6;
  if (this->is_stopping() != 0) {
    total_size += 1 + 1;
  }

  // bool has_motion = 7;
  if (this->has_motion() != 0) {
    total_size += 1 + 1;
  }

  // int32 speed_ratio = 8;
  if (this->speed_ratio() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->speed_ratio());
  }

  // int32 motion_id = 9;
  if (this->motion_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->motion_id());
  }

  // float remain_distance = 10;
  if (!(this->remain_distance() <= 0 && this->remain_distance() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 motion_queue_size = 11;
  if (this->motion_queue_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->motion_queue_size());
  }

  // int32 cur_traj_progress = 12;
  if (this->cur_traj_progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cur_traj_progress());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMotionDataRes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetMotionDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMotionDataRes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMotionDataRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetMotionDataRes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetMotionDataRes)
    MergeFrom(*source);
  }
}

void GetMotionDataRes::MergeFrom(const GetMotionDataRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetMotionDataRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.traj_state() != 0) {
    set_traj_state(from.traj_state());
  }
  if (from.traj_progress() != 0) {
    set_traj_progress(from.traj_progress());
  }
  if (from.is_in_motion() != 0) {
    set_is_in_motion(from.is_in_motion());
  }
  if (from.is_motion_done() != 0) {
    set_is_motion_done(from.is_motion_done());
  }
  if (from.is_pausing() != 0) {
    set_is_pausing(from.is_pausing());
  }
  if (from.is_stopping() != 0) {
    set_is_stopping(from.is_stopping());
  }
  if (from.has_motion() != 0) {
    set_has_motion(from.has_motion());
  }
  if (from.speed_ratio() != 0) {
    set_speed_ratio(from.speed_ratio());
  }
  if (from.motion_id() != 0) {
    set_motion_id(from.motion_id());
  }
  if (!(from.remain_distance() <= 0 && from.remain_distance() >= 0)) {
    set_remain_distance(from.remain_distance());
  }
  if (from.motion_queue_size() != 0) {
    set_motion_queue_size(from.motion_queue_size());
  }
  if (from.cur_traj_progress() != 0) {
    set_cur_traj_progress(from.cur_traj_progress());
  }
}

void GetMotionDataRes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetMotionDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMotionDataRes::CopyFrom(const GetMotionDataRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetMotionDataRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMotionDataRes::IsInitialized() const {
  return true;
}

void GetMotionDataRes::Swap(GetMotionDataRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMotionDataRes::InternalSwap(GetMotionDataRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(traj_state_, other->traj_state_);
  swap(traj_progress_, other->traj_progress_);
  swap(is_in_motion_, other->is_in_motion_);
  swap(is_motion_done_, other->is_motion_done_);
  swap(is_pausing_, other->is_pausing_);
  swap(is_stopping_, other->is_stopping_);
  swap(has_motion_, other->has_motion_);
  swap(speed_ratio_, other->speed_ratio_);
  swap(motion_id_, other->motion_id_);
  swap(remain_distance_, other->remain_distance_);
  swap(motion_queue_size_, other->motion_queue_size_);
  swap(cur_traj_progress_, other->cur_traj_progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMotionDataRes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEL5001Req::InitAsDefaultInstance() {
}
class GetEL5001Req::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEL5001Req::GetEL5001Req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetEL5001Req)
}
GetEL5001Req::GetEL5001Req(const GetEL5001Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetEL5001Req)
}

void GetEL5001Req::SharedCtor() {
}

GetEL5001Req::~GetEL5001Req() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetEL5001Req)
  SharedDtor();
}

void GetEL5001Req::SharedDtor() {
}

void GetEL5001Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEL5001Req& GetEL5001Req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEL5001Req_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetEL5001Req::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetEL5001Req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetEL5001Req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetEL5001Req::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetEL5001Req)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetEL5001Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetEL5001Req)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetEL5001Req::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetEL5001Req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetEL5001Req)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEL5001Req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetEL5001Req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetEL5001Req)
  return target;
}

size_t GetEL5001Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetEL5001Req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEL5001Req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetEL5001Req)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEL5001Req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEL5001Req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetEL5001Req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetEL5001Req)
    MergeFrom(*source);
  }
}

void GetEL5001Req::MergeFrom(const GetEL5001Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetEL5001Req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetEL5001Req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetEL5001Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEL5001Req::CopyFrom(const GetEL5001Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetEL5001Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEL5001Req::IsInitialized() const {
  return true;
}

void GetEL5001Req::Swap(GetEL5001Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEL5001Req::InternalSwap(GetEL5001Req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEL5001Req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEL5001Res::InitAsDefaultInstance() {
}
class GetEL5001Res::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEL5001Res::kStatusFieldNumber;
const int GetEL5001Res::kValueFieldNumber;
const int GetEL5001Res::kDeltaFieldNumber;
const int GetEL5001Res::kAverageFieldNumber;
const int GetEL5001Res::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEL5001Res::GetEL5001Res()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetEL5001Res)
}
GetEL5001Res::GetEL5001Res(const GetEL5001Res& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&average_) -
    reinterpret_cast<char*>(&status_)) + sizeof(average_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetEL5001Res)
}

void GetEL5001Res::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetEL5001Res_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_) -
      reinterpret_cast<char*>(&status_)) + sizeof(average_));
}

GetEL5001Res::~GetEL5001Res() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetEL5001Res)
  SharedDtor();
}

void GetEL5001Res::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEL5001Res::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEL5001Res& GetEL5001Res::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEL5001Res_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetEL5001Res::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetEL5001Res)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_) -
      reinterpret_cast<char*>(&status_)) + sizeof(average_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetEL5001Res::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float average = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          average_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetEL5001Res.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetEL5001Res::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetEL5001Res)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 delta = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float average = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetEL5001Res.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetEL5001Res)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetEL5001Res)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetEL5001Res::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetEL5001Res)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // int32 delta = 3;
  if (this->delta() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->delta(), output);
  }

  // float average = 5;
  if (!(this->average() <= 0 && this->average() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->average(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetEL5001Res.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetEL5001Res)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEL5001Res::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetEL5001Res)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // int32 delta = 3;
  if (this->delta() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->delta(), target);
  }

  // float average = 5;
  if (!(this->average() <= 0 && this->average() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->average(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetEL5001Res.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetEL5001Res)
  return target;
}

size_t GetEL5001Res::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetEL5001Res)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->value());
  }

  // int32 delta = 3;
  if (this->delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->delta());
  }

  // float average = 5;
  if (!(this->average() <= 0 && this->average() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEL5001Res::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetEL5001Res)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEL5001Res* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEL5001Res>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetEL5001Res)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetEL5001Res)
    MergeFrom(*source);
  }
}

void GetEL5001Res::MergeFrom(const GetEL5001Res& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetEL5001Res)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.delta() != 0) {
    set_delta(from.delta());
  }
  if (!(from.average() <= 0 && from.average() >= 0)) {
    set_average(from.average());
  }
}

void GetEL5001Res::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetEL5001Res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEL5001Res::CopyFrom(const GetEL5001Res& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetEL5001Res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEL5001Res::IsInitialized() const {
  return true;
}

void GetEL5001Res::Swap(GetEL5001Res* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEL5001Res::InternalSwap(GetEL5001Res* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(value_, other->value_);
  swap(delta_, other->delta_);
  swap(average_, other->average_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEL5001Res::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEL5101Req::InitAsDefaultInstance() {
}
class GetEL5101Req::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEL5101Req::GetEL5101Req()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetEL5101Req)
}
GetEL5101Req::GetEL5101Req(const GetEL5101Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetEL5101Req)
}

void GetEL5101Req::SharedCtor() {
}

GetEL5101Req::~GetEL5101Req() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetEL5101Req)
  SharedDtor();
}

void GetEL5101Req::SharedDtor() {
}

void GetEL5101Req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEL5101Req& GetEL5101Req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEL5101Req_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetEL5101Req::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetEL5101Req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetEL5101Req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetEL5101Req::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetEL5101Req)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetEL5101Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetEL5101Req)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetEL5101Req::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetEL5101Req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetEL5101Req)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEL5101Req::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetEL5101Req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetEL5101Req)
  return target;
}

size_t GetEL5101Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetEL5101Req)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEL5101Req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetEL5101Req)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEL5101Req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEL5101Req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetEL5101Req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetEL5101Req)
    MergeFrom(*source);
  }
}

void GetEL5101Req::MergeFrom(const GetEL5101Req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetEL5101Req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetEL5101Req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetEL5101Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEL5101Req::CopyFrom(const GetEL5101Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetEL5101Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEL5101Req::IsInitialized() const {
  return true;
}

void GetEL5101Req::Swap(GetEL5101Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEL5101Req::InternalSwap(GetEL5101Req* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEL5101Req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetEL5101Res::InitAsDefaultInstance() {
}
class GetEL5101Res::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetEL5101Res::kStatusFieldNumber;
const int GetEL5101Res::kValueFieldNumber;
const int GetEL5101Res::kLatchFieldNumber;
const int GetEL5101Res::kDeltaFieldNumber;
const int GetEL5101Res::kAverageFieldNumber;
const int GetEL5101Res::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetEL5101Res::GetEL5101Res()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Control.GetEL5101Res)
}
GetEL5101Res::GetEL5101Res(const GetEL5101Res& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&average_) -
    reinterpret_cast<char*>(&status_)) + sizeof(average_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Control.GetEL5101Res)
}

void GetEL5101Res::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetEL5101Res_control_5fmsgs_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_) -
      reinterpret_cast<char*>(&status_)) + sizeof(average_));
}

GetEL5101Res::~GetEL5101Res() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Control.GetEL5101Res)
  SharedDtor();
}

void GetEL5101Res::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetEL5101Res::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetEL5101Res& GetEL5101Res::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetEL5101Res_control_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void GetEL5101Res::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Control.GetEL5101Res)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_) -
      reinterpret_cast<char*>(&status_)) + sizeof(average_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetEL5101Res::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 latch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          latch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float average = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          average_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string msg = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_msg(), ptr, ctx, "IndyFramework.Protobuf.Control.GetEL5101Res.msg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetEL5101Res::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Control.GetEL5101Res)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 latch = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 delta = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float average = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Control.GetEL5101Res.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Control.GetEL5101Res)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Control.GetEL5101Res)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetEL5101Res::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Control.GetEL5101Res)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // int32 latch = 3;
  if (this->latch() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->latch(), output);
  }

  // int32 delta = 4;
  if (this->delta() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->delta(), output);
  }

  // float average = 5;
  if (!(this->average() <= 0 && this->average() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->average(), output);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetEL5101Res.msg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Control.GetEL5101Res)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetEL5101Res::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Control.GetEL5101Res)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // int32 latch = 3;
  if (this->latch() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->latch(), target);
  }

  // int32 delta = 4;
  if (this->delta() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->delta(), target);
  }

  // float average = 5;
  if (!(this->average() <= 0 && this->average() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->average(), target);
  }

  // string msg = 100;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Control.GetEL5101Res.msg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        100, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Control.GetEL5101Res)
  return target;
}

size_t GetEL5101Res::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Control.GetEL5101Res)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 100;
  if (this->msg().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->value());
  }

  // int32 latch = 3;
  if (this->latch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->latch());
  }

  // int32 delta = 4;
  if (this->delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->delta());
  }

  // float average = 5;
  if (!(this->average() <= 0 && this->average() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetEL5101Res::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Control.GetEL5101Res)
  GOOGLE_DCHECK_NE(&from, this);
  const GetEL5101Res* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetEL5101Res>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Control.GetEL5101Res)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Control.GetEL5101Res)
    MergeFrom(*source);
  }
}

void GetEL5101Res::MergeFrom(const GetEL5101Res& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Control.GetEL5101Res)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.latch() != 0) {
    set_latch(from.latch());
  }
  if (from.delta() != 0) {
    set_delta(from.delta());
  }
  if (!(from.average() <= 0 && from.average() >= 0)) {
    set_average(from.average());
  }
}

void GetEL5101Res::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Control.GetEL5101Res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEL5101Res::CopyFrom(const GetEL5101Res& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Control.GetEL5101Res)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEL5101Res::IsInitialized() const {
  return true;
}

void GetEL5101Res::Swap(GetEL5101Res* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetEL5101Res::InternalSwap(GetEL5101Res* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(value_, other->value_);
  swap(latch_, other->latch_);
  swap(delta_, other->delta_);
  swap(average_, other->average_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEL5101Res::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Control
}  // namespace Protobuf
}  // namespace IndyFramework
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMoveJReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMoveJReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMoveJReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMoveJRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMoveJRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMoveJRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMoveJTReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMoveJTReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMoveJTReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMoveJTRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMoveJTRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMoveJTRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMoveLReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMoveLReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMoveLReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMoveLRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMoveLRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMoveLRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMoveLTReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMoveLTReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMoveLTReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMoveLTRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMoveLTRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMoveLTRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMoveCReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMoveCReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMoveCReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMoveCRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMoveCRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMoveCRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMoveCTReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMoveCTReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMoveCTReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMoveCTRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMoveCTRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMoveCTRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AWaitIOReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AWaitIOReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AWaitIOReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AWaitIORes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AWaitIORes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AWaitIORes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AWaitTimeReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AWaitTimeReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AWaitTimeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AWaitTimeRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AWaitTimeRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AWaitTimeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AWaitProgressReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AWaitProgressReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AWaitProgressReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AWaitProgressRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AWaitProgressRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AWaitProgressRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AWaitTrajReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AWaitTrajReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AWaitTrajReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AWaitTrajRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AWaitTrajRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AWaitTrajRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMotionStopReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMotionStopReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMotionStopReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AMotionStopRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AMotionStopRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AMotionStopRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AWaitRadiusReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AWaitRadiusReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AWaitRadiusReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::AWaitRadiusRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::AWaitRadiusRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::AWaitRadiusRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::MoveSJReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::MoveSJReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::MoveSJReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::MoveSJRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::MoveSJRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::MoveSJRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::MoveSLReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::MoveSLReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::MoveSLReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::MoveSLRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::MoveSLRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::MoveSLRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::MoveSJTReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::MoveSJTReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::MoveSJTReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::MoveSJTRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::MoveSJTRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::MoveSJTRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::MoveSLTReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::MoveSLTReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::MoveSLTReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::MoveSLTRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::MoveSLTRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::MoveSLTRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::MoveSpiralReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::MoveSpiralReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::MoveSpiralReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::MoveSpiralRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::MoveSpiralRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::MoveSpiralRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetRefFrameReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetRefFrameReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetRefFrameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetRefFrameRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetRefFrameRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetRefFrameRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetToolFrameReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetToolFrameReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetToolFrameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetToolFrameRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetToolFrameRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetToolFrameRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetSpeedRatioReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetSpeedRatioReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetSpeedRatioReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetSpeedRatioRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetSpeedRatioRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetSpeedRatioRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::StopReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::StopReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::StopReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::StopRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::StopRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::StopRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::PauseReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::PauseReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::PauseReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::PauseRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::PauseRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::PauseRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::ResumeReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::ResumeReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::ResumeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::ResumeRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::ResumeRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::ResumeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::RebootReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::RebootReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::RebootReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::RebootRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::RebootRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::RebootRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::RecoverReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::RecoverReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::RecoverReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::RecoverRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::RecoverRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::RecoverRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::BrakeReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::BrakeReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::BrakeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::BrakeRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::BrakeRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::BrakeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::ServoReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::ServoReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::ServoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::ServoRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::ServoRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::ServoRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetAutoServoOffReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetAutoServoOffReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetAutoServoOffReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetAutoServoOffRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetAutoServoOffRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetAutoServoOffRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetAutoServoOffReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetAutoServoOffReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetAutoServoOffReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetAutoServoOffRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetAutoServoOffRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetAutoServoOffRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SimulationModeReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SimulationModeReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SimulationModeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SimulationModeRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SimulationModeRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SimulationModeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::DirectTeachingModeReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::DirectTeachingModeReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::DirectTeachingModeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::DirectTeachingModeRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::DirectTeachingModeRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::DirectTeachingModeRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::InverseKinematicsReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::InverseKinematicsReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::InverseKinematicsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::InverseKinematicsRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::InverseKinematicsRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::InverseKinematicsRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetPalletPointListReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetPalletPointListReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetPalletPointListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetPalletPointListRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetPalletPointListRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetPalletPointListRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetDIReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetDIReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetDIReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetDIRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetDIRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetDIRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetDIReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetDIReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetDIReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetDIRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetDIRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetDIRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetDOReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetDOReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetDOReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetDORes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetDORes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetDORes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetDOReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetDOReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetDOReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetDORes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetDORes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetDORes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetAIReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetAIReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetAIReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetAIRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetAIRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetAIRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetAIReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetAIReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetAIReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetAIRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetAIRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetAIRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetAOReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetAOReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetAOReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetAORes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetAORes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetAORes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetAOReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetAOReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetAOReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetAORes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetAORes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetAORes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetEndDIReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetEndDIReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetEndDIReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetEndDIRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetEndDIRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetEndDIRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetEndDIReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetEndDIReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetEndDIReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetEndDIRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetEndDIRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetEndDIRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetEndDOReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetEndDOReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetEndDOReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetEndDORes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetEndDORes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetEndDORes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetEndDOReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetEndDOReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetEndDOReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetEndDORes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetEndDORes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetEndDORes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetEndAIReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetEndAIReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetEndAIReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetEndAIRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetEndAIRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetEndAIRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetEndAIReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetEndAIReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetEndAIReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetEndAIRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetEndAIRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetEndAIRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetEndAOReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetEndAOReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetEndAOReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetEndAORes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetEndAORes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetEndAORes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetEndAOReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetEndAOReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetEndAOReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetEndAORes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetEndAORes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetEndAORes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetJointControlGainReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetJointControlGainReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetJointControlGainReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetJointControlGainRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetJointControlGainRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetJointControlGainRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetJointControlGainReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetJointControlGainReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetJointControlGainReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetJointControlGainRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetJointControlGainRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetJointControlGainRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetTaskControlGainReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetTaskControlGainReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetTaskControlGainReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetTaskControlGainRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetTaskControlGainRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetTaskControlGainRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetTaskControlGainReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetTaskControlGainReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetTaskControlGainReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetTaskControlGainRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetTaskControlGainRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetTaskControlGainRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetFricCompReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetFricCompReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetFricCompReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetFricCompRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetFricCompRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetFricCompRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetFricCompReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetFricCompReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetFricCompReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetFricCompRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetFricCompRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetFricCompRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetMountPosReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetMountPosReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetMountPosReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetMountPosRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetMountPosRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetMountPosRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetMountPosReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetMountPosReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetMountPosReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetMountPosRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetMountPosRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetMountPosRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetToolPropertyReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetToolPropertyReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetToolPropertyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetToolPropertyRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetToolPropertyRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetToolPropertyRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetToolPropertyReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetToolPropertyReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetToolPropertyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetToolPropertyRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetToolPropertyRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetToolPropertyRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetCollSensLevelReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetCollSensLevelReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetCollSensLevelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetCollSensLevelRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetCollSensLevelRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetCollSensLevelRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetCollSensLevelReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetCollSensLevelReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetCollSensLevelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetCollSensLevelRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetCollSensLevelRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetCollSensLevelRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetCollSensParamReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetCollSensParamReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetCollSensParamReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetCollSensParamRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetCollSensParamRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetCollSensParamRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetCollSensParamReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetCollSensParamReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetCollSensParamReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetCollSensParamRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetCollSensParamRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetCollSensParamRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetCollPolicyReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetCollPolicyReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetCollPolicyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetCollPolicyRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetCollPolicyRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetCollPolicyRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetCollPolicyReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetCollPolicyReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetCollPolicyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetCollPolicyRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetCollPolicyRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetCollPolicyRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetCollTuningParamReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetCollTuningParamReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetCollTuningParamReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetCollTuningParamRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetCollTuningParamRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetCollTuningParamRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetRTControlDataReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetRTControlDataReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetRTControlDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetRTControlDataRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetRTControlDataRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetRTControlDataRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetIODataReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetIODataReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetIODataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetIODataRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetIODataRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetIODataRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetCoreDataReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetCoreDataReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetCoreDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetCoreDataRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetCoreDataRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetCoreDataRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetStateDataReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetStateDataReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetStateDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetStateDataRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetStateDataRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetStateDataRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetViolationDataReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetViolationDataReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetViolationDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetViolationDataRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetViolationDataRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetViolationDataRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetProgramStateReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetProgramStateReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetProgramStateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::SetProgramStateRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::SetProgramStateRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::SetProgramStateRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetMotionDataReq* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetMotionDataReq >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetMotionDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetMotionDataRes* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetMotionDataRes >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetMotionDataRes >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetEL5001Req* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetEL5001Req >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetEL5001Req >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetEL5001Res* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetEL5001Res >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetEL5001Res >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetEL5101Req* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetEL5101Req >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetEL5101Req >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Control::GetEL5101Res* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Control::GetEL5101Res >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Control::GetEL5101Res >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
