// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: control.proto

#include "control.pb.h"
#include "control.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace IndyFramework {
namespace Protobuf {
namespace Control {

static const char* Control_method_names[] = {
  "/IndyFramework.Protobuf.Control.Control/AMoveJ",
  "/IndyFramework.Protobuf.Control.Control/AMoveJT",
  "/IndyFramework.Protobuf.Control.Control/AMoveL",
  "/IndyFramework.Protobuf.Control.Control/AMoveLT",
  "/IndyFramework.Protobuf.Control.Control/AMoveC",
  "/IndyFramework.Protobuf.Control.Control/AMoveCT",
  "/IndyFramework.Protobuf.Control.Control/AWaitIO",
  "/IndyFramework.Protobuf.Control.Control/AWaitTime",
  "/IndyFramework.Protobuf.Control.Control/AWaitProgress",
  "/IndyFramework.Protobuf.Control.Control/AWaitTraj",
  "/IndyFramework.Protobuf.Control.Control/AWaitRadius",
  "/IndyFramework.Protobuf.Control.Control/AMotionStop",
  "/IndyFramework.Protobuf.Control.Control/MoveSJ",
  "/IndyFramework.Protobuf.Control.Control/MoveSJT",
  "/IndyFramework.Protobuf.Control.Control/MoveSL",
  "/IndyFramework.Protobuf.Control.Control/MoveSLT",
  "/IndyFramework.Protobuf.Control.Control/MoveSpiral",
  "/IndyFramework.Protobuf.Control.Control/SetRefFrame",
  "/IndyFramework.Protobuf.Control.Control/SetRefFramePlanar",
  "/IndyFramework.Protobuf.Control.Control/SetToolFrame",
  "/IndyFramework.Protobuf.Control.Control/SetSpeedRatio",
  "/IndyFramework.Protobuf.Control.Control/SetCommandSpeedRatio",
  "/IndyFramework.Protobuf.Control.Control/Reboot",
  "/IndyFramework.Protobuf.Control.Control/Recover",
  "/IndyFramework.Protobuf.Control.Control/Stop",
  "/IndyFramework.Protobuf.Control.Control/Pause",
  "/IndyFramework.Protobuf.Control.Control/Resume",
  "/IndyFramework.Protobuf.Control.Control/Brake",
  "/IndyFramework.Protobuf.Control.Control/Servo",
  "/IndyFramework.Protobuf.Control.Control/SetAutoServoOff",
  "/IndyFramework.Protobuf.Control.Control/GetAutoServoOff",
  "/IndyFramework.Protobuf.Control.Control/SimulationMode",
  "/IndyFramework.Protobuf.Control.Control/DirectTeachingMode",
  "/IndyFramework.Protobuf.Control.Control/GetRTControlData",
  "/IndyFramework.Protobuf.Control.Control/GetIOData",
  "/IndyFramework.Protobuf.Control.Control/GetCoreData",
  "/IndyFramework.Protobuf.Control.Control/GetSystemInfoData",
  "/IndyFramework.Protobuf.Control.Control/GetMotionData",
  "/IndyFramework.Protobuf.Control.Control/GetStateData",
  "/IndyFramework.Protobuf.Control.Control/GetViolationData",
  "/IndyFramework.Protobuf.Control.Control/SetProgramState",
  "/IndyFramework.Protobuf.Control.Control/InverseKinematics",
  "/IndyFramework.Protobuf.Control.Control/CheckAproachRetractValid",
  "/IndyFramework.Protobuf.Control.Control/GetPalletPointList",
  "/IndyFramework.Protobuf.Control.Control/CalculateRelativePose",
  "/IndyFramework.Protobuf.Control.Control/CalculateCurrentPoseRel",
  "/IndyFramework.Protobuf.Control.Control/GetDI",
  "/IndyFramework.Protobuf.Control.Control/SetDI",
  "/IndyFramework.Protobuf.Control.Control/SetDO",
  "/IndyFramework.Protobuf.Control.Control/GetDO",
  "/IndyFramework.Protobuf.Control.Control/GetAI",
  "/IndyFramework.Protobuf.Control.Control/SetAI",
  "/IndyFramework.Protobuf.Control.Control/GetAO",
  "/IndyFramework.Protobuf.Control.Control/SetAO",
  "/IndyFramework.Protobuf.Control.Control/GetEndDI",
  "/IndyFramework.Protobuf.Control.Control/SetEndDI",
  "/IndyFramework.Protobuf.Control.Control/SetEndDO",
  "/IndyFramework.Protobuf.Control.Control/GetEndDO",
  "/IndyFramework.Protobuf.Control.Control/GetEndAI",
  "/IndyFramework.Protobuf.Control.Control/SetEndAI",
  "/IndyFramework.Protobuf.Control.Control/GetEndAO",
  "/IndyFramework.Protobuf.Control.Control/SetEndAO",
  "/IndyFramework.Protobuf.Control.Control/SetJointControlGain",
  "/IndyFramework.Protobuf.Control.Control/GetJointControlGain",
  "/IndyFramework.Protobuf.Control.Control/SetTaskControlGain",
  "/IndyFramework.Protobuf.Control.Control/GetTaskControlGain",
  "/IndyFramework.Protobuf.Control.Control/SetImpedanceControlGain",
  "/IndyFramework.Protobuf.Control.Control/GetImpedanceControlGain",
  "/IndyFramework.Protobuf.Control.Control/SetFricComp",
  "/IndyFramework.Protobuf.Control.Control/GetFricComp",
  "/IndyFramework.Protobuf.Control.Control/SetMountPos",
  "/IndyFramework.Protobuf.Control.Control/GetMountPos",
  "/IndyFramework.Protobuf.Control.Control/SetToolProperty",
  "/IndyFramework.Protobuf.Control.Control/GetToolProperty",
  "/IndyFramework.Protobuf.Control.Control/SetCollSensLevel",
  "/IndyFramework.Protobuf.Control.Control/GetCollSensLevel",
  "/IndyFramework.Protobuf.Control.Control/SetCollSensParam",
  "/IndyFramework.Protobuf.Control.Control/GetCollSensParam",
  "/IndyFramework.Protobuf.Control.Control/SetCollPolicy",
  "/IndyFramework.Protobuf.Control.Control/GetCollPolicy",
  "/IndyFramework.Protobuf.Control.Control/GetCollTuningParam",
  "/IndyFramework.Protobuf.Control.Control/GetSafetyLimitConfig",
  "/IndyFramework.Protobuf.Control.Control/SetSafetyLimitConfig",
  "/IndyFramework.Protobuf.Control.Control/GetSafetyStopConfig",
  "/IndyFramework.Protobuf.Control.Control/SetSafetyStopConfig",
  "/IndyFramework.Protobuf.Control.Control/GetEL5001",
  "/IndyFramework.Protobuf.Control.Control/GetEL5101",
};

std::unique_ptr< Control::Stub> Control::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Control::Stub> stub(new Control::Stub(channel));
  return stub;
}

Control::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AMoveJ_(Control_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AMoveJT_(Control_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AMoveL_(Control_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AMoveLT_(Control_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AMoveC_(Control_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AMoveCT_(Control_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AWaitIO_(Control_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AWaitTime_(Control_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AWaitProgress_(Control_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AWaitTraj_(Control_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AWaitRadius_(Control_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AMotionStop_(Control_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveSJ_(Control_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveSJT_(Control_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveSL_(Control_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveSLT_(Control_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveSpiral_(Control_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRefFrame_(Control_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRefFramePlanar_(Control_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetToolFrame_(Control_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSpeedRatio_(Control_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCommandSpeedRatio_(Control_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reboot_(Control_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Recover_(Control_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(Control_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Pause_(Control_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Resume_(Control_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Brake_(Control_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Servo_(Control_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAutoServoOff_(Control_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAutoServoOff_(Control_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SimulationMode_(Control_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DirectTeachingMode_(Control_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRTControlData_(Control_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIOData_(Control_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCoreData_(Control_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSystemInfoData_(Control_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMotionData_(Control_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStateData_(Control_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetViolationData_(Control_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProgramState_(Control_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InverseKinematics_(Control_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckAproachRetractValid_(Control_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPalletPointList_(Control_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalculateRelativePose_(Control_method_names[44], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalculateCurrentPoseRel_(Control_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDI_(Control_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDI_(Control_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDO_(Control_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDO_(Control_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAI_(Control_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAI_(Control_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAO_(Control_method_names[52], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAO_(Control_method_names[53], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEndDI_(Control_method_names[54], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEndDI_(Control_method_names[55], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEndDO_(Control_method_names[56], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEndDO_(Control_method_names[57], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEndAI_(Control_method_names[58], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEndAI_(Control_method_names[59], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEndAO_(Control_method_names[60], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEndAO_(Control_method_names[61], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetJointControlGain_(Control_method_names[62], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointControlGain_(Control_method_names[63], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTaskControlGain_(Control_method_names[64], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTaskControlGain_(Control_method_names[65], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetImpedanceControlGain_(Control_method_names[66], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImpedanceControlGain_(Control_method_names[67], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetFricComp_(Control_method_names[68], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFricComp_(Control_method_names[69], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMountPos_(Control_method_names[70], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMountPos_(Control_method_names[71], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetToolProperty_(Control_method_names[72], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetToolProperty_(Control_method_names[73], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCollSensLevel_(Control_method_names[74], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollSensLevel_(Control_method_names[75], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCollSensParam_(Control_method_names[76], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollSensParam_(Control_method_names[77], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCollPolicy_(Control_method_names[78], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollPolicy_(Control_method_names[79], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCollTuningParam_(Control_method_names[80], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSafetyLimitConfig_(Control_method_names[81], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSafetyLimitConfig_(Control_method_names[82], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSafetyStopConfig_(Control_method_names[83], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSafetyStopConfig_(Control_method_names[84], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEL5001_(Control_method_names[85], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEL5101_(Control_method_names[86], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Control::Stub::AMoveJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveJReq& request, ::IndyFramework::Protobuf::Control::AMoveJRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AMoveJ_, context, request, response);
}

void Control::Stub::experimental_async::AMoveJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveJReq* request, ::IndyFramework::Protobuf::Control::AMoveJRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMoveJ_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMoveJ(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMoveJRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMoveJ_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMoveJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveJReq* request, ::IndyFramework::Protobuf::Control::AMoveJRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMoveJ_, context, request, response, reactor);
}

void Control::Stub::experimental_async::AMoveJ(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMoveJRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMoveJ_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMoveJRes>* Control::Stub::AsyncAMoveJRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveJReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMoveJRes>::Create(channel_.get(), cq, rpcmethod_AMoveJ_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMoveJRes>* Control::Stub::PrepareAsyncAMoveJRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveJReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMoveJRes>::Create(channel_.get(), cq, rpcmethod_AMoveJ_, context, request, false);
}

::grpc::Status Control::Stub::AMoveJT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveJTReq& request, ::IndyFramework::Protobuf::Control::AMoveJTRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AMoveJT_, context, request, response);
}

void Control::Stub::experimental_async::AMoveJT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveJTReq* request, ::IndyFramework::Protobuf::Control::AMoveJTRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMoveJT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMoveJT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMoveJTRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMoveJT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMoveJT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveJTReq* request, ::IndyFramework::Protobuf::Control::AMoveJTRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMoveJT_, context, request, response, reactor);
}

void Control::Stub::experimental_async::AMoveJT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMoveJTRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMoveJT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMoveJTRes>* Control::Stub::AsyncAMoveJTRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveJTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMoveJTRes>::Create(channel_.get(), cq, rpcmethod_AMoveJT_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMoveJTRes>* Control::Stub::PrepareAsyncAMoveJTRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveJTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMoveJTRes>::Create(channel_.get(), cq, rpcmethod_AMoveJT_, context, request, false);
}

::grpc::Status Control::Stub::AMoveL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveLReq& request, ::IndyFramework::Protobuf::Control::AMoveLRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AMoveL_, context, request, response);
}

void Control::Stub::experimental_async::AMoveL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveLReq* request, ::IndyFramework::Protobuf::Control::AMoveLRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMoveL_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMoveL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMoveLRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMoveL_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMoveL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveLReq* request, ::IndyFramework::Protobuf::Control::AMoveLRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMoveL_, context, request, response, reactor);
}

void Control::Stub::experimental_async::AMoveL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMoveLRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMoveL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMoveLRes>* Control::Stub::AsyncAMoveLRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveLReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMoveLRes>::Create(channel_.get(), cq, rpcmethod_AMoveL_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMoveLRes>* Control::Stub::PrepareAsyncAMoveLRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveLReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMoveLRes>::Create(channel_.get(), cq, rpcmethod_AMoveL_, context, request, false);
}

::grpc::Status Control::Stub::AMoveLT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveLTReq& request, ::IndyFramework::Protobuf::Control::AMoveLTRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AMoveLT_, context, request, response);
}

void Control::Stub::experimental_async::AMoveLT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveLTReq* request, ::IndyFramework::Protobuf::Control::AMoveLTRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMoveLT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMoveLT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMoveLTRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMoveLT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMoveLT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveLTReq* request, ::IndyFramework::Protobuf::Control::AMoveLTRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMoveLT_, context, request, response, reactor);
}

void Control::Stub::experimental_async::AMoveLT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMoveLTRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMoveLT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMoveLTRes>* Control::Stub::AsyncAMoveLTRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveLTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMoveLTRes>::Create(channel_.get(), cq, rpcmethod_AMoveLT_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMoveLTRes>* Control::Stub::PrepareAsyncAMoveLTRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveLTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMoveLTRes>::Create(channel_.get(), cq, rpcmethod_AMoveLT_, context, request, false);
}

::grpc::Status Control::Stub::AMoveC(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveCReq& request, ::IndyFramework::Protobuf::Control::AMoveCRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AMoveC_, context, request, response);
}

void Control::Stub::experimental_async::AMoveC(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveCReq* request, ::IndyFramework::Protobuf::Control::AMoveCRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMoveC_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMoveC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMoveCRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMoveC_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMoveC(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveCReq* request, ::IndyFramework::Protobuf::Control::AMoveCRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMoveC_, context, request, response, reactor);
}

void Control::Stub::experimental_async::AMoveC(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMoveCRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMoveC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMoveCRes>* Control::Stub::AsyncAMoveCRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveCReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMoveCRes>::Create(channel_.get(), cq, rpcmethod_AMoveC_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMoveCRes>* Control::Stub::PrepareAsyncAMoveCRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveCReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMoveCRes>::Create(channel_.get(), cq, rpcmethod_AMoveC_, context, request, false);
}

::grpc::Status Control::Stub::AMoveCT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveCTReq& request, ::IndyFramework::Protobuf::Control::AMoveCTRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AMoveCT_, context, request, response);
}

void Control::Stub::experimental_async::AMoveCT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveCTReq* request, ::IndyFramework::Protobuf::Control::AMoveCTRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMoveCT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMoveCT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMoveCTRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMoveCT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMoveCT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveCTReq* request, ::IndyFramework::Protobuf::Control::AMoveCTRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMoveCT_, context, request, response, reactor);
}

void Control::Stub::experimental_async::AMoveCT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMoveCTRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMoveCT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMoveCTRes>* Control::Stub::AsyncAMoveCTRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveCTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMoveCTRes>::Create(channel_.get(), cq, rpcmethod_AMoveCT_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMoveCTRes>* Control::Stub::PrepareAsyncAMoveCTRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMoveCTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMoveCTRes>::Create(channel_.get(), cq, rpcmethod_AMoveCT_, context, request, false);
}

::grpc::Status Control::Stub::AWaitIO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitIOReq& request, ::IndyFramework::Protobuf::Control::AWaitIORes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AWaitIO_, context, request, response);
}

void Control::Stub::experimental_async::AWaitIO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitIOReq* request, ::IndyFramework::Protobuf::Control::AWaitIORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AWaitIO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AWaitIO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AWaitIORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AWaitIO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AWaitIO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitIOReq* request, ::IndyFramework::Protobuf::Control::AWaitIORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AWaitIO_, context, request, response, reactor);
}

void Control::Stub::experimental_async::AWaitIO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AWaitIORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AWaitIO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AWaitIORes>* Control::Stub::AsyncAWaitIORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitIOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AWaitIORes>::Create(channel_.get(), cq, rpcmethod_AWaitIO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AWaitIORes>* Control::Stub::PrepareAsyncAWaitIORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitIOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AWaitIORes>::Create(channel_.get(), cq, rpcmethod_AWaitIO_, context, request, false);
}

::grpc::Status Control::Stub::AWaitTime(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitTimeReq& request, ::IndyFramework::Protobuf::Control::AWaitTimeRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AWaitTime_, context, request, response);
}

void Control::Stub::experimental_async::AWaitTime(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitTimeReq* request, ::IndyFramework::Protobuf::Control::AWaitTimeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AWaitTime_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AWaitTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AWaitTimeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AWaitTime_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AWaitTime(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitTimeReq* request, ::IndyFramework::Protobuf::Control::AWaitTimeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AWaitTime_, context, request, response, reactor);
}

void Control::Stub::experimental_async::AWaitTime(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AWaitTimeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AWaitTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AWaitTimeRes>* Control::Stub::AsyncAWaitTimeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitTimeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AWaitTimeRes>::Create(channel_.get(), cq, rpcmethod_AWaitTime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AWaitTimeRes>* Control::Stub::PrepareAsyncAWaitTimeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitTimeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AWaitTimeRes>::Create(channel_.get(), cq, rpcmethod_AWaitTime_, context, request, false);
}

::grpc::Status Control::Stub::AWaitProgress(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitProgressReq& request, ::IndyFramework::Protobuf::Control::AWaitProgressRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AWaitProgress_, context, request, response);
}

void Control::Stub::experimental_async::AWaitProgress(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitProgressReq* request, ::IndyFramework::Protobuf::Control::AWaitProgressRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AWaitProgress_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AWaitProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AWaitProgressRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AWaitProgress_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AWaitProgress(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitProgressReq* request, ::IndyFramework::Protobuf::Control::AWaitProgressRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AWaitProgress_, context, request, response, reactor);
}

void Control::Stub::experimental_async::AWaitProgress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AWaitProgressRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AWaitProgress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AWaitProgressRes>* Control::Stub::AsyncAWaitProgressRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitProgressReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AWaitProgressRes>::Create(channel_.get(), cq, rpcmethod_AWaitProgress_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AWaitProgressRes>* Control::Stub::PrepareAsyncAWaitProgressRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitProgressReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AWaitProgressRes>::Create(channel_.get(), cq, rpcmethod_AWaitProgress_, context, request, false);
}

::grpc::Status Control::Stub::AWaitTraj(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitTrajReq& request, ::IndyFramework::Protobuf::Control::AWaitTrajRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AWaitTraj_, context, request, response);
}

void Control::Stub::experimental_async::AWaitTraj(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitTrajReq* request, ::IndyFramework::Protobuf::Control::AWaitTrajRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AWaitTraj_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AWaitTraj(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AWaitTrajRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AWaitTraj_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AWaitTraj(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitTrajReq* request, ::IndyFramework::Protobuf::Control::AWaitTrajRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AWaitTraj_, context, request, response, reactor);
}

void Control::Stub::experimental_async::AWaitTraj(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AWaitTrajRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AWaitTraj_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AWaitTrajRes>* Control::Stub::AsyncAWaitTrajRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitTrajReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AWaitTrajRes>::Create(channel_.get(), cq, rpcmethod_AWaitTraj_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AWaitTrajRes>* Control::Stub::PrepareAsyncAWaitTrajRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitTrajReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AWaitTrajRes>::Create(channel_.get(), cq, rpcmethod_AWaitTraj_, context, request, false);
}

::grpc::Status Control::Stub::AWaitRadius(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitRadiusReq& request, ::IndyFramework::Protobuf::Control::AWaitRadiusRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AWaitRadius_, context, request, response);
}

void Control::Stub::experimental_async::AWaitRadius(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitRadiusReq* request, ::IndyFramework::Protobuf::Control::AWaitRadiusRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AWaitRadius_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AWaitRadius(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AWaitRadiusRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AWaitRadius_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AWaitRadius(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitRadiusReq* request, ::IndyFramework::Protobuf::Control::AWaitRadiusRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AWaitRadius_, context, request, response, reactor);
}

void Control::Stub::experimental_async::AWaitRadius(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AWaitRadiusRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AWaitRadius_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AWaitRadiusRes>* Control::Stub::AsyncAWaitRadiusRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitRadiusReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AWaitRadiusRes>::Create(channel_.get(), cq, rpcmethod_AWaitRadius_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AWaitRadiusRes>* Control::Stub::PrepareAsyncAWaitRadiusRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AWaitRadiusReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AWaitRadiusRes>::Create(channel_.get(), cq, rpcmethod_AWaitRadius_, context, request, false);
}

::grpc::Status Control::Stub::AMotionStop(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMotionStopReq& request, ::IndyFramework::Protobuf::Control::AMotionStopRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AMotionStop_, context, request, response);
}

void Control::Stub::experimental_async::AMotionStop(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMotionStopReq* request, ::IndyFramework::Protobuf::Control::AMotionStopRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMotionStop_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMotionStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMotionStopRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AMotionStop_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::AMotionStop(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMotionStopReq* request, ::IndyFramework::Protobuf::Control::AMotionStopRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMotionStop_, context, request, response, reactor);
}

void Control::Stub::experimental_async::AMotionStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::AMotionStopRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AMotionStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMotionStopRes>* Control::Stub::AsyncAMotionStopRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMotionStopReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMotionStopRes>::Create(channel_.get(), cq, rpcmethod_AMotionStop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::AMotionStopRes>* Control::Stub::PrepareAsyncAMotionStopRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::AMotionStopReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::AMotionStopRes>::Create(channel_.get(), cq, rpcmethod_AMotionStop_, context, request, false);
}

::grpc::Status Control::Stub::MoveSJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSJReq& request, ::IndyFramework::Protobuf::Control::MoveSJRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveSJ_, context, request, response);
}

void Control::Stub::experimental_async::MoveSJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSJReq* request, ::IndyFramework::Protobuf::Control::MoveSJRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveSJ_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveSJ(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::MoveSJRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveSJ_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveSJ(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSJReq* request, ::IndyFramework::Protobuf::Control::MoveSJRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveSJ_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveSJ(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::MoveSJRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveSJ_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::MoveSJRes>* Control::Stub::AsyncMoveSJRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSJReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::MoveSJRes>::Create(channel_.get(), cq, rpcmethod_MoveSJ_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::MoveSJRes>* Control::Stub::PrepareAsyncMoveSJRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSJReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::MoveSJRes>::Create(channel_.get(), cq, rpcmethod_MoveSJ_, context, request, false);
}

::grpc::Status Control::Stub::MoveSJT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSJTReq& request, ::IndyFramework::Protobuf::Control::MoveSJTRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveSJT_, context, request, response);
}

void Control::Stub::experimental_async::MoveSJT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSJTReq* request, ::IndyFramework::Protobuf::Control::MoveSJTRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveSJT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveSJT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::MoveSJTRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveSJT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveSJT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSJTReq* request, ::IndyFramework::Protobuf::Control::MoveSJTRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveSJT_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveSJT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::MoveSJTRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveSJT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::MoveSJTRes>* Control::Stub::AsyncMoveSJTRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSJTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::MoveSJTRes>::Create(channel_.get(), cq, rpcmethod_MoveSJT_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::MoveSJTRes>* Control::Stub::PrepareAsyncMoveSJTRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSJTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::MoveSJTRes>::Create(channel_.get(), cq, rpcmethod_MoveSJT_, context, request, false);
}

::grpc::Status Control::Stub::MoveSL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSLReq& request, ::IndyFramework::Protobuf::Control::MoveSLRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveSL_, context, request, response);
}

void Control::Stub::experimental_async::MoveSL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSLReq* request, ::IndyFramework::Protobuf::Control::MoveSLRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveSL_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveSL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::MoveSLRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveSL_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveSL(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSLReq* request, ::IndyFramework::Protobuf::Control::MoveSLRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveSL_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveSL(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::MoveSLRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveSL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::MoveSLRes>* Control::Stub::AsyncMoveSLRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSLReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::MoveSLRes>::Create(channel_.get(), cq, rpcmethod_MoveSL_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::MoveSLRes>* Control::Stub::PrepareAsyncMoveSLRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSLReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::MoveSLRes>::Create(channel_.get(), cq, rpcmethod_MoveSL_, context, request, false);
}

::grpc::Status Control::Stub::MoveSLT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSLTReq& request, ::IndyFramework::Protobuf::Control::MoveSLTRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveSLT_, context, request, response);
}

void Control::Stub::experimental_async::MoveSLT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSLTReq* request, ::IndyFramework::Protobuf::Control::MoveSLTRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveSLT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveSLT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::MoveSLTRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveSLT_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveSLT(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSLTReq* request, ::IndyFramework::Protobuf::Control::MoveSLTRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveSLT_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveSLT(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::MoveSLTRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveSLT_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::MoveSLTRes>* Control::Stub::AsyncMoveSLTRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSLTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::MoveSLTRes>::Create(channel_.get(), cq, rpcmethod_MoveSLT_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::MoveSLTRes>* Control::Stub::PrepareAsyncMoveSLTRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSLTReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::MoveSLTRes>::Create(channel_.get(), cq, rpcmethod_MoveSLT_, context, request, false);
}

::grpc::Status Control::Stub::MoveSpiral(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSpiralReq& request, ::IndyFramework::Protobuf::Control::MoveSpiralRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveSpiral_, context, request, response);
}

void Control::Stub::experimental_async::MoveSpiral(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSpiralReq* request, ::IndyFramework::Protobuf::Control::MoveSpiralRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveSpiral_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveSpiral(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::MoveSpiralRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveSpiral_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::MoveSpiral(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSpiralReq* request, ::IndyFramework::Protobuf::Control::MoveSpiralRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveSpiral_, context, request, response, reactor);
}

void Control::Stub::experimental_async::MoveSpiral(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::MoveSpiralRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveSpiral_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::MoveSpiralRes>* Control::Stub::AsyncMoveSpiralRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSpiralReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::MoveSpiralRes>::Create(channel_.get(), cq, rpcmethod_MoveSpiral_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::MoveSpiralRes>* Control::Stub::PrepareAsyncMoveSpiralRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::MoveSpiralReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::MoveSpiralRes>::Create(channel_.get(), cq, rpcmethod_MoveSpiral_, context, request, false);
}

::grpc::Status Control::Stub::SetRefFrame(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetRefFrameReq& request, ::IndyFramework::Protobuf::Control::SetRefFrameRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRefFrame_, context, request, response);
}

void Control::Stub::experimental_async::SetRefFrame(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetRefFrameReq* request, ::IndyFramework::Protobuf::Control::SetRefFrameRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRefFrame_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetRefFrame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetRefFrameRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRefFrame_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetRefFrame(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetRefFrameReq* request, ::IndyFramework::Protobuf::Control::SetRefFrameRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRefFrame_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetRefFrame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetRefFrameRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRefFrame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetRefFrameRes>* Control::Stub::AsyncSetRefFrameRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetRefFrameReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetRefFrameRes>::Create(channel_.get(), cq, rpcmethod_SetRefFrame_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetRefFrameRes>* Control::Stub::PrepareAsyncSetRefFrameRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetRefFrameReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetRefFrameRes>::Create(channel_.get(), cq, rpcmethod_SetRefFrame_, context, request, false);
}

::grpc::Status Control::Stub::SetRefFramePlanar(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq& request, ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRefFramePlanar_, context, request, response);
}

void Control::Stub::experimental_async::SetRefFramePlanar(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq* request, ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRefFramePlanar_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetRefFramePlanar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRefFramePlanar_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetRefFramePlanar(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq* request, ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRefFramePlanar_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetRefFramePlanar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRefFramePlanar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes>* Control::Stub::AsyncSetRefFramePlanarRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes>::Create(channel_.get(), cq, rpcmethod_SetRefFramePlanar_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes>* Control::Stub::PrepareAsyncSetRefFramePlanarRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes>::Create(channel_.get(), cq, rpcmethod_SetRefFramePlanar_, context, request, false);
}

::grpc::Status Control::Stub::SetToolFrame(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetToolFrameReq& request, ::IndyFramework::Protobuf::Control::SetToolFrameRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetToolFrame_, context, request, response);
}

void Control::Stub::experimental_async::SetToolFrame(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetToolFrameReq* request, ::IndyFramework::Protobuf::Control::SetToolFrameRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetToolFrame_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetToolFrame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetToolFrameRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetToolFrame_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetToolFrame(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetToolFrameReq* request, ::IndyFramework::Protobuf::Control::SetToolFrameRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetToolFrame_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetToolFrame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetToolFrameRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetToolFrame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetToolFrameRes>* Control::Stub::AsyncSetToolFrameRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetToolFrameReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetToolFrameRes>::Create(channel_.get(), cq, rpcmethod_SetToolFrame_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetToolFrameRes>* Control::Stub::PrepareAsyncSetToolFrameRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetToolFrameReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetToolFrameRes>::Create(channel_.get(), cq, rpcmethod_SetToolFrame_, context, request, false);
}

::grpc::Status Control::Stub::SetSpeedRatio(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSpeedRatioReq& request, ::IndyFramework::Protobuf::Control::SetSpeedRatioRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSpeedRatio_, context, request, response);
}

void Control::Stub::experimental_async::SetSpeedRatio(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSpeedRatioReq* request, ::IndyFramework::Protobuf::Control::SetSpeedRatioRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSpeedRatio_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetSpeedRatio(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetSpeedRatioRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSpeedRatio_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetSpeedRatio(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSpeedRatioReq* request, ::IndyFramework::Protobuf::Control::SetSpeedRatioRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSpeedRatio_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetSpeedRatio(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetSpeedRatioRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSpeedRatio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetSpeedRatioRes>* Control::Stub::AsyncSetSpeedRatioRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSpeedRatioReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetSpeedRatioRes>::Create(channel_.get(), cq, rpcmethod_SetSpeedRatio_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetSpeedRatioRes>* Control::Stub::PrepareAsyncSetSpeedRatioRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSpeedRatioReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetSpeedRatioRes>::Create(channel_.get(), cq, rpcmethod_SetSpeedRatio_, context, request, false);
}

::grpc::Status Control::Stub::SetCommandSpeedRatio(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq& request, ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCommandSpeedRatio_, context, request, response);
}

void Control::Stub::experimental_async::SetCommandSpeedRatio(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq* request, ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCommandSpeedRatio_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetCommandSpeedRatio(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCommandSpeedRatio_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetCommandSpeedRatio(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq* request, ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCommandSpeedRatio_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetCommandSpeedRatio(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCommandSpeedRatio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes>* Control::Stub::AsyncSetCommandSpeedRatioRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes>::Create(channel_.get(), cq, rpcmethod_SetCommandSpeedRatio_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes>* Control::Stub::PrepareAsyncSetCommandSpeedRatioRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes>::Create(channel_.get(), cq, rpcmethod_SetCommandSpeedRatio_, context, request, false);
}

::grpc::Status Control::Stub::Reboot(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::RebootReq& request, ::IndyFramework::Protobuf::Control::RebootRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Reboot_, context, request, response);
}

void Control::Stub::experimental_async::Reboot(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::RebootReq* request, ::IndyFramework::Protobuf::Control::RebootRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Reboot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::RebootRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Reboot(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::RebootReq* request, ::IndyFramework::Protobuf::Control::RebootRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, reactor);
}

void Control::Stub::experimental_async::Reboot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::RebootRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Reboot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::RebootRes>* Control::Stub::AsyncRebootRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::RebootReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::RebootRes>::Create(channel_.get(), cq, rpcmethod_Reboot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::RebootRes>* Control::Stub::PrepareAsyncRebootRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::RebootReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::RebootRes>::Create(channel_.get(), cq, rpcmethod_Reboot_, context, request, false);
}

::grpc::Status Control::Stub::Recover(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::RecoverReq& request, ::IndyFramework::Protobuf::Control::RecoverRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Recover_, context, request, response);
}

void Control::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::RecoverReq* request, ::IndyFramework::Protobuf::Control::RecoverRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::RecoverRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::RecoverReq* request, ::IndyFramework::Protobuf::Control::RecoverRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, reactor);
}

void Control::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::RecoverRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::RecoverRes>* Control::Stub::AsyncRecoverRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::RecoverReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::RecoverRes>::Create(channel_.get(), cq, rpcmethod_Recover_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::RecoverRes>* Control::Stub::PrepareAsyncRecoverRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::RecoverReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::RecoverRes>::Create(channel_.get(), cq, rpcmethod_Recover_, context, request, false);
}

::grpc::Status Control::Stub::Stop(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::StopReq& request, ::IndyFramework::Protobuf::Control::StopRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void Control::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::StopReq* request, ::IndyFramework::Protobuf::Control::StopRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::StopRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::StopReq* request, ::IndyFramework::Protobuf::Control::StopRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

void Control::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::StopRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::StopRes>* Control::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::StopReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::StopRes>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::StopRes>* Control::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::StopReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::StopRes>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, false);
}

::grpc::Status Control::Stub::Pause(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::PauseReq& request, ::IndyFramework::Protobuf::Control::PauseRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Pause_, context, request, response);
}

void Control::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::PauseReq* request, ::IndyFramework::Protobuf::Control::PauseRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::PauseRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::PauseReq* request, ::IndyFramework::Protobuf::Control::PauseRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, reactor);
}

void Control::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::PauseRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::PauseRes>* Control::Stub::AsyncPauseRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::PauseReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::PauseRes>::Create(channel_.get(), cq, rpcmethod_Pause_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::PauseRes>* Control::Stub::PrepareAsyncPauseRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::PauseReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::PauseRes>::Create(channel_.get(), cq, rpcmethod_Pause_, context, request, false);
}

::grpc::Status Control::Stub::Resume(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::ResumeReq& request, ::IndyFramework::Protobuf::Control::ResumeRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Resume_, context, request, response);
}

void Control::Stub::experimental_async::Resume(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::ResumeReq* request, ::IndyFramework::Protobuf::Control::ResumeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Resume_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Resume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::ResumeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Resume_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Resume(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::ResumeReq* request, ::IndyFramework::Protobuf::Control::ResumeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Resume_, context, request, response, reactor);
}

void Control::Stub::experimental_async::Resume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::ResumeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Resume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::ResumeRes>* Control::Stub::AsyncResumeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::ResumeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::ResumeRes>::Create(channel_.get(), cq, rpcmethod_Resume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::ResumeRes>* Control::Stub::PrepareAsyncResumeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::ResumeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::ResumeRes>::Create(channel_.get(), cq, rpcmethod_Resume_, context, request, false);
}

::grpc::Status Control::Stub::Brake(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::BrakeReq& request, ::IndyFramework::Protobuf::Control::BrakeRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Brake_, context, request, response);
}

void Control::Stub::experimental_async::Brake(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::BrakeReq* request, ::IndyFramework::Protobuf::Control::BrakeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Brake_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Brake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::BrakeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Brake_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Brake(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::BrakeReq* request, ::IndyFramework::Protobuf::Control::BrakeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Brake_, context, request, response, reactor);
}

void Control::Stub::experimental_async::Brake(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::BrakeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Brake_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::BrakeRes>* Control::Stub::AsyncBrakeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::BrakeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::BrakeRes>::Create(channel_.get(), cq, rpcmethod_Brake_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::BrakeRes>* Control::Stub::PrepareAsyncBrakeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::BrakeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::BrakeRes>::Create(channel_.get(), cq, rpcmethod_Brake_, context, request, false);
}

::grpc::Status Control::Stub::Servo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::ServoReq& request, ::IndyFramework::Protobuf::Control::ServoRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Servo_, context, request, response);
}

void Control::Stub::experimental_async::Servo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::ServoReq* request, ::IndyFramework::Protobuf::Control::ServoRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Servo_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Servo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::ServoRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Servo_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::Servo(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::ServoReq* request, ::IndyFramework::Protobuf::Control::ServoRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Servo_, context, request, response, reactor);
}

void Control::Stub::experimental_async::Servo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::ServoRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Servo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::ServoRes>* Control::Stub::AsyncServoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::ServoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::ServoRes>::Create(channel_.get(), cq, rpcmethod_Servo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::ServoRes>* Control::Stub::PrepareAsyncServoRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::ServoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::ServoRes>::Create(channel_.get(), cq, rpcmethod_Servo_, context, request, false);
}

::grpc::Status Control::Stub::SetAutoServoOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAutoServoOffReq& request, ::IndyFramework::Protobuf::Control::SetAutoServoOffRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetAutoServoOff_, context, request, response);
}

void Control::Stub::experimental_async::SetAutoServoOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAutoServoOffReq* request, ::IndyFramework::Protobuf::Control::SetAutoServoOffRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAutoServoOff_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetAutoServoOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetAutoServoOffRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAutoServoOff_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetAutoServoOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAutoServoOffReq* request, ::IndyFramework::Protobuf::Control::SetAutoServoOffRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAutoServoOff_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetAutoServoOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetAutoServoOffRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAutoServoOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetAutoServoOffRes>* Control::Stub::AsyncSetAutoServoOffRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAutoServoOffReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetAutoServoOffRes>::Create(channel_.get(), cq, rpcmethod_SetAutoServoOff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetAutoServoOffRes>* Control::Stub::PrepareAsyncSetAutoServoOffRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAutoServoOffReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetAutoServoOffRes>::Create(channel_.get(), cq, rpcmethod_SetAutoServoOff_, context, request, false);
}

::grpc::Status Control::Stub::GetAutoServoOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAutoServoOffReq& request, ::IndyFramework::Protobuf::Control::GetAutoServoOffRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAutoServoOff_, context, request, response);
}

void Control::Stub::experimental_async::GetAutoServoOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAutoServoOffReq* request, ::IndyFramework::Protobuf::Control::GetAutoServoOffRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAutoServoOff_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetAutoServoOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetAutoServoOffRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAutoServoOff_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetAutoServoOff(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAutoServoOffReq* request, ::IndyFramework::Protobuf::Control::GetAutoServoOffRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAutoServoOff_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetAutoServoOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetAutoServoOffRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAutoServoOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetAutoServoOffRes>* Control::Stub::AsyncGetAutoServoOffRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAutoServoOffReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetAutoServoOffRes>::Create(channel_.get(), cq, rpcmethod_GetAutoServoOff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetAutoServoOffRes>* Control::Stub::PrepareAsyncGetAutoServoOffRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAutoServoOffReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetAutoServoOffRes>::Create(channel_.get(), cq, rpcmethod_GetAutoServoOff_, context, request, false);
}

::grpc::Status Control::Stub::SimulationMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SimulationModeReq& request, ::IndyFramework::Protobuf::Control::SimulationModeRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SimulationMode_, context, request, response);
}

void Control::Stub::experimental_async::SimulationMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SimulationModeReq* request, ::IndyFramework::Protobuf::Control::SimulationModeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SimulationMode_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SimulationMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SimulationModeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SimulationMode_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SimulationMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SimulationModeReq* request, ::IndyFramework::Protobuf::Control::SimulationModeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SimulationMode_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SimulationMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SimulationModeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SimulationMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SimulationModeRes>* Control::Stub::AsyncSimulationModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SimulationModeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SimulationModeRes>::Create(channel_.get(), cq, rpcmethod_SimulationMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SimulationModeRes>* Control::Stub::PrepareAsyncSimulationModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SimulationModeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SimulationModeRes>::Create(channel_.get(), cq, rpcmethod_SimulationMode_, context, request, false);
}

::grpc::Status Control::Stub::DirectTeachingMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::DirectTeachingModeReq& request, ::IndyFramework::Protobuf::Control::DirectTeachingModeRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DirectTeachingMode_, context, request, response);
}

void Control::Stub::experimental_async::DirectTeachingMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::DirectTeachingModeReq* request, ::IndyFramework::Protobuf::Control::DirectTeachingModeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DirectTeachingMode_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::DirectTeachingMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::DirectTeachingModeRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DirectTeachingMode_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::DirectTeachingMode(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::DirectTeachingModeReq* request, ::IndyFramework::Protobuf::Control::DirectTeachingModeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DirectTeachingMode_, context, request, response, reactor);
}

void Control::Stub::experimental_async::DirectTeachingMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::DirectTeachingModeRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DirectTeachingMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::DirectTeachingModeRes>* Control::Stub::AsyncDirectTeachingModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::DirectTeachingModeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::DirectTeachingModeRes>::Create(channel_.get(), cq, rpcmethod_DirectTeachingMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::DirectTeachingModeRes>* Control::Stub::PrepareAsyncDirectTeachingModeRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::DirectTeachingModeReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::DirectTeachingModeRes>::Create(channel_.get(), cq, rpcmethod_DirectTeachingMode_, context, request, false);
}

::grpc::Status Control::Stub::GetRTControlData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetRTControlDataReq& request, ::IndyFramework::Protobuf::Control::GetRTControlDataRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRTControlData_, context, request, response);
}

void Control::Stub::experimental_async::GetRTControlData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetRTControlDataReq* request, ::IndyFramework::Protobuf::Control::GetRTControlDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRTControlData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetRTControlData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetRTControlDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRTControlData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetRTControlData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetRTControlDataReq* request, ::IndyFramework::Protobuf::Control::GetRTControlDataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRTControlData_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetRTControlData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetRTControlDataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRTControlData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetRTControlDataRes>* Control::Stub::AsyncGetRTControlDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetRTControlDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetRTControlDataRes>::Create(channel_.get(), cq, rpcmethod_GetRTControlData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetRTControlDataRes>* Control::Stub::PrepareAsyncGetRTControlDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetRTControlDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetRTControlDataRes>::Create(channel_.get(), cq, rpcmethod_GetRTControlData_, context, request, false);
}

::grpc::Status Control::Stub::GetIOData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetIODataReq& request, ::IndyFramework::Protobuf::Control::GetIODataRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIOData_, context, request, response);
}

void Control::Stub::experimental_async::GetIOData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetIODataReq* request, ::IndyFramework::Protobuf::Control::GetIODataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIOData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetIOData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetIODataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIOData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetIOData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetIODataReq* request, ::IndyFramework::Protobuf::Control::GetIODataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetIOData_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetIOData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetIODataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetIOData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetIODataRes>* Control::Stub::AsyncGetIODataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetIODataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetIODataRes>::Create(channel_.get(), cq, rpcmethod_GetIOData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetIODataRes>* Control::Stub::PrepareAsyncGetIODataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetIODataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetIODataRes>::Create(channel_.get(), cq, rpcmethod_GetIOData_, context, request, false);
}

::grpc::Status Control::Stub::GetCoreData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCoreDataReq& request, ::IndyFramework::Protobuf::Control::GetCoreDataRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCoreData_, context, request, response);
}

void Control::Stub::experimental_async::GetCoreData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCoreDataReq* request, ::IndyFramework::Protobuf::Control::GetCoreDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCoreData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetCoreData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetCoreDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCoreData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetCoreData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCoreDataReq* request, ::IndyFramework::Protobuf::Control::GetCoreDataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCoreData_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetCoreData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetCoreDataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCoreData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetCoreDataRes>* Control::Stub::AsyncGetCoreDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCoreDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetCoreDataRes>::Create(channel_.get(), cq, rpcmethod_GetCoreData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetCoreDataRes>* Control::Stub::PrepareAsyncGetCoreDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCoreDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetCoreDataRes>::Create(channel_.get(), cq, rpcmethod_GetCoreData_, context, request, false);
}

::grpc::Status Control::Stub::GetSystemInfoData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq& request, ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSystemInfoData_, context, request, response);
}

void Control::Stub::experimental_async::GetSystemInfoData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq* request, ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSystemInfoData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetSystemInfoData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSystemInfoData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetSystemInfoData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq* request, ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSystemInfoData_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetSystemInfoData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSystemInfoData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes>* Control::Stub::AsyncGetSystemInfoDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes>::Create(channel_.get(), cq, rpcmethod_GetSystemInfoData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes>* Control::Stub::PrepareAsyncGetSystemInfoDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes>::Create(channel_.get(), cq, rpcmethod_GetSystemInfoData_, context, request, false);
}

::grpc::Status Control::Stub::GetMotionData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetMotionDataReq& request, ::IndyFramework::Protobuf::Control::GetMotionDataRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMotionData_, context, request, response);
}

void Control::Stub::experimental_async::GetMotionData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetMotionDataReq* request, ::IndyFramework::Protobuf::Control::GetMotionDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMotionData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetMotionData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetMotionDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMotionData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetMotionData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetMotionDataReq* request, ::IndyFramework::Protobuf::Control::GetMotionDataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMotionData_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetMotionData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetMotionDataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMotionData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetMotionDataRes>* Control::Stub::AsyncGetMotionDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetMotionDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetMotionDataRes>::Create(channel_.get(), cq, rpcmethod_GetMotionData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetMotionDataRes>* Control::Stub::PrepareAsyncGetMotionDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetMotionDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetMotionDataRes>::Create(channel_.get(), cq, rpcmethod_GetMotionData_, context, request, false);
}

::grpc::Status Control::Stub::GetStateData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetStateDataReq& request, ::IndyFramework::Protobuf::Control::GetStateDataRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetStateData_, context, request, response);
}

void Control::Stub::experimental_async::GetStateData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetStateDataReq* request, ::IndyFramework::Protobuf::Control::GetStateDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStateData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetStateData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetStateDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStateData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetStateData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetStateDataReq* request, ::IndyFramework::Protobuf::Control::GetStateDataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStateData_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetStateData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetStateDataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStateData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetStateDataRes>* Control::Stub::AsyncGetStateDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetStateDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetStateDataRes>::Create(channel_.get(), cq, rpcmethod_GetStateData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetStateDataRes>* Control::Stub::PrepareAsyncGetStateDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetStateDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetStateDataRes>::Create(channel_.get(), cq, rpcmethod_GetStateData_, context, request, false);
}

::grpc::Status Control::Stub::GetViolationData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetViolationDataReq& request, ::IndyFramework::Protobuf::Control::GetViolationDataRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetViolationData_, context, request, response);
}

void Control::Stub::experimental_async::GetViolationData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetViolationDataReq* request, ::IndyFramework::Protobuf::Control::GetViolationDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetViolationData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetViolationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetViolationDataRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetViolationData_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetViolationData(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetViolationDataReq* request, ::IndyFramework::Protobuf::Control::GetViolationDataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetViolationData_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetViolationData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetViolationDataRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetViolationData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetViolationDataRes>* Control::Stub::AsyncGetViolationDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetViolationDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetViolationDataRes>::Create(channel_.get(), cq, rpcmethod_GetViolationData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetViolationDataRes>* Control::Stub::PrepareAsyncGetViolationDataRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetViolationDataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetViolationDataRes>::Create(channel_.get(), cq, rpcmethod_GetViolationData_, context, request, false);
}

::grpc::Status Control::Stub::SetProgramState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetProgramStateReq& request, ::IndyFramework::Protobuf::Control::SetProgramStateRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetProgramState_, context, request, response);
}

void Control::Stub::experimental_async::SetProgramState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetProgramStateReq* request, ::IndyFramework::Protobuf::Control::SetProgramStateRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetProgramState_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetProgramState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetProgramStateRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetProgramState_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetProgramState(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetProgramStateReq* request, ::IndyFramework::Protobuf::Control::SetProgramStateRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetProgramState_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetProgramState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetProgramStateRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetProgramState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetProgramStateRes>* Control::Stub::AsyncSetProgramStateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetProgramStateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetProgramStateRes>::Create(channel_.get(), cq, rpcmethod_SetProgramState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetProgramStateRes>* Control::Stub::PrepareAsyncSetProgramStateRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetProgramStateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetProgramStateRes>::Create(channel_.get(), cq, rpcmethod_SetProgramState_, context, request, false);
}

::grpc::Status Control::Stub::InverseKinematics(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::InverseKinematicsReq& request, ::IndyFramework::Protobuf::Control::InverseKinematicsRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_InverseKinematics_, context, request, response);
}

void Control::Stub::experimental_async::InverseKinematics(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::InverseKinematicsReq* request, ::IndyFramework::Protobuf::Control::InverseKinematicsRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InverseKinematics_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::InverseKinematics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::InverseKinematicsRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_InverseKinematics_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::InverseKinematics(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::InverseKinematicsReq* request, ::IndyFramework::Protobuf::Control::InverseKinematicsRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InverseKinematics_, context, request, response, reactor);
}

void Control::Stub::experimental_async::InverseKinematics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::InverseKinematicsRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_InverseKinematics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::InverseKinematicsRes>* Control::Stub::AsyncInverseKinematicsRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::InverseKinematicsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::InverseKinematicsRes>::Create(channel_.get(), cq, rpcmethod_InverseKinematics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::InverseKinematicsRes>* Control::Stub::PrepareAsyncInverseKinematicsRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::InverseKinematicsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::InverseKinematicsRes>::Create(channel_.get(), cq, rpcmethod_InverseKinematics_, context, request, false);
}

::grpc::Status Control::Stub::CheckAproachRetractValid(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq& request, ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CheckAproachRetractValid_, context, request, response);
}

void Control::Stub::experimental_async::CheckAproachRetractValid(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq* request, ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckAproachRetractValid_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::CheckAproachRetractValid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CheckAproachRetractValid_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::CheckAproachRetractValid(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq* request, ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckAproachRetractValid_, context, request, response, reactor);
}

void Control::Stub::experimental_async::CheckAproachRetractValid(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CheckAproachRetractValid_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes>* Control::Stub::AsyncCheckAproachRetractValidRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes>::Create(channel_.get(), cq, rpcmethod_CheckAproachRetractValid_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes>* Control::Stub::PrepareAsyncCheckAproachRetractValidRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes>::Create(channel_.get(), cq, rpcmethod_CheckAproachRetractValid_, context, request, false);
}

::grpc::Status Control::Stub::GetPalletPointList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetPalletPointListReq& request, ::IndyFramework::Protobuf::Control::GetPalletPointListRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPalletPointList_, context, request, response);
}

void Control::Stub::experimental_async::GetPalletPointList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetPalletPointListReq* request, ::IndyFramework::Protobuf::Control::GetPalletPointListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPalletPointList_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetPalletPointList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetPalletPointListRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPalletPointList_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetPalletPointList(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetPalletPointListReq* request, ::IndyFramework::Protobuf::Control::GetPalletPointListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPalletPointList_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetPalletPointList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetPalletPointListRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPalletPointList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetPalletPointListRes>* Control::Stub::AsyncGetPalletPointListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetPalletPointListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetPalletPointListRes>::Create(channel_.get(), cq, rpcmethod_GetPalletPointList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetPalletPointListRes>* Control::Stub::PrepareAsyncGetPalletPointListRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetPalletPointListReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetPalletPointListRes>::Create(channel_.get(), cq, rpcmethod_GetPalletPointList_, context, request, false);
}

::grpc::Status Control::Stub::CalculateRelativePose(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq& request, ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CalculateRelativePose_, context, request, response);
}

void Control::Stub::experimental_async::CalculateRelativePose(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq* request, ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CalculateRelativePose_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::CalculateRelativePose(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CalculateRelativePose_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::CalculateRelativePose(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq* request, ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CalculateRelativePose_, context, request, response, reactor);
}

void Control::Stub::experimental_async::CalculateRelativePose(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CalculateRelativePose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes>* Control::Stub::AsyncCalculateRelativePoseRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes>::Create(channel_.get(), cq, rpcmethod_CalculateRelativePose_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes>* Control::Stub::PrepareAsyncCalculateRelativePoseRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes>::Create(channel_.get(), cq, rpcmethod_CalculateRelativePose_, context, request, false);
}

::grpc::Status Control::Stub::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq& request, ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CalculateCurrentPoseRel_, context, request, response);
}

void Control::Stub::experimental_async::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq* request, ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CalculateCurrentPoseRel_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CalculateCurrentPoseRel_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq* request, ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CalculateCurrentPoseRel_, context, request, response, reactor);
}

void Control::Stub::experimental_async::CalculateCurrentPoseRel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CalculateCurrentPoseRel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes>* Control::Stub::AsyncCalculateCurrentPoseRelRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes>::Create(channel_.get(), cq, rpcmethod_CalculateCurrentPoseRel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes>* Control::Stub::PrepareAsyncCalculateCurrentPoseRelRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes>::Create(channel_.get(), cq, rpcmethod_CalculateCurrentPoseRel_, context, request, false);
}

::grpc::Status Control::Stub::GetDI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetDIReq& request, ::IndyFramework::Protobuf::Control::GetDIRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDI_, context, request, response);
}

void Control::Stub::experimental_async::GetDI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetDIReq* request, ::IndyFramework::Protobuf::Control::GetDIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetDIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetDI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetDIReq* request, ::IndyFramework::Protobuf::Control::GetDIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDI_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetDIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetDIRes>* Control::Stub::AsyncGetDIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetDIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetDIRes>::Create(channel_.get(), cq, rpcmethod_GetDI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetDIRes>* Control::Stub::PrepareAsyncGetDIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetDIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetDIRes>::Create(channel_.get(), cq, rpcmethod_GetDI_, context, request, false);
}

::grpc::Status Control::Stub::SetDI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetDIReq& request, ::IndyFramework::Protobuf::Control::SetDIRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDI_, context, request, response);
}

void Control::Stub::experimental_async::SetDI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetDIReq* request, ::IndyFramework::Protobuf::Control::SetDIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetDIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetDI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetDIReq* request, ::IndyFramework::Protobuf::Control::SetDIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDI_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetDIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetDIRes>* Control::Stub::AsyncSetDIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetDIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetDIRes>::Create(channel_.get(), cq, rpcmethod_SetDI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetDIRes>* Control::Stub::PrepareAsyncSetDIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetDIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetDIRes>::Create(channel_.get(), cq, rpcmethod_SetDI_, context, request, false);
}

::grpc::Status Control::Stub::SetDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetDOReq& request, ::IndyFramework::Protobuf::Control::SetDORes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDO_, context, request, response);
}

void Control::Stub::experimental_async::SetDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetDOReq* request, ::IndyFramework::Protobuf::Control::SetDORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetDORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetDOReq* request, ::IndyFramework::Protobuf::Control::SetDORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDO_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetDORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetDORes>* Control::Stub::AsyncSetDORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetDOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetDORes>::Create(channel_.get(), cq, rpcmethod_SetDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetDORes>* Control::Stub::PrepareAsyncSetDORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetDOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetDORes>::Create(channel_.get(), cq, rpcmethod_SetDO_, context, request, false);
}

::grpc::Status Control::Stub::GetDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetDOReq& request, ::IndyFramework::Protobuf::Control::GetDORes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDO_, context, request, response);
}

void Control::Stub::experimental_async::GetDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetDOReq* request, ::IndyFramework::Protobuf::Control::GetDORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetDORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetDOReq* request, ::IndyFramework::Protobuf::Control::GetDORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDO_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetDORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetDORes>* Control::Stub::AsyncGetDORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetDOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetDORes>::Create(channel_.get(), cq, rpcmethod_GetDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetDORes>* Control::Stub::PrepareAsyncGetDORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetDOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetDORes>::Create(channel_.get(), cq, rpcmethod_GetDO_, context, request, false);
}

::grpc::Status Control::Stub::GetAI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAIReq& request, ::IndyFramework::Protobuf::Control::GetAIRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAI_, context, request, response);
}

void Control::Stub::experimental_async::GetAI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAIReq* request, ::IndyFramework::Protobuf::Control::GetAIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetAI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetAIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetAI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAIReq* request, ::IndyFramework::Protobuf::Control::GetAIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAI_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetAI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetAIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetAIRes>* Control::Stub::AsyncGetAIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetAIRes>::Create(channel_.get(), cq, rpcmethod_GetAI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetAIRes>* Control::Stub::PrepareAsyncGetAIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetAIRes>::Create(channel_.get(), cq, rpcmethod_GetAI_, context, request, false);
}

::grpc::Status Control::Stub::SetAI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAIReq& request, ::IndyFramework::Protobuf::Control::SetAIRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetAI_, context, request, response);
}

void Control::Stub::experimental_async::SetAI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAIReq* request, ::IndyFramework::Protobuf::Control::SetAIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetAI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetAIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetAI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAIReq* request, ::IndyFramework::Protobuf::Control::SetAIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAI_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetAI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetAIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetAIRes>* Control::Stub::AsyncSetAIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetAIRes>::Create(channel_.get(), cq, rpcmethod_SetAI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetAIRes>* Control::Stub::PrepareAsyncSetAIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetAIRes>::Create(channel_.get(), cq, rpcmethod_SetAI_, context, request, false);
}

::grpc::Status Control::Stub::GetAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAOReq& request, ::IndyFramework::Protobuf::Control::GetAORes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAO_, context, request, response);
}

void Control::Stub::experimental_async::GetAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAOReq* request, ::IndyFramework::Protobuf::Control::GetAORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetAO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetAORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAOReq* request, ::IndyFramework::Protobuf::Control::GetAORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAO_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetAO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetAORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetAORes>* Control::Stub::AsyncGetAORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetAORes>::Create(channel_.get(), cq, rpcmethod_GetAO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetAORes>* Control::Stub::PrepareAsyncGetAORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetAOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetAORes>::Create(channel_.get(), cq, rpcmethod_GetAO_, context, request, false);
}

::grpc::Status Control::Stub::SetAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAOReq& request, ::IndyFramework::Protobuf::Control::SetAORes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetAO_, context, request, response);
}

void Control::Stub::experimental_async::SetAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAOReq* request, ::IndyFramework::Protobuf::Control::SetAORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetAO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetAORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetAO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAOReq* request, ::IndyFramework::Protobuf::Control::SetAORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAO_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetAO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetAORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetAO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetAORes>* Control::Stub::AsyncSetAORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetAORes>::Create(channel_.get(), cq, rpcmethod_SetAO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetAORes>* Control::Stub::PrepareAsyncSetAORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetAOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetAORes>::Create(channel_.get(), cq, rpcmethod_SetAO_, context, request, false);
}

::grpc::Status Control::Stub::GetEndDI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndDIReq& request, ::IndyFramework::Protobuf::Control::GetEndDIRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEndDI_, context, request, response);
}

void Control::Stub::experimental_async::GetEndDI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndDIReq* request, ::IndyFramework::Protobuf::Control::GetEndDIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEndDI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetEndDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetEndDIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEndDI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetEndDI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndDIReq* request, ::IndyFramework::Protobuf::Control::GetEndDIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEndDI_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetEndDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetEndDIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEndDI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetEndDIRes>* Control::Stub::AsyncGetEndDIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndDIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetEndDIRes>::Create(channel_.get(), cq, rpcmethod_GetEndDI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetEndDIRes>* Control::Stub::PrepareAsyncGetEndDIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndDIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetEndDIRes>::Create(channel_.get(), cq, rpcmethod_GetEndDI_, context, request, false);
}

::grpc::Status Control::Stub::SetEndDI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndDIReq& request, ::IndyFramework::Protobuf::Control::SetEndDIRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetEndDI_, context, request, response);
}

void Control::Stub::experimental_async::SetEndDI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndDIReq* request, ::IndyFramework::Protobuf::Control::SetEndDIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEndDI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetEndDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetEndDIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEndDI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetEndDI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndDIReq* request, ::IndyFramework::Protobuf::Control::SetEndDIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEndDI_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetEndDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetEndDIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEndDI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetEndDIRes>* Control::Stub::AsyncSetEndDIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndDIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetEndDIRes>::Create(channel_.get(), cq, rpcmethod_SetEndDI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetEndDIRes>* Control::Stub::PrepareAsyncSetEndDIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndDIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetEndDIRes>::Create(channel_.get(), cq, rpcmethod_SetEndDI_, context, request, false);
}

::grpc::Status Control::Stub::SetEndDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndDOReq& request, ::IndyFramework::Protobuf::Control::SetEndDORes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetEndDO_, context, request, response);
}

void Control::Stub::experimental_async::SetEndDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndDOReq* request, ::IndyFramework::Protobuf::Control::SetEndDORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEndDO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetEndDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetEndDORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEndDO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetEndDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndDOReq* request, ::IndyFramework::Protobuf::Control::SetEndDORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEndDO_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetEndDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetEndDORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEndDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetEndDORes>* Control::Stub::AsyncSetEndDORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndDOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetEndDORes>::Create(channel_.get(), cq, rpcmethod_SetEndDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetEndDORes>* Control::Stub::PrepareAsyncSetEndDORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndDOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetEndDORes>::Create(channel_.get(), cq, rpcmethod_SetEndDO_, context, request, false);
}

::grpc::Status Control::Stub::GetEndDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndDOReq& request, ::IndyFramework::Protobuf::Control::GetEndDORes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEndDO_, context, request, response);
}

void Control::Stub::experimental_async::GetEndDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndDOReq* request, ::IndyFramework::Protobuf::Control::GetEndDORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEndDO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetEndDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetEndDORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEndDO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetEndDO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndDOReq* request, ::IndyFramework::Protobuf::Control::GetEndDORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEndDO_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetEndDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetEndDORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEndDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetEndDORes>* Control::Stub::AsyncGetEndDORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndDOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetEndDORes>::Create(channel_.get(), cq, rpcmethod_GetEndDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetEndDORes>* Control::Stub::PrepareAsyncGetEndDORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndDOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetEndDORes>::Create(channel_.get(), cq, rpcmethod_GetEndDO_, context, request, false);
}

::grpc::Status Control::Stub::GetEndAI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndAIReq& request, ::IndyFramework::Protobuf::Control::GetEndAIRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEndAI_, context, request, response);
}

void Control::Stub::experimental_async::GetEndAI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndAIReq* request, ::IndyFramework::Protobuf::Control::GetEndAIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEndAI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetEndAI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetEndAIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEndAI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetEndAI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndAIReq* request, ::IndyFramework::Protobuf::Control::GetEndAIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEndAI_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetEndAI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetEndAIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEndAI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetEndAIRes>* Control::Stub::AsyncGetEndAIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndAIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetEndAIRes>::Create(channel_.get(), cq, rpcmethod_GetEndAI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetEndAIRes>* Control::Stub::PrepareAsyncGetEndAIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndAIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetEndAIRes>::Create(channel_.get(), cq, rpcmethod_GetEndAI_, context, request, false);
}

::grpc::Status Control::Stub::SetEndAI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndAIReq& request, ::IndyFramework::Protobuf::Control::SetEndAIRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetEndAI_, context, request, response);
}

void Control::Stub::experimental_async::SetEndAI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndAIReq* request, ::IndyFramework::Protobuf::Control::SetEndAIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEndAI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetEndAI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetEndAIRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEndAI_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetEndAI(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndAIReq* request, ::IndyFramework::Protobuf::Control::SetEndAIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEndAI_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetEndAI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetEndAIRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEndAI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetEndAIRes>* Control::Stub::AsyncSetEndAIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndAIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetEndAIRes>::Create(channel_.get(), cq, rpcmethod_SetEndAI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetEndAIRes>* Control::Stub::PrepareAsyncSetEndAIRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndAIReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetEndAIRes>::Create(channel_.get(), cq, rpcmethod_SetEndAI_, context, request, false);
}

::grpc::Status Control::Stub::GetEndAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndAOReq& request, ::IndyFramework::Protobuf::Control::GetEndAORes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEndAO_, context, request, response);
}

void Control::Stub::experimental_async::GetEndAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndAOReq* request, ::IndyFramework::Protobuf::Control::GetEndAORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEndAO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetEndAO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetEndAORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEndAO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetEndAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndAOReq* request, ::IndyFramework::Protobuf::Control::GetEndAORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEndAO_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetEndAO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetEndAORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEndAO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetEndAORes>* Control::Stub::AsyncGetEndAORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndAOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetEndAORes>::Create(channel_.get(), cq, rpcmethod_GetEndAO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetEndAORes>* Control::Stub::PrepareAsyncGetEndAORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEndAOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetEndAORes>::Create(channel_.get(), cq, rpcmethod_GetEndAO_, context, request, false);
}

::grpc::Status Control::Stub::SetEndAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndAOReq& request, ::IndyFramework::Protobuf::Control::SetEndAORes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetEndAO_, context, request, response);
}

void Control::Stub::experimental_async::SetEndAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndAOReq* request, ::IndyFramework::Protobuf::Control::SetEndAORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEndAO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetEndAO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetEndAORes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEndAO_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetEndAO(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndAOReq* request, ::IndyFramework::Protobuf::Control::SetEndAORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEndAO_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetEndAO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetEndAORes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEndAO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetEndAORes>* Control::Stub::AsyncSetEndAORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndAOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetEndAORes>::Create(channel_.get(), cq, rpcmethod_SetEndAO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetEndAORes>* Control::Stub::PrepareAsyncSetEndAORaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetEndAOReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetEndAORes>::Create(channel_.get(), cq, rpcmethod_SetEndAO_, context, request, false);
}

::grpc::Status Control::Stub::SetJointControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetJointControlGainReq& request, ::IndyFramework::Protobuf::Control::SetJointControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetJointControlGain_, context, request, response);
}

void Control::Stub::experimental_async::SetJointControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetJointControlGainReq* request, ::IndyFramework::Protobuf::Control::SetJointControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetJointControlGain_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetJointControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetJointControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetJointControlGain_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetJointControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetJointControlGainReq* request, ::IndyFramework::Protobuf::Control::SetJointControlGainRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetJointControlGain_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetJointControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetJointControlGainRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetJointControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetJointControlGainRes>* Control::Stub::AsyncSetJointControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetJointControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetJointControlGainRes>::Create(channel_.get(), cq, rpcmethod_SetJointControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetJointControlGainRes>* Control::Stub::PrepareAsyncSetJointControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetJointControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetJointControlGainRes>::Create(channel_.get(), cq, rpcmethod_SetJointControlGain_, context, request, false);
}

::grpc::Status Control::Stub::GetJointControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetJointControlGainReq& request, ::IndyFramework::Protobuf::Control::GetJointControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetJointControlGain_, context, request, response);
}

void Control::Stub::experimental_async::GetJointControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetJointControlGainReq* request, ::IndyFramework::Protobuf::Control::GetJointControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetJointControlGain_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetJointControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetJointControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetJointControlGain_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetJointControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetJointControlGainReq* request, ::IndyFramework::Protobuf::Control::GetJointControlGainRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetJointControlGain_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetJointControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetJointControlGainRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetJointControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetJointControlGainRes>* Control::Stub::AsyncGetJointControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetJointControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetJointControlGainRes>::Create(channel_.get(), cq, rpcmethod_GetJointControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetJointControlGainRes>* Control::Stub::PrepareAsyncGetJointControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetJointControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetJointControlGainRes>::Create(channel_.get(), cq, rpcmethod_GetJointControlGain_, context, request, false);
}

::grpc::Status Control::Stub::SetTaskControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetTaskControlGainReq& request, ::IndyFramework::Protobuf::Control::SetTaskControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetTaskControlGain_, context, request, response);
}

void Control::Stub::experimental_async::SetTaskControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetTaskControlGainReq* request, ::IndyFramework::Protobuf::Control::SetTaskControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTaskControlGain_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetTaskControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetTaskControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetTaskControlGain_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetTaskControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetTaskControlGainReq* request, ::IndyFramework::Protobuf::Control::SetTaskControlGainRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTaskControlGain_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetTaskControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetTaskControlGainRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetTaskControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetTaskControlGainRes>* Control::Stub::AsyncSetTaskControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetTaskControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetTaskControlGainRes>::Create(channel_.get(), cq, rpcmethod_SetTaskControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetTaskControlGainRes>* Control::Stub::PrepareAsyncSetTaskControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetTaskControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetTaskControlGainRes>::Create(channel_.get(), cq, rpcmethod_SetTaskControlGain_, context, request, false);
}

::grpc::Status Control::Stub::GetTaskControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetTaskControlGainReq& request, ::IndyFramework::Protobuf::Control::GetTaskControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTaskControlGain_, context, request, response);
}

void Control::Stub::experimental_async::GetTaskControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetTaskControlGainReq* request, ::IndyFramework::Protobuf::Control::GetTaskControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTaskControlGain_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTaskControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetTaskControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTaskControlGain_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetTaskControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetTaskControlGainReq* request, ::IndyFramework::Protobuf::Control::GetTaskControlGainRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskControlGain_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetTaskControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetTaskControlGainRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetTaskControlGainRes>* Control::Stub::AsyncGetTaskControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetTaskControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetTaskControlGainRes>::Create(channel_.get(), cq, rpcmethod_GetTaskControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetTaskControlGainRes>* Control::Stub::PrepareAsyncGetTaskControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetTaskControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetTaskControlGainRes>::Create(channel_.get(), cq, rpcmethod_GetTaskControlGain_, context, request, false);
}

::grpc::Status Control::Stub::SetImpedanceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq& request, ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetImpedanceControlGain_, context, request, response);
}

void Control::Stub::experimental_async::SetImpedanceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq* request, ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetImpedanceControlGain_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetImpedanceControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetImpedanceControlGain_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetImpedanceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq* request, ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetImpedanceControlGain_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetImpedanceControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetImpedanceControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes>* Control::Stub::AsyncSetImpedanceControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes>::Create(channel_.get(), cq, rpcmethod_SetImpedanceControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes>* Control::Stub::PrepareAsyncSetImpedanceControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes>::Create(channel_.get(), cq, rpcmethod_SetImpedanceControlGain_, context, request, false);
}

::grpc::Status Control::Stub::GetImpedanceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq& request, ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetImpedanceControlGain_, context, request, response);
}

void Control::Stub::experimental_async::GetImpedanceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq* request, ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetImpedanceControlGain_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetImpedanceControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetImpedanceControlGain_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetImpedanceControlGain(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq* request, ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetImpedanceControlGain_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetImpedanceControlGain(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetImpedanceControlGain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes>* Control::Stub::AsyncGetImpedanceControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes>::Create(channel_.get(), cq, rpcmethod_GetImpedanceControlGain_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes>* Control::Stub::PrepareAsyncGetImpedanceControlGainRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes>::Create(channel_.get(), cq, rpcmethod_GetImpedanceControlGain_, context, request, false);
}

::grpc::Status Control::Stub::SetFricComp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetFricCompReq& request, ::IndyFramework::Protobuf::Control::SetFricCompRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetFricComp_, context, request, response);
}

void Control::Stub::experimental_async::SetFricComp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetFricCompReq* request, ::IndyFramework::Protobuf::Control::SetFricCompRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetFricComp_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetFricComp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetFricCompRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetFricComp_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetFricComp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetFricCompReq* request, ::IndyFramework::Protobuf::Control::SetFricCompRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetFricComp_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetFricComp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetFricCompRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetFricComp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetFricCompRes>* Control::Stub::AsyncSetFricCompRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetFricCompReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetFricCompRes>::Create(channel_.get(), cq, rpcmethod_SetFricComp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetFricCompRes>* Control::Stub::PrepareAsyncSetFricCompRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetFricCompReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetFricCompRes>::Create(channel_.get(), cq, rpcmethod_SetFricComp_, context, request, false);
}

::grpc::Status Control::Stub::GetFricComp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetFricCompReq& request, ::IndyFramework::Protobuf::Control::GetFricCompRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFricComp_, context, request, response);
}

void Control::Stub::experimental_async::GetFricComp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetFricCompReq* request, ::IndyFramework::Protobuf::Control::GetFricCompRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFricComp_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetFricComp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetFricCompRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFricComp_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetFricComp(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetFricCompReq* request, ::IndyFramework::Protobuf::Control::GetFricCompRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFricComp_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetFricComp(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetFricCompRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFricComp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetFricCompRes>* Control::Stub::AsyncGetFricCompRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetFricCompReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetFricCompRes>::Create(channel_.get(), cq, rpcmethod_GetFricComp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetFricCompRes>* Control::Stub::PrepareAsyncGetFricCompRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetFricCompReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetFricCompRes>::Create(channel_.get(), cq, rpcmethod_GetFricComp_, context, request, false);
}

::grpc::Status Control::Stub::SetMountPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetMountPosReq& request, ::IndyFramework::Protobuf::Control::SetMountPosRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMountPos_, context, request, response);
}

void Control::Stub::experimental_async::SetMountPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetMountPosReq* request, ::IndyFramework::Protobuf::Control::SetMountPosRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMountPos_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetMountPos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetMountPosRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMountPos_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetMountPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetMountPosReq* request, ::IndyFramework::Protobuf::Control::SetMountPosRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMountPos_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetMountPos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetMountPosRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMountPos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetMountPosRes>* Control::Stub::AsyncSetMountPosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetMountPosReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetMountPosRes>::Create(channel_.get(), cq, rpcmethod_SetMountPos_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetMountPosRes>* Control::Stub::PrepareAsyncSetMountPosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetMountPosReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetMountPosRes>::Create(channel_.get(), cq, rpcmethod_SetMountPos_, context, request, false);
}

::grpc::Status Control::Stub::GetMountPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetMountPosReq& request, ::IndyFramework::Protobuf::Control::GetMountPosRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMountPos_, context, request, response);
}

void Control::Stub::experimental_async::GetMountPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetMountPosReq* request, ::IndyFramework::Protobuf::Control::GetMountPosRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMountPos_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetMountPos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetMountPosRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMountPos_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetMountPos(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetMountPosReq* request, ::IndyFramework::Protobuf::Control::GetMountPosRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMountPos_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetMountPos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetMountPosRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMountPos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetMountPosRes>* Control::Stub::AsyncGetMountPosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetMountPosReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetMountPosRes>::Create(channel_.get(), cq, rpcmethod_GetMountPos_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetMountPosRes>* Control::Stub::PrepareAsyncGetMountPosRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetMountPosReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetMountPosRes>::Create(channel_.get(), cq, rpcmethod_GetMountPos_, context, request, false);
}

::grpc::Status Control::Stub::SetToolProperty(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetToolPropertyReq& request, ::IndyFramework::Protobuf::Control::SetToolPropertyRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetToolProperty_, context, request, response);
}

void Control::Stub::experimental_async::SetToolProperty(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetToolPropertyReq* request, ::IndyFramework::Protobuf::Control::SetToolPropertyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetToolProperty_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetToolProperty(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetToolPropertyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetToolProperty_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetToolProperty(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetToolPropertyReq* request, ::IndyFramework::Protobuf::Control::SetToolPropertyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetToolProperty_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetToolProperty(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetToolPropertyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetToolProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetToolPropertyRes>* Control::Stub::AsyncSetToolPropertyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetToolPropertyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetToolPropertyRes>::Create(channel_.get(), cq, rpcmethod_SetToolProperty_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetToolPropertyRes>* Control::Stub::PrepareAsyncSetToolPropertyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetToolPropertyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetToolPropertyRes>::Create(channel_.get(), cq, rpcmethod_SetToolProperty_, context, request, false);
}

::grpc::Status Control::Stub::GetToolProperty(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetToolPropertyReq& request, ::IndyFramework::Protobuf::Control::GetToolPropertyRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetToolProperty_, context, request, response);
}

void Control::Stub::experimental_async::GetToolProperty(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetToolPropertyReq* request, ::IndyFramework::Protobuf::Control::GetToolPropertyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetToolProperty_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetToolProperty(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetToolPropertyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetToolProperty_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetToolProperty(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetToolPropertyReq* request, ::IndyFramework::Protobuf::Control::GetToolPropertyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetToolProperty_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetToolProperty(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetToolPropertyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetToolProperty_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetToolPropertyRes>* Control::Stub::AsyncGetToolPropertyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetToolPropertyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetToolPropertyRes>::Create(channel_.get(), cq, rpcmethod_GetToolProperty_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetToolPropertyRes>* Control::Stub::PrepareAsyncGetToolPropertyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetToolPropertyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetToolPropertyRes>::Create(channel_.get(), cq, rpcmethod_GetToolProperty_, context, request, false);
}

::grpc::Status Control::Stub::SetCollSensLevel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollSensLevelReq& request, ::IndyFramework::Protobuf::Control::SetCollSensLevelRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCollSensLevel_, context, request, response);
}

void Control::Stub::experimental_async::SetCollSensLevel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollSensLevelReq* request, ::IndyFramework::Protobuf::Control::SetCollSensLevelRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCollSensLevel_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetCollSensLevel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetCollSensLevelRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCollSensLevel_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetCollSensLevel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollSensLevelReq* request, ::IndyFramework::Protobuf::Control::SetCollSensLevelRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCollSensLevel_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetCollSensLevel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetCollSensLevelRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCollSensLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetCollSensLevelRes>* Control::Stub::AsyncSetCollSensLevelRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollSensLevelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetCollSensLevelRes>::Create(channel_.get(), cq, rpcmethod_SetCollSensLevel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetCollSensLevelRes>* Control::Stub::PrepareAsyncSetCollSensLevelRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollSensLevelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetCollSensLevelRes>::Create(channel_.get(), cq, rpcmethod_SetCollSensLevel_, context, request, false);
}

::grpc::Status Control::Stub::GetCollSensLevel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollSensLevelReq& request, ::IndyFramework::Protobuf::Control::GetCollSensLevelRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCollSensLevel_, context, request, response);
}

void Control::Stub::experimental_async::GetCollSensLevel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollSensLevelReq* request, ::IndyFramework::Protobuf::Control::GetCollSensLevelRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollSensLevel_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetCollSensLevel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetCollSensLevelRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollSensLevel_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetCollSensLevel(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollSensLevelReq* request, ::IndyFramework::Protobuf::Control::GetCollSensLevelRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollSensLevel_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetCollSensLevel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetCollSensLevelRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollSensLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetCollSensLevelRes>* Control::Stub::AsyncGetCollSensLevelRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollSensLevelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetCollSensLevelRes>::Create(channel_.get(), cq, rpcmethod_GetCollSensLevel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetCollSensLevelRes>* Control::Stub::PrepareAsyncGetCollSensLevelRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollSensLevelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetCollSensLevelRes>::Create(channel_.get(), cq, rpcmethod_GetCollSensLevel_, context, request, false);
}

::grpc::Status Control::Stub::SetCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollSensParamReq& request, ::IndyFramework::Protobuf::Control::SetCollSensParamRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCollSensParam_, context, request, response);
}

void Control::Stub::experimental_async::SetCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollSensParamReq* request, ::IndyFramework::Protobuf::Control::SetCollSensParamRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCollSensParam_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetCollSensParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetCollSensParamRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCollSensParam_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollSensParamReq* request, ::IndyFramework::Protobuf::Control::SetCollSensParamRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCollSensParam_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetCollSensParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetCollSensParamRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCollSensParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetCollSensParamRes>* Control::Stub::AsyncSetCollSensParamRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollSensParamReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetCollSensParamRes>::Create(channel_.get(), cq, rpcmethod_SetCollSensParam_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetCollSensParamRes>* Control::Stub::PrepareAsyncSetCollSensParamRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollSensParamReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetCollSensParamRes>::Create(channel_.get(), cq, rpcmethod_SetCollSensParam_, context, request, false);
}

::grpc::Status Control::Stub::GetCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollSensParamReq& request, ::IndyFramework::Protobuf::Control::GetCollSensParamRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCollSensParam_, context, request, response);
}

void Control::Stub::experimental_async::GetCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollSensParamReq* request, ::IndyFramework::Protobuf::Control::GetCollSensParamRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollSensParam_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetCollSensParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetCollSensParamRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollSensParam_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetCollSensParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollSensParamReq* request, ::IndyFramework::Protobuf::Control::GetCollSensParamRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollSensParam_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetCollSensParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetCollSensParamRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollSensParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetCollSensParamRes>* Control::Stub::AsyncGetCollSensParamRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollSensParamReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetCollSensParamRes>::Create(channel_.get(), cq, rpcmethod_GetCollSensParam_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetCollSensParamRes>* Control::Stub::PrepareAsyncGetCollSensParamRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollSensParamReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetCollSensParamRes>::Create(channel_.get(), cq, rpcmethod_GetCollSensParam_, context, request, false);
}

::grpc::Status Control::Stub::SetCollPolicy(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollPolicyReq& request, ::IndyFramework::Protobuf::Control::SetCollPolicyRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetCollPolicy_, context, request, response);
}

void Control::Stub::experimental_async::SetCollPolicy(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollPolicyReq* request, ::IndyFramework::Protobuf::Control::SetCollPolicyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCollPolicy_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetCollPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetCollPolicyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetCollPolicy_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetCollPolicy(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollPolicyReq* request, ::IndyFramework::Protobuf::Control::SetCollPolicyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCollPolicy_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetCollPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetCollPolicyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetCollPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetCollPolicyRes>* Control::Stub::AsyncSetCollPolicyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollPolicyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetCollPolicyRes>::Create(channel_.get(), cq, rpcmethod_SetCollPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetCollPolicyRes>* Control::Stub::PrepareAsyncSetCollPolicyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetCollPolicyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetCollPolicyRes>::Create(channel_.get(), cq, rpcmethod_SetCollPolicy_, context, request, false);
}

::grpc::Status Control::Stub::GetCollPolicy(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollPolicyReq& request, ::IndyFramework::Protobuf::Control::GetCollPolicyRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCollPolicy_, context, request, response);
}

void Control::Stub::experimental_async::GetCollPolicy(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollPolicyReq* request, ::IndyFramework::Protobuf::Control::GetCollPolicyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollPolicy_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetCollPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetCollPolicyRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollPolicy_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetCollPolicy(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollPolicyReq* request, ::IndyFramework::Protobuf::Control::GetCollPolicyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollPolicy_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetCollPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetCollPolicyRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetCollPolicyRes>* Control::Stub::AsyncGetCollPolicyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollPolicyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetCollPolicyRes>::Create(channel_.get(), cq, rpcmethod_GetCollPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetCollPolicyRes>* Control::Stub::PrepareAsyncGetCollPolicyRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollPolicyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetCollPolicyRes>::Create(channel_.get(), cq, rpcmethod_GetCollPolicy_, context, request, false);
}

::grpc::Status Control::Stub::GetCollTuningParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollTuningParamReq& request, ::IndyFramework::Protobuf::Control::GetCollTuningParamRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCollTuningParam_, context, request, response);
}

void Control::Stub::experimental_async::GetCollTuningParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollTuningParamReq* request, ::IndyFramework::Protobuf::Control::GetCollTuningParamRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollTuningParam_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetCollTuningParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetCollTuningParamRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCollTuningParam_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetCollTuningParam(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollTuningParamReq* request, ::IndyFramework::Protobuf::Control::GetCollTuningParamRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollTuningParam_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetCollTuningParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetCollTuningParamRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCollTuningParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetCollTuningParamRes>* Control::Stub::AsyncGetCollTuningParamRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollTuningParamReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetCollTuningParamRes>::Create(channel_.get(), cq, rpcmethod_GetCollTuningParam_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetCollTuningParamRes>* Control::Stub::PrepareAsyncGetCollTuningParamRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetCollTuningParamReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetCollTuningParamRes>::Create(channel_.get(), cq, rpcmethod_GetCollTuningParam_, context, request, false);
}

::grpc::Status Control::Stub::GetSafetyLimitConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq& request, ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSafetyLimitConfig_, context, request, response);
}

void Control::Stub::experimental_async::GetSafetyLimitConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq* request, ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSafetyLimitConfig_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetSafetyLimitConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSafetyLimitConfig_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetSafetyLimitConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq* request, ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSafetyLimitConfig_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetSafetyLimitConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSafetyLimitConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes>* Control::Stub::AsyncGetSafetyLimitConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes>::Create(channel_.get(), cq, rpcmethod_GetSafetyLimitConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes>* Control::Stub::PrepareAsyncGetSafetyLimitConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes>::Create(channel_.get(), cq, rpcmethod_GetSafetyLimitConfig_, context, request, false);
}

::grpc::Status Control::Stub::SetSafetyLimitConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq& request, ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSafetyLimitConfig_, context, request, response);
}

void Control::Stub::experimental_async::SetSafetyLimitConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq* request, ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSafetyLimitConfig_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetSafetyLimitConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSafetyLimitConfig_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetSafetyLimitConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq* request, ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSafetyLimitConfig_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetSafetyLimitConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSafetyLimitConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes>* Control::Stub::AsyncSetSafetyLimitConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes>::Create(channel_.get(), cq, rpcmethod_SetSafetyLimitConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes>* Control::Stub::PrepareAsyncSetSafetyLimitConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes>::Create(channel_.get(), cq, rpcmethod_SetSafetyLimitConfig_, context, request, false);
}

::grpc::Status Control::Stub::GetSafetyStopConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq& request, ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSafetyStopConfig_, context, request, response);
}

void Control::Stub::experimental_async::GetSafetyStopConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq* request, ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSafetyStopConfig_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetSafetyStopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSafetyStopConfig_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetSafetyStopConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq* request, ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSafetyStopConfig_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetSafetyStopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSafetyStopConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes>* Control::Stub::AsyncGetSafetyStopConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes>::Create(channel_.get(), cq, rpcmethod_GetSafetyStopConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes>* Control::Stub::PrepareAsyncGetSafetyStopConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes>::Create(channel_.get(), cq, rpcmethod_GetSafetyStopConfig_, context, request, false);
}

::grpc::Status Control::Stub::SetSafetyStopConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq& request, ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetSafetyStopConfig_, context, request, response);
}

void Control::Stub::experimental_async::SetSafetyStopConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq* request, ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSafetyStopConfig_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetSafetyStopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetSafetyStopConfig_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::SetSafetyStopConfig(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq* request, ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSafetyStopConfig_, context, request, response, reactor);
}

void Control::Stub::experimental_async::SetSafetyStopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetSafetyStopConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes>* Control::Stub::AsyncSetSafetyStopConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes>::Create(channel_.get(), cq, rpcmethod_SetSafetyStopConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes>* Control::Stub::PrepareAsyncSetSafetyStopConfigRaw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes>::Create(channel_.get(), cq, rpcmethod_SetSafetyStopConfig_, context, request, false);
}

::grpc::Status Control::Stub::GetEL5001(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEL5001Req& request, ::IndyFramework::Protobuf::Control::GetEL5001Res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEL5001_, context, request, response);
}

void Control::Stub::experimental_async::GetEL5001(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEL5001Req* request, ::IndyFramework::Protobuf::Control::GetEL5001Res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEL5001_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetEL5001(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetEL5001Res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEL5001_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetEL5001(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEL5001Req* request, ::IndyFramework::Protobuf::Control::GetEL5001Res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEL5001_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetEL5001(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetEL5001Res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEL5001_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetEL5001Res>* Control::Stub::AsyncGetEL5001Raw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEL5001Req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetEL5001Res>::Create(channel_.get(), cq, rpcmethod_GetEL5001_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetEL5001Res>* Control::Stub::PrepareAsyncGetEL5001Raw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEL5001Req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetEL5001Res>::Create(channel_.get(), cq, rpcmethod_GetEL5001_, context, request, false);
}

::grpc::Status Control::Stub::GetEL5101(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEL5101Req& request, ::IndyFramework::Protobuf::Control::GetEL5101Res* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEL5101_, context, request, response);
}

void Control::Stub::experimental_async::GetEL5101(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEL5101Req* request, ::IndyFramework::Protobuf::Control::GetEL5101Res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEL5101_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetEL5101(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetEL5101Res* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEL5101_, context, request, response, std::move(f));
}

void Control::Stub::experimental_async::GetEL5101(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEL5101Req* request, ::IndyFramework::Protobuf::Control::GetEL5101Res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEL5101_, context, request, response, reactor);
}

void Control::Stub::experimental_async::GetEL5101(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::IndyFramework::Protobuf::Control::GetEL5101Res* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEL5101_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetEL5101Res>* Control::Stub::AsyncGetEL5101Raw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEL5101Req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetEL5101Res>::Create(channel_.get(), cq, rpcmethod_GetEL5101_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::IndyFramework::Protobuf::Control::GetEL5101Res>* Control::Stub::PrepareAsyncGetEL5101Raw(::grpc::ClientContext* context, const ::IndyFramework::Protobuf::Control::GetEL5101Req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::IndyFramework::Protobuf::Control::GetEL5101Res>::Create(channel_.get(), cq, rpcmethod_GetEL5101_, context, request, false);
}

Control::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::AMoveJReq, ::IndyFramework::Protobuf::Control::AMoveJRes>(
          std::mem_fn(&Control::Service::AMoveJ), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::AMoveJTReq, ::IndyFramework::Protobuf::Control::AMoveJTRes>(
          std::mem_fn(&Control::Service::AMoveJT), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::AMoveLReq, ::IndyFramework::Protobuf::Control::AMoveLRes>(
          std::mem_fn(&Control::Service::AMoveL), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::AMoveLTReq, ::IndyFramework::Protobuf::Control::AMoveLTRes>(
          std::mem_fn(&Control::Service::AMoveLT), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::AMoveCReq, ::IndyFramework::Protobuf::Control::AMoveCRes>(
          std::mem_fn(&Control::Service::AMoveC), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::AMoveCTReq, ::IndyFramework::Protobuf::Control::AMoveCTRes>(
          std::mem_fn(&Control::Service::AMoveCT), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::AWaitIOReq, ::IndyFramework::Protobuf::Control::AWaitIORes>(
          std::mem_fn(&Control::Service::AWaitIO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::AWaitTimeReq, ::IndyFramework::Protobuf::Control::AWaitTimeRes>(
          std::mem_fn(&Control::Service::AWaitTime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::AWaitProgressReq, ::IndyFramework::Protobuf::Control::AWaitProgressRes>(
          std::mem_fn(&Control::Service::AWaitProgress), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::AWaitTrajReq, ::IndyFramework::Protobuf::Control::AWaitTrajRes>(
          std::mem_fn(&Control::Service::AWaitTraj), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::AWaitRadiusReq, ::IndyFramework::Protobuf::Control::AWaitRadiusRes>(
          std::mem_fn(&Control::Service::AWaitRadius), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::AMotionStopReq, ::IndyFramework::Protobuf::Control::AMotionStopRes>(
          std::mem_fn(&Control::Service::AMotionStop), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::MoveSJReq, ::IndyFramework::Protobuf::Control::MoveSJRes>(
          std::mem_fn(&Control::Service::MoveSJ), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::MoveSJTReq, ::IndyFramework::Protobuf::Control::MoveSJTRes>(
          std::mem_fn(&Control::Service::MoveSJT), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::MoveSLReq, ::IndyFramework::Protobuf::Control::MoveSLRes>(
          std::mem_fn(&Control::Service::MoveSL), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::MoveSLTReq, ::IndyFramework::Protobuf::Control::MoveSLTRes>(
          std::mem_fn(&Control::Service::MoveSLT), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::MoveSpiralReq, ::IndyFramework::Protobuf::Control::MoveSpiralRes>(
          std::mem_fn(&Control::Service::MoveSpiral), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetRefFrameReq, ::IndyFramework::Protobuf::Control::SetRefFrameRes>(
          std::mem_fn(&Control::Service::SetRefFrame), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq, ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes>(
          std::mem_fn(&Control::Service::SetRefFramePlanar), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetToolFrameReq, ::IndyFramework::Protobuf::Control::SetToolFrameRes>(
          std::mem_fn(&Control::Service::SetToolFrame), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetSpeedRatioReq, ::IndyFramework::Protobuf::Control::SetSpeedRatioRes>(
          std::mem_fn(&Control::Service::SetSpeedRatio), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq, ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes>(
          std::mem_fn(&Control::Service::SetCommandSpeedRatio), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::RebootReq, ::IndyFramework::Protobuf::Control::RebootRes>(
          std::mem_fn(&Control::Service::Reboot), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::RecoverReq, ::IndyFramework::Protobuf::Control::RecoverRes>(
          std::mem_fn(&Control::Service::Recover), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::StopReq, ::IndyFramework::Protobuf::Control::StopRes>(
          std::mem_fn(&Control::Service::Stop), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::PauseReq, ::IndyFramework::Protobuf::Control::PauseRes>(
          std::mem_fn(&Control::Service::Pause), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::ResumeReq, ::IndyFramework::Protobuf::Control::ResumeRes>(
          std::mem_fn(&Control::Service::Resume), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::BrakeReq, ::IndyFramework::Protobuf::Control::BrakeRes>(
          std::mem_fn(&Control::Service::Brake), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::ServoReq, ::IndyFramework::Protobuf::Control::ServoRes>(
          std::mem_fn(&Control::Service::Servo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetAutoServoOffReq, ::IndyFramework::Protobuf::Control::SetAutoServoOffRes>(
          std::mem_fn(&Control::Service::SetAutoServoOff), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetAutoServoOffReq, ::IndyFramework::Protobuf::Control::GetAutoServoOffRes>(
          std::mem_fn(&Control::Service::GetAutoServoOff), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SimulationModeReq, ::IndyFramework::Protobuf::Control::SimulationModeRes>(
          std::mem_fn(&Control::Service::SimulationMode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::DirectTeachingModeReq, ::IndyFramework::Protobuf::Control::DirectTeachingModeRes>(
          std::mem_fn(&Control::Service::DirectTeachingMode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetRTControlDataReq, ::IndyFramework::Protobuf::Control::GetRTControlDataRes>(
          std::mem_fn(&Control::Service::GetRTControlData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetIODataReq, ::IndyFramework::Protobuf::Control::GetIODataRes>(
          std::mem_fn(&Control::Service::GetIOData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetCoreDataReq, ::IndyFramework::Protobuf::Control::GetCoreDataRes>(
          std::mem_fn(&Control::Service::GetCoreData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq, ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes>(
          std::mem_fn(&Control::Service::GetSystemInfoData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetMotionDataReq, ::IndyFramework::Protobuf::Control::GetMotionDataRes>(
          std::mem_fn(&Control::Service::GetMotionData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetStateDataReq, ::IndyFramework::Protobuf::Control::GetStateDataRes>(
          std::mem_fn(&Control::Service::GetStateData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetViolationDataReq, ::IndyFramework::Protobuf::Control::GetViolationDataRes>(
          std::mem_fn(&Control::Service::GetViolationData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetProgramStateReq, ::IndyFramework::Protobuf::Control::SetProgramStateRes>(
          std::mem_fn(&Control::Service::SetProgramState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::InverseKinematicsReq, ::IndyFramework::Protobuf::Control::InverseKinematicsRes>(
          std::mem_fn(&Control::Service::InverseKinematics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq, ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes>(
          std::mem_fn(&Control::Service::CheckAproachRetractValid), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetPalletPointListReq, ::IndyFramework::Protobuf::Control::GetPalletPointListRes>(
          std::mem_fn(&Control::Service::GetPalletPointList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq, ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes>(
          std::mem_fn(&Control::Service::CalculateRelativePose), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq, ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes>(
          std::mem_fn(&Control::Service::CalculateCurrentPoseRel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetDIReq, ::IndyFramework::Protobuf::Control::GetDIRes>(
          std::mem_fn(&Control::Service::GetDI), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetDIReq, ::IndyFramework::Protobuf::Control::SetDIRes>(
          std::mem_fn(&Control::Service::SetDI), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetDOReq, ::IndyFramework::Protobuf::Control::SetDORes>(
          std::mem_fn(&Control::Service::SetDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetDOReq, ::IndyFramework::Protobuf::Control::GetDORes>(
          std::mem_fn(&Control::Service::GetDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetAIReq, ::IndyFramework::Protobuf::Control::GetAIRes>(
          std::mem_fn(&Control::Service::GetAI), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetAIReq, ::IndyFramework::Protobuf::Control::SetAIRes>(
          std::mem_fn(&Control::Service::SetAI), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetAOReq, ::IndyFramework::Protobuf::Control::GetAORes>(
          std::mem_fn(&Control::Service::GetAO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetAOReq, ::IndyFramework::Protobuf::Control::SetAORes>(
          std::mem_fn(&Control::Service::SetAO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetEndDIReq, ::IndyFramework::Protobuf::Control::GetEndDIRes>(
          std::mem_fn(&Control::Service::GetEndDI), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetEndDIReq, ::IndyFramework::Protobuf::Control::SetEndDIRes>(
          std::mem_fn(&Control::Service::SetEndDI), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetEndDOReq, ::IndyFramework::Protobuf::Control::SetEndDORes>(
          std::mem_fn(&Control::Service::SetEndDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetEndDOReq, ::IndyFramework::Protobuf::Control::GetEndDORes>(
          std::mem_fn(&Control::Service::GetEndDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetEndAIReq, ::IndyFramework::Protobuf::Control::GetEndAIRes>(
          std::mem_fn(&Control::Service::GetEndAI), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[59],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetEndAIReq, ::IndyFramework::Protobuf::Control::SetEndAIRes>(
          std::mem_fn(&Control::Service::SetEndAI), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[60],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetEndAOReq, ::IndyFramework::Protobuf::Control::GetEndAORes>(
          std::mem_fn(&Control::Service::GetEndAO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[61],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetEndAOReq, ::IndyFramework::Protobuf::Control::SetEndAORes>(
          std::mem_fn(&Control::Service::SetEndAO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[62],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetJointControlGainReq, ::IndyFramework::Protobuf::Control::SetJointControlGainRes>(
          std::mem_fn(&Control::Service::SetJointControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[63],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetJointControlGainReq, ::IndyFramework::Protobuf::Control::GetJointControlGainRes>(
          std::mem_fn(&Control::Service::GetJointControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[64],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetTaskControlGainReq, ::IndyFramework::Protobuf::Control::SetTaskControlGainRes>(
          std::mem_fn(&Control::Service::SetTaskControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[65],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetTaskControlGainReq, ::IndyFramework::Protobuf::Control::GetTaskControlGainRes>(
          std::mem_fn(&Control::Service::GetTaskControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[66],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq, ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes>(
          std::mem_fn(&Control::Service::SetImpedanceControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[67],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq, ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes>(
          std::mem_fn(&Control::Service::GetImpedanceControlGain), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[68],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetFricCompReq, ::IndyFramework::Protobuf::Control::SetFricCompRes>(
          std::mem_fn(&Control::Service::SetFricComp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[69],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetFricCompReq, ::IndyFramework::Protobuf::Control::GetFricCompRes>(
          std::mem_fn(&Control::Service::GetFricComp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[70],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetMountPosReq, ::IndyFramework::Protobuf::Control::SetMountPosRes>(
          std::mem_fn(&Control::Service::SetMountPos), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[71],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetMountPosReq, ::IndyFramework::Protobuf::Control::GetMountPosRes>(
          std::mem_fn(&Control::Service::GetMountPos), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[72],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetToolPropertyReq, ::IndyFramework::Protobuf::Control::SetToolPropertyRes>(
          std::mem_fn(&Control::Service::SetToolProperty), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[73],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetToolPropertyReq, ::IndyFramework::Protobuf::Control::GetToolPropertyRes>(
          std::mem_fn(&Control::Service::GetToolProperty), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[74],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetCollSensLevelReq, ::IndyFramework::Protobuf::Control::SetCollSensLevelRes>(
          std::mem_fn(&Control::Service::SetCollSensLevel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[75],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetCollSensLevelReq, ::IndyFramework::Protobuf::Control::GetCollSensLevelRes>(
          std::mem_fn(&Control::Service::GetCollSensLevel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[76],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetCollSensParamReq, ::IndyFramework::Protobuf::Control::SetCollSensParamRes>(
          std::mem_fn(&Control::Service::SetCollSensParam), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[77],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetCollSensParamReq, ::IndyFramework::Protobuf::Control::GetCollSensParamRes>(
          std::mem_fn(&Control::Service::GetCollSensParam), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[78],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetCollPolicyReq, ::IndyFramework::Protobuf::Control::SetCollPolicyRes>(
          std::mem_fn(&Control::Service::SetCollPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[79],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetCollPolicyReq, ::IndyFramework::Protobuf::Control::GetCollPolicyRes>(
          std::mem_fn(&Control::Service::GetCollPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[80],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetCollTuningParamReq, ::IndyFramework::Protobuf::Control::GetCollTuningParamRes>(
          std::mem_fn(&Control::Service::GetCollTuningParam), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[81],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq, ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes>(
          std::mem_fn(&Control::Service::GetSafetyLimitConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[82],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq, ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes>(
          std::mem_fn(&Control::Service::SetSafetyLimitConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[83],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq, ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes>(
          std::mem_fn(&Control::Service::GetSafetyStopConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[84],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq, ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes>(
          std::mem_fn(&Control::Service::SetSafetyStopConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[85],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetEL5001Req, ::IndyFramework::Protobuf::Control::GetEL5001Res>(
          std::mem_fn(&Control::Service::GetEL5001), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Control_method_names[86],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Control::Service, ::IndyFramework::Protobuf::Control::GetEL5101Req, ::IndyFramework::Protobuf::Control::GetEL5101Res>(
          std::mem_fn(&Control::Service::GetEL5101), this)));
}

Control::Service::~Service() {
}

::grpc::Status Control::Service::AMoveJ(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::AMoveJReq* request, ::IndyFramework::Protobuf::Control::AMoveJRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::AMoveJT(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::AMoveJTReq* request, ::IndyFramework::Protobuf::Control::AMoveJTRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::AMoveL(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::AMoveLReq* request, ::IndyFramework::Protobuf::Control::AMoveLRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::AMoveLT(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::AMoveLTReq* request, ::IndyFramework::Protobuf::Control::AMoveLTRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::AMoveC(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::AMoveCReq* request, ::IndyFramework::Protobuf::Control::AMoveCRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::AMoveCT(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::AMoveCTReq* request, ::IndyFramework::Protobuf::Control::AMoveCTRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::AWaitIO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::AWaitIOReq* request, ::IndyFramework::Protobuf::Control::AWaitIORes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::AWaitTime(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::AWaitTimeReq* request, ::IndyFramework::Protobuf::Control::AWaitTimeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::AWaitProgress(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::AWaitProgressReq* request, ::IndyFramework::Protobuf::Control::AWaitProgressRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::AWaitTraj(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::AWaitTrajReq* request, ::IndyFramework::Protobuf::Control::AWaitTrajRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::AWaitRadius(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::AWaitRadiusReq* request, ::IndyFramework::Protobuf::Control::AWaitRadiusRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::AMotionStop(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::AMotionStopReq* request, ::IndyFramework::Protobuf::Control::AMotionStopRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveSJ(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::MoveSJReq* request, ::IndyFramework::Protobuf::Control::MoveSJRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveSJT(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::MoveSJTReq* request, ::IndyFramework::Protobuf::Control::MoveSJTRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveSL(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::MoveSLReq* request, ::IndyFramework::Protobuf::Control::MoveSLRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveSLT(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::MoveSLTReq* request, ::IndyFramework::Protobuf::Control::MoveSLTRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::MoveSpiral(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::MoveSpiralReq* request, ::IndyFramework::Protobuf::Control::MoveSpiralRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetRefFrame(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetRefFrameReq* request, ::IndyFramework::Protobuf::Control::SetRefFrameRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetRefFramePlanar(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetRefFramePlanarReq* request, ::IndyFramework::Protobuf::Control::SetRefFramePlanarRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetToolFrame(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetToolFrameReq* request, ::IndyFramework::Protobuf::Control::SetToolFrameRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetSpeedRatio(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetSpeedRatioReq* request, ::IndyFramework::Protobuf::Control::SetSpeedRatioRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetCommandSpeedRatio(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioReq* request, ::IndyFramework::Protobuf::Control::SetCommandSpeedRatioRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::Reboot(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::RebootReq* request, ::IndyFramework::Protobuf::Control::RebootRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::Recover(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::RecoverReq* request, ::IndyFramework::Protobuf::Control::RecoverRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::Stop(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::StopReq* request, ::IndyFramework::Protobuf::Control::StopRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::Pause(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::PauseReq* request, ::IndyFramework::Protobuf::Control::PauseRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::Resume(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::ResumeReq* request, ::IndyFramework::Protobuf::Control::ResumeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::Brake(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::BrakeReq* request, ::IndyFramework::Protobuf::Control::BrakeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::Servo(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::ServoReq* request, ::IndyFramework::Protobuf::Control::ServoRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetAutoServoOff(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetAutoServoOffReq* request, ::IndyFramework::Protobuf::Control::SetAutoServoOffRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetAutoServoOff(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetAutoServoOffReq* request, ::IndyFramework::Protobuf::Control::GetAutoServoOffRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SimulationMode(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SimulationModeReq* request, ::IndyFramework::Protobuf::Control::SimulationModeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::DirectTeachingMode(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::DirectTeachingModeReq* request, ::IndyFramework::Protobuf::Control::DirectTeachingModeRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetRTControlData(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetRTControlDataReq* request, ::IndyFramework::Protobuf::Control::GetRTControlDataRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetIOData(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetIODataReq* request, ::IndyFramework::Protobuf::Control::GetIODataRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetCoreData(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetCoreDataReq* request, ::IndyFramework::Protobuf::Control::GetCoreDataRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetSystemInfoData(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetSystemInfoDataReq* request, ::IndyFramework::Protobuf::Control::GetSystemInfoDataRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetMotionData(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetMotionDataReq* request, ::IndyFramework::Protobuf::Control::GetMotionDataRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetStateData(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetStateDataReq* request, ::IndyFramework::Protobuf::Control::GetStateDataRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetViolationData(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetViolationDataReq* request, ::IndyFramework::Protobuf::Control::GetViolationDataRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetProgramState(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetProgramStateReq* request, ::IndyFramework::Protobuf::Control::SetProgramStateRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::InverseKinematics(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::InverseKinematicsReq* request, ::IndyFramework::Protobuf::Control::InverseKinematicsRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::CheckAproachRetractValid(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::CheckAproachRetractValidReq* request, ::IndyFramework::Protobuf::Control::CheckAproachRetractValidRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetPalletPointList(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetPalletPointListReq* request, ::IndyFramework::Protobuf::Control::GetPalletPointListRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::CalculateRelativePose(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::CalculateRelativePoseReq* request, ::IndyFramework::Protobuf::Control::CalculateRelativePoseRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::CalculateCurrentPoseRel(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelReq* request, ::IndyFramework::Protobuf::Control::CalculateCurrentPoseRelRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetDI(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetDIReq* request, ::IndyFramework::Protobuf::Control::GetDIRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetDI(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetDIReq* request, ::IndyFramework::Protobuf::Control::SetDIRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetDO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetDOReq* request, ::IndyFramework::Protobuf::Control::SetDORes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetDO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetDOReq* request, ::IndyFramework::Protobuf::Control::GetDORes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetAI(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetAIReq* request, ::IndyFramework::Protobuf::Control::GetAIRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetAI(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetAIReq* request, ::IndyFramework::Protobuf::Control::SetAIRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetAO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetAOReq* request, ::IndyFramework::Protobuf::Control::GetAORes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetAO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetAOReq* request, ::IndyFramework::Protobuf::Control::SetAORes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetEndDI(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetEndDIReq* request, ::IndyFramework::Protobuf::Control::GetEndDIRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetEndDI(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetEndDIReq* request, ::IndyFramework::Protobuf::Control::SetEndDIRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetEndDO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetEndDOReq* request, ::IndyFramework::Protobuf::Control::SetEndDORes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetEndDO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetEndDOReq* request, ::IndyFramework::Protobuf::Control::GetEndDORes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetEndAI(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetEndAIReq* request, ::IndyFramework::Protobuf::Control::GetEndAIRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetEndAI(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetEndAIReq* request, ::IndyFramework::Protobuf::Control::SetEndAIRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetEndAO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetEndAOReq* request, ::IndyFramework::Protobuf::Control::GetEndAORes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetEndAO(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetEndAOReq* request, ::IndyFramework::Protobuf::Control::SetEndAORes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetJointControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetJointControlGainReq* request, ::IndyFramework::Protobuf::Control::SetJointControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetJointControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetJointControlGainReq* request, ::IndyFramework::Protobuf::Control::GetJointControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetTaskControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetTaskControlGainReq* request, ::IndyFramework::Protobuf::Control::SetTaskControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetTaskControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetTaskControlGainReq* request, ::IndyFramework::Protobuf::Control::GetTaskControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetImpedanceControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetImpedanceControlGainReq* request, ::IndyFramework::Protobuf::Control::SetImpedanceControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetImpedanceControlGain(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetImpedanceControlGainReq* request, ::IndyFramework::Protobuf::Control::GetImpedanceControlGainRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetFricComp(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetFricCompReq* request, ::IndyFramework::Protobuf::Control::SetFricCompRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetFricComp(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetFricCompReq* request, ::IndyFramework::Protobuf::Control::GetFricCompRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetMountPos(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetMountPosReq* request, ::IndyFramework::Protobuf::Control::SetMountPosRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetMountPos(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetMountPosReq* request, ::IndyFramework::Protobuf::Control::GetMountPosRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetToolProperty(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetToolPropertyReq* request, ::IndyFramework::Protobuf::Control::SetToolPropertyRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetToolProperty(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetToolPropertyReq* request, ::IndyFramework::Protobuf::Control::GetToolPropertyRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetCollSensLevel(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetCollSensLevelReq* request, ::IndyFramework::Protobuf::Control::SetCollSensLevelRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetCollSensLevel(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetCollSensLevelReq* request, ::IndyFramework::Protobuf::Control::GetCollSensLevelRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetCollSensParam(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetCollSensParamReq* request, ::IndyFramework::Protobuf::Control::SetCollSensParamRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetCollSensParam(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetCollSensParamReq* request, ::IndyFramework::Protobuf::Control::GetCollSensParamRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetCollPolicy(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetCollPolicyReq* request, ::IndyFramework::Protobuf::Control::SetCollPolicyRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetCollPolicy(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetCollPolicyReq* request, ::IndyFramework::Protobuf::Control::GetCollPolicyRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetCollTuningParam(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetCollTuningParamReq* request, ::IndyFramework::Protobuf::Control::GetCollTuningParamRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetSafetyLimitConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigReq* request, ::IndyFramework::Protobuf::Control::GetSafetyLimitConfigRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetSafetyLimitConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigReq* request, ::IndyFramework::Protobuf::Control::SetSafetyLimitConfigRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetSafetyStopConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetSafetyStopConfigReq* request, ::IndyFramework::Protobuf::Control::GetSafetyStopConfigRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::SetSafetyStopConfig(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::SetSafetyStopConfigReq* request, ::IndyFramework::Protobuf::Control::SetSafetyStopConfigRes* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetEL5001(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetEL5001Req* request, ::IndyFramework::Protobuf::Control::GetEL5001Res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Control::Service::GetEL5101(::grpc::ServerContext* context, const ::IndyFramework::Protobuf::Control::GetEL5101Req* request, ::IndyFramework::Protobuf::Control::GetEL5101Res* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace IndyFramework
}  // namespace Protobuf
}  // namespace Control

