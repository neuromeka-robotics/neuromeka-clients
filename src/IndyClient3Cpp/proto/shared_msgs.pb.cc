// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shared_msgs.proto

#include "shared_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_shared_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalSignal_shared_5fmsgs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_5fmsgs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModbusVariable_shared_5fmsgs_2eproto;
namespace IndyFramework {
namespace Protobuf {
namespace Shared {
class MoveSJPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSJPoint> _instance;
} _MoveSJPoint_default_instance_;
class MoveSJTPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSJTPoint> _instance;
} _MoveSJTPoint_default_instance_;
class MoveSLPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSLPoint> _instance;
} _MoveSLPoint_default_instance_;
class MoveSLTPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveSLTPoint> _instance;
} _MoveSLTPoint_default_instance_;
class DigitalSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitalSignal> _instance;
} _DigitalSignal_default_instance_;
class AnalogSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnalogSignal> _instance;
} _AnalogSignal_default_instance_;
class NamedTaskPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedTaskPosition> _instance;
} _NamedTaskPosition_default_instance_;
class NamedJointPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedJointPosition> _instance;
} _NamedJointPosition_default_instance_;
class NamedReferencePositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NamedReferencePosition> _instance;
} _NamedReferencePosition_default_instance_;
class IntVariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntVariable> _instance;
} _IntVariable_default_instance_;
class ModbusVariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModbusVariable> _instance;
} _ModbusVariable_default_instance_;
class BoolVariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoolVariable> _instance;
} _BoolVariable_default_instance_;
class FloatVariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatVariable> _instance;
} _FloatVariable_default_instance_;
class JPosVariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JPosVariable> _instance;
} _JPosVariable_default_instance_;
class TPosVariableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TPosVariable> _instance;
} _TPosVariable_default_instance_;
class ToolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tool> _instance;
} _Tool_default_instance_;
class PalletPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PalletPoint> _instance;
} _PalletPoint_default_instance_;
class VisionServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisionServer> _instance;
} _VisionServer_default_instance_;
}  // namespace Shared
}  // namespace Protobuf
}  // namespace IndyFramework
static void InitDefaultsscc_info_AnalogSignal_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_AnalogSignal_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::AnalogSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::AnalogSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnalogSignal_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AnalogSignal_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_BoolVariable_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_BoolVariable_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::BoolVariable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::BoolVariable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolVariable_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BoolVariable_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_DigitalSignal_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_DigitalSignal_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::DigitalSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::DigitalSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitalSignal_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DigitalSignal_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_FloatVariable_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_FloatVariable_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::FloatVariable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::FloatVariable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVariable_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FloatVariable_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_IntVariable_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_IntVariable_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::IntVariable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::IntVariable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntVariable_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IntVariable_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_JPosVariable_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_JPosVariable_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::JPosVariable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::JPosVariable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JPosVariable_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JPosVariable_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_ModbusVariable_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_ModbusVariable_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::ModbusVariable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::ModbusVariable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModbusVariable_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ModbusVariable_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveSJPoint_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_MoveSJPoint_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::MoveSJPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::MoveSJPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSJPoint_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveSJPoint_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveSJTPoint_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_MoveSJTPoint_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::MoveSJTPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::MoveSJTPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSJTPoint_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveSJTPoint_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveSLPoint_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_MoveSLPoint_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::MoveSLPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::MoveSLPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSLPoint_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveSLPoint_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_MoveSLTPoint_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_MoveSLTPoint_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::MoveSLTPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::MoveSLTPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveSLTPoint_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MoveSLTPoint_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_NamedJointPosition_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_NamedJointPosition_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::NamedJointPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::NamedJointPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NamedJointPosition_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NamedJointPosition_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_NamedReferencePosition_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_NamedReferencePosition_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::NamedReferencePosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::NamedReferencePosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NamedReferencePosition_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NamedReferencePosition_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_NamedTaskPosition_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_NamedTaskPosition_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::NamedTaskPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::NamedTaskPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NamedTaskPosition_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NamedTaskPosition_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_PalletPoint_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_PalletPoint_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::PalletPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::PalletPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PalletPoint_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PalletPoint_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_TPosVariable_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_TPosVariable_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::TPosVariable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::TPosVariable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPosVariable_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TPosVariable_shared_5fmsgs_2eproto}, {}};

static void InitDefaultsscc_info_Tool_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_Tool_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::Tool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::Tool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Tool_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Tool_shared_5fmsgs_2eproto}, {
      &scc_info_DigitalSignal_shared_5fmsgs_2eproto.base,
      &scc_info_ModbusVariable_shared_5fmsgs_2eproto.base,}};

static void InitDefaultsscc_info_VisionServer_shared_5fmsgs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::IndyFramework::Protobuf::Shared::_VisionServer_default_instance_;
    new (ptr) ::IndyFramework::Protobuf::Shared::VisionServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IndyFramework::Protobuf::Shared::VisionServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VisionServer_shared_5fmsgs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VisionServer_shared_5fmsgs_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_shared_5fmsgs_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_shared_5fmsgs_2eproto[28];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_shared_5fmsgs_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_shared_5fmsgs_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSJPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSJPoint, jpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSJPoint, blending_radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSJTPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSJTPoint, jpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSJTPoint, blending_radius_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSJTPoint, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSLPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSLPoint, tpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSLPoint, blending_radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSLTPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSLTPoint, tpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSLTPoint, blending_radius_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::MoveSLTPoint, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::DigitalSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::DigitalSignal, addr_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::DigitalSignal, on_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::AnalogSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::AnalogSignal, addr_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::AnalogSignal, voltage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::NamedTaskPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::NamedTaskPosition, name_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::NamedTaskPosition, tpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::NamedJointPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::NamedJointPosition, name_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::NamedJointPosition, jpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::NamedReferencePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::NamedReferencePosition, name_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::NamedReferencePosition, tpos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::NamedReferencePosition, tpos0_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::NamedReferencePosition, tpos1_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::NamedReferencePosition, tpos2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::IntVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::IntVariable, addr_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::IntVariable, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::ModbusVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::ModbusVariable, addr_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::ModbusVariable, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::BoolVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::BoolVariable, addr_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::BoolVariable, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::FloatVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::FloatVariable, addr_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::FloatVariable, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::JPosVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::JPosVariable, addr_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::JPosVariable, jpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::TPosVariable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::TPosVariable, addr_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::TPosVariable, tpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::Tool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::Tool, name_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::Tool, tool_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::Tool, do_list_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::Tool, m_vars_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::Tool, sleep_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::PalletPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::PalletPoint, tar_pos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::PalletPoint, approach_pos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::PalletPoint, retract_pos_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::PalletPoint, tar_jpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::VisionServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::VisionServer, name_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::VisionServer, vision_server_type_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::VisionServer, ip_),
  PROTOBUF_FIELD_OFFSET(::IndyFramework::Protobuf::Shared::VisionServer, port_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IndyFramework::Protobuf::Shared::MoveSJPoint)},
  { 7, -1, sizeof(::IndyFramework::Protobuf::Shared::MoveSJTPoint)},
  { 15, -1, sizeof(::IndyFramework::Protobuf::Shared::MoveSLPoint)},
  { 22, -1, sizeof(::IndyFramework::Protobuf::Shared::MoveSLTPoint)},
  { 30, -1, sizeof(::IndyFramework::Protobuf::Shared::DigitalSignal)},
  { 37, -1, sizeof(::IndyFramework::Protobuf::Shared::AnalogSignal)},
  { 44, -1, sizeof(::IndyFramework::Protobuf::Shared::NamedTaskPosition)},
  { 51, -1, sizeof(::IndyFramework::Protobuf::Shared::NamedJointPosition)},
  { 58, -1, sizeof(::IndyFramework::Protobuf::Shared::NamedReferencePosition)},
  { 68, -1, sizeof(::IndyFramework::Protobuf::Shared::IntVariable)},
  { 75, -1, sizeof(::IndyFramework::Protobuf::Shared::ModbusVariable)},
  { 82, -1, sizeof(::IndyFramework::Protobuf::Shared::BoolVariable)},
  { 89, -1, sizeof(::IndyFramework::Protobuf::Shared::FloatVariable)},
  { 96, -1, sizeof(::IndyFramework::Protobuf::Shared::JPosVariable)},
  { 103, -1, sizeof(::IndyFramework::Protobuf::Shared::TPosVariable)},
  { 110, -1, sizeof(::IndyFramework::Protobuf::Shared::Tool)},
  { 120, -1, sizeof(::IndyFramework::Protobuf::Shared::PalletPoint)},
  { 129, -1, sizeof(::IndyFramework::Protobuf::Shared::VisionServer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_MoveSJPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_MoveSJTPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_MoveSLPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_MoveSLTPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_DigitalSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_AnalogSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_NamedTaskPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_NamedJointPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_NamedReferencePosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_IntVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_ModbusVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_BoolVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_FloatVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_JPosVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_TPosVariable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_Tool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_PalletPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IndyFramework::Protobuf::Shared::_VisionServer_default_instance_),
};

const char descriptor_table_protodef_shared_5fmsgs_2eproto[] =
  "\n\021shared_msgs.proto\022\035IndyFramework.Proto"
  "buf.Shared\"4\n\013MoveSJPoint\022\014\n\004jpos\030\001 \003(\002\022"
  "\027\n\017blending_radius\030\002 \001(\002\"C\n\014MoveSJTPoint"
  "\022\014\n\004jpos\030\001 \003(\002\022\027\n\017blending_radius\030\002 \001(\002\022"
  "\014\n\004time\030\003 \001(\002\"4\n\013MoveSLPoint\022\014\n\004tpos\030\001 \003"
  "(\002\022\027\n\017blending_radius\030\002 \001(\002\"C\n\014MoveSLTPo"
  "int\022\014\n\004tpos\030\001 \003(\002\022\027\n\017blending_radius\030\002 \001"
  "(\002\022\014\n\004time\030\003 \001(\002\")\n\rDigitalSignal\022\014\n\004add"
  "r\030\001 \001(\005\022\n\n\002on\030\002 \001(\010\"-\n\014AnalogSignal\022\014\n\004a"
  "ddr\030\001 \001(\005\022\017\n\007voltage\030\002 \001(\005\"/\n\021NamedTaskP"
  "osition\022\014\n\004name\030\001 \001(\t\022\014\n\004tpos\030\002 \003(\002\"0\n\022N"
  "amedJointPosition\022\014\n\004name\030\001 \001(\t\022\014\n\004jpos\030"
  "\002 \003(\002\"a\n\026NamedReferencePosition\022\014\n\004name\030"
  "\001 \001(\t\022\014\n\004tpos\030\002 \003(\002\022\r\n\005tpos0\030\003 \003(\002\022\r\n\005tp"
  "os1\030\004 \003(\002\022\r\n\005tpos2\030\005 \003(\002\"*\n\013IntVariable\022"
  "\014\n\004addr\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"-\n\016ModbusVa"
  "riable\022\014\n\004addr\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"+\n\014B"
  "oolVariable\022\014\n\004addr\030\001 \001(\005\022\r\n\005value\030\002 \001(\010"
  "\",\n\rFloatVariable\022\014\n\004addr\030\001 \001(\005\022\r\n\005value"
  "\030\002 \001(\002\"*\n\014JPosVariable\022\014\n\004addr\030\001 \001(\005\022\014\n\004"
  "jpos\030\002 \003(\002\"*\n\014TPosVariable\022\014\n\004addr\030\001 \001(\005"
  "\022\014\n\004tpos\030\002 \003(\002\"\223\002\n\004Tool\022\014\n\004name\030\001 \001(\t\022\?\n"
  "\ttool_type\030\002 \001(\0162,.IndyFramework.Protobu"
  "f.Shared.Tool.ToolType\022=\n\007do_list\030\005 \003(\0132"
  ",.IndyFramework.Protobuf.Shared.DigitalS"
  "ignal\022=\n\006m_vars\030\006 \003(\0132-.IndyFramework.Pr"
  "otobuf.Shared.ModbusVariable\022\022\n\nsleep_ti"
  "me\030\n \001(\002\"*\n\010ToolType\022\022\n\016DIGITAL_OUTPUT\020\000"
  "\022\n\n\006MODBUS\020\001\"[\n\013PalletPoint\022\017\n\007tar_pos\030\001"
  " \003(\002\022\024\n\014approach_pos\030\002 \003(\002\022\023\n\013retract_po"
  "s\030\003 \003(\002\022\020\n\010tar_jpos\030\004 \003(\002\"\310\001\n\014VisionServ"
  "er\022\014\n\004name\030\001 \001(\t\022X\n\022vision_server_type\030\002"
  " \001(\0162<.IndyFramework.Protobuf.Shared.Vis"
  "ionServer.VisionServerType\022\n\n\002ip\030\003 \001(\t\022\014"
  "\n\004port\030\004 \001(\t\"6\n\020VisionServerType\022\013\n\007INDY"
  "EYE\020\000\022\n\n\006PICKIT\020\001\022\t\n\005OMRON\020\002*A\n\013MotionSt"
  "ate\022\n\n\006IDLING\020\000\022\013\n\007RUNNING\020\001\022\013\n\007PAUSING\020"
  "\002\022\014\n\010STOPPING\020\003*}\n\017EndToolPortType\022\030\n\024EN"
  "D_TOOL_PORT_TYPE_A\020\000\022\030\n\024END_TOOL_PORT_TY"
  "PE_B\020\001\022\031\n\025END_TOOL_PORT_TYPE_AB\020\002\022\033\n\027END"
  "_TOOL_PORT_TYPE_REVC\020\003*B\n\016ControlBoxType"
  "\022\014\n\010NORMAL_2\020\000\022\014\n\010NORMAL_3\020\001\022\t\n\005KEY_2\020\002\022"
  "\t\n\005KEY_3\020\003*\224\001\n\014VariableType\022\023\n\017VariableT"
  "ypeInt\020\000\022\025\n\021VariableTypeFloat\020\001\022\024\n\020Varia"
  "bleTypeBool\020\002\022\026\n\022VariableTypeModbus\020\003\022\024\n"
  "\020VariableTypeJPos\020\004\022\024\n\020VariableTypeTPos\020"
  "\005*\347\001\n\014ProgramState\022\031\n\025PROGRAM_STATE_STOP"
  "PED\020\000\022\031\n\025PROGRAM_STATE_RUNNING\020\001\022\030\n\024PROG"
  "RAM_STATE_PAUSED\020\002\022\027\n\023PROGRAM_STATE_ERRO"
  "R\020\003\022\033\n\027PROGRAM_STATE_COLLISION\020\004\022(\n$PROG"
  "RAM_STATE_START_COLLISION_TUNING\020\005\022\'\n#PR"
  "OGRAM_STATE_STOP_COLLISION_TUNING\020\006*l\n\016P"
  "rogramControl\022\025\n\021PROGRAM_CTRL_NONE\020\000\022\024\n\020"
  "PROGRAM_CTRL_RUN\020\001\022\026\n\022PROGRAM_CTRL_PAUSE"
  "\020\002\022\025\n\021PROGRAM_CTRL_STOP\020\003*@\n\017ProgramCate"
  "gory\022\026\n\022PROGRAM_CAT_NORMAL\020\000\022\025\n\021PROGRAM_"
  "CAT_INDEX\020\001*K\n\rJointBaseType\022\034\n\030JOINT_BA"
  "SE_TYPE_ABSOLUTE\020\000\022\034\n\030JOINT_BASE_TYPE_RE"
  "LATIVE\020\001*`\n\014TaskBaseType\022\033\n\027TASK_BASE_TY"
  "PE_ABSOLUTE\020\000\022\033\n\027TASK_BASE_TYPE_RELATIVE"
  "\020\001\022\026\n\022TASK_BASE_TYPE_TCP\020\002*|\n\014BlendingTy"
  "pe\022\026\n\022BLENDING_TYPE_NONE\020\000\022\032\n\026BLENDING_T"
  "YPE_OVERRIDE\020\001\022\033\n\027BLENDING_TYPE_DUPLICAT"
  "E\020\002\022\033\n\027BLENDING_TYPE_INTERRUPT\020\003*5\n\023Circ"
  "ularSettingType\022\r\n\tPOINT_SET\020\000\022\017\n\013CENTER"
  "_AXIS\020\001*:\n\022CircularMovingType\022\014\n\010CONSTAN"
  "T\020\000\022\n\n\006RADIAL\020\001\022\n\n\006SMOOTH\020\002*\316\001\n\tTrajStat"
  "e\022\022\n\016TRAJSTATE_NONE\020\000\022\022\n\016TRAJSTATE_INIT\020"
  "\001\022\022\n\016TRAJSTATE_CALC\020\002\022\022\n\016TRAJSTATE_STBY\020"
  "\003\022\021\n\rTRAJSTATE_ACC\020\004\022\021\n\rTRAJSTATE_CRZ\020\005\022"
  "\021\n\rTRAJSTATE_DEC\020\006\022\022\n\016TRAJSTATE_CANC\020\007\022\021"
  "\n\rTRAJSTATE_FIN\020\010\022\021\n\rTRAJSTATE_ERR\020\t*Z\n\r"
  "TrajCondition\022\020\n\014TRAJ_STARTED\020\000\022\021\n\rTRAJ_"
  "ACC_DONE\020\001\022\021\n\rTRAJ_CRZ_DONE\020\002\022\021\n\rTRAJ_DE"
  "C_DONE\020\003*\221\001\n\017CollisionPolicy\022\036\n\032COLLISIO"
  "N_POLICY_NO_DETECT\020\000\022\032\n\026COLLISION_POLICY"
  "_PAUSE\020\001\022\'\n#COLLISION_POLICY_RESUME_AFTE"
  "R_SLEEP\020\002\022\031\n\025COLLISION_POLICY_STOP\020\003*l\n\014"
  "StopCategory\022\034\n\030STOP_CAT_IMMEDIATE_BRAKE"
  "\020\000\022#\n\037STOP_CAT_REDUCE_SPEED_AND_BRAKE\020\001\022"
  "\031\n\025STOP_CAT_REDUCE_SPEED\020\002*D\n\rPauseCateg"
  "ory\022\032\n\026PAUSE_CAT_REDUCE_SPEED\020\000\022\027\n\023PAUSE"
  "_CAT_IMMEDIATE\020\001*K\n\016EyeCommandType\022\033\n\027EY"
  "E_COMMAND_TYPE_DETECT\020\000\022\034\n\030EYE_COMMAND_T"
  "YPE_EXTRACT\020\001*\313\002\n\014DIConfigFunc\022\030\n\024DI_RUN"
  "_INDEX_PROGRAM\020\000\022\023\n\017DI_STOP_PROGRAM\020\001\022\024\n"
  "\020DI_PAUSE_PROGRAM\020\002\022\025\n\021DI_RESUME_PROGRAM"
  "\020\003\022\016\n\nDI_RECOVER\020\004\022\020\n\014DI_STOP_SLOW\020\005\022\025\n\021"
  "DI_STOP_IMMADIATE\020\006\022\023\n\017DI_MOVE_TO_HOME\020\007"
  "\022\023\n\017DI_MOVE_TO_ZERO\020\010\022\036\n\032DI_DIRECT_TEACH"
  "ING_MODE_ON\020\t\022\037\n\033DI_DIRECT_TEACHING_MODE"
  "_OFF\020\n\022\034\n\030DI_REDUCED_SPEED_MODE_ON\020\013\022\035\n\031"
  "DI_REDUCED_SPEED_MODE_OFF\020\014*\265\001\n\rDOConfig"
  "State\022\016\n\nDO_IS_IDLE\020\000\022\020\n\014DO_IS_MOVING\020\001\022"
  "\021\n\rDO_IS_VIOLATE\020\002\022\021\n\rDO_IS_RECOVER\020\003\022\022\n"
  "\016DO_IS_TEACHING\020\004\022\023\n\017DO_IS_COLLISION\020\005\022\031"
  "\n\025DO_IS_PROGRAM_RUNNING\020\006\022\030\n\024DO_IS_PROGR"
  "AM_PAUSED\020\007*\204\002\n\007OpState\022\021\n\rOP_SYSTEM_OFF"
  "\020\000\022\020\n\014OP_SYSTEM_ON\020\001\022\016\n\nOP_VIOLATE\020\002\022\023\n\017"
  "OP_RECOVER_HARD\020\003\022\023\n\017OP_RECOVER_SOFT\020\004\022\013"
  "\n\007OP_IDLE\020\005\022\r\n\tOP_MOVING\020\006\022\017\n\013OP_TEACHIN"
  "G\020\007\022\020\n\014OP_COLLISION\020\010\022\023\n\017OP_STOP_AND_OFF"
  "\020\t\022\016\n\nCOMPLIANCE\020\n\022\021\n\rBRAKE_CONTROL\020\013\022\020\n"
  "\014SYSTEM_RESET\020\014\022\021\n\rSYSTEM_SWITCH\020\r*3\n\010Lo"
  "gLevel\022\022\n\016LOG_LEVEL_INFO\020\000\022\023\n\017LOG_LEVEL_"
  "ERROR\020\001*\?\n\014JogFrameType\022\026\n\022JOG_FRAME_TYP"
  "E_REF\020\000\022\027\n\023JOG_FRAME_TYPE_TOOL\020\001*N\n\004Axis"
  "\022\n\n\006AXIS_X\020\000\022\n\n\006AXIS_Y\020\001\022\n\n\006AXIS_Z\020\002\022\n\n\006"
  "AXIS_U\020\003\022\n\n\006AXIS_V\020\004\022\n\n\006AXIS_W\020\005*/\n\017Visi"
  "onFrameType\022\n\n\006OBJECT\020\000\022\020\n\014END_EFFECTOR\020"
  "\001*B\n\013WeavingBase\022\031\n\025WEAVE_FRAME_TYPE_TOO"
  "L\020\000\022\030\n\024WEAVE_FRAME_TYPE_REF\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_shared_5fmsgs_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_shared_5fmsgs_2eproto_sccs[18] = {
  &scc_info_AnalogSignal_shared_5fmsgs_2eproto.base,
  &scc_info_BoolVariable_shared_5fmsgs_2eproto.base,
  &scc_info_DigitalSignal_shared_5fmsgs_2eproto.base,
  &scc_info_FloatVariable_shared_5fmsgs_2eproto.base,
  &scc_info_IntVariable_shared_5fmsgs_2eproto.base,
  &scc_info_JPosVariable_shared_5fmsgs_2eproto.base,
  &scc_info_ModbusVariable_shared_5fmsgs_2eproto.base,
  &scc_info_MoveSJPoint_shared_5fmsgs_2eproto.base,
  &scc_info_MoveSJTPoint_shared_5fmsgs_2eproto.base,
  &scc_info_MoveSLPoint_shared_5fmsgs_2eproto.base,
  &scc_info_MoveSLTPoint_shared_5fmsgs_2eproto.base,
  &scc_info_NamedJointPosition_shared_5fmsgs_2eproto.base,
  &scc_info_NamedReferencePosition_shared_5fmsgs_2eproto.base,
  &scc_info_NamedTaskPosition_shared_5fmsgs_2eproto.base,
  &scc_info_PalletPoint_shared_5fmsgs_2eproto.base,
  &scc_info_TPosVariable_shared_5fmsgs_2eproto.base,
  &scc_info_Tool_shared_5fmsgs_2eproto.base,
  &scc_info_VisionServer_shared_5fmsgs_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_shared_5fmsgs_2eproto_once;
static bool descriptor_table_shared_5fmsgs_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shared_5fmsgs_2eproto = {
  &descriptor_table_shared_5fmsgs_2eproto_initialized, descriptor_table_protodef_shared_5fmsgs_2eproto, "shared_msgs.proto", 4477,
  &descriptor_table_shared_5fmsgs_2eproto_once, descriptor_table_shared_5fmsgs_2eproto_sccs, descriptor_table_shared_5fmsgs_2eproto_deps, 18, 0,
  schemas, file_default_instances, TableStruct_shared_5fmsgs_2eproto::offsets,
  file_level_metadata_shared_5fmsgs_2eproto, 18, file_level_enum_descriptors_shared_5fmsgs_2eproto, file_level_service_descriptors_shared_5fmsgs_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_shared_5fmsgs_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_shared_5fmsgs_2eproto), true);
namespace IndyFramework {
namespace Protobuf {
namespace Shared {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Tool_ToolType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[0];
}
bool Tool_ToolType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Tool_ToolType Tool::DIGITAL_OUTPUT;
constexpr Tool_ToolType Tool::MODBUS;
constexpr Tool_ToolType Tool::ToolType_MIN;
constexpr Tool_ToolType Tool::ToolType_MAX;
constexpr int Tool::ToolType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VisionServer_VisionServerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[1];
}
bool VisionServer_VisionServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VisionServer_VisionServerType VisionServer::INDYEYE;
constexpr VisionServer_VisionServerType VisionServer::PICKIT;
constexpr VisionServer_VisionServerType VisionServer::OMRON;
constexpr VisionServer_VisionServerType VisionServer::VisionServerType_MIN;
constexpr VisionServer_VisionServerType VisionServer::VisionServerType_MAX;
constexpr int VisionServer::VisionServerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[2];
}
bool MotionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EndToolPortType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[3];
}
bool EndToolPortType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlBoxType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[4];
}
bool ControlBoxType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariableType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[5];
}
bool VariableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[6];
}
bool ProgramState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramControl_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[7];
}
bool ProgramControl_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProgramCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[8];
}
bool ProgramCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JointBaseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[9];
}
bool JointBaseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskBaseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[10];
}
bool TaskBaseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlendingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[11];
}
bool BlendingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CircularSettingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[12];
}
bool CircularSettingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CircularMovingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[13];
}
bool CircularMovingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[14];
}
bool TrajState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajCondition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[15];
}
bool TrajCondition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollisionPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[16];
}
bool CollisionPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[17];
}
bool StopCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PauseCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[18];
}
bool PauseCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EyeCommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[19];
}
bool EyeCommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DIConfigFunc_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[20];
}
bool DIConfigFunc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOConfigState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[21];
}
bool DOConfigState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[22];
}
bool OpState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[23];
}
bool LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JogFrameType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[24];
}
bool JogFrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Axis_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[25];
}
bool Axis_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VisionFrameType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[26];
}
bool VisionFrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeavingBase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shared_5fmsgs_2eproto);
  return file_level_enum_descriptors_shared_5fmsgs_2eproto[27];
}
bool WeavingBase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MoveSJPoint::InitAsDefaultInstance() {
}
class MoveSJPoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSJPoint::kJposFieldNumber;
const int MoveSJPoint::kBlendingRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSJPoint::MoveSJPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.MoveSJPoint)
}
MoveSJPoint::MoveSJPoint(const MoveSJPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      jpos_(from.jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blending_radius_ = from.blending_radius_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.MoveSJPoint)
}

void MoveSJPoint::SharedCtor() {
  blending_radius_ = 0;
}

MoveSJPoint::~MoveSJPoint() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.MoveSJPoint)
  SharedDtor();
}

void MoveSJPoint::SharedDtor() {
}

void MoveSJPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSJPoint& MoveSJPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSJPoint_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSJPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.MoveSJPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpos_.Clear();
  blending_radius_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSJPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float jpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float blending_radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSJPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.MoveSJPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float jpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.MoveSJPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.MoveSJPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSJPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.MoveSJPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->blending_radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.MoveSJPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSJPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.MoveSJPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->blending_radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.MoveSJPoint)
  return target;
}

size_t MoveSJPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.MoveSJPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSJPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.MoveSJPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSJPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSJPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.MoveSJPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.MoveSJPoint)
    MergeFrom(*source);
  }
}

void MoveSJPoint::MergeFrom(const MoveSJPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.MoveSJPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jpos_.MergeFrom(from.jpos_);
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
}

void MoveSJPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.MoveSJPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSJPoint::CopyFrom(const MoveSJPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.MoveSJPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSJPoint::IsInitialized() const {
  return true;
}

void MoveSJPoint::Swap(MoveSJPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSJPoint::InternalSwap(MoveSJPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpos_.InternalSwap(&other->jpos_);
  swap(blending_radius_, other->blending_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSJPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSJTPoint::InitAsDefaultInstance() {
}
class MoveSJTPoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSJTPoint::kJposFieldNumber;
const int MoveSJTPoint::kBlendingRadiusFieldNumber;
const int MoveSJTPoint::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSJTPoint::MoveSJTPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.MoveSJTPoint)
}
MoveSJTPoint::MoveSJTPoint(const MoveSJTPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      jpos_(from.jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blending_radius_, &from.blending_radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&blending_radius_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.MoveSJTPoint)
}

void MoveSJTPoint::SharedCtor() {
  ::memset(&blending_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&blending_radius_)) + sizeof(time_));
}

MoveSJTPoint::~MoveSJTPoint() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  SharedDtor();
}

void MoveSJTPoint::SharedDtor() {
}

void MoveSJTPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSJTPoint& MoveSJTPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSJTPoint_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSJTPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpos_.Clear();
  ::memset(&blending_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&blending_radius_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSJTPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float jpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float blending_radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSJTPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float jpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSJTPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->blending_radius(), output);
  }

  // float time = 3;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.MoveSJTPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSJTPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float jpos = 1;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->blending_radius(), target);
  }

  // float time = 3;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  return target;
}

size_t MoveSJTPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float time = 3;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSJTPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSJTPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSJTPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.MoveSJTPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.MoveSJTPoint)
    MergeFrom(*source);
  }
}

void MoveSJTPoint::MergeFrom(const MoveSJTPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jpos_.MergeFrom(from.jpos_);
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    set_time(from.time());
  }
}

void MoveSJTPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSJTPoint::CopyFrom(const MoveSJTPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.MoveSJTPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSJTPoint::IsInitialized() const {
  return true;
}

void MoveSJTPoint::Swap(MoveSJTPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSJTPoint::InternalSwap(MoveSJTPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpos_.InternalSwap(&other->jpos_);
  swap(blending_radius_, other->blending_radius_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSJTPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSLPoint::InitAsDefaultInstance() {
}
class MoveSLPoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSLPoint::kTposFieldNumber;
const int MoveSLPoint::kBlendingRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSLPoint::MoveSLPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.MoveSLPoint)
}
MoveSLPoint::MoveSLPoint(const MoveSLPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blending_radius_ = from.blending_radius_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.MoveSLPoint)
}

void MoveSLPoint::SharedCtor() {
  blending_radius_ = 0;
}

MoveSLPoint::~MoveSLPoint() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.MoveSLPoint)
  SharedDtor();
}

void MoveSLPoint::SharedDtor() {
}

void MoveSLPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSLPoint& MoveSLPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSLPoint_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSLPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.MoveSLPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  blending_radius_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSLPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float blending_radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSLPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.MoveSLPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.MoveSLPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.MoveSLPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSLPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.MoveSLPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->blending_radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.MoveSLPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSLPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.MoveSLPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->blending_radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.MoveSLPoint)
  return target;
}

size_t MoveSLPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.MoveSLPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSLPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.MoveSLPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSLPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSLPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.MoveSLPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.MoveSLPoint)
    MergeFrom(*source);
  }
}

void MoveSLPoint::MergeFrom(const MoveSLPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.MoveSLPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
}

void MoveSLPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.MoveSLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSLPoint::CopyFrom(const MoveSLPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.MoveSLPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSLPoint::IsInitialized() const {
  return true;
}

void MoveSLPoint::Swap(MoveSLPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSLPoint::InternalSwap(MoveSLPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  swap(blending_radius_, other->blending_radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSLPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveSLTPoint::InitAsDefaultInstance() {
}
class MoveSLTPoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveSLTPoint::kTposFieldNumber;
const int MoveSLTPoint::kBlendingRadiusFieldNumber;
const int MoveSLTPoint::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveSLTPoint::MoveSLTPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.MoveSLTPoint)
}
MoveSLTPoint::MoveSLTPoint(const MoveSLTPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blending_radius_, &from.blending_radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&blending_radius_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.MoveSLTPoint)
}

void MoveSLTPoint::SharedCtor() {
  ::memset(&blending_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&blending_radius_)) + sizeof(time_));
}

MoveSLTPoint::~MoveSLTPoint() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  SharedDtor();
}

void MoveSLTPoint::SharedDtor() {
}

void MoveSLTPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveSLTPoint& MoveSLTPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveSLTPoint_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void MoveSLTPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  ::memset(&blending_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&blending_radius_)) + sizeof(time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveSLTPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tpos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float blending_radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          blending_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveSLTPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tpos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float blending_radius = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blending_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveSLTPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->blending_radius(), output);
  }

  // float time = 3;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.MoveSLTPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveSLTPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tpos = 1;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->blending_radius(), target);
  }

  // float time = 3;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  return target;
}

size_t MoveSLTPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float blending_radius = 2;
  if (!(this->blending_radius() <= 0 && this->blending_radius() >= 0)) {
    total_size += 1 + 4;
  }

  // float time = 3;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveSLTPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveSLTPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveSLTPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.MoveSLTPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.MoveSLTPoint)
    MergeFrom(*source);
  }
}

void MoveSLTPoint::MergeFrom(const MoveSLTPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  if (!(from.blending_radius() <= 0 && from.blending_radius() >= 0)) {
    set_blending_radius(from.blending_radius());
  }
  if (!(from.time() <= 0 && from.time() >= 0)) {
    set_time(from.time());
  }
}

void MoveSLTPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveSLTPoint::CopyFrom(const MoveSLTPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.MoveSLTPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSLTPoint::IsInitialized() const {
  return true;
}

void MoveSLTPoint::Swap(MoveSLTPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveSLTPoint::InternalSwap(MoveSLTPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  swap(blending_radius_, other->blending_radius_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSLTPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DigitalSignal::InitAsDefaultInstance() {
}
class DigitalSignal::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DigitalSignal::kAddrFieldNumber;
const int DigitalSignal::kOnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DigitalSignal::DigitalSignal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.DigitalSignal)
}
DigitalSignal::DigitalSignal(const DigitalSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&on_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(on_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.DigitalSignal)
}

void DigitalSignal::SharedCtor() {
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(on_));
}

DigitalSignal::~DigitalSignal() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.DigitalSignal)
  SharedDtor();
}

void DigitalSignal::SharedDtor() {
}

void DigitalSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitalSignal& DigitalSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitalSignal_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void DigitalSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.DigitalSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(on_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DigitalSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool on = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DigitalSignal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.DigitalSignal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool on = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.DigitalSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.DigitalSignal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DigitalSignal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.DigitalSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // bool on = 2;
  if (this->on() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->on(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.DigitalSignal)
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitalSignal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.DigitalSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // bool on = 2;
  if (this->on() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->on(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.DigitalSignal)
  return target;
}

size_t DigitalSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.DigitalSignal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  // bool on = 2;
  if (this->on() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitalSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.DigitalSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitalSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitalSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.DigitalSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.DigitalSignal)
    MergeFrom(*source);
  }
}

void DigitalSignal::MergeFrom(const DigitalSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.DigitalSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr() != 0) {
    set_addr(from.addr());
  }
  if (from.on() != 0) {
    set_on(from.on());
  }
}

void DigitalSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.DigitalSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitalSignal::CopyFrom(const DigitalSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.DigitalSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalSignal::IsInitialized() const {
  return true;
}

void DigitalSignal::Swap(DigitalSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DigitalSignal::InternalSwap(DigitalSignal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(addr_, other->addr_);
  swap(on_, other->on_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnalogSignal::InitAsDefaultInstance() {
}
class AnalogSignal::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnalogSignal::kAddrFieldNumber;
const int AnalogSignal::kVoltageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnalogSignal::AnalogSignal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.AnalogSignal)
}
AnalogSignal::AnalogSignal(const AnalogSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&voltage_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(voltage_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.AnalogSignal)
}

void AnalogSignal::SharedCtor() {
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltage_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(voltage_));
}

AnalogSignal::~AnalogSignal() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.AnalogSignal)
  SharedDtor();
}

void AnalogSignal::SharedDtor() {
}

void AnalogSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnalogSignal& AnalogSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnalogSignal_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void AnalogSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.AnalogSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voltage_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(voltage_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnalogSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnalogSignal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.AnalogSignal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 voltage = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.AnalogSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.AnalogSignal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnalogSignal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.AnalogSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // int32 voltage = 2;
  if (this->voltage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->voltage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.AnalogSignal)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnalogSignal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.AnalogSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // int32 voltage = 2;
  if (this->voltage() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->voltage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.AnalogSignal)
  return target;
}

size_t AnalogSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.AnalogSignal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  // int32 voltage = 2;
  if (this->voltage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->voltage());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnalogSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.AnalogSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const AnalogSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnalogSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.AnalogSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.AnalogSignal)
    MergeFrom(*source);
  }
}

void AnalogSignal::MergeFrom(const AnalogSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.AnalogSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr() != 0) {
    set_addr(from.addr());
  }
  if (from.voltage() != 0) {
    set_voltage(from.voltage());
  }
}

void AnalogSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.AnalogSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnalogSignal::CopyFrom(const AnalogSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.AnalogSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogSignal::IsInitialized() const {
  return true;
}

void AnalogSignal::Swap(AnalogSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnalogSignal::InternalSwap(AnalogSignal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(addr_, other->addr_);
  swap(voltage_, other->voltage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NamedTaskPosition::InitAsDefaultInstance() {
}
class NamedTaskPosition::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedTaskPosition::kNameFieldNumber;
const int NamedTaskPosition::kTposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedTaskPosition::NamedTaskPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.NamedTaskPosition)
}
NamedTaskPosition::NamedTaskPosition(const NamedTaskPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.NamedTaskPosition)
}

void NamedTaskPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NamedTaskPosition_shared_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NamedTaskPosition::~NamedTaskPosition() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  SharedDtor();
}

void NamedTaskPosition::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NamedTaskPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedTaskPosition& NamedTaskPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamedTaskPosition_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void NamedTaskPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedTaskPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "IndyFramework.Protobuf.Shared.NamedTaskPosition.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float tpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedTaskPosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Shared.NamedTaskPosition.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedTaskPosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.NamedTaskPosition.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated float tpos = 2;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.NamedTaskPosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedTaskPosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.NamedTaskPosition.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated float tpos = 2;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  return target;
}

size_t NamedTaskPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedTaskPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedTaskPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamedTaskPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.NamedTaskPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.NamedTaskPosition)
    MergeFrom(*source);
  }
}

void NamedTaskPosition::MergeFrom(const NamedTaskPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void NamedTaskPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedTaskPosition::CopyFrom(const NamedTaskPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.NamedTaskPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedTaskPosition::IsInitialized() const {
  return true;
}

void NamedTaskPosition::Swap(NamedTaskPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedTaskPosition::InternalSwap(NamedTaskPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedTaskPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NamedJointPosition::InitAsDefaultInstance() {
}
class NamedJointPosition::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedJointPosition::kNameFieldNumber;
const int NamedJointPosition::kJposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedJointPosition::NamedJointPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.NamedJointPosition)
}
NamedJointPosition::NamedJointPosition(const NamedJointPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      jpos_(from.jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.NamedJointPosition)
}

void NamedJointPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NamedJointPosition_shared_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NamedJointPosition::~NamedJointPosition() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.NamedJointPosition)
  SharedDtor();
}

void NamedJointPosition::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NamedJointPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedJointPosition& NamedJointPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamedJointPosition_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void NamedJointPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.NamedJointPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpos_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedJointPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "IndyFramework.Protobuf.Shared.NamedJointPosition.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float jpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedJointPosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.NamedJointPosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Shared.NamedJointPosition.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float jpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.NamedJointPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.NamedJointPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedJointPosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.NamedJointPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.NamedJointPosition.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated float jpos = 2;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.NamedJointPosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedJointPosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.NamedJointPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.NamedJointPosition.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated float jpos = 2;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.NamedJointPosition)
  return target;
}

size_t NamedJointPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.NamedJointPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedJointPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.NamedJointPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedJointPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamedJointPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.NamedJointPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.NamedJointPosition)
    MergeFrom(*source);
  }
}

void NamedJointPosition::MergeFrom(const NamedJointPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.NamedJointPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jpos_.MergeFrom(from.jpos_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void NamedJointPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.NamedJointPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedJointPosition::CopyFrom(const NamedJointPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.NamedJointPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedJointPosition::IsInitialized() const {
  return true;
}

void NamedJointPosition::Swap(NamedJointPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedJointPosition::InternalSwap(NamedJointPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpos_.InternalSwap(&other->jpos_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedJointPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NamedReferencePosition::InitAsDefaultInstance() {
}
class NamedReferencePosition::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedReferencePosition::kNameFieldNumber;
const int NamedReferencePosition::kTposFieldNumber;
const int NamedReferencePosition::kTpos0FieldNumber;
const int NamedReferencePosition::kTpos1FieldNumber;
const int NamedReferencePosition::kTpos2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedReferencePosition::NamedReferencePosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.NamedReferencePosition)
}
NamedReferencePosition::NamedReferencePosition(const NamedReferencePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_),
      tpos0_(from.tpos0_),
      tpos1_(from.tpos1_),
      tpos2_(from.tpos2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.NamedReferencePosition)
}

void NamedReferencePosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NamedReferencePosition_shared_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NamedReferencePosition::~NamedReferencePosition() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  SharedDtor();
}

void NamedReferencePosition::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NamedReferencePosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedReferencePosition& NamedReferencePosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NamedReferencePosition_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void NamedReferencePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  tpos0_.Clear();
  tpos1_.Clear();
  tpos2_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedReferencePosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "IndyFramework.Protobuf.Shared.NamedReferencePosition.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float tpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tpos0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos0(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_tpos0(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tpos1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_tpos1(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tpos2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          add_tpos2(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedReferencePosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Shared.NamedReferencePosition.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tpos0 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos0())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_tpos0())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tpos1 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos1())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_tpos1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tpos2 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_tpos2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedReferencePosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.NamedReferencePosition.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated float tpos = 2;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  // repeated float tpos0 = 3;
  if (this->tpos0_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos0_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos0().data(), this->tpos0_size(), output);
  }

  // repeated float tpos1 = 4;
  if (this->tpos1_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos1_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos1().data(), this->tpos1_size(), output);
  }

  // repeated float tpos2 = 5;
  if (this->tpos2_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos2_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos2().data(), this->tpos2_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.NamedReferencePosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedReferencePosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.NamedReferencePosition.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated float tpos = 2;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  // repeated float tpos0 = 3;
  if (this->tpos0_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos0_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos0_, target);
  }

  // repeated float tpos1 = 4;
  if (this->tpos1_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos1_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos1_, target);
  }

  // repeated float tpos2 = 5;
  if (this->tpos2_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos2_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos2_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  return target;
}

size_t NamedReferencePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tpos0 = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos0_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos0_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tpos1 = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos1_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tpos2 = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos2_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedReferencePosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedReferencePosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamedReferencePosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.NamedReferencePosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.NamedReferencePosition)
    MergeFrom(*source);
  }
}

void NamedReferencePosition::MergeFrom(const NamedReferencePosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  tpos0_.MergeFrom(from.tpos0_);
  tpos1_.MergeFrom(from.tpos1_);
  tpos2_.MergeFrom(from.tpos2_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void NamedReferencePosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedReferencePosition::CopyFrom(const NamedReferencePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.NamedReferencePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedReferencePosition::IsInitialized() const {
  return true;
}

void NamedReferencePosition::Swap(NamedReferencePosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedReferencePosition::InternalSwap(NamedReferencePosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  tpos0_.InternalSwap(&other->tpos0_);
  tpos1_.InternalSwap(&other->tpos1_);
  tpos2_.InternalSwap(&other->tpos2_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedReferencePosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntVariable::InitAsDefaultInstance() {
}
class IntVariable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntVariable::kAddrFieldNumber;
const int IntVariable::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntVariable::IntVariable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.IntVariable)
}
IntVariable::IntVariable(const IntVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.IntVariable)
}

void IntVariable::SharedCtor() {
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(value_));
}

IntVariable::~IntVariable() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.IntVariable)
  SharedDtor();
}

void IntVariable::SharedDtor() {
}

void IntVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntVariable& IntVariable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntVariable_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void IntVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.IntVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntVariable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.IntVariable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.IntVariable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.IntVariable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntVariable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.IntVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.IntVariable)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntVariable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.IntVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.IntVariable)
  return target;
}

size_t IntVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.IntVariable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntVariable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.IntVariable)
  GOOGLE_DCHECK_NE(&from, this);
  const IntVariable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntVariable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.IntVariable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.IntVariable)
    MergeFrom(*source);
  }
}

void IntVariable::MergeFrom(const IntVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.IntVariable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr() != 0) {
    set_addr(from.addr());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void IntVariable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.IntVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntVariable::CopyFrom(const IntVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.IntVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntVariable::IsInitialized() const {
  return true;
}

void IntVariable::Swap(IntVariable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntVariable::InternalSwap(IntVariable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(addr_, other->addr_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntVariable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModbusVariable::InitAsDefaultInstance() {
}
class ModbusVariable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModbusVariable::kAddrFieldNumber;
const int ModbusVariable::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModbusVariable::ModbusVariable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.ModbusVariable)
}
ModbusVariable::ModbusVariable(const ModbusVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.ModbusVariable)
}

void ModbusVariable::SharedCtor() {
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(value_));
}

ModbusVariable::~ModbusVariable() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.ModbusVariable)
  SharedDtor();
}

void ModbusVariable::SharedDtor() {
}

void ModbusVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModbusVariable& ModbusVariable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModbusVariable_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void ModbusVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.ModbusVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModbusVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModbusVariable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.ModbusVariable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.ModbusVariable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.ModbusVariable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModbusVariable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.ModbusVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.ModbusVariable)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModbusVariable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.ModbusVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.ModbusVariable)
  return target;
}

size_t ModbusVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.ModbusVariable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModbusVariable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.ModbusVariable)
  GOOGLE_DCHECK_NE(&from, this);
  const ModbusVariable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModbusVariable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.ModbusVariable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.ModbusVariable)
    MergeFrom(*source);
  }
}

void ModbusVariable::MergeFrom(const ModbusVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.ModbusVariable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr() != 0) {
    set_addr(from.addr());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void ModbusVariable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.ModbusVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModbusVariable::CopyFrom(const ModbusVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.ModbusVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModbusVariable::IsInitialized() const {
  return true;
}

void ModbusVariable::Swap(ModbusVariable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModbusVariable::InternalSwap(ModbusVariable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(addr_, other->addr_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModbusVariable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoolVariable::InitAsDefaultInstance() {
}
class BoolVariable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolVariable::kAddrFieldNumber;
const int BoolVariable::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolVariable::BoolVariable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.BoolVariable)
}
BoolVariable::BoolVariable(const BoolVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.BoolVariable)
}

void BoolVariable::SharedCtor() {
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(value_));
}

BoolVariable::~BoolVariable() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.BoolVariable)
  SharedDtor();
}

void BoolVariable::SharedDtor() {
}

void BoolVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoolVariable& BoolVariable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoolVariable_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void BoolVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.BoolVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoolVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoolVariable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.BoolVariable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.BoolVariable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.BoolVariable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoolVariable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.BoolVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // bool value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.BoolVariable)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolVariable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.BoolVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // bool value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.BoolVariable)
  return target;
}

size_t BoolVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.BoolVariable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  // bool value = 2;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolVariable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.BoolVariable)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolVariable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoolVariable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.BoolVariable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.BoolVariable)
    MergeFrom(*source);
  }
}

void BoolVariable::MergeFrom(const BoolVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.BoolVariable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr() != 0) {
    set_addr(from.addr());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void BoolVariable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.BoolVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolVariable::CopyFrom(const BoolVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.BoolVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolVariable::IsInitialized() const {
  return true;
}

void BoolVariable::Swap(BoolVariable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolVariable::InternalSwap(BoolVariable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(addr_, other->addr_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolVariable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloatVariable::InitAsDefaultInstance() {
}
class FloatVariable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatVariable::kAddrFieldNumber;
const int FloatVariable::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatVariable::FloatVariable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.FloatVariable)
}
FloatVariable::FloatVariable(const FloatVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.FloatVariable)
}

void FloatVariable::SharedCtor() {
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(value_));
}

FloatVariable::~FloatVariable() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.FloatVariable)
  SharedDtor();
}

void FloatVariable::SharedDtor() {
}

void FloatVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatVariable& FloatVariable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatVariable_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void FloatVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.FloatVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FloatVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FloatVariable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.FloatVariable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.FloatVariable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.FloatVariable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FloatVariable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.FloatVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.FloatVariable)
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatVariable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.FloatVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.FloatVariable)
  return target;
}

size_t FloatVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.FloatVariable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  // float value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatVariable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.FloatVariable)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatVariable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatVariable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.FloatVariable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.FloatVariable)
    MergeFrom(*source);
  }
}

void FloatVariable::MergeFrom(const FloatVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.FloatVariable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr() != 0) {
    set_addr(from.addr());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
}

void FloatVariable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.FloatVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatVariable::CopyFrom(const FloatVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.FloatVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVariable::IsInitialized() const {
  return true;
}

void FloatVariable::Swap(FloatVariable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatVariable::InternalSwap(FloatVariable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(addr_, other->addr_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatVariable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JPosVariable::InitAsDefaultInstance() {
}
class JPosVariable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JPosVariable::kAddrFieldNumber;
const int JPosVariable::kJposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JPosVariable::JPosVariable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.JPosVariable)
}
JPosVariable::JPosVariable(const JPosVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      jpos_(from.jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_ = from.addr_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.JPosVariable)
}

void JPosVariable::SharedCtor() {
  addr_ = 0;
}

JPosVariable::~JPosVariable() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.JPosVariable)
  SharedDtor();
}

void JPosVariable::SharedDtor() {
}

void JPosVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JPosVariable& JPosVariable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JPosVariable_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void JPosVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.JPosVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jpos_.Clear();
  addr_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JPosVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float jpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JPosVariable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.JPosVariable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float jpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.JPosVariable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.JPosVariable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JPosVariable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.JPosVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // repeated float jpos = 2;
  if (this->jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->jpos().data(), this->jpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.JPosVariable)
}

::PROTOBUF_NAMESPACE_ID::uint8* JPosVariable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.JPosVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // repeated float jpos = 2;
  if (this->jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->jpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.JPosVariable)
  return target;
}

size_t JPosVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.JPosVariable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float jpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JPosVariable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.JPosVariable)
  GOOGLE_DCHECK_NE(&from, this);
  const JPosVariable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JPosVariable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.JPosVariable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.JPosVariable)
    MergeFrom(*source);
  }
}

void JPosVariable::MergeFrom(const JPosVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.JPosVariable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jpos_.MergeFrom(from.jpos_);
  if (from.addr() != 0) {
    set_addr(from.addr());
  }
}

void JPosVariable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.JPosVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JPosVariable::CopyFrom(const JPosVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.JPosVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JPosVariable::IsInitialized() const {
  return true;
}

void JPosVariable::Swap(JPosVariable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JPosVariable::InternalSwap(JPosVariable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jpos_.InternalSwap(&other->jpos_);
  swap(addr_, other->addr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JPosVariable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TPosVariable::InitAsDefaultInstance() {
}
class TPosVariable::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TPosVariable::kAddrFieldNumber;
const int TPosVariable::kTposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TPosVariable::TPosVariable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.TPosVariable)
}
TPosVariable::TPosVariable(const TPosVariable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tpos_(from.tpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_ = from.addr_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.TPosVariable)
}

void TPosVariable::SharedCtor() {
  addr_ = 0;
}

TPosVariable::~TPosVariable() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.TPosVariable)
  SharedDtor();
}

void TPosVariable::SharedDtor() {
}

void TPosVariable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TPosVariable& TPosVariable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TPosVariable_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void TPosVariable::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.TPosVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tpos_.Clear();
  addr_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TPosVariable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float tpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_tpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TPosVariable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.TPosVariable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tpos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_tpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.TPosVariable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.TPosVariable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TPosVariable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.TPosVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->addr(), output);
  }

  // repeated float tpos = 2;
  if (this->tpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tpos().data(), this->tpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.TPosVariable)
}

::PROTOBUF_NAMESPACE_ID::uint8* TPosVariable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.TPosVariable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addr = 1;
  if (this->addr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->addr(), target);
  }

  // repeated float tpos = 2;
  if (this->tpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.TPosVariable)
  return target;
}

size_t TPosVariable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.TPosVariable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tpos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 addr = 1;
  if (this->addr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->addr());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TPosVariable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.TPosVariable)
  GOOGLE_DCHECK_NE(&from, this);
  const TPosVariable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TPosVariable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.TPosVariable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.TPosVariable)
    MergeFrom(*source);
  }
}

void TPosVariable::MergeFrom(const TPosVariable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.TPosVariable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tpos_.MergeFrom(from.tpos_);
  if (from.addr() != 0) {
    set_addr(from.addr());
  }
}

void TPosVariable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.TPosVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPosVariable::CopyFrom(const TPosVariable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.TPosVariable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPosVariable::IsInitialized() const {
  return true;
}

void TPosVariable::Swap(TPosVariable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TPosVariable::InternalSwap(TPosVariable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tpos_.InternalSwap(&other->tpos_);
  swap(addr_, other->addr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TPosVariable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tool::InitAsDefaultInstance() {
}
class Tool::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tool::kNameFieldNumber;
const int Tool::kToolTypeFieldNumber;
const int Tool::kDoListFieldNumber;
const int Tool::kMVarsFieldNumber;
const int Tool::kSleepTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tool::Tool()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.Tool)
}
Tool::Tool(const Tool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      do_list_(from.do_list_),
      m_vars_(from.m_vars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&tool_type_, &from.tool_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&sleep_time_) -
    reinterpret_cast<char*>(&tool_type_)) + sizeof(sleep_time_));
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.Tool)
}

void Tool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tool_shared_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tool_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sleep_time_) -
      reinterpret_cast<char*>(&tool_type_)) + sizeof(sleep_time_));
}

Tool::~Tool() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.Tool)
  SharedDtor();
}

void Tool::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Tool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tool& Tool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tool_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void Tool::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.Tool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  do_list_.Clear();
  m_vars_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tool_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sleep_time_) -
      reinterpret_cast<char*>(&tool_type_)) + sizeof(sleep_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Tool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "IndyFramework.Protobuf.Shared.Tool.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.Tool.ToolType tool_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_tool_type(static_cast<::IndyFramework::Protobuf::Shared::Tool_ToolType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_do_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .IndyFramework.Protobuf.Shared.ModbusVariable m_vars = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_m_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // float sleep_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          sleep_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Tool::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.Tool)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Shared.Tool.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.Tool.ToolType tool_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tool_type(static_cast< ::IndyFramework::Protobuf::Shared::Tool_ToolType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_do_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IndyFramework.Protobuf.Shared.ModbusVariable m_vars = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_m_vars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float sleep_time = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sleep_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.Tool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.Tool)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Tool::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.Tool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.Tool.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .IndyFramework.Protobuf.Shared.Tool.ToolType tool_type = 2;
  if (this->tool_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->tool_type(), output);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->do_list_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->do_list(static_cast<int>(i)),
      output);
  }

  // repeated .IndyFramework.Protobuf.Shared.ModbusVariable m_vars = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->m_vars_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->m_vars(static_cast<int>(i)),
      output);
  }

  // float sleep_time = 10;
  if (!(this->sleep_time() <= 0 && this->sleep_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->sleep_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.Tool)
}

::PROTOBUF_NAMESPACE_ID::uint8* Tool::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.Tool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.Tool.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .IndyFramework.Protobuf.Shared.Tool.ToolType tool_type = 2;
  if (this->tool_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->tool_type(), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->do_list_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->do_list(static_cast<int>(i)), target);
  }

  // repeated .IndyFramework.Protobuf.Shared.ModbusVariable m_vars = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->m_vars_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->m_vars(static_cast<int>(i)), target);
  }

  // float sleep_time = 10;
  if (!(this->sleep_time() <= 0 && this->sleep_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->sleep_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.Tool)
  return target;
}

size_t Tool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.Tool)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IndyFramework.Protobuf.Shared.DigitalSignal do_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->do_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->do_list(static_cast<int>(i)));
    }
  }

  // repeated .IndyFramework.Protobuf.Shared.ModbusVariable m_vars = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->m_vars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->m_vars(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .IndyFramework.Protobuf.Shared.Tool.ToolType tool_type = 2;
  if (this->tool_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->tool_type());
  }

  // float sleep_time = 10;
  if (!(this->sleep_time() <= 0 && this->sleep_time() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.Tool)
  GOOGLE_DCHECK_NE(&from, this);
  const Tool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.Tool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.Tool)
    MergeFrom(*source);
  }
}

void Tool::MergeFrom(const Tool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.Tool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  do_list_.MergeFrom(from.do_list_);
  m_vars_.MergeFrom(from.m_vars_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.tool_type() != 0) {
    set_tool_type(from.tool_type());
  }
  if (!(from.sleep_time() <= 0 && from.sleep_time() >= 0)) {
    set_sleep_time(from.sleep_time());
  }
}

void Tool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.Tool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tool::CopyFrom(const Tool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.Tool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tool::IsInitialized() const {
  return true;
}

void Tool::Swap(Tool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tool::InternalSwap(Tool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&do_list_)->InternalSwap(CastToBase(&other->do_list_));
  CastToBase(&m_vars_)->InternalSwap(CastToBase(&other->m_vars_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tool_type_, other->tool_type_);
  swap(sleep_time_, other->sleep_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PalletPoint::InitAsDefaultInstance() {
}
class PalletPoint::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PalletPoint::kTarPosFieldNumber;
const int PalletPoint::kApproachPosFieldNumber;
const int PalletPoint::kRetractPosFieldNumber;
const int PalletPoint::kTarJposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PalletPoint::PalletPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.PalletPoint)
}
PalletPoint::PalletPoint(const PalletPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tar_pos_(from.tar_pos_),
      approach_pos_(from.approach_pos_),
      retract_pos_(from.retract_pos_),
      tar_jpos_(from.tar_jpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.PalletPoint)
}

void PalletPoint::SharedCtor() {
}

PalletPoint::~PalletPoint() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.PalletPoint)
  SharedDtor();
}

void PalletPoint::SharedDtor() {
}

void PalletPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PalletPoint& PalletPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PalletPoint_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void PalletPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.PalletPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tar_pos_.Clear();
  approach_pos_.Clear();
  retract_pos_.Clear();
  tar_jpos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PalletPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float tar_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tar_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_tar_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float approach_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_approach_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_approach_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float retract_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_retract_pos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          add_retract_pos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float tar_jpos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_tar_jpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_tar_jpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PalletPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.PalletPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float tar_pos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tar_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_tar_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float approach_pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_approach_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_approach_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float retract_pos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_retract_pos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_retract_pos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float tar_jpos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tar_jpos())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_tar_jpos())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.PalletPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.PalletPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PalletPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.PalletPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tar_pos = 1;
  if (this->tar_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tar_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tar_pos().data(), this->tar_pos_size(), output);
  }

  // repeated float approach_pos = 2;
  if (this->approach_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_approach_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->approach_pos().data(), this->approach_pos_size(), output);
  }

  // repeated float retract_pos = 3;
  if (this->retract_pos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_retract_pos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->retract_pos().data(), this->retract_pos_size(), output);
  }

  // repeated float tar_jpos = 4;
  if (this->tar_jpos_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tar_jpos_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->tar_jpos().data(), this->tar_jpos_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.PalletPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* PalletPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.PalletPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float tar_pos = 1;
  if (this->tar_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tar_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tar_pos_, target);
  }

  // repeated float approach_pos = 2;
  if (this->approach_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _approach_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->approach_pos_, target);
  }

  // repeated float retract_pos = 3;
  if (this->retract_pos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _retract_pos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->retract_pos_, target);
  }

  // repeated float tar_jpos = 4;
  if (this->tar_jpos_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tar_jpos_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tar_jpos_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.PalletPoint)
  return target;
}

size_t PalletPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.PalletPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float tar_pos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tar_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tar_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float approach_pos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->approach_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _approach_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float retract_pos = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->retract_pos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _retract_pos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float tar_jpos = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tar_jpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tar_jpos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PalletPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.PalletPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PalletPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PalletPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.PalletPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.PalletPoint)
    MergeFrom(*source);
  }
}

void PalletPoint::MergeFrom(const PalletPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.PalletPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tar_pos_.MergeFrom(from.tar_pos_);
  approach_pos_.MergeFrom(from.approach_pos_);
  retract_pos_.MergeFrom(from.retract_pos_);
  tar_jpos_.MergeFrom(from.tar_jpos_);
}

void PalletPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.PalletPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PalletPoint::CopyFrom(const PalletPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.PalletPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PalletPoint::IsInitialized() const {
  return true;
}

void PalletPoint::Swap(PalletPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PalletPoint::InternalSwap(PalletPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tar_pos_.InternalSwap(&other->tar_pos_);
  approach_pos_.InternalSwap(&other->approach_pos_);
  retract_pos_.InternalSwap(&other->retract_pos_);
  tar_jpos_.InternalSwap(&other->tar_jpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PalletPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisionServer::InitAsDefaultInstance() {
}
class VisionServer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisionServer::kNameFieldNumber;
const int VisionServer::kVisionServerTypeFieldNumber;
const int VisionServer::kIpFieldNumber;
const int VisionServer::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisionServer::VisionServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndyFramework.Protobuf.Shared.VisionServer)
}
VisionServer::VisionServer(const VisionServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.port().size() > 0) {
    port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  vision_server_type_ = from.vision_server_type_;
  // @@protoc_insertion_point(copy_constructor:IndyFramework.Protobuf.Shared.VisionServer)
}

void VisionServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisionServer_shared_5fmsgs_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vision_server_type_ = 0;
}

VisionServer::~VisionServer() {
  // @@protoc_insertion_point(destructor:IndyFramework.Protobuf.Shared.VisionServer)
  SharedDtor();
}

void VisionServer::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VisionServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisionServer& VisionServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisionServer_shared_5fmsgs_2eproto.base);
  return *internal_default_instance();
}


void VisionServer::Clear() {
// @@protoc_insertion_point(message_clear_start:IndyFramework.Protobuf.Shared.VisionServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  port_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vision_server_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VisionServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "IndyFramework.Protobuf.Shared.VisionServer.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IndyFramework.Protobuf.Shared.VisionServer.VisionServerType vision_server_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_vision_server_type(static_cast<::IndyFramework::Protobuf::Shared::VisionServer_VisionServerType>(val));
        } else goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ip(), ptr, ctx, "IndyFramework.Protobuf.Shared.VisionServer.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_port(), ptr, ctx, "IndyFramework.Protobuf.Shared.VisionServer.port");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VisionServer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndyFramework.Protobuf.Shared.VisionServer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Shared.VisionServer.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IndyFramework.Protobuf.Shared.VisionServer.VisionServerType vision_server_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vision_server_type(static_cast< ::IndyFramework::Protobuf::Shared::VisionServer_VisionServerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Shared.VisionServer.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->port().data(), static_cast<int>(this->port().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "IndyFramework.Protobuf.Shared.VisionServer.port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndyFramework.Protobuf.Shared.VisionServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndyFramework.Protobuf.Shared.VisionServer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VisionServer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndyFramework.Protobuf.Shared.VisionServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.VisionServer.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .IndyFramework.Protobuf.Shared.VisionServer.VisionServerType vision_server_type = 2;
  if (this->vision_server_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->vision_server_type(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.VisionServer.ip");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // string port = 4;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.VisionServer.port");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndyFramework.Protobuf.Shared.VisionServer)
}

::PROTOBUF_NAMESPACE_ID::uint8* VisionServer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndyFramework.Protobuf.Shared.VisionServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.VisionServer.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .IndyFramework.Protobuf.Shared.VisionServer.VisionServerType vision_server_type = 2;
  if (this->vision_server_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->vision_server_type(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.VisionServer.ip");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // string port = 4;
  if (this->port().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), static_cast<int>(this->port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndyFramework.Protobuf.Shared.VisionServer.port");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndyFramework.Protobuf.Shared.VisionServer)
  return target;
}

size_t VisionServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndyFramework.Protobuf.Shared.VisionServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string port = 4;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->port());
  }

  // .IndyFramework.Protobuf.Shared.VisionServer.VisionServerType vision_server_type = 2;
  if (this->vision_server_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->vision_server_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisionServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IndyFramework.Protobuf.Shared.VisionServer)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisionServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IndyFramework.Protobuf.Shared.VisionServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IndyFramework.Protobuf.Shared.VisionServer)
    MergeFrom(*source);
  }
}

void VisionServer::MergeFrom(const VisionServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndyFramework.Protobuf.Shared.VisionServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port().size() > 0) {

    port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  if (from.vision_server_type() != 0) {
    set_vision_server_type(from.vision_server_type());
  }
}

void VisionServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IndyFramework.Protobuf.Shared.VisionServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionServer::CopyFrom(const VisionServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndyFramework.Protobuf.Shared.VisionServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionServer::IsInitialized() const {
  return true;
}

void VisionServer::Swap(VisionServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisionServer::InternalSwap(VisionServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  port_.Swap(&other->port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vision_server_type_, other->vision_server_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionServer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Shared
}  // namespace Protobuf
}  // namespace IndyFramework
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::MoveSJPoint* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::MoveSJPoint >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::MoveSJPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::MoveSJTPoint* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::MoveSJTPoint >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::MoveSJTPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::MoveSLPoint* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::MoveSLPoint >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::MoveSLPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::MoveSLTPoint* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::MoveSLTPoint >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::MoveSLTPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::DigitalSignal* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::DigitalSignal >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::DigitalSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::AnalogSignal* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::AnalogSignal >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::AnalogSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::NamedTaskPosition* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::NamedTaskPosition >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::NamedTaskPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::NamedJointPosition* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::NamedJointPosition >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::NamedJointPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::NamedReferencePosition* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::NamedReferencePosition >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::NamedReferencePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::IntVariable* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::IntVariable >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::IntVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::ModbusVariable* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::ModbusVariable >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::ModbusVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::BoolVariable* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::BoolVariable >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::BoolVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::FloatVariable* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::FloatVariable >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::FloatVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::JPosVariable* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::JPosVariable >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::JPosVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::TPosVariable* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::TPosVariable >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::TPosVariable >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::Tool* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::Tool >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::Tool >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::PalletPoint* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::PalletPoint >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::PalletPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::IndyFramework::Protobuf::Shared::VisionServer* Arena::CreateMaybeMessage< ::IndyFramework::Protobuf::Shared::VisionServer >(Arena* arena) {
  return Arena::CreateInternal< ::IndyFramework::Protobuf::Shared::VisionServer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
