// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: EtherCATCommgRPCServer.proto

#include "EtherCATCommgRPCServer.pb.h"
#include "EtherCATCommgRPCServer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GRPCECat {

static const char* GRPCECatTask_method_names[] = {
  "/GRPCECat.GRPCECatTask/GetMasterStatus",
  "/GRPCECat.GRPCECatTask/GetSlaveStatus",
  "/GRPCECat.GRPCECatTask/GetRxDomainStatus",
  "/GRPCECat.GRPCECatTask/GetTxDomainStatus",
  "/GRPCECat.GRPCECatTask/IsSystemReady",
  "/GRPCECat.GRPCECatTask/SetServoOnOff",
  "/GRPCECat.GRPCECatTask/SetRxPDOMotorDriver",
  "/GRPCECat.GRPCECatTask/GetRxPDOMotorDriver",
  "/GRPCECat.GRPCECatTask/GetTxPDOMotorDriver",
  "/GRPCECat.GRPCECatTask/GetMotorDriverDIs",
  "/GRPCECat.GRPCECatTask/GetErrorCode",
  "/GRPCECat.GRPCECatTask/GetMaxTorque",
  "/GRPCECat.GRPCECatTask/SetMaxTorque",
  "/GRPCECat.GRPCECatTask/GetMaxMotorSpeed",
  "/GRPCECat.GRPCECatTask/SetMaxMotorSpeed",
  "/GRPCECat.GRPCECatTask/SetNRMKIOBoardOutput",
  "/GRPCECat.GRPCECatTask/GetNRMKIOBoardInput",
  "/GRPCECat.GRPCECatTask/GetNRMKIOBoardOutput",
  "/GRPCECat.GRPCECatTask/SetNRMKEndtoolOutput",
  "/GRPCECat.GRPCECatTask/GetNRMKEndtoolInput",
  "/GRPCECat.GRPCECatTask/GetNRMKEndtoolRevCDTInput",
  "/GRPCECat.GRPCECatTask/SetDO",
  "/GRPCECat.GRPCECatTask/GetDI",
  "/GRPCECat.GRPCECatTask/GetDO",
  "/GRPCECat.GRPCECatTask/GetRobotusFTSensor",
  "/GRPCECat.GRPCECatTask/ResetWelconDriver",
  "/GRPCECat.GRPCECatTask/GetCOREErrorCodeSDO",
  "/GRPCECat.GRPCECatTask/GetCORETemperature1SDO",
  "/GRPCECat.GRPCECatTask/GetCORETemperature2SDO",
  "/GRPCECat.GRPCECatTask/GetCORETemperature3SDO",
  "/GRPCECat.GRPCECatTask/GetNRMKFWVersionSDO",
  "/GRPCECat.GRPCECatTask/GetMaxTorqueSDO",
  "/GRPCECat.GRPCECatTask/GetProfileVelocitySDO",
  "/GRPCECat.GRPCECatTask/GetProfileAccSDO",
  "/GRPCECat.GRPCECatTask/GetProfileDecSDO",
  "/GRPCECat.GRPCECatTask/SetMaxTorqueSDO",
  "/GRPCECat.GRPCECatTask/SetProfileVelocitySDO",
  "/GRPCECat.GRPCECatTask/SetProfileAccSDO",
  "/GRPCECat.GRPCECatTask/SetProfileDecSDO",
};

std::unique_ptr< GRPCECatTask::Stub> GRPCECatTask::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GRPCECatTask::Stub> stub(new GRPCECatTask::Stub(channel));
  return stub;
}

GRPCECatTask::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetMasterStatus_(GRPCECatTask_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSlaveStatus_(GRPCECatTask_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRxDomainStatus_(GRPCECatTask_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTxDomainStatus_(GRPCECatTask_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsSystemReady_(GRPCECatTask_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetServoOnOff_(GRPCECatTask_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRxPDOMotorDriver_(GRPCECatTask_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRxPDOMotorDriver_(GRPCECatTask_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTxPDOMotorDriver_(GRPCECatTask_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMotorDriverDIs_(GRPCECatTask_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetErrorCode_(GRPCECatTask_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMaxTorque_(GRPCECatTask_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMaxTorque_(GRPCECatTask_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMaxMotorSpeed_(GRPCECatTask_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMaxMotorSpeed_(GRPCECatTask_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNRMKIOBoardOutput_(GRPCECatTask_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNRMKIOBoardInput_(GRPCECatTask_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNRMKIOBoardOutput_(GRPCECatTask_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNRMKEndtoolOutput_(GRPCECatTask_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNRMKEndtoolInput_(GRPCECatTask_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNRMKEndtoolRevCDTInput_(GRPCECatTask_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDO_(GRPCECatTask_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDI_(GRPCECatTask_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDO_(GRPCECatTask_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRobotusFTSensor_(GRPCECatTask_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetWelconDriver_(GRPCECatTask_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCOREErrorCodeSDO_(GRPCECatTask_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCORETemperature1SDO_(GRPCECatTask_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCORETemperature2SDO_(GRPCECatTask_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCORETemperature3SDO_(GRPCECatTask_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNRMKFWVersionSDO_(GRPCECatTask_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMaxTorqueSDO_(GRPCECatTask_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProfileVelocitySDO_(GRPCECatTask_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProfileAccSDO_(GRPCECatTask_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProfileDecSDO_(GRPCECatTask_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMaxTorqueSDO_(GRPCECatTask_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProfileVelocitySDO_(GRPCECatTask_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProfileAccSDO_(GRPCECatTask_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetProfileDecSDO_(GRPCECatTask_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GRPCECatTask::Stub::GetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMasterStatus_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMasterStatus_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetMasterStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMasterStatus_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMasterStatus_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetMasterStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMasterStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::AsyncGetMasterStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetMasterStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::PrepareAsyncGetMasterStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetMasterStatus_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVals* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSlaveStatus_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSlaveStatus_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetSlaveStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVals* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSlaveStatus_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSlaveStatus_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetSlaveStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSlaveStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>* GRPCECatTask::Stub::AsyncGetSlaveStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVals>::Create(channel_.get(), cq, rpcmethod_GetSlaveStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>* GRPCECatTask::Stub::PrepareAsyncGetSlaveStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVals>::Create(channel_.get(), cq, rpcmethod_GetSlaveStatus_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRxDomainStatus_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRxDomainStatus_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetRxDomainStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRxDomainStatus_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRxDomainStatus_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetRxDomainStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRxDomainStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::AsyncGetRxDomainStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetRxDomainStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::PrepareAsyncGetRxDomainStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetRxDomainStatus_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTxDomainStatus_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTxDomainStatus_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetTxDomainStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTxDomainStatus_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTxDomainStatus_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetTxDomainStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTxDomainStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::AsyncGetTxDomainStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetTxDomainStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::PrepareAsyncGetTxDomainStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetTxDomainStatus_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::IsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVals* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsSystemReady_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::IsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsSystemReady_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::IsSystemReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVals* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsSystemReady_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::IsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsSystemReady_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::IsSystemReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsSystemReady_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>* GRPCECatTask::Stub::AsyncIsSystemReadyRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVals>::Create(channel_.get(), cq, rpcmethod_IsSystemReady_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>* GRPCECatTask::Stub::PrepareAsyncIsSystemReadyRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVals>::Create(channel_.get(), cq, rpcmethod_IsSystemReady_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::SetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::GRPCECat::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetServoOnOff_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::SetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetServoOnOff_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetServoOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetServoOnOff_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetServoOnOff_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::SetServoOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetServoOnOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::AsyncSetServoOnOffRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetServoOnOff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::PrepareAsyncSetServoOnOffRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetServoOnOff_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::GRPCECat::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRxPDOMotorDriver_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRxPDOMotorDriver_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRxPDOMotorDriver_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRxPDOMotorDriver_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRxPDOMotorDriver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::AsyncSetRxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetRxPDOMotorDriver_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::PrepareAsyncSetRxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetRxPDOMotorDriver_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::MotorDriverRx* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRxPDOMotorDriver_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverRx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRxPDOMotorDriver_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::MotorDriverRx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRxPDOMotorDriver_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRxPDOMotorDriver_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::MotorDriverRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRxPDOMotorDriver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverRx>* GRPCECatTask::Stub::AsyncGetRxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::MotorDriverRx>::Create(channel_.get(), cq, rpcmethod_GetRxPDOMotorDriver_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverRx>* GRPCECatTask::Stub::PrepareAsyncGetRxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::MotorDriverRx>::Create(channel_.get(), cq, rpcmethod_GetRxPDOMotorDriver_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::MotorDriverTx* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTxPDOMotorDriver_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTxPDOMotorDriver_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::MotorDriverTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTxPDOMotorDriver_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTxPDOMotorDriver_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::MotorDriverTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTxPDOMotorDriver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverTx>* GRPCECatTask::Stub::AsyncGetTxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::MotorDriverTx>::Create(channel_.get(), cq, rpcmethod_GetTxPDOMotorDriver_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverTx>* GRPCECatTask::Stub::PrepareAsyncGetTxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::MotorDriverTx>::Create(channel_.get(), cq, rpcmethod_GetTxPDOMotorDriver_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMotorDriverDIs_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMotorDriverDIs_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetMotorDriverDIs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMotorDriverDIs_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMotorDriverDIs_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetMotorDriverDIs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMotorDriverDIs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::AsyncGetMotorDriverDIsRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetMotorDriverDIs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::PrepareAsyncGetMotorDriverDIsRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetMotorDriverDIs_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetErrorCode_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetErrorCode_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetErrorCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetErrorCode_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetErrorCode_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetErrorCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetErrorCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::AsyncGetErrorCodeRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetErrorCode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::PrepareAsyncGetErrorCodeRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetErrorCode_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMaxTorque_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMaxTorque_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetMaxTorque(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMaxTorque_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMaxTorque_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetMaxTorque(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMaxTorque_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::AsyncGetMaxTorqueRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetMaxTorque_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::PrepareAsyncGetMaxTorqueRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetMaxTorque_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::SetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMaxTorque_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::SetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMaxTorque_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetMaxTorque(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMaxTorque_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMaxTorque_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::SetMaxTorque(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMaxTorque_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::AsyncSetMaxTorqueRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetMaxTorque_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::PrepareAsyncSetMaxTorqueRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetMaxTorque_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMaxMotorSpeed_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMaxMotorSpeed_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetMaxMotorSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMaxMotorSpeed_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMaxMotorSpeed_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetMaxMotorSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMaxMotorSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::AsyncGetMaxMotorSpeedRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetMaxMotorSpeed_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::PrepareAsyncGetMaxMotorSpeedRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetMaxMotorSpeed_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::SetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMaxMotorSpeed_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::SetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMaxMotorSpeed_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetMaxMotorSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMaxMotorSpeed_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMaxMotorSpeed_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::SetMaxMotorSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMaxMotorSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::AsyncSetMaxMotorSpeedRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetMaxMotorSpeed_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::PrepareAsyncSetMaxMotorSpeedRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetMaxMotorSpeed_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::GRPCECat::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetNRMKIOBoardOutput_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetNRMKIOBoardOutput_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetNRMKIOBoardOutput_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetNRMKIOBoardOutput_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetNRMKIOBoardOutput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::AsyncSetNRMKIOBoardOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetNRMKIOBoardOutput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::PrepareAsyncSetNRMKIOBoardOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetNRMKIOBoardOutput_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IOBoardTx* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNRMKIOBoardInput_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNRMKIOBoardInput_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IOBoardTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNRMKIOBoardInput_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNRMKIOBoardInput_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IOBoardTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNRMKIOBoardInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardTx>* GRPCECatTask::Stub::AsyncGetNRMKIOBoardInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IOBoardTx>::Create(channel_.get(), cq, rpcmethod_GetNRMKIOBoardInput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardTx>* GRPCECatTask::Stub::PrepareAsyncGetNRMKIOBoardInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IOBoardTx>::Create(channel_.get(), cq, rpcmethod_GetNRMKIOBoardInput_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IOBoardRx* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNRMKIOBoardOutput_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardRx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNRMKIOBoardOutput_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IOBoardRx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNRMKIOBoardOutput_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNRMKIOBoardOutput_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IOBoardRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNRMKIOBoardOutput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardRx>* GRPCECatTask::Stub::AsyncGetNRMKIOBoardOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IOBoardRx>::Create(channel_.get(), cq, rpcmethod_GetNRMKIOBoardOutput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardRx>* GRPCECatTask::Stub::PrepareAsyncGetNRMKIOBoardOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IOBoardRx>::Create(channel_.get(), cq, rpcmethod_GetNRMKIOBoardOutput_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::GRPCECat::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetNRMKEndtoolOutput_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetNRMKEndtoolOutput_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetNRMKEndtoolOutput_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetNRMKEndtoolOutput_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetNRMKEndtoolOutput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::AsyncSetNRMKEndtoolOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetNRMKEndtoolOutput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::PrepareAsyncSetNRMKEndtoolOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetNRMKEndtoolOutput_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::EndtoolTx* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNRMKEndtoolInput_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNRMKEndtoolInput_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::EndtoolTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNRMKEndtoolInput_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNRMKEndtoolInput_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::EndtoolTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNRMKEndtoolInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolTx>* GRPCECatTask::Stub::AsyncGetNRMKEndtoolInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::EndtoolTx>::Create(channel_.get(), cq, rpcmethod_GetNRMKEndtoolInput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolTx>* GRPCECatTask::Stub::PrepareAsyncGetNRMKEndtoolInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::EndtoolTx>::Create(channel_.get(), cq, rpcmethod_GetNRMKEndtoolInput_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::EndtoolRevCDTTx* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNRMKEndtoolRevCDTInput_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolRevCDTTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNRMKEndtoolRevCDTInput_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::EndtoolRevCDTTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNRMKEndtoolRevCDTInput_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolRevCDTTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNRMKEndtoolRevCDTInput_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::EndtoolRevCDTTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNRMKEndtoolRevCDTInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolRevCDTTx>* GRPCECatTask::Stub::AsyncGetNRMKEndtoolRevCDTInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::EndtoolRevCDTTx>::Create(channel_.get(), cq, rpcmethod_GetNRMKEndtoolRevCDTInput_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolRevCDTTx>* GRPCECatTask::Stub::PrepareAsyncGetNRMKEndtoolRevCDTInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::EndtoolRevCDTTx>::Create(channel_.get(), cq, rpcmethod_GetNRMKEndtoolRevCDTInput_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::SetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::GRPCECat::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::SetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::SetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::AsyncSetDORaw(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::PrepareAsyncSetDORaw(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::DIList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDI_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DIList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDI_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::DIList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDI_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DIList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDI_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::DIList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::DIList>* GRPCECatTask::Stub::AsyncGetDIRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::DIList>::Create(channel_.get(), cq, rpcmethod_GetDI_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::DIList>* GRPCECatTask::Stub::PrepareAsyncGetDIRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::DIList>::Create(channel_.get(), cq, rpcmethod_GetDI_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::DOList* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DOList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::DOList* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DOList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::DOList* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::DOList>* GRPCECatTask::Stub::AsyncGetDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::DOList>::Create(channel_.get(), cq, rpcmethod_GetDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::DOList>* GRPCECatTask::Stub::PrepareAsyncGetDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::DOList>::Create(channel_.get(), cq, rpcmethod_GetDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::RobotusFTTx* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRobotusFTSensor_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::RobotusFTTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRobotusFTSensor_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetRobotusFTSensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::RobotusFTTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRobotusFTSensor_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::RobotusFTTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRobotusFTSensor_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetRobotusFTSensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::RobotusFTTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRobotusFTSensor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::RobotusFTTx>* GRPCECatTask::Stub::AsyncGetRobotusFTSensorRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::RobotusFTTx>::Create(channel_.get(), cq, rpcmethod_GetRobotusFTSensor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::RobotusFTTx>* GRPCECatTask::Stub::PrepareAsyncGetRobotusFTSensorRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::RobotusFTTx>::Create(channel_.get(), cq, rpcmethod_GetRobotusFTSensor_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::ResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResetWelconDriver_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::ResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetWelconDriver_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::ResetWelconDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetWelconDriver_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::ResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetWelconDriver_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::ResetWelconDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetWelconDriver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::AsyncResetWelconDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_ResetWelconDriver_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::PrepareAsyncResetWelconDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_ResetWelconDriver_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCOREErrorCodeSDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCOREErrorCodeSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCOREErrorCodeSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCOREErrorCodeSDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCOREErrorCodeSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::AsyncGetCOREErrorCodeSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetCOREErrorCodeSDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::PrepareAsyncGetCOREErrorCodeSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetCOREErrorCodeSDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::FloatVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCORETemperature1SDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCORETemperature1SDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetCORETemperature1SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCORETemperature1SDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCORETemperature1SDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetCORETemperature1SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCORETemperature1SDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>* GRPCECatTask::Stub::AsyncGetCORETemperature1SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::FloatVal>::Create(channel_.get(), cq, rpcmethod_GetCORETemperature1SDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>* GRPCECatTask::Stub::PrepareAsyncGetCORETemperature1SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::FloatVal>::Create(channel_.get(), cq, rpcmethod_GetCORETemperature1SDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::FloatVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCORETemperature2SDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCORETemperature2SDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetCORETemperature2SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCORETemperature2SDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCORETemperature2SDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetCORETemperature2SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCORETemperature2SDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>* GRPCECatTask::Stub::AsyncGetCORETemperature2SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::FloatVal>::Create(channel_.get(), cq, rpcmethod_GetCORETemperature2SDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>* GRPCECatTask::Stub::PrepareAsyncGetCORETemperature2SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::FloatVal>::Create(channel_.get(), cq, rpcmethod_GetCORETemperature2SDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::FloatVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCORETemperature3SDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCORETemperature3SDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetCORETemperature3SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCORETemperature3SDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCORETemperature3SDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetCORETemperature3SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCORETemperature3SDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>* GRPCECatTask::Stub::AsyncGetCORETemperature3SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::FloatVal>::Create(channel_.get(), cq, rpcmethod_GetCORETemperature3SDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>* GRPCECatTask::Stub::PrepareAsyncGetCORETemperature3SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::FloatVal>::Create(channel_.get(), cq, rpcmethod_GetCORETemperature3SDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::StringVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNRMKFWVersionSDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::StringVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNRMKFWVersionSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::StringVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNRMKFWVersionSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::StringVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNRMKFWVersionSDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::StringVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNRMKFWVersionSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::StringVal>* GRPCECatTask::Stub::AsyncGetNRMKFWVersionSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::StringVal>::Create(channel_.get(), cq, rpcmethod_GetNRMKFWVersionSDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::StringVal>* GRPCECatTask::Stub::PrepareAsyncGetNRMKFWVersionSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::StringVal>::Create(channel_.get(), cq, rpcmethod_GetNRMKFWVersionSDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMaxTorqueSDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMaxTorqueSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetMaxTorqueSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMaxTorqueSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMaxTorqueSDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetMaxTorqueSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMaxTorqueSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::AsyncGetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetMaxTorqueSDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::PrepareAsyncGetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetMaxTorqueSDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProfileVelocitySDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProfileVelocitySDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetProfileVelocitySDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProfileVelocitySDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProfileVelocitySDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetProfileVelocitySDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProfileVelocitySDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::AsyncGetProfileVelocitySDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetProfileVelocitySDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::PrepareAsyncGetProfileVelocitySDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetProfileVelocitySDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProfileAccSDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProfileAccSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetProfileAccSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProfileAccSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProfileAccSDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetProfileAccSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProfileAccSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::AsyncGetProfileAccSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetProfileAccSDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::PrepareAsyncGetProfileAccSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetProfileAccSDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::GetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProfileDecSDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::GetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProfileDecSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetProfileDecSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProfileDecSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::GetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProfileDecSDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::GetProfileDecSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProfileDecSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::AsyncGetProfileDecSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetProfileDecSDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* GRPCECatTask::Stub::PrepareAsyncGetProfileDecSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::IntVal>::Create(channel_.get(), cq, rpcmethod_GetProfileDecSDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::SetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMaxTorqueSDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::SetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMaxTorqueSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetMaxTorqueSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMaxTorqueSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMaxTorqueSDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::SetMaxTorqueSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMaxTorqueSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::AsyncSetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetMaxTorqueSDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::PrepareAsyncSetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetMaxTorqueSDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::SetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetProfileVelocitySDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::SetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetProfileVelocitySDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetProfileVelocitySDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetProfileVelocitySDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetProfileVelocitySDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::SetProfileVelocitySDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetProfileVelocitySDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::AsyncSetProfileVelocitySDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetProfileVelocitySDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::PrepareAsyncSetProfileVelocitySDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetProfileVelocitySDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::SetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetProfileAccSDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::SetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetProfileAccSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetProfileAccSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetProfileAccSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetProfileAccSDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::SetProfileAccSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetProfileAccSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::AsyncSetProfileAccSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetProfileAccSDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::PrepareAsyncSetProfileAccSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetProfileAccSDO_, context, request, false);
}

::grpc::Status GRPCECatTask::Stub::SetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetProfileDecSDO_, context, request, response);
}

void GRPCECatTask::Stub::experimental_async::SetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetProfileDecSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetProfileDecSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetProfileDecSDO_, context, request, response, std::move(f));
}

void GRPCECatTask::Stub::experimental_async::SetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetProfileDecSDO_, context, request, response, reactor);
}

void GRPCECatTask::Stub::experimental_async::SetProfileDecSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetProfileDecSDO_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::AsyncSetProfileDecSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetProfileDecSDO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* GRPCECatTask::Stub::PrepareAsyncSetProfileDecSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCECat::Empty>::Create(channel_.get(), cq, rpcmethod_SetProfileDecSDO_, context, request, false);
}

GRPCECatTask::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::Empty, ::GRPCECat::IntVal>(
          std::mem_fn(&GRPCECatTask::Service::GetMasterStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::Empty, ::GRPCECat::IntVals>(
          std::mem_fn(&GRPCECatTask::Service::GetSlaveStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::Empty, ::GRPCECat::IntVal>(
          std::mem_fn(&GRPCECatTask::Service::GetRxDomainStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::Empty, ::GRPCECat::IntVal>(
          std::mem_fn(&GRPCECatTask::Service::GetTxDomainStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::Empty, ::GRPCECat::IntVals>(
          std::mem_fn(&GRPCECatTask::Service::IsSystemReady), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::ServoIndex, ::GRPCECat::Empty>(
          std::mem_fn(&GRPCECatTask::Service::SetServoOnOff), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::MotorDriverRxIndex, ::GRPCECat::Empty>(
          std::mem_fn(&GRPCECatTask::Service::SetRxPDOMotorDriver), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::MotorDriverRx>(
          std::mem_fn(&GRPCECatTask::Service::GetRxPDOMotorDriver), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::MotorDriverTx>(
          std::mem_fn(&GRPCECatTask::Service::GetTxPDOMotorDriver), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          std::mem_fn(&GRPCECatTask::Service::GetMotorDriverDIs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          std::mem_fn(&GRPCECatTask::Service::GetErrorCode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          std::mem_fn(&GRPCECatTask::Service::GetMaxTorque), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::ServoParam, ::GRPCECat::Empty>(
          std::mem_fn(&GRPCECatTask::Service::SetMaxTorque), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          std::mem_fn(&GRPCECatTask::Service::GetMaxMotorSpeed), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::ServoParam, ::GRPCECat::Empty>(
          std::mem_fn(&GRPCECatTask::Service::SetMaxMotorSpeed), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IOBoardRx, ::GRPCECat::Empty>(
          std::mem_fn(&GRPCECatTask::Service::SetNRMKIOBoardOutput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::Empty, ::GRPCECat::IOBoardTx>(
          std::mem_fn(&GRPCECatTask::Service::GetNRMKIOBoardInput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::Empty, ::GRPCECat::IOBoardRx>(
          std::mem_fn(&GRPCECatTask::Service::GetNRMKIOBoardOutput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::EndtoolRx, ::GRPCECat::Empty>(
          std::mem_fn(&GRPCECatTask::Service::SetNRMKEndtoolOutput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::Empty, ::GRPCECat::EndtoolTx>(
          std::mem_fn(&GRPCECatTask::Service::GetNRMKEndtoolInput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::Empty, ::GRPCECat::EndtoolRevCDTTx>(
          std::mem_fn(&GRPCECatTask::Service::GetNRMKEndtoolRevCDTInput), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::DOList, ::GRPCECat::Empty>(
          std::mem_fn(&GRPCECatTask::Service::SetDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::DIList>(
          std::mem_fn(&GRPCECatTask::Service::GetDI), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::DOList>(
          std::mem_fn(&GRPCECatTask::Service::GetDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::RobotusFTTx>(
          std::mem_fn(&GRPCECatTask::Service::GetRobotusFTSensor), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::Empty>(
          std::mem_fn(&GRPCECatTask::Service::ResetWelconDriver), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          std::mem_fn(&GRPCECatTask::Service::GetCOREErrorCodeSDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::FloatVal>(
          std::mem_fn(&GRPCECatTask::Service::GetCORETemperature1SDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::FloatVal>(
          std::mem_fn(&GRPCECatTask::Service::GetCORETemperature2SDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::FloatVal>(
          std::mem_fn(&GRPCECatTask::Service::GetCORETemperature3SDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::StringVal>(
          std::mem_fn(&GRPCECatTask::Service::GetNRMKFWVersionSDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          std::mem_fn(&GRPCECatTask::Service::GetMaxTorqueSDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          std::mem_fn(&GRPCECatTask::Service::GetProfileVelocitySDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          std::mem_fn(&GRPCECatTask::Service::GetProfileAccSDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          std::mem_fn(&GRPCECatTask::Service::GetProfileDecSDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::ServoParam, ::GRPCECat::Empty>(
          std::mem_fn(&GRPCECatTask::Service::SetMaxTorqueSDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::ServoParam, ::GRPCECat::Empty>(
          std::mem_fn(&GRPCECatTask::Service::SetProfileVelocitySDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::ServoParam, ::GRPCECat::Empty>(
          std::mem_fn(&GRPCECatTask::Service::SetProfileAccSDO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCECatTask_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCECatTask::Service, ::GRPCECat::ServoParam, ::GRPCECat::Empty>(
          std::mem_fn(&GRPCECatTask::Service::SetProfileDecSDO), this)));
}

GRPCECatTask::Service::~Service() {
}

::grpc::Status GRPCECatTask::Service::GetMasterStatus(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetSlaveStatus(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetRxDomainStatus(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetTxDomainStatus(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::IsSystemReady(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::SetServoOnOff(::grpc::ServerContext* context, const ::GRPCECat::ServoIndex* request, ::GRPCECat::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::SetRxPDOMotorDriver(::grpc::ServerContext* context, const ::GRPCECat::MotorDriverRxIndex* request, ::GRPCECat::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetRxPDOMotorDriver(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverRx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetTxPDOMotorDriver(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetMotorDriverDIs(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetErrorCode(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetMaxTorque(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::SetMaxTorque(::grpc::ServerContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetMaxMotorSpeed(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::SetMaxMotorSpeed(::grpc::ServerContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::SetNRMKIOBoardOutput(::grpc::ServerContext* context, const ::GRPCECat::IOBoardRx* request, ::GRPCECat::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetNRMKIOBoardInput(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetNRMKIOBoardOutput(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardRx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::SetNRMKEndtoolOutput(::grpc::ServerContext* context, const ::GRPCECat::EndtoolRx* request, ::GRPCECat::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetNRMKEndtoolInput(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetNRMKEndtoolRevCDTInput(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolRevCDTTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::SetDO(::grpc::ServerContext* context, const ::GRPCECat::DOList* request, ::GRPCECat::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetDI(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DIList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DOList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetRobotusFTSensor(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::RobotusFTTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::ResetWelconDriver(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetCOREErrorCodeSDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetCORETemperature1SDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetCORETemperature2SDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetCORETemperature3SDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetNRMKFWVersionSDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::StringVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetMaxTorqueSDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetProfileVelocitySDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetProfileAccSDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::GetProfileDecSDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::SetMaxTorqueSDO(::grpc::ServerContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::SetProfileVelocitySDO(::grpc::ServerContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::SetProfileAccSDO(::grpc::ServerContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCECatTask::Service::SetProfileDecSDO(::grpc::ServerContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GRPCECat

