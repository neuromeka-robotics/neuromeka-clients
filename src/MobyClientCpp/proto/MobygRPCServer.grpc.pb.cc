// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MobygRPCServer.proto

#include "MobygRPCServer.pb.h"
#include "MobygRPCServer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GRPCMoby {

static const char* GRPCMobyTask_method_names[] = {
  "/GRPCMoby.GRPCMobyTask/GetMobyTxData",
  "/GRPCMoby.GRPCMobyTask/GetMobyRxData",
  "/GRPCMoby.GRPCMobyTask/GetMobyState",
  "/GRPCMoby.GRPCMobyTask/GetMobyErrorState",
  "/GRPCMoby.GRPCMobyTask/Recover",
  "/GRPCMoby.GRPCMobyTask/GetMobyPose",
  "/GRPCMoby.GRPCMobyTask/GetMobyVel",
  "/GRPCMoby.GRPCMobyTask/ResetMobyPose",
  "/GRPCMoby.GRPCMobyTask/GetRotationAngleDeg",
  "/GRPCMoby.GRPCMobyTask/GetDriveSpeed",
  "/GRPCMoby.GRPCMobyTask/GetTargetVel",
  "/GRPCMoby.GRPCMobyTask/GetRotationZeroCount",
  "/GRPCMoby.GRPCMobyTask/GetCMode",
  "/GRPCMoby.GRPCMobyTask/GetGyroData",
  "/GRPCMoby.GRPCMobyTask/ResetGyroSensor",
  "/GRPCMoby.GRPCMobyTask/UseGyroForOdom",
  "/GRPCMoby.GRPCMobyTask/GetGyroFullData",
  "/GRPCMoby.GRPCMobyTask/GetIRSensorData",
  "/GRPCMoby.GRPCMobyTask/GetUSSensorData",
  "/GRPCMoby.GRPCMobyTask/GetBMSData",
  "/GRPCMoby.GRPCMobyTask/SetStepControl",
  "/GRPCMoby.GRPCMobyTask/StopMotion",
  "/GRPCMoby.GRPCMobyTask/SetRotationAngleDeg",
  "/GRPCMoby.GRPCMobyTask/DriveWheel",
  "/GRPCMoby.GRPCMobyTask/SetZeroPosAsCurrentPos",
  "/GRPCMoby.GRPCMobyTask/SetRotationVelAcc",
  "/GRPCMoby.GRPCMobyTask/SetRotationInterpolator",
  "/GRPCMoby.GRPCMobyTask/SetDriveAccDec",
  "/GRPCMoby.GRPCMobyTask/SetDriveInterpolatorOnOff",
  "/GRPCMoby.GRPCMobyTask/SetRotationInterpolatorParam",
  "/GRPCMoby.GRPCMobyTask/SetRotationControllerType",
  "/GRPCMoby.GRPCMobyTask/TurnLightOnOff",
  "/GRPCMoby.GRPCMobyTask/TurnBuzzOnOff",
  "/GRPCMoby.GRPCMobyTask/GetRobotZeroCount",
  "/GRPCMoby.GRPCMobyTask/SetRobotZeroAsCurrent",
  "/GRPCMoby.GRPCMobyTask/SetRotationTorqueMode",
  "/GRPCMoby.GRPCMobyTask/SetControlParam",
  "/GRPCMoby.GRPCMobyTask/GetControlParam",
  "/GRPCMoby.GRPCMobyTask/StartRTLogging",
  "/GRPCMoby.GRPCMobyTask/EndRTLogging",
  "/GRPCMoby.GRPCMobyTask/SetLoggerBuffer",
  "/GRPCMoby.GRPCMobyTask/RTLoggerSave",
};

std::unique_ptr< GRPCMobyTask::Stub> GRPCMobyTask::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GRPCMobyTask::Stub> stub(new GRPCMobyTask::Stub(channel));
  return stub;
}

GRPCMobyTask::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetMobyTxData_(GRPCMobyTask_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMobyRxData_(GRPCMobyTask_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMobyState_(GRPCMobyTask_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMobyErrorState_(GRPCMobyTask_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Recover_(GRPCMobyTask_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMobyPose_(GRPCMobyTask_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMobyVel_(GRPCMobyTask_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetMobyPose_(GRPCMobyTask_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRotationAngleDeg_(GRPCMobyTask_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDriveSpeed_(GRPCMobyTask_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTargetVel_(GRPCMobyTask_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRotationZeroCount_(GRPCMobyTask_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCMode_(GRPCMobyTask_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGyroData_(GRPCMobyTask_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetGyroSensor_(GRPCMobyTask_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UseGyroForOdom_(GRPCMobyTask_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGyroFullData_(GRPCMobyTask_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIRSensorData_(GRPCMobyTask_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUSSensorData_(GRPCMobyTask_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBMSData_(GRPCMobyTask_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetStepControl_(GRPCMobyTask_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopMotion_(GRPCMobyTask_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRotationAngleDeg_(GRPCMobyTask_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DriveWheel_(GRPCMobyTask_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetZeroPosAsCurrentPos_(GRPCMobyTask_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRotationVelAcc_(GRPCMobyTask_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRotationInterpolator_(GRPCMobyTask_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDriveAccDec_(GRPCMobyTask_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDriveInterpolatorOnOff_(GRPCMobyTask_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRotationInterpolatorParam_(GRPCMobyTask_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRotationControllerType_(GRPCMobyTask_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TurnLightOnOff_(GRPCMobyTask_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TurnBuzzOnOff_(GRPCMobyTask_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRobotZeroCount_(GRPCMobyTask_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRobotZeroAsCurrent_(GRPCMobyTask_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRotationTorqueMode_(GRPCMobyTask_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetControlParam_(GRPCMobyTask_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetControlParam_(GRPCMobyTask_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartRTLogging_(GRPCMobyTask_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndRTLogging_(GRPCMobyTask_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLoggerBuffer_(GRPCMobyTask_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RTLoggerSave_(GRPCMobyTask_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GRPCMobyTask::Stub::GetMobyTxData(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::GRPCMoby::MotorDriverTx* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMobyTxData_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetMobyTxData(::grpc::ClientContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::MotorDriverTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMobyTxData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetMobyTxData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::MotorDriverTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMobyTxData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetMobyTxData(::grpc::ClientContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::MotorDriverTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMobyTxData_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetMobyTxData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::MotorDriverTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMobyTxData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::MotorDriverTx>* GRPCMobyTask::Stub::AsyncGetMobyTxDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::MotorDriverTx>::Create(channel_.get(), cq, rpcmethod_GetMobyTxData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::MotorDriverTx>* GRPCMobyTask::Stub::PrepareAsyncGetMobyTxDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::MotorDriverTx>::Create(channel_.get(), cq, rpcmethod_GetMobyTxData_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetMobyRxData(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::GRPCMoby::MotorDriverRx* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMobyRxData_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetMobyRxData(::grpc::ClientContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::MotorDriverRx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMobyRxData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetMobyRxData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::MotorDriverRx* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMobyRxData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetMobyRxData(::grpc::ClientContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::MotorDriverRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMobyRxData_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetMobyRxData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::MotorDriverRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMobyRxData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::MotorDriverRx>* GRPCMobyTask::Stub::AsyncGetMobyRxDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::MotorDriverRx>::Create(channel_.get(), cq, rpcmethod_GetMobyRxData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::MotorDriverRx>* GRPCMobyTask::Stub::PrepareAsyncGetMobyRxDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::MotorDriverRx>::Create(channel_.get(), cq, rpcmethod_GetMobyRxData_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetMobyState(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::MobyState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMobyState_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetMobyState(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::MobyState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMobyState_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetMobyState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::MobyState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMobyState_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetMobyState(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::MobyState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMobyState_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetMobyState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::MobyState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMobyState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::MobyState>* GRPCMobyTask::Stub::AsyncGetMobyStateRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::MobyState>::Create(channel_.get(), cq, rpcmethod_GetMobyState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::MobyState>* GRPCMobyTask::Stub::PrepareAsyncGetMobyStateRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::MobyState>::Create(channel_.get(), cq, rpcmethod_GetMobyState_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetMobyErrorState(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::MobyErrorState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMobyErrorState_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetMobyErrorState(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::MobyErrorState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMobyErrorState_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetMobyErrorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::MobyErrorState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMobyErrorState_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetMobyErrorState(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::MobyErrorState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMobyErrorState_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetMobyErrorState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::MobyErrorState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMobyErrorState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::MobyErrorState>* GRPCMobyTask::Stub::AsyncGetMobyErrorStateRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::MobyErrorState>::Create(channel_.get(), cq, rpcmethod_GetMobyErrorState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::MobyErrorState>* GRPCMobyTask::Stub::PrepareAsyncGetMobyErrorStateRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::MobyErrorState>::Create(channel_.get(), cq, rpcmethod_GetMobyErrorState_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::Recover(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Recover_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::Recover(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Recover_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncRecoverRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_Recover_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncRecoverRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_Recover_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetMobyPose(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::MobyPose* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMobyPose_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetMobyPose(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::MobyPose* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMobyPose_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetMobyPose(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::MobyPose* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMobyPose_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetMobyPose(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::MobyPose* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMobyPose_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetMobyPose(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::MobyPose* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMobyPose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::MobyPose>* GRPCMobyTask::Stub::AsyncGetMobyPoseRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::MobyPose>::Create(channel_.get(), cq, rpcmethod_GetMobyPose_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::MobyPose>* GRPCMobyTask::Stub::PrepareAsyncGetMobyPoseRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::MobyPose>::Create(channel_.get(), cq, rpcmethod_GetMobyPose_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetMobyVel(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::MobyVel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMobyVel_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetMobyVel(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::MobyVel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMobyVel_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetMobyVel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::MobyVel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMobyVel_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetMobyVel(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::MobyVel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMobyVel_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetMobyVel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::MobyVel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMobyVel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::MobyVel>* GRPCMobyTask::Stub::AsyncGetMobyVelRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::MobyVel>::Create(channel_.get(), cq, rpcmethod_GetMobyVel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::MobyVel>* GRPCMobyTask::Stub::PrepareAsyncGetMobyVelRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::MobyVel>::Create(channel_.get(), cq, rpcmethod_GetMobyVel_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::ResetMobyPose(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResetMobyPose_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::ResetMobyPose(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetMobyPose_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::ResetMobyPose(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetMobyPose_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::ResetMobyPose(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetMobyPose_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::ResetMobyPose(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetMobyPose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncResetMobyPoseRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_ResetMobyPose_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncResetMobyPoseRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_ResetMobyPose_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetRotationAngleDeg(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::SwerveDoubles* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRotationAngleDeg_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetRotationAngleDeg(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::SwerveDoubles* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRotationAngleDeg_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetRotationAngleDeg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::SwerveDoubles* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRotationAngleDeg_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetRotationAngleDeg(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::SwerveDoubles* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRotationAngleDeg_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetRotationAngleDeg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::SwerveDoubles* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRotationAngleDeg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::SwerveDoubles>* GRPCMobyTask::Stub::AsyncGetRotationAngleDegRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::SwerveDoubles>::Create(channel_.get(), cq, rpcmethod_GetRotationAngleDeg_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::SwerveDoubles>* GRPCMobyTask::Stub::PrepareAsyncGetRotationAngleDegRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::SwerveDoubles>::Create(channel_.get(), cq, rpcmethod_GetRotationAngleDeg_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetDriveSpeed(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::SwerveDoubles* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDriveSpeed_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetDriveSpeed(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::SwerveDoubles* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDriveSpeed_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetDriveSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::SwerveDoubles* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDriveSpeed_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetDriveSpeed(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::SwerveDoubles* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDriveSpeed_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetDriveSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::SwerveDoubles* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDriveSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::SwerveDoubles>* GRPCMobyTask::Stub::AsyncGetDriveSpeedRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::SwerveDoubles>::Create(channel_.get(), cq, rpcmethod_GetDriveSpeed_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::SwerveDoubles>* GRPCMobyTask::Stub::PrepareAsyncGetDriveSpeedRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::SwerveDoubles>::Create(channel_.get(), cq, rpcmethod_GetDriveSpeed_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetTargetVel(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::TargetVel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTargetVel_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetTargetVel(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::TargetVel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTargetVel_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetTargetVel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::TargetVel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTargetVel_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetTargetVel(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::TargetVel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTargetVel_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetTargetVel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::TargetVel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTargetVel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::TargetVel>* GRPCMobyTask::Stub::AsyncGetTargetVelRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::TargetVel>::Create(channel_.get(), cq, rpcmethod_GetTargetVel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::TargetVel>* GRPCMobyTask::Stub::PrepareAsyncGetTargetVelRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::TargetVel>::Create(channel_.get(), cq, rpcmethod_GetTargetVel_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetRotationZeroCount(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::ZeroCount* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRotationZeroCount_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetRotationZeroCount(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::ZeroCount* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRotationZeroCount_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetRotationZeroCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::ZeroCount* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRotationZeroCount_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetRotationZeroCount(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::ZeroCount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRotationZeroCount_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetRotationZeroCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::ZeroCount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRotationZeroCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::ZeroCount>* GRPCMobyTask::Stub::AsyncGetRotationZeroCountRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::ZeroCount>::Create(channel_.get(), cq, rpcmethod_GetRotationZeroCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::ZeroCount>* GRPCMobyTask::Stub::PrepareAsyncGetRotationZeroCountRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::ZeroCount>::Create(channel_.get(), cq, rpcmethod_GetRotationZeroCount_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetCMode(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::IntVal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCMode_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetCMode(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCMode_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetCMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::IntVal* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCMode_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetCMode(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCMode_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetCMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::IntVal>* GRPCMobyTask::Stub::AsyncGetCModeRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::IntVal>::Create(channel_.get(), cq, rpcmethod_GetCMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::IntVal>* GRPCMobyTask::Stub::PrepareAsyncGetCModeRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::IntVal>::Create(channel_.get(), cq, rpcmethod_GetCMode_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetGyroData(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::DoubleVals* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetGyroData_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetGyroData(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::DoubleVals* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGyroData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetGyroData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::DoubleVals* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGyroData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetGyroData(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::DoubleVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetGyroData_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetGyroData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::DoubleVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetGyroData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::DoubleVals>* GRPCMobyTask::Stub::AsyncGetGyroDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::DoubleVals>::Create(channel_.get(), cq, rpcmethod_GetGyroData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::DoubleVals>* GRPCMobyTask::Stub::PrepareAsyncGetGyroDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::DoubleVals>::Create(channel_.get(), cq, rpcmethod_GetGyroData_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::ResetGyroSensor(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResetGyroSensor_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::ResetGyroSensor(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetGyroSensor_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::ResetGyroSensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetGyroSensor_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::ResetGyroSensor(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetGyroSensor_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::ResetGyroSensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetGyroSensor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncResetGyroSensorRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_ResetGyroSensor_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncResetGyroSensorRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_ResetGyroSensor_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::UseGyroForOdom(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UseGyroForOdom_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::UseGyroForOdom(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UseGyroForOdom_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::UseGyroForOdom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UseGyroForOdom_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::UseGyroForOdom(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UseGyroForOdom_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::UseGyroForOdom(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UseGyroForOdom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncUseGyroForOdomRaw(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_UseGyroForOdom_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncUseGyroForOdomRaw(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_UseGyroForOdom_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetGyroFullData(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::IMUData* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetGyroFullData_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetGyroFullData(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::IMUData* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGyroFullData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetGyroFullData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::IMUData* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGyroFullData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetGyroFullData(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::IMUData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetGyroFullData_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetGyroFullData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::IMUData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetGyroFullData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::IMUData>* GRPCMobyTask::Stub::AsyncGetGyroFullDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::IMUData>::Create(channel_.get(), cq, rpcmethod_GetGyroFullData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::IMUData>* GRPCMobyTask::Stub::PrepareAsyncGetGyroFullDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::IMUData>::Create(channel_.get(), cq, rpcmethod_GetGyroFullData_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetIRSensorData(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::IRData* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIRSensorData_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetIRSensorData(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::IRData* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIRSensorData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetIRSensorData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::IRData* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetIRSensorData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetIRSensorData(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::IRData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetIRSensorData_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetIRSensorData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::IRData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetIRSensorData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::IRData>* GRPCMobyTask::Stub::AsyncGetIRSensorDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::IRData>::Create(channel_.get(), cq, rpcmethod_GetIRSensorData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::IRData>* GRPCMobyTask::Stub::PrepareAsyncGetIRSensorDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::IRData>::Create(channel_.get(), cq, rpcmethod_GetIRSensorData_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetUSSensorData(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::USData* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetUSSensorData_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetUSSensorData(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::USData* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUSSensorData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetUSSensorData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::USData* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUSSensorData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetUSSensorData(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::USData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetUSSensorData_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetUSSensorData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::USData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetUSSensorData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::USData>* GRPCMobyTask::Stub::AsyncGetUSSensorDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::USData>::Create(channel_.get(), cq, rpcmethod_GetUSSensorData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::USData>* GRPCMobyTask::Stub::PrepareAsyncGetUSSensorDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::USData>::Create(channel_.get(), cq, rpcmethod_GetUSSensorData_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetBMSData(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::BMSData* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBMSData_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetBMSData(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::BMSData* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBMSData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetBMSData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::BMSData* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBMSData_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetBMSData(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::BMSData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBMSData_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetBMSData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::BMSData* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBMSData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::BMSData>* GRPCMobyTask::Stub::AsyncGetBMSDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::BMSData>::Create(channel_.get(), cq, rpcmethod_GetBMSData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::BMSData>* GRPCMobyTask::Stub::PrepareAsyncGetBMSDataRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::BMSData>::Create(channel_.get(), cq, rpcmethod_GetBMSData_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetStepControl(::grpc::ClientContext* context, const ::GRPCMoby::TargetVel& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetStepControl_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetStepControl(::grpc::ClientContext* context, const ::GRPCMoby::TargetVel* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetStepControl_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetStepControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetStepControl_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetStepControl(::grpc::ClientContext* context, const ::GRPCMoby::TargetVel* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetStepControl_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetStepControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetStepControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetStepControlRaw(::grpc::ClientContext* context, const ::GRPCMoby::TargetVel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetStepControl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetStepControlRaw(::grpc::ClientContext* context, const ::GRPCMoby::TargetVel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetStepControl_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::StopMotion(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopMotion_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::StopMotion(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopMotion_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::StopMotion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopMotion_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::StopMotion(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopMotion_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::StopMotion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopMotion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncStopMotionRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_StopMotion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncStopMotionRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_StopMotion_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetRotationAngleDeg(::grpc::ClientContext* context, const ::GRPCMoby::SwerveDoubles& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRotationAngleDeg_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetRotationAngleDeg(::grpc::ClientContext* context, const ::GRPCMoby::SwerveDoubles* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRotationAngleDeg_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRotationAngleDeg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRotationAngleDeg_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRotationAngleDeg(::grpc::ClientContext* context, const ::GRPCMoby::SwerveDoubles* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRotationAngleDeg_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetRotationAngleDeg(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRotationAngleDeg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetRotationAngleDegRaw(::grpc::ClientContext* context, const ::GRPCMoby::SwerveDoubles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRotationAngleDeg_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetRotationAngleDegRaw(::grpc::ClientContext* context, const ::GRPCMoby::SwerveDoubles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRotationAngleDeg_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::DriveWheel(::grpc::ClientContext* context, const ::GRPCMoby::SwerveDoubles& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DriveWheel_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::DriveWheel(::grpc::ClientContext* context, const ::GRPCMoby::SwerveDoubles* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DriveWheel_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::DriveWheel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DriveWheel_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::DriveWheel(::grpc::ClientContext* context, const ::GRPCMoby::SwerveDoubles* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DriveWheel_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::DriveWheel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DriveWheel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncDriveWheelRaw(::grpc::ClientContext* context, const ::GRPCMoby::SwerveDoubles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_DriveWheel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncDriveWheelRaw(::grpc::ClientContext* context, const ::GRPCMoby::SwerveDoubles& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_DriveWheel_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetZeroPosAsCurrentPos(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetZeroPosAsCurrentPos_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetZeroPosAsCurrentPos(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetZeroPosAsCurrentPos_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetZeroPosAsCurrentPos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetZeroPosAsCurrentPos_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetZeroPosAsCurrentPos(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetZeroPosAsCurrentPos_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetZeroPosAsCurrentPos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetZeroPosAsCurrentPos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetZeroPosAsCurrentPosRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetZeroPosAsCurrentPos_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetZeroPosAsCurrentPosRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetZeroPosAsCurrentPos_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetRotationVelAcc(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRotationVelAcc_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetRotationVelAcc(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRotationVelAcc_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRotationVelAcc(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRotationVelAcc_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRotationVelAcc(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRotationVelAcc_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetRotationVelAcc(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRotationVelAcc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetRotationVelAccRaw(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRotationVelAcc_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetRotationVelAccRaw(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRotationVelAcc_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetRotationInterpolator(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRotationInterpolator_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetRotationInterpolator(::grpc::ClientContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRotationInterpolator_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRotationInterpolator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRotationInterpolator_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRotationInterpolator(::grpc::ClientContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRotationInterpolator_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetRotationInterpolator(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRotationInterpolator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetRotationInterpolatorRaw(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRotationInterpolator_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetRotationInterpolatorRaw(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRotationInterpolator_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetDriveAccDec(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDriveAccDec_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetDriveAccDec(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDriveAccDec_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetDriveAccDec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDriveAccDec_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetDriveAccDec(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDriveAccDec_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetDriveAccDec(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDriveAccDec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetDriveAccDecRaw(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetDriveAccDec_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetDriveAccDecRaw(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetDriveAccDec_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetDriveInterpolatorOnOff(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetDriveInterpolatorOnOff_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetDriveInterpolatorOnOff(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDriveInterpolatorOnOff_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetDriveInterpolatorOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetDriveInterpolatorOnOff_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetDriveInterpolatorOnOff(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDriveInterpolatorOnOff_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetDriveInterpolatorOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetDriveInterpolatorOnOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetDriveInterpolatorOnOffRaw(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetDriveInterpolatorOnOff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetDriveInterpolatorOnOffRaw(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetDriveInterpolatorOnOff_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetRotationInterpolatorParam(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRotationInterpolatorParam_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetRotationInterpolatorParam(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRotationInterpolatorParam_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRotationInterpolatorParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRotationInterpolatorParam_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRotationInterpolatorParam(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRotationInterpolatorParam_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetRotationInterpolatorParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRotationInterpolatorParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetRotationInterpolatorParamRaw(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRotationInterpolatorParam_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetRotationInterpolatorParamRaw(::grpc::ClientContext* context, const ::GRPCMoby::DoubleVals& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRotationInterpolatorParam_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetRotationControllerType(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRotationControllerType_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetRotationControllerType(::grpc::ClientContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRotationControllerType_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRotationControllerType(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRotationControllerType_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRotationControllerType(::grpc::ClientContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRotationControllerType_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetRotationControllerType(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRotationControllerType_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetRotationControllerTypeRaw(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRotationControllerType_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetRotationControllerTypeRaw(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRotationControllerType_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::TurnLightOnOff(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TurnLightOnOff_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::TurnLightOnOff(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TurnLightOnOff_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::TurnLightOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TurnLightOnOff_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::TurnLightOnOff(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TurnLightOnOff_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::TurnLightOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TurnLightOnOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncTurnLightOnOffRaw(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_TurnLightOnOff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncTurnLightOnOffRaw(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_TurnLightOnOff_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::TurnBuzzOnOff(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TurnBuzzOnOff_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::TurnBuzzOnOff(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TurnBuzzOnOff_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::TurnBuzzOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TurnBuzzOnOff_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::TurnBuzzOnOff(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TurnBuzzOnOff_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::TurnBuzzOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TurnBuzzOnOff_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncTurnBuzzOnOffRaw(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_TurnBuzzOnOff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncTurnBuzzOnOffRaw(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_TurnBuzzOnOff_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetRobotZeroCount(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::RobotZeroCount* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRobotZeroCount_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetRobotZeroCount(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::RobotZeroCount* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRobotZeroCount_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetRobotZeroCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::RobotZeroCount* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRobotZeroCount_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetRobotZeroCount(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::RobotZeroCount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRobotZeroCount_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetRobotZeroCount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::RobotZeroCount* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRobotZeroCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::RobotZeroCount>* GRPCMobyTask::Stub::AsyncGetRobotZeroCountRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::RobotZeroCount>::Create(channel_.get(), cq, rpcmethod_GetRobotZeroCount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::RobotZeroCount>* GRPCMobyTask::Stub::PrepareAsyncGetRobotZeroCountRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::RobotZeroCount>::Create(channel_.get(), cq, rpcmethod_GetRobotZeroCount_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetRobotZeroAsCurrent(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRobotZeroAsCurrent_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetRobotZeroAsCurrent(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRobotZeroAsCurrent_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRobotZeroAsCurrent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRobotZeroAsCurrent_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRobotZeroAsCurrent(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRobotZeroAsCurrent_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetRobotZeroAsCurrent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRobotZeroAsCurrent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetRobotZeroAsCurrentRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRobotZeroAsCurrent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetRobotZeroAsCurrentRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRobotZeroAsCurrent_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetRotationTorqueMode(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRotationTorqueMode_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetRotationTorqueMode(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRotationTorqueMode_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRotationTorqueMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRotationTorqueMode_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetRotationTorqueMode(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRotationTorqueMode_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetRotationTorqueMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRotationTorqueMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetRotationTorqueModeRaw(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRotationTorqueMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetRotationTorqueModeRaw(::grpc::ClientContext* context, const ::GRPCMoby::BoolVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetRotationTorqueMode_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetControlParam(::grpc::ClientContext* context, const ::GRPCMoby::RotationGain& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetControlParam_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetControlParam(::grpc::ClientContext* context, const ::GRPCMoby::RotationGain* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetControlParam_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetControlParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetControlParam_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetControlParam(::grpc::ClientContext* context, const ::GRPCMoby::RotationGain* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetControlParam_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetControlParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetControlParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetControlParamRaw(::grpc::ClientContext* context, const ::GRPCMoby::RotationGain& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetControlParam_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetControlParamRaw(::grpc::ClientContext* context, const ::GRPCMoby::RotationGain& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetControlParam_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::GetControlParam(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::GRPCMoby::RotationGain* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetControlParam_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::GetControlParam(::grpc::ClientContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::RotationGain* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetControlParam_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetControlParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::RotationGain* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetControlParam_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::GetControlParam(::grpc::ClientContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::RotationGain* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetControlParam_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::GetControlParam(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::RotationGain* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetControlParam_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::RotationGain>* GRPCMobyTask::Stub::AsyncGetControlParamRaw(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::RotationGain>::Create(channel_.get(), cq, rpcmethod_GetControlParam_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::RotationGain>* GRPCMobyTask::Stub::PrepareAsyncGetControlParamRaw(::grpc::ClientContext* context, const ::GRPCMoby::IntVal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::RotationGain>::Create(channel_.get(), cq, rpcmethod_GetControlParam_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::StartRTLogging(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartRTLogging_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::StartRTLogging(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartRTLogging_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::StartRTLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartRTLogging_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::StartRTLogging(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartRTLogging_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::StartRTLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartRTLogging_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncStartRTLoggingRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_StartRTLogging_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncStartRTLoggingRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_StartRTLogging_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::EndRTLogging(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EndRTLogging_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::EndRTLogging(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EndRTLogging_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::EndRTLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EndRTLogging_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::EndRTLogging(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EndRTLogging_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::EndRTLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EndRTLogging_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncEndRTLoggingRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_EndRTLogging_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncEndRTLoggingRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_EndRTLogging_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::SetLoggerBuffer(::grpc::ClientContext* context, const ::GRPCMoby::IntVals& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetLoggerBuffer_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::SetLoggerBuffer(::grpc::ClientContext* context, const ::GRPCMoby::IntVals* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetLoggerBuffer_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetLoggerBuffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetLoggerBuffer_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::SetLoggerBuffer(::grpc::ClientContext* context, const ::GRPCMoby::IntVals* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetLoggerBuffer_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::SetLoggerBuffer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetLoggerBuffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncSetLoggerBufferRaw(::grpc::ClientContext* context, const ::GRPCMoby::IntVals& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetLoggerBuffer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncSetLoggerBufferRaw(::grpc::ClientContext* context, const ::GRPCMoby::IntVals& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_SetLoggerBuffer_, context, request, false);
}

::grpc::Status GRPCMobyTask::Stub::RTLoggerSave(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::GRPCMoby::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RTLoggerSave_, context, request, response);
}

void GRPCMobyTask::Stub::experimental_async::RTLoggerSave(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RTLoggerSave_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::RTLoggerSave(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RTLoggerSave_, context, request, response, std::move(f));
}

void GRPCMobyTask::Stub::experimental_async::RTLoggerSave(::grpc::ClientContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RTLoggerSave_, context, request, response, reactor);
}

void GRPCMobyTask::Stub::experimental_async::RTLoggerSave(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCMoby::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RTLoggerSave_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::AsyncRTLoggerSaveRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_RTLoggerSave_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GRPCMoby::Empty>* GRPCMobyTask::Stub::PrepareAsyncRTLoggerSaveRaw(::grpc::ClientContext* context, const ::GRPCMoby::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GRPCMoby::Empty>::Create(channel_.get(), cq, rpcmethod_RTLoggerSave_, context, request, false);
}

GRPCMobyTask::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::IntVal, ::GRPCMoby::MotorDriverTx>(
          std::mem_fn(&GRPCMobyTask::Service::GetMobyTxData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::IntVal, ::GRPCMoby::MotorDriverRx>(
          std::mem_fn(&GRPCMobyTask::Service::GetMobyRxData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::MobyState>(
          std::mem_fn(&GRPCMobyTask::Service::GetMobyState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::MobyErrorState>(
          std::mem_fn(&GRPCMobyTask::Service::GetMobyErrorState), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::Recover), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::MobyPose>(
          std::mem_fn(&GRPCMobyTask::Service::GetMobyPose), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::MobyVel>(
          std::mem_fn(&GRPCMobyTask::Service::GetMobyVel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::ResetMobyPose), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::SwerveDoubles>(
          std::mem_fn(&GRPCMobyTask::Service::GetRotationAngleDeg), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::SwerveDoubles>(
          std::mem_fn(&GRPCMobyTask::Service::GetDriveSpeed), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::TargetVel>(
          std::mem_fn(&GRPCMobyTask::Service::GetTargetVel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::ZeroCount>(
          std::mem_fn(&GRPCMobyTask::Service::GetRotationZeroCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::IntVal>(
          std::mem_fn(&GRPCMobyTask::Service::GetCMode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::DoubleVals>(
          std::mem_fn(&GRPCMobyTask::Service::GetGyroData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::ResetGyroSensor), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::BoolVal, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::UseGyroForOdom), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::IMUData>(
          std::mem_fn(&GRPCMobyTask::Service::GetGyroFullData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::IRData>(
          std::mem_fn(&GRPCMobyTask::Service::GetIRSensorData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::USData>(
          std::mem_fn(&GRPCMobyTask::Service::GetUSSensorData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::BMSData>(
          std::mem_fn(&GRPCMobyTask::Service::GetBMSData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::TargetVel, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetStepControl), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::StopMotion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::SwerveDoubles, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetRotationAngleDeg), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::SwerveDoubles, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::DriveWheel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetZeroPosAsCurrentPos), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::DoubleVals, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetRotationVelAcc), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::IntVal, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetRotationInterpolator), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::DoubleVals, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetDriveAccDec), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::BoolVal, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetDriveInterpolatorOnOff), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::DoubleVals, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetRotationInterpolatorParam), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::IntVal, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetRotationControllerType), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::BoolVal, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::TurnLightOnOff), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::BoolVal, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::TurnBuzzOnOff), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::RobotZeroCount>(
          std::mem_fn(&GRPCMobyTask::Service::GetRobotZeroCount), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetRobotZeroAsCurrent), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::BoolVal, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetRotationTorqueMode), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::RotationGain, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetControlParam), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::IntVal, ::GRPCMoby::RotationGain>(
          std::mem_fn(&GRPCMobyTask::Service::GetControlParam), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::StartRTLogging), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::EndRTLogging), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::IntVals, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::SetLoggerBuffer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GRPCMobyTask_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GRPCMobyTask::Service, ::GRPCMoby::Empty, ::GRPCMoby::Empty>(
          std::mem_fn(&GRPCMobyTask::Service::RTLoggerSave), this)));
}

GRPCMobyTask::Service::~Service() {
}

::grpc::Status GRPCMobyTask::Service::GetMobyTxData(::grpc::ServerContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::MotorDriverTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetMobyRxData(::grpc::ServerContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::MotorDriverRx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetMobyState(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::MobyState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetMobyErrorState(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::MobyErrorState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::Recover(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetMobyPose(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::MobyPose* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetMobyVel(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::MobyVel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::ResetMobyPose(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetRotationAngleDeg(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::SwerveDoubles* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetDriveSpeed(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::SwerveDoubles* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetTargetVel(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::TargetVel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetRotationZeroCount(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::ZeroCount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetCMode(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::IntVal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetGyroData(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::DoubleVals* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::ResetGyroSensor(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::UseGyroForOdom(::grpc::ServerContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetGyroFullData(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::IMUData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetIRSensorData(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::IRData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetUSSensorData(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::USData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetBMSData(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::BMSData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetStepControl(::grpc::ServerContext* context, const ::GRPCMoby::TargetVel* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::StopMotion(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetRotationAngleDeg(::grpc::ServerContext* context, const ::GRPCMoby::SwerveDoubles* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::DriveWheel(::grpc::ServerContext* context, const ::GRPCMoby::SwerveDoubles* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetZeroPosAsCurrentPos(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetRotationVelAcc(::grpc::ServerContext* context, const ::GRPCMoby::DoubleVals* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetRotationInterpolator(::grpc::ServerContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetDriveAccDec(::grpc::ServerContext* context, const ::GRPCMoby::DoubleVals* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetDriveInterpolatorOnOff(::grpc::ServerContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetRotationInterpolatorParam(::grpc::ServerContext* context, const ::GRPCMoby::DoubleVals* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetRotationControllerType(::grpc::ServerContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::TurnLightOnOff(::grpc::ServerContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::TurnBuzzOnOff(::grpc::ServerContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetRobotZeroCount(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::RobotZeroCount* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetRobotZeroAsCurrent(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetRotationTorqueMode(::grpc::ServerContext* context, const ::GRPCMoby::BoolVal* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetControlParam(::grpc::ServerContext* context, const ::GRPCMoby::RotationGain* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::GetControlParam(::grpc::ServerContext* context, const ::GRPCMoby::IntVal* request, ::GRPCMoby::RotationGain* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::StartRTLogging(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::EndRTLogging(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::SetLoggerBuffer(::grpc::ServerContext* context, const ::GRPCMoby::IntVals* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GRPCMobyTask::Service::RTLoggerSave(::grpc::ServerContext* context, const ::GRPCMoby::Empty* request, ::GRPCMoby::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GRPCMoby

