// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EtherCATCommgRPCServer.proto

#include "EtherCATCommgRPCServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_EtherCATCommgRPCServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FTsensorTx_EtherCATCommgRPCServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_EtherCATCommgRPCServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotorDriverRx_EtherCATCommgRPCServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_EtherCATCommgRPCServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotorDriverTx_EtherCATCommgRPCServer_2eproto;
namespace GRPCECat {
class EmptyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class ServoIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServoIndex> _instance;
} _ServoIndex_default_instance_;
class MotorDriverTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotorDriverTx> _instance;
} _MotorDriverTx_default_instance_;
class MotorDriverRxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotorDriverRx> _instance;
} _MotorDriverRx_default_instance_;
class PanasonicDriverTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PanasonicDriverTx> _instance;
} _PanasonicDriverTx_default_instance_;
class PanasonicDriverRxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PanasonicDriverRx> _instance;
} _PanasonicDriverRx_default_instance_;
class MotorDriverTxIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotorDriverTxIndex> _instance;
} _MotorDriverTxIndex_default_instance_;
class MotorDriverRxIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotorDriverRxIndex> _instance;
} _MotorDriverRxIndex_default_instance_;
class ServoParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServoParam> _instance;
} _ServoParam_default_instance_;
class FTsensorTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FTsensorTx> _instance;
} _FTsensorTx_default_instance_;
class IOBoardTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IOBoardTx> _instance;
} _IOBoardTx_default_instance_;
class IOBoardRxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IOBoardRx> _instance;
} _IOBoardRx_default_instance_;
class EndtoolTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndtoolTx> _instance;
} _EndtoolTx_default_instance_;
class EndtoolRxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndtoolRx> _instance;
} _EndtoolRx_default_instance_;
class EndtoolRevCDTTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndtoolRevCDTTx> _instance;
} _EndtoolRevCDTTx_default_instance_;
class DIListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DIList> _instance;
} _DIList_default_instance_;
class DOListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DOList> _instance;
} _DOList_default_instance_;
class RobotusFTTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotusFTTx> _instance;
} _RobotusFTTx_default_instance_;
class TargetPosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetPos> _instance;
} _TargetPos_default_instance_;
class IntValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntVal> _instance;
} _IntVal_default_instance_;
class IntValsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntVals> _instance;
} _IntVals_default_instance_;
class FloatValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatVal> _instance;
} _FloatVal_default_instance_;
class FloatValsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatVals> _instance;
} _FloatVals_default_instance_;
class StringValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringVal> _instance;
} _StringVal_default_instance_;
class DoubleValsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleVals> _instance;
} _DoubleVals_default_instance_;
class VelAccBoundaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VelAccBoundary> _instance;
} _VelAccBoundary_default_instance_;
}  // namespace GRPCECat
static void InitDefaultsscc_info_DIList_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_DIList_default_instance_;
    new (ptr) ::GRPCECat::DIList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::DIList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DIList_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DIList_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_DOList_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_DOList_default_instance_;
    new (ptr) ::GRPCECat::DOList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::DOList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DOList_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DOList_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_DoubleVals_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_DoubleVals_default_instance_;
    new (ptr) ::GRPCECat::DoubleVals();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::DoubleVals::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleVals_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DoubleVals_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_Empty_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_Empty_default_instance_;
    new (ptr) ::GRPCECat::Empty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::Empty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Empty_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_EndtoolRevCDTTx_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_EndtoolRevCDTTx_default_instance_;
    new (ptr) ::GRPCECat::EndtoolRevCDTTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::EndtoolRevCDTTx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndtoolRevCDTTx_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EndtoolRevCDTTx_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_EndtoolRx_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_EndtoolRx_default_instance_;
    new (ptr) ::GRPCECat::EndtoolRx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::EndtoolRx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndtoolRx_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EndtoolRx_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_EndtoolTx_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_EndtoolTx_default_instance_;
    new (ptr) ::GRPCECat::EndtoolTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::EndtoolTx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndtoolTx_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EndtoolTx_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_FTsensorTx_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_FTsensorTx_default_instance_;
    new (ptr) ::GRPCECat::FTsensorTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::FTsensorTx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FTsensorTx_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FTsensorTx_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_FloatVal_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_FloatVal_default_instance_;
    new (ptr) ::GRPCECat::FloatVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::FloatVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVal_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FloatVal_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_FloatVals_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_FloatVals_default_instance_;
    new (ptr) ::GRPCECat::FloatVals();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::FloatVals::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVals_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FloatVals_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_IOBoardRx_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_IOBoardRx_default_instance_;
    new (ptr) ::GRPCECat::IOBoardRx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::IOBoardRx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IOBoardRx_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IOBoardRx_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_IOBoardTx_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_IOBoardTx_default_instance_;
    new (ptr) ::GRPCECat::IOBoardTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::IOBoardTx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IOBoardTx_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IOBoardTx_EtherCATCommgRPCServer_2eproto}, {
      &scc_info_FTsensorTx_EtherCATCommgRPCServer_2eproto.base,}};

static void InitDefaultsscc_info_IntVal_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_IntVal_default_instance_;
    new (ptr) ::GRPCECat::IntVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::IntVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntVal_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IntVal_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_IntVals_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_IntVals_default_instance_;
    new (ptr) ::GRPCECat::IntVals();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::IntVals::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntVals_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IntVals_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_MotorDriverRx_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_MotorDriverRx_default_instance_;
    new (ptr) ::GRPCECat::MotorDriverRx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::MotorDriverRx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotorDriverRx_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MotorDriverRx_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_MotorDriverRxIndex_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_MotorDriverRxIndex_default_instance_;
    new (ptr) ::GRPCECat::MotorDriverRxIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::MotorDriverRxIndex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MotorDriverRxIndex_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MotorDriverRxIndex_EtherCATCommgRPCServer_2eproto}, {
      &scc_info_MotorDriverRx_EtherCATCommgRPCServer_2eproto.base,}};

static void InitDefaultsscc_info_MotorDriverTx_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_MotorDriverTx_default_instance_;
    new (ptr) ::GRPCECat::MotorDriverTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::MotorDriverTx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotorDriverTx_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MotorDriverTx_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_MotorDriverTxIndex_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_MotorDriverTxIndex_default_instance_;
    new (ptr) ::GRPCECat::MotorDriverTxIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::MotorDriverTxIndex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MotorDriverTxIndex_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MotorDriverTxIndex_EtherCATCommgRPCServer_2eproto}, {
      &scc_info_MotorDriverTx_EtherCATCommgRPCServer_2eproto.base,}};

static void InitDefaultsscc_info_PanasonicDriverRx_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_PanasonicDriverRx_default_instance_;
    new (ptr) ::GRPCECat::PanasonicDriverRx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::PanasonicDriverRx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PanasonicDriverRx_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PanasonicDriverRx_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_PanasonicDriverTx_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_PanasonicDriverTx_default_instance_;
    new (ptr) ::GRPCECat::PanasonicDriverTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::PanasonicDriverTx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PanasonicDriverTx_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PanasonicDriverTx_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_RobotusFTTx_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_RobotusFTTx_default_instance_;
    new (ptr) ::GRPCECat::RobotusFTTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::RobotusFTTx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RobotusFTTx_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RobotusFTTx_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_ServoIndex_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_ServoIndex_default_instance_;
    new (ptr) ::GRPCECat::ServoIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::ServoIndex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServoIndex_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServoIndex_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_ServoParam_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_ServoParam_default_instance_;
    new (ptr) ::GRPCECat::ServoParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::ServoParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServoParam_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServoParam_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_StringVal_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_StringVal_default_instance_;
    new (ptr) ::GRPCECat::StringVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::StringVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringVal_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StringVal_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_TargetPos_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_TargetPos_default_instance_;
    new (ptr) ::GRPCECat::TargetPos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::TargetPos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetPos_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TargetPos_EtherCATCommgRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_VelAccBoundary_EtherCATCommgRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCECat::_VelAccBoundary_default_instance_;
    new (ptr) ::GRPCECat::VelAccBoundary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCECat::VelAccBoundary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelAccBoundary_EtherCATCommgRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VelAccBoundary_EtherCATCommgRPCServer_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_EtherCATCommgRPCServer_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_EtherCATCommgRPCServer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_EtherCATCommgRPCServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_EtherCATCommgRPCServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::ServoIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::ServoIndex, ecatindex_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::ServoIndex, servostate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverTx, statusword_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverTx, modeopdisp_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverTx, actualposition_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverTx, actualvelocity_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverTx, actualtorque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverRx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverRx, controlword_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverRx, modeop_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverRx, targetposition_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverRx, targetvelocity_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverRx, targettorque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverTx, statusword_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverTx, modeopdisp_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverTx, actualposition_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverTx, actualvelocity_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverTx, actualtorque_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverTx, errorcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverRx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverRx, controlword_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverRx, modeop_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverRx, targetposition_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverRx, targetvelocity_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverRx, targettorque_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverRx, maxtorque_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverRx, maxmotorspeed_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::PanasonicDriverRx, touchprobe_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverTxIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverTxIndex, slaveidx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverTxIndex, motordrivertx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverRxIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverRxIndex, slaveidx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::MotorDriverRxIndex, motordriverrx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::ServoParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::ServoParam, slaveidx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::ServoParam, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::FTsensorTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::FTsensorTx, fx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::FTsensorTx, fy_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::FTsensorTx, fz_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::FTsensorTx, tx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::FTsensorTx, ty_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::FTsensorTx, tz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardTx, di_5v_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardTx, di1_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardTx, di2_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardTx, ai1_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardTx, ai2_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardTx, ft_sensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardRx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardRx, do_5v_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardRx, do1_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardRx, do2_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardRx, ao1_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardRx, ao2_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IOBoardRx, ft_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolTx, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRx, eqc_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRx, gripper_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, status_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, docking_status_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, docking_button_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, docking_dist1_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, docking_dist2_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, docking_dist3_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, docking_dist4_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, docking_dist5_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, docking_dist6_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, docking_dist7_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, docking_dist8_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, direct_status_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, direct_button_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, direct_encoder_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, direct_joystic1x_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, direct_joystic1y_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, direct_joystic2x_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, direct_joystic2y_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, ft_status_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, ft_button_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, ft_fx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, ft_fy_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, ft_fz_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, ft_tx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, ft_ty_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::EndtoolRevCDTTx, ft_tz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::DIList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::DIList, idx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::DIList, di_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::DOList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::DOList, idx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::DOList, do_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::RobotusFTTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::RobotusFTTx, fx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::RobotusFTTx, fy_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::RobotusFTTx, fz_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::RobotusFTTx, tx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::RobotusFTTx, ty_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::RobotusFTTx, tz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::TargetPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::TargetPos, idx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::TargetPos, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IntVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IntVal, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IntVals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::IntVals, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::FloatVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::FloatVal, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::FloatVals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::FloatVals, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::StringVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::StringVal, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::DoubleVals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::DoubleVals, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::VelAccBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCECat::VelAccBoundary, idx_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::VelAccBoundary, vmax_),
  PROTOBUF_FIELD_OFFSET(::GRPCECat::VelAccBoundary, amax_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GRPCECat::Empty)},
  { 5, -1, sizeof(::GRPCECat::ServoIndex)},
  { 12, -1, sizeof(::GRPCECat::MotorDriverTx)},
  { 22, -1, sizeof(::GRPCECat::MotorDriverRx)},
  { 32, -1, sizeof(::GRPCECat::PanasonicDriverTx)},
  { 43, -1, sizeof(::GRPCECat::PanasonicDriverRx)},
  { 56, -1, sizeof(::GRPCECat::MotorDriverTxIndex)},
  { 63, -1, sizeof(::GRPCECat::MotorDriverRxIndex)},
  { 70, -1, sizeof(::GRPCECat::ServoParam)},
  { 77, -1, sizeof(::GRPCECat::FTsensorTx)},
  { 88, -1, sizeof(::GRPCECat::IOBoardTx)},
  { 99, -1, sizeof(::GRPCECat::IOBoardRx)},
  { 110, -1, sizeof(::GRPCECat::EndtoolTx)},
  { 116, -1, sizeof(::GRPCECat::EndtoolRx)},
  { 123, -1, sizeof(::GRPCECat::EndtoolRevCDTTx)},
  { 154, -1, sizeof(::GRPCECat::DIList)},
  { 161, -1, sizeof(::GRPCECat::DOList)},
  { 168, -1, sizeof(::GRPCECat::RobotusFTTx)},
  { 179, -1, sizeof(::GRPCECat::TargetPos)},
  { 186, -1, sizeof(::GRPCECat::IntVal)},
  { 192, -1, sizeof(::GRPCECat::IntVals)},
  { 198, -1, sizeof(::GRPCECat::FloatVal)},
  { 204, -1, sizeof(::GRPCECat::FloatVals)},
  { 210, -1, sizeof(::GRPCECat::StringVal)},
  { 216, -1, sizeof(::GRPCECat::DoubleVals)},
  { 222, -1, sizeof(::GRPCECat::VelAccBoundary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_ServoIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_MotorDriverTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_MotorDriverRx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_PanasonicDriverTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_PanasonicDriverRx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_MotorDriverTxIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_MotorDriverRxIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_ServoParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_FTsensorTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_IOBoardTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_IOBoardRx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_EndtoolTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_EndtoolRx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_EndtoolRevCDTTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_DIList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_DOList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_RobotusFTTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_TargetPos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_IntVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_IntVals_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_FloatVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_FloatVals_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_StringVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_DoubleVals_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCECat::_VelAccBoundary_default_instance_),
};

const char descriptor_table_protodef_EtherCATCommgRPCServer_2eproto[] =
  "\n\034EtherCATCommgRPCServer.proto\022\010GRPCECat"
  "\"\007\n\005Empty\"3\n\nServoIndex\022\021\n\tecatIndex\030\001 \001"
  "(\005\022\022\n\nservoState\030\002 \001(\010\"}\n\rMotorDriverTx\022"
  "\022\n\nstatusWord\030\001 \001(\r\022\022\n\nmodeOpDisp\030\002 \001(\005\022"
  "\026\n\016actualPosition\030\003 \001(\005\022\026\n\016actualVelocit"
  "y\030\004 \001(\005\022\024\n\014actualTorque\030\005 \001(\005\"z\n\rMotorDr"
  "iverRx\022\023\n\013controlWord\030\001 \001(\r\022\016\n\006modeOp\030\002 "
  "\001(\005\022\026\n\016targetPosition\030\003 \001(\005\022\026\n\016targetVel"
  "ocity\030\004 \001(\005\022\024\n\014targetTorque\030\005 \001(\005\"\224\001\n\021Pa"
  "nasonicDriverTx\022\022\n\nstatusWord\030\001 \001(\r\022\022\n\nm"
  "odeOpDisp\030\002 \001(\005\022\026\n\016actualPosition\030\003 \001(\005\022"
  "\026\n\016actualVelocity\030\004 \001(\005\022\024\n\014actualTorque\030"
  "\005 \001(\005\022\021\n\terrorCode\030\006 \001(\r\"\274\001\n\021PanasonicDr"
  "iverRx\022\023\n\013controlWord\030\001 \001(\r\022\016\n\006modeOp\030\002 "
  "\001(\005\022\026\n\016targetPosition\030\003 \001(\005\022\026\n\016targetVel"
  "ocity\030\004 \001(\005\022\024\n\014targetTorque\030\005 \001(\005\022\021\n\tmax"
  "Torque\030\006 \001(\005\022\025\n\rmaxMotorSpeed\030\007 \001(\005\022\022\n\nt"
  "ouchProbe\030\010 \001(\005\"V\n\022MotorDriverTxIndex\022\020\n"
  "\010slaveIdx\030\001 \001(\r\022.\n\rmotorDriverTx\030\002 \001(\0132\027"
  ".GRPCECat.MotorDriverTx\"V\n\022MotorDriverRx"
  "Index\022\020\n\010slaveIdx\030\001 \001(\r\022.\n\rmotorDriverRx"
  "\030\002 \001(\0132\027.GRPCECat.MotorDriverRx\"+\n\nServo"
  "Param\022\020\n\010slaveIdx\030\001 \001(\r\022\013\n\003val\030\002 \001(\005\"T\n\n"
  "FTsensorTx\022\n\n\002fx\030\001 \001(\005\022\n\n\002fy\030\002 \001(\005\022\n\n\002fz"
  "\030\003 \001(\005\022\n\n\002tx\030\004 \001(\005\022\n\n\002ty\030\005 \001(\005\022\n\n\002tz\030\006 \001"
  "(\005\"w\n\tIOBoardTx\022\r\n\005di_5v\030\001 \001(\r\022\013\n\003di1\030\002 "
  "\001(\r\022\013\n\003di2\030\003 \001(\r\022\013\n\003ai1\030\004 \001(\r\022\013\n\003ai2\030\005 \001"
  "(\r\022\'\n\tft_sensor\030\006 \001(\0132\024.GRPCECat.FTsenso"
  "rTx\"`\n\tIOBoardRx\022\r\n\005do_5v\030\001 \001(\r\022\013\n\003do1\030\002"
  " \001(\r\022\013\n\003do2\030\003 \001(\r\022\013\n\003ao1\030\004 \001(\r\022\013\n\003ao2\030\005 "
  "\001(\r\022\020\n\010ft_param\030\006 \001(\r\"\033\n\tEndtoolTx\022\016\n\006st"
  "atus\030\001 \001(\005\")\n\tEndtoolRx\022\013\n\003eqc\030\001 \001(\005\022\017\n\007"
  "gripper\030\002 \001(\005\"\267\004\n\017EndtoolRevCDTTx\022\016\n\006sta"
  "tus\030\001 \001(\005\022\026\n\016docking_status\030\002 \001(\005\022\026\n\016doc"
  "king_button\030\003 \001(\005\022\025\n\rdocking_dist1\030\004 \001(\005"
  "\022\025\n\rdocking_dist2\030\005 \001(\005\022\025\n\rdocking_dist3"
  "\030\006 \001(\005\022\025\n\rdocking_dist4\030\007 \001(\005\022\025\n\rdocking"
  "_dist5\030\010 \001(\005\022\025\n\rdocking_dist6\030\t \001(\005\022\025\n\rd"
  "ocking_dist7\030\n \001(\005\022\025\n\rdocking_dist8\030\013 \001("
  "\005\022\025\n\rdirect_status\030\014 \001(\005\022\025\n\rdirect_butto"
  "n\030\r \001(\005\022\026\n\016direct_encoder\030\016 \001(\005\022\030\n\020direc"
  "t_joystic1x\030\017 \001(\005\022\030\n\020direct_joystic1y\030\020 "
  "\001(\005\022\030\n\020direct_joystic2x\030\021 \001(\005\022\030\n\020direct_"
  "joystic2y\030\022 \001(\005\022\021\n\tft_status\030\023 \001(\005\022\021\n\tft"
  "_button\030\024 \001(\005\022\r\n\005ft_fx\030\025 \001(\005\022\r\n\005ft_fy\030\026 "
  "\001(\005\022\r\n\005ft_fz\030\027 \001(\005\022\r\n\005ft_tx\030\030 \001(\005\022\r\n\005ft_"
  "ty\030\031 \001(\005\022\r\n\005ft_tz\030\032 \001(\005\"&\n\006DIList\022\013\n\003idx"
  "\030\001 \001(\005\022\017\n\007di_list\030\002 \003(\005\"&\n\006DOList\022\013\n\003idx"
  "\030\001 \001(\005\022\017\n\007do_list\030\002 \003(\005\"U\n\013RobotusFTTx\022\n"
  "\n\002fx\030\001 \001(\002\022\n\n\002fy\030\002 \001(\002\022\n\n\002fz\030\003 \001(\002\022\n\n\002tx"
  "\030\004 \001(\002\022\n\n\002ty\030\005 \001(\002\022\n\n\002tz\030\006 \001(\002\"%\n\tTarget"
  "Pos\022\013\n\003idx\030\001 \001(\005\022\013\n\003pos\030\002 \001(\002\"\025\n\006IntVal\022"
  "\013\n\003val\030\001 \001(\005\"\026\n\007IntVals\022\013\n\003val\030\001 \003(\005\"\027\n\010"
  "FloatVal\022\013\n\003val\030\001 \001(\002\"\030\n\tFloatVals\022\013\n\003va"
  "l\030\001 \003(\002\"\030\n\tStringVal\022\013\n\003val\030\001 \001(\t\"\031\n\nDou"
  "bleVals\022\013\n\003val\030\001 \003(\001\"9\n\016VelAccBoundary\022\013"
  "\n\003idx\030\001 \001(\005\022\014\n\004vmax\030\002 \001(\002\022\014\n\004amax\030\003 \001(\0022"
  "\254\023\n\014GRPCECatTask\0226\n\017GetMasterStatus\022\017.GR"
  "PCECat.Empty\032\020.GRPCECat.IntVal\"\000\0226\n\016GetS"
  "laveStatus\022\017.GRPCECat.Empty\032\021.GRPCECat.I"
  "ntVals\"\000\0228\n\021GetRxDomainStatus\022\017.GRPCECat"
  ".Empty\032\020.GRPCECat.IntVal\"\000\0228\n\021GetTxDomai"
  "nStatus\022\017.GRPCECat.Empty\032\020.GRPCECat.IntV"
  "al\"\000\0225\n\rIsSystemReady\022\017.GRPCECat.Empty\032\021"
  ".GRPCECat.IntVals\"\000\0221\n\tIsServoOn\022\017.GRPCE"
  "Cat.Empty\032\021.GRPCECat.IntVals\"\000\0228\n\rSetSer"
  "voOnOff\022\024.GRPCECat.ServoIndex\032\017.GRPCECat"
  ".Empty\"\000\022F\n\023SetRxPDOMotorDriver\022\034.GRPCEC"
  "at.MotorDriverRxIndex\032\017.GRPCECat.Empty\"\000"
  "\022B\n\023GetRxPDOMotorDriver\022\020.GRPCECat.IntVa"
  "l\032\027.GRPCECat.MotorDriverRx\"\000\022B\n\023GetTxPDO"
  "MotorDriver\022\020.GRPCECat.IntVal\032\027.GRPCECat"
  ".MotorDriverTx\"\000\0229\n\021GetMotorDriverDIs\022\020."
  "GRPCECat.IntVal\032\020.GRPCECat.IntVal\"\000\0224\n\014G"
  "etErrorCode\022\020.GRPCECat.IntVal\032\020.GRPCECat"
  ".IntVal\"\000\0224\n\014GetMaxTorque\022\020.GRPCECat.Int"
  "Val\032\020.GRPCECat.IntVal\"\000\0227\n\014SetMaxTorque\022"
  "\024.GRPCECat.ServoParam\032\017.GRPCECat.Empty\"\000"
  "\0228\n\020GetMaxMotorSpeed\022\020.GRPCECat.IntVal\032\020"
  ".GRPCECat.IntVal\"\000\022;\n\020SetMaxMotorSpeed\022\024"
  ".GRPCECat.ServoParam\032\017.GRPCECat.Empty\"\000\022"
  ">\n\024SetNRMKIOBoardOutput\022\023.GRPCECat.IOBoa"
  "rdRx\032\017.GRPCECat.Empty\"\000\022=\n\023GetNRMKIOBoar"
  "dInput\022\017.GRPCECat.Empty\032\023.GRPCECat.IOBoa"
  "rdTx\"\000\022>\n\024GetNRMKIOBoardOutput\022\017.GRPCECa"
  "t.Empty\032\023.GRPCECat.IOBoardRx\"\000\022:\n\020SetNRM"
  "KEndtoolRx\022\023.GRPCECat.EndtoolRx\032\017.GRPCEC"
  "at.Empty\"\000\022:\n\020GetNRMKEndtoolRx\022\017.GRPCECa"
  "t.Empty\032\023.GRPCECat.EndtoolRx\"\000\022=\n\023GetNRM"
  "KEndtoolInput\022\017.GRPCECat.Empty\032\023.GRPCECa"
  "t.EndtoolTx\"\000\022I\n\031GetNRMKEndtoolRevCDTInp"
  "ut\022\017.GRPCECat.Empty\032\031.GRPCECat.EndtoolRe"
  "vCDTTx\"\000\022,\n\005SetDO\022\020.GRPCECat.DOList\032\017.GR"
  "PCECat.Empty\"\000\022-\n\005GetDI\022\020.GRPCECat.IntVa"
  "l\032\020.GRPCECat.DIList\"\000\022-\n\005GetDO\022\020.GRPCECa"
  "t.IntVal\032\020.GRPCECat.DOList\"\000\022\?\n\022GetRobot"
  "usFTSensor\022\020.GRPCECat.IntVal\032\025.GRPCECat."
  "RobotusFTTx\"\000\0228\n\021ResetWelconDriver\022\020.GRP"
  "CECat.IntVal\032\017.GRPCECat.Empty\"\000\022;\n\023GetCO"
  "REErrorCodeSDO\022\020.GRPCECat.IntVal\032\020.GRPCE"
  "Cat.IntVal\"\000\022@\n\026GetCORETemperature1SDO\022\020"
  ".GRPCECat.IntVal\032\022.GRPCECat.FloatVal\"\000\022@"
  "\n\026GetCORETemperature2SDO\022\020.GRPCECat.IntV"
  "al\032\022.GRPCECat.FloatVal\"\000\022@\n\026GetCORETempe"
  "rature3SDO\022\020.GRPCECat.IntVal\032\022.GRPCECat."
  "FloatVal\"\000\022>\n\023GetNRMKFWVersionSDO\022\020.GRPC"
  "ECat.IntVal\032\023.GRPCECat.StringVal\"\000\0227\n\017Ge"
  "tMaxTorqueSDO\022\020.GRPCECat.IntVal\032\020.GRPCEC"
  "at.IntVal\"\000\022=\n\025GetProfileVelocitySDO\022\020.G"
  "RPCECat.IntVal\032\020.GRPCECat.IntVal\"\000\0228\n\020Ge"
  "tProfileAccSDO\022\020.GRPCECat.IntVal\032\020.GRPCE"
  "Cat.IntVal\"\000\0228\n\020GetProfileDecSDO\022\020.GRPCE"
  "Cat.IntVal\032\020.GRPCECat.IntVal\"\000\022:\n\017SetMax"
  "TorqueSDO\022\024.GRPCECat.ServoParam\032\017.GRPCEC"
  "at.Empty\"\000\022@\n\025SetProfileVelocitySDO\022\024.GR"
  "PCECat.ServoParam\032\017.GRPCECat.Empty\"\000\022;\n\020"
  "SetProfileAccSDO\022\024.GRPCECat.ServoParam\032\017"
  ".GRPCECat.Empty\"\000\022;\n\020SetProfileDecSDO\022\024."
  "GRPCECat.ServoParam\032\017.GRPCECat.Empty\"\000b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_EtherCATCommgRPCServer_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_EtherCATCommgRPCServer_2eproto_sccs[26] = {
  &scc_info_DIList_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_DOList_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_DoubleVals_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_Empty_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_EndtoolRevCDTTx_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_EndtoolRx_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_EndtoolTx_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_FTsensorTx_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_FloatVal_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_FloatVals_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_IOBoardRx_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_IOBoardTx_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_IntVal_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_IntVals_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_MotorDriverRx_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_MotorDriverRxIndex_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_MotorDriverTx_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_MotorDriverTxIndex_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_PanasonicDriverRx_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_PanasonicDriverTx_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_RobotusFTTx_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_ServoIndex_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_ServoParam_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_StringVal_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_TargetPos_EtherCATCommgRPCServer_2eproto.base,
  &scc_info_VelAccBoundary_EtherCATCommgRPCServer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_EtherCATCommgRPCServer_2eproto_once;
static bool descriptor_table_EtherCATCommgRPCServer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EtherCATCommgRPCServer_2eproto = {
  &descriptor_table_EtherCATCommgRPCServer_2eproto_initialized, descriptor_table_protodef_EtherCATCommgRPCServer_2eproto, "EtherCATCommgRPCServer.proto", 4766,
  &descriptor_table_EtherCATCommgRPCServer_2eproto_once, descriptor_table_EtherCATCommgRPCServer_2eproto_sccs, descriptor_table_EtherCATCommgRPCServer_2eproto_deps, 26, 0,
  schemas, file_default_instances, TableStruct_EtherCATCommgRPCServer_2eproto::offsets,
  file_level_metadata_EtherCATCommgRPCServer_2eproto, 26, file_level_enum_descriptors_EtherCATCommgRPCServer_2eproto, file_level_service_descriptors_EtherCATCommgRPCServer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_EtherCATCommgRPCServer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_EtherCATCommgRPCServer_2eproto), true);
namespace GRPCECat {

// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GRPCECat.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:GRPCECat.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Empty_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Empty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.Empty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.Empty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Empty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.Empty)
}

::PROTOBUF_NAMESPACE_ID::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.Empty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServoIndex::InitAsDefaultInstance() {
}
class ServoIndex::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoIndex::kEcatIndexFieldNumber;
const int ServoIndex::kServoStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoIndex::ServoIndex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.ServoIndex)
}
ServoIndex::ServoIndex(const ServoIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ecatindex_, &from.ecatindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&servostate_) -
    reinterpret_cast<char*>(&ecatindex_)) + sizeof(servostate_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.ServoIndex)
}

void ServoIndex::SharedCtor() {
  ::memset(&ecatindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servostate_) -
      reinterpret_cast<char*>(&ecatindex_)) + sizeof(servostate_));
}

ServoIndex::~ServoIndex() {
  // @@protoc_insertion_point(destructor:GRPCECat.ServoIndex)
  SharedDtor();
}

void ServoIndex::SharedDtor() {
}

void ServoIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServoIndex& ServoIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServoIndex_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void ServoIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.ServoIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ecatindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servostate_) -
      reinterpret_cast<char*>(&ecatindex_)) + sizeof(servostate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServoIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ecatIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ecatindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool servoState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          servostate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServoIndex::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.ServoIndex)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ecatIndex = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ecatindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool servoState = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &servostate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.ServoIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.ServoIndex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServoIndex::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.ServoIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ecatIndex = 1;
  if (this->ecatindex() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ecatindex(), output);
  }

  // bool servoState = 2;
  if (this->servostate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->servostate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.ServoIndex)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServoIndex::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.ServoIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ecatIndex = 1;
  if (this->ecatindex() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ecatindex(), target);
  }

  // bool servoState = 2;
  if (this->servostate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->servostate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.ServoIndex)
  return target;
}

size_t ServoIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.ServoIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ecatIndex = 1;
  if (this->ecatindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ecatindex());
  }

  // bool servoState = 2;
  if (this->servostate() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.ServoIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServoIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.ServoIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.ServoIndex)
    MergeFrom(*source);
  }
}

void ServoIndex::MergeFrom(const ServoIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.ServoIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ecatindex() != 0) {
    set_ecatindex(from.ecatindex());
  }
  if (from.servostate() != 0) {
    set_servostate(from.servostate());
  }
}

void ServoIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.ServoIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoIndex::CopyFrom(const ServoIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.ServoIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoIndex::IsInitialized() const {
  return true;
}

void ServoIndex::Swap(ServoIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoIndex::InternalSwap(ServoIndex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ecatindex_, other->ecatindex_);
  swap(servostate_, other->servostate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServoIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotorDriverTx::InitAsDefaultInstance() {
}
class MotorDriverTx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotorDriverTx::kStatusWordFieldNumber;
const int MotorDriverTx::kModeOpDispFieldNumber;
const int MotorDriverTx::kActualPositionFieldNumber;
const int MotorDriverTx::kActualVelocityFieldNumber;
const int MotorDriverTx::kActualTorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorDriverTx::MotorDriverTx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.MotorDriverTx)
}
MotorDriverTx::MotorDriverTx(const MotorDriverTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&statusword_, &from.statusword_,
    static_cast<size_t>(reinterpret_cast<char*>(&actualtorque_) -
    reinterpret_cast<char*>(&statusword_)) + sizeof(actualtorque_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.MotorDriverTx)
}

void MotorDriverTx::SharedCtor() {
  ::memset(&statusword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actualtorque_) -
      reinterpret_cast<char*>(&statusword_)) + sizeof(actualtorque_));
}

MotorDriverTx::~MotorDriverTx() {
  // @@protoc_insertion_point(destructor:GRPCECat.MotorDriverTx)
  SharedDtor();
}

void MotorDriverTx::SharedDtor() {
}

void MotorDriverTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotorDriverTx& MotorDriverTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotorDriverTx_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void MotorDriverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.MotorDriverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&statusword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actualtorque_) -
      reinterpret_cast<char*>(&statusword_)) + sizeof(actualtorque_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotorDriverTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 statusWord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          statusword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 modeOpDisp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          modeopdisp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actualPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          actualposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actualVelocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          actualvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actualTorque = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          actualtorque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotorDriverTx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.MotorDriverTx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 statusWord = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statusword_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 modeOpDisp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeopdisp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actualPosition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actualVelocity = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actualTorque = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualtorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.MotorDriverTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.MotorDriverTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotorDriverTx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.MotorDriverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->statusword() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->statusword(), output);
  }

  // int32 modeOpDisp = 2;
  if (this->modeopdisp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->modeopdisp(), output);
  }

  // int32 actualPosition = 3;
  if (this->actualposition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->actualposition(), output);
  }

  // int32 actualVelocity = 4;
  if (this->actualvelocity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->actualvelocity(), output);
  }

  // int32 actualTorque = 5;
  if (this->actualtorque() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->actualtorque(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.MotorDriverTx)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotorDriverTx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.MotorDriverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->statusword() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->statusword(), target);
  }

  // int32 modeOpDisp = 2;
  if (this->modeopdisp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->modeopdisp(), target);
  }

  // int32 actualPosition = 3;
  if (this->actualposition() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->actualposition(), target);
  }

  // int32 actualVelocity = 4;
  if (this->actualvelocity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->actualvelocity(), target);
  }

  // int32 actualTorque = 5;
  if (this->actualtorque() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->actualtorque(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.MotorDriverTx)
  return target;
}

size_t MotorDriverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.MotorDriverTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->statusword() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->statusword());
  }

  // int32 modeOpDisp = 2;
  if (this->modeopdisp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->modeopdisp());
  }

  // int32 actualPosition = 3;
  if (this->actualposition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->actualposition());
  }

  // int32 actualVelocity = 4;
  if (this->actualvelocity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->actualvelocity());
  }

  // int32 actualTorque = 5;
  if (this->actualtorque() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->actualtorque());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotorDriverTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.MotorDriverTx)
  GOOGLE_DCHECK_NE(&from, this);
  const MotorDriverTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotorDriverTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.MotorDriverTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.MotorDriverTx)
    MergeFrom(*source);
  }
}

void MotorDriverTx::MergeFrom(const MotorDriverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.MotorDriverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.statusword() != 0) {
    set_statusword(from.statusword());
  }
  if (from.modeopdisp() != 0) {
    set_modeopdisp(from.modeopdisp());
  }
  if (from.actualposition() != 0) {
    set_actualposition(from.actualposition());
  }
  if (from.actualvelocity() != 0) {
    set_actualvelocity(from.actualvelocity());
  }
  if (from.actualtorque() != 0) {
    set_actualtorque(from.actualtorque());
  }
}

void MotorDriverTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.MotorDriverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorDriverTx::CopyFrom(const MotorDriverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.MotorDriverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorDriverTx::IsInitialized() const {
  return true;
}

void MotorDriverTx::Swap(MotorDriverTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorDriverTx::InternalSwap(MotorDriverTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(statusword_, other->statusword_);
  swap(modeopdisp_, other->modeopdisp_);
  swap(actualposition_, other->actualposition_);
  swap(actualvelocity_, other->actualvelocity_);
  swap(actualtorque_, other->actualtorque_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorDriverTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotorDriverRx::InitAsDefaultInstance() {
}
class MotorDriverRx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotorDriverRx::kControlWordFieldNumber;
const int MotorDriverRx::kModeOpFieldNumber;
const int MotorDriverRx::kTargetPositionFieldNumber;
const int MotorDriverRx::kTargetVelocityFieldNumber;
const int MotorDriverRx::kTargetTorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorDriverRx::MotorDriverRx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.MotorDriverRx)
}
MotorDriverRx::MotorDriverRx(const MotorDriverRx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controlword_, &from.controlword_,
    static_cast<size_t>(reinterpret_cast<char*>(&targettorque_) -
    reinterpret_cast<char*>(&controlword_)) + sizeof(targettorque_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.MotorDriverRx)
}

void MotorDriverRx::SharedCtor() {
  ::memset(&controlword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targettorque_) -
      reinterpret_cast<char*>(&controlword_)) + sizeof(targettorque_));
}

MotorDriverRx::~MotorDriverRx() {
  // @@protoc_insertion_point(destructor:GRPCECat.MotorDriverRx)
  SharedDtor();
}

void MotorDriverRx::SharedDtor() {
}

void MotorDriverRx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotorDriverRx& MotorDriverRx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotorDriverRx_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void MotorDriverRx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.MotorDriverRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&controlword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targettorque_) -
      reinterpret_cast<char*>(&controlword_)) + sizeof(targettorque_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotorDriverRx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 controlWord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          controlword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 modeOp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          modeop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          targetposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetVelocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          targetvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetTorque = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          targettorque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotorDriverRx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.MotorDriverRx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controlWord = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controlword_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 modeOp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 targetPosition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 targetVelocity = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 targetTorque = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &targettorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.MotorDriverRx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.MotorDriverRx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotorDriverRx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.MotorDriverRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controlWord = 1;
  if (this->controlword() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->controlword(), output);
  }

  // int32 modeOp = 2;
  if (this->modeop() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->modeop(), output);
  }

  // int32 targetPosition = 3;
  if (this->targetposition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->targetposition(), output);
  }

  // int32 targetVelocity = 4;
  if (this->targetvelocity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->targetvelocity(), output);
  }

  // int32 targetTorque = 5;
  if (this->targettorque() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->targettorque(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.MotorDriverRx)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotorDriverRx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.MotorDriverRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controlWord = 1;
  if (this->controlword() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->controlword(), target);
  }

  // int32 modeOp = 2;
  if (this->modeop() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->modeop(), target);
  }

  // int32 targetPosition = 3;
  if (this->targetposition() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->targetposition(), target);
  }

  // int32 targetVelocity = 4;
  if (this->targetvelocity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->targetvelocity(), target);
  }

  // int32 targetTorque = 5;
  if (this->targettorque() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->targettorque(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.MotorDriverRx)
  return target;
}

size_t MotorDriverRx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.MotorDriverRx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 controlWord = 1;
  if (this->controlword() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->controlword());
  }

  // int32 modeOp = 2;
  if (this->modeop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->modeop());
  }

  // int32 targetPosition = 3;
  if (this->targetposition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->targetposition());
  }

  // int32 targetVelocity = 4;
  if (this->targetvelocity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->targetvelocity());
  }

  // int32 targetTorque = 5;
  if (this->targettorque() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->targettorque());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotorDriverRx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.MotorDriverRx)
  GOOGLE_DCHECK_NE(&from, this);
  const MotorDriverRx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotorDriverRx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.MotorDriverRx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.MotorDriverRx)
    MergeFrom(*source);
  }
}

void MotorDriverRx::MergeFrom(const MotorDriverRx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.MotorDriverRx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.controlword() != 0) {
    set_controlword(from.controlword());
  }
  if (from.modeop() != 0) {
    set_modeop(from.modeop());
  }
  if (from.targetposition() != 0) {
    set_targetposition(from.targetposition());
  }
  if (from.targetvelocity() != 0) {
    set_targetvelocity(from.targetvelocity());
  }
  if (from.targettorque() != 0) {
    set_targettorque(from.targettorque());
  }
}

void MotorDriverRx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.MotorDriverRx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorDriverRx::CopyFrom(const MotorDriverRx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.MotorDriverRx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorDriverRx::IsInitialized() const {
  return true;
}

void MotorDriverRx::Swap(MotorDriverRx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorDriverRx::InternalSwap(MotorDriverRx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(controlword_, other->controlword_);
  swap(modeop_, other->modeop_);
  swap(targetposition_, other->targetposition_);
  swap(targetvelocity_, other->targetvelocity_);
  swap(targettorque_, other->targettorque_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorDriverRx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PanasonicDriverTx::InitAsDefaultInstance() {
}
class PanasonicDriverTx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PanasonicDriverTx::kStatusWordFieldNumber;
const int PanasonicDriverTx::kModeOpDispFieldNumber;
const int PanasonicDriverTx::kActualPositionFieldNumber;
const int PanasonicDriverTx::kActualVelocityFieldNumber;
const int PanasonicDriverTx::kActualTorqueFieldNumber;
const int PanasonicDriverTx::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PanasonicDriverTx::PanasonicDriverTx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.PanasonicDriverTx)
}
PanasonicDriverTx::PanasonicDriverTx(const PanasonicDriverTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&statusword_, &from.statusword_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&statusword_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.PanasonicDriverTx)
}

void PanasonicDriverTx::SharedCtor() {
  ::memset(&statusword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&statusword_)) + sizeof(errorcode_));
}

PanasonicDriverTx::~PanasonicDriverTx() {
  // @@protoc_insertion_point(destructor:GRPCECat.PanasonicDriverTx)
  SharedDtor();
}

void PanasonicDriverTx::SharedDtor() {
}

void PanasonicDriverTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PanasonicDriverTx& PanasonicDriverTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PanasonicDriverTx_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void PanasonicDriverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.PanasonicDriverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&statusword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&statusword_)) + sizeof(errorcode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PanasonicDriverTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 statusWord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          statusword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 modeOpDisp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          modeopdisp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actualPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          actualposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actualVelocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          actualvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actualTorque = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          actualtorque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 errorCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PanasonicDriverTx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.PanasonicDriverTx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 statusWord = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statusword_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 modeOpDisp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeopdisp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actualPosition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actualVelocity = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actualTorque = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualtorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 errorCode = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.PanasonicDriverTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.PanasonicDriverTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PanasonicDriverTx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.PanasonicDriverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->statusword() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->statusword(), output);
  }

  // int32 modeOpDisp = 2;
  if (this->modeopdisp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->modeopdisp(), output);
  }

  // int32 actualPosition = 3;
  if (this->actualposition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->actualposition(), output);
  }

  // int32 actualVelocity = 4;
  if (this->actualvelocity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->actualvelocity(), output);
  }

  // int32 actualTorque = 5;
  if (this->actualtorque() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->actualtorque(), output);
  }

  // uint32 errorCode = 6;
  if (this->errorcode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->errorcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.PanasonicDriverTx)
}

::PROTOBUF_NAMESPACE_ID::uint8* PanasonicDriverTx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.PanasonicDriverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->statusword() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->statusword(), target);
  }

  // int32 modeOpDisp = 2;
  if (this->modeopdisp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->modeopdisp(), target);
  }

  // int32 actualPosition = 3;
  if (this->actualposition() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->actualposition(), target);
  }

  // int32 actualVelocity = 4;
  if (this->actualvelocity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->actualvelocity(), target);
  }

  // int32 actualTorque = 5;
  if (this->actualtorque() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->actualtorque(), target);
  }

  // uint32 errorCode = 6;
  if (this->errorcode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->errorcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.PanasonicDriverTx)
  return target;
}

size_t PanasonicDriverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.PanasonicDriverTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->statusword() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->statusword());
  }

  // int32 modeOpDisp = 2;
  if (this->modeopdisp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->modeopdisp());
  }

  // int32 actualPosition = 3;
  if (this->actualposition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->actualposition());
  }

  // int32 actualVelocity = 4;
  if (this->actualvelocity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->actualvelocity());
  }

  // int32 actualTorque = 5;
  if (this->actualtorque() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->actualtorque());
  }

  // uint32 errorCode = 6;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->errorcode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PanasonicDriverTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.PanasonicDriverTx)
  GOOGLE_DCHECK_NE(&from, this);
  const PanasonicDriverTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PanasonicDriverTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.PanasonicDriverTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.PanasonicDriverTx)
    MergeFrom(*source);
  }
}

void PanasonicDriverTx::MergeFrom(const PanasonicDriverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.PanasonicDriverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.statusword() != 0) {
    set_statusword(from.statusword());
  }
  if (from.modeopdisp() != 0) {
    set_modeopdisp(from.modeopdisp());
  }
  if (from.actualposition() != 0) {
    set_actualposition(from.actualposition());
  }
  if (from.actualvelocity() != 0) {
    set_actualvelocity(from.actualvelocity());
  }
  if (from.actualtorque() != 0) {
    set_actualtorque(from.actualtorque());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
}

void PanasonicDriverTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.PanasonicDriverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PanasonicDriverTx::CopyFrom(const PanasonicDriverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.PanasonicDriverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PanasonicDriverTx::IsInitialized() const {
  return true;
}

void PanasonicDriverTx::Swap(PanasonicDriverTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PanasonicDriverTx::InternalSwap(PanasonicDriverTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(statusword_, other->statusword_);
  swap(modeopdisp_, other->modeopdisp_);
  swap(actualposition_, other->actualposition_);
  swap(actualvelocity_, other->actualvelocity_);
  swap(actualtorque_, other->actualtorque_);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PanasonicDriverTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PanasonicDriverRx::InitAsDefaultInstance() {
}
class PanasonicDriverRx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PanasonicDriverRx::kControlWordFieldNumber;
const int PanasonicDriverRx::kModeOpFieldNumber;
const int PanasonicDriverRx::kTargetPositionFieldNumber;
const int PanasonicDriverRx::kTargetVelocityFieldNumber;
const int PanasonicDriverRx::kTargetTorqueFieldNumber;
const int PanasonicDriverRx::kMaxTorqueFieldNumber;
const int PanasonicDriverRx::kMaxMotorSpeedFieldNumber;
const int PanasonicDriverRx::kTouchProbeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PanasonicDriverRx::PanasonicDriverRx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.PanasonicDriverRx)
}
PanasonicDriverRx::PanasonicDriverRx(const PanasonicDriverRx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controlword_, &from.controlword_,
    static_cast<size_t>(reinterpret_cast<char*>(&touchprobe_) -
    reinterpret_cast<char*>(&controlword_)) + sizeof(touchprobe_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.PanasonicDriverRx)
}

void PanasonicDriverRx::SharedCtor() {
  ::memset(&controlword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touchprobe_) -
      reinterpret_cast<char*>(&controlword_)) + sizeof(touchprobe_));
}

PanasonicDriverRx::~PanasonicDriverRx() {
  // @@protoc_insertion_point(destructor:GRPCECat.PanasonicDriverRx)
  SharedDtor();
}

void PanasonicDriverRx::SharedDtor() {
}

void PanasonicDriverRx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PanasonicDriverRx& PanasonicDriverRx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PanasonicDriverRx_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void PanasonicDriverRx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.PanasonicDriverRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&controlword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touchprobe_) -
      reinterpret_cast<char*>(&controlword_)) + sizeof(touchprobe_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PanasonicDriverRx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 controlWord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          controlword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 modeOp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          modeop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          targetposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetVelocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          targetvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetTorque = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          targettorque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxTorque = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          maxtorque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxMotorSpeed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          maxmotorspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 touchProbe = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          touchprobe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PanasonicDriverRx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.PanasonicDriverRx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controlWord = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controlword_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 modeOp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 targetPosition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 targetVelocity = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 targetTorque = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &targettorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxTorque = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxtorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxMotorSpeed = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmotorspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 touchProbe = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &touchprobe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.PanasonicDriverRx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.PanasonicDriverRx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PanasonicDriverRx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.PanasonicDriverRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controlWord = 1;
  if (this->controlword() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->controlword(), output);
  }

  // int32 modeOp = 2;
  if (this->modeop() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->modeop(), output);
  }

  // int32 targetPosition = 3;
  if (this->targetposition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->targetposition(), output);
  }

  // int32 targetVelocity = 4;
  if (this->targetvelocity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->targetvelocity(), output);
  }

  // int32 targetTorque = 5;
  if (this->targettorque() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->targettorque(), output);
  }

  // int32 maxTorque = 6;
  if (this->maxtorque() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->maxtorque(), output);
  }

  // int32 maxMotorSpeed = 7;
  if (this->maxmotorspeed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->maxmotorspeed(), output);
  }

  // int32 touchProbe = 8;
  if (this->touchprobe() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->touchprobe(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.PanasonicDriverRx)
}

::PROTOBUF_NAMESPACE_ID::uint8* PanasonicDriverRx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.PanasonicDriverRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controlWord = 1;
  if (this->controlword() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->controlword(), target);
  }

  // int32 modeOp = 2;
  if (this->modeop() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->modeop(), target);
  }

  // int32 targetPosition = 3;
  if (this->targetposition() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->targetposition(), target);
  }

  // int32 targetVelocity = 4;
  if (this->targetvelocity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->targetvelocity(), target);
  }

  // int32 targetTorque = 5;
  if (this->targettorque() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->targettorque(), target);
  }

  // int32 maxTorque = 6;
  if (this->maxtorque() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->maxtorque(), target);
  }

  // int32 maxMotorSpeed = 7;
  if (this->maxmotorspeed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->maxmotorspeed(), target);
  }

  // int32 touchProbe = 8;
  if (this->touchprobe() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->touchprobe(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.PanasonicDriverRx)
  return target;
}

size_t PanasonicDriverRx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.PanasonicDriverRx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 controlWord = 1;
  if (this->controlword() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->controlword());
  }

  // int32 modeOp = 2;
  if (this->modeop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->modeop());
  }

  // int32 targetPosition = 3;
  if (this->targetposition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->targetposition());
  }

  // int32 targetVelocity = 4;
  if (this->targetvelocity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->targetvelocity());
  }

  // int32 targetTorque = 5;
  if (this->targettorque() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->targettorque());
  }

  // int32 maxTorque = 6;
  if (this->maxtorque() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maxtorque());
  }

  // int32 maxMotorSpeed = 7;
  if (this->maxmotorspeed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maxmotorspeed());
  }

  // int32 touchProbe = 8;
  if (this->touchprobe() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->touchprobe());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PanasonicDriverRx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.PanasonicDriverRx)
  GOOGLE_DCHECK_NE(&from, this);
  const PanasonicDriverRx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PanasonicDriverRx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.PanasonicDriverRx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.PanasonicDriverRx)
    MergeFrom(*source);
  }
}

void PanasonicDriverRx::MergeFrom(const PanasonicDriverRx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.PanasonicDriverRx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.controlword() != 0) {
    set_controlword(from.controlword());
  }
  if (from.modeop() != 0) {
    set_modeop(from.modeop());
  }
  if (from.targetposition() != 0) {
    set_targetposition(from.targetposition());
  }
  if (from.targetvelocity() != 0) {
    set_targetvelocity(from.targetvelocity());
  }
  if (from.targettorque() != 0) {
    set_targettorque(from.targettorque());
  }
  if (from.maxtorque() != 0) {
    set_maxtorque(from.maxtorque());
  }
  if (from.maxmotorspeed() != 0) {
    set_maxmotorspeed(from.maxmotorspeed());
  }
  if (from.touchprobe() != 0) {
    set_touchprobe(from.touchprobe());
  }
}

void PanasonicDriverRx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.PanasonicDriverRx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PanasonicDriverRx::CopyFrom(const PanasonicDriverRx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.PanasonicDriverRx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PanasonicDriverRx::IsInitialized() const {
  return true;
}

void PanasonicDriverRx::Swap(PanasonicDriverRx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PanasonicDriverRx::InternalSwap(PanasonicDriverRx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(controlword_, other->controlword_);
  swap(modeop_, other->modeop_);
  swap(targetposition_, other->targetposition_);
  swap(targetvelocity_, other->targetvelocity_);
  swap(targettorque_, other->targettorque_);
  swap(maxtorque_, other->maxtorque_);
  swap(maxmotorspeed_, other->maxmotorspeed_);
  swap(touchprobe_, other->touchprobe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PanasonicDriverRx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotorDriverTxIndex::InitAsDefaultInstance() {
  ::GRPCECat::_MotorDriverTxIndex_default_instance_._instance.get_mutable()->motordrivertx_ = const_cast< ::GRPCECat::MotorDriverTx*>(
      ::GRPCECat::MotorDriverTx::internal_default_instance());
}
class MotorDriverTxIndex::HasBitSetters {
 public:
  static const ::GRPCECat::MotorDriverTx& motordrivertx(const MotorDriverTxIndex* msg);
};

const ::GRPCECat::MotorDriverTx&
MotorDriverTxIndex::HasBitSetters::motordrivertx(const MotorDriverTxIndex* msg) {
  return *msg->motordrivertx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotorDriverTxIndex::kSlaveIdxFieldNumber;
const int MotorDriverTxIndex::kMotorDriverTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorDriverTxIndex::MotorDriverTxIndex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.MotorDriverTxIndex)
}
MotorDriverTxIndex::MotorDriverTxIndex(const MotorDriverTxIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_motordrivertx()) {
    motordrivertx_ = new ::GRPCECat::MotorDriverTx(*from.motordrivertx_);
  } else {
    motordrivertx_ = nullptr;
  }
  slaveidx_ = from.slaveidx_;
  // @@protoc_insertion_point(copy_constructor:GRPCECat.MotorDriverTxIndex)
}

void MotorDriverTxIndex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MotorDriverTxIndex_EtherCATCommgRPCServer_2eproto.base);
  ::memset(&motordrivertx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slaveidx_) -
      reinterpret_cast<char*>(&motordrivertx_)) + sizeof(slaveidx_));
}

MotorDriverTxIndex::~MotorDriverTxIndex() {
  // @@protoc_insertion_point(destructor:GRPCECat.MotorDriverTxIndex)
  SharedDtor();
}

void MotorDriverTxIndex::SharedDtor() {
  if (this != internal_default_instance()) delete motordrivertx_;
}

void MotorDriverTxIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotorDriverTxIndex& MotorDriverTxIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotorDriverTxIndex_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void MotorDriverTxIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.MotorDriverTxIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && motordrivertx_ != nullptr) {
    delete motordrivertx_;
  }
  motordrivertx_ = nullptr;
  slaveidx_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotorDriverTxIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 slaveIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          slaveidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GRPCECat.MotorDriverTx motorDriverTx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_motordrivertx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotorDriverTxIndex::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.MotorDriverTxIndex)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 slaveIdx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slaveidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GRPCECat.MotorDriverTx motorDriverTx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_motordrivertx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.MotorDriverTxIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.MotorDriverTxIndex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotorDriverTxIndex::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.MotorDriverTxIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slaveIdx = 1;
  if (this->slaveidx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->slaveidx(), output);
  }

  // .GRPCECat.MotorDriverTx motorDriverTx = 2;
  if (this->has_motordrivertx()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::motordrivertx(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.MotorDriverTxIndex)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotorDriverTxIndex::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.MotorDriverTxIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slaveIdx = 1;
  if (this->slaveidx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->slaveidx(), target);
  }

  // .GRPCECat.MotorDriverTx motorDriverTx = 2;
  if (this->has_motordrivertx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::motordrivertx(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.MotorDriverTxIndex)
  return target;
}

size_t MotorDriverTxIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.MotorDriverTxIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GRPCECat.MotorDriverTx motorDriverTx = 2;
  if (this->has_motordrivertx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motordrivertx_);
  }

  // uint32 slaveIdx = 1;
  if (this->slaveidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->slaveidx());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotorDriverTxIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.MotorDriverTxIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const MotorDriverTxIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotorDriverTxIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.MotorDriverTxIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.MotorDriverTxIndex)
    MergeFrom(*source);
  }
}

void MotorDriverTxIndex::MergeFrom(const MotorDriverTxIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.MotorDriverTxIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_motordrivertx()) {
    mutable_motordrivertx()->::GRPCECat::MotorDriverTx::MergeFrom(from.motordrivertx());
  }
  if (from.slaveidx() != 0) {
    set_slaveidx(from.slaveidx());
  }
}

void MotorDriverTxIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.MotorDriverTxIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorDriverTxIndex::CopyFrom(const MotorDriverTxIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.MotorDriverTxIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorDriverTxIndex::IsInitialized() const {
  return true;
}

void MotorDriverTxIndex::Swap(MotorDriverTxIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorDriverTxIndex::InternalSwap(MotorDriverTxIndex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(motordrivertx_, other->motordrivertx_);
  swap(slaveidx_, other->slaveidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorDriverTxIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotorDriverRxIndex::InitAsDefaultInstance() {
  ::GRPCECat::_MotorDriverRxIndex_default_instance_._instance.get_mutable()->motordriverrx_ = const_cast< ::GRPCECat::MotorDriverRx*>(
      ::GRPCECat::MotorDriverRx::internal_default_instance());
}
class MotorDriverRxIndex::HasBitSetters {
 public:
  static const ::GRPCECat::MotorDriverRx& motordriverrx(const MotorDriverRxIndex* msg);
};

const ::GRPCECat::MotorDriverRx&
MotorDriverRxIndex::HasBitSetters::motordriverrx(const MotorDriverRxIndex* msg) {
  return *msg->motordriverrx_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotorDriverRxIndex::kSlaveIdxFieldNumber;
const int MotorDriverRxIndex::kMotorDriverRxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorDriverRxIndex::MotorDriverRxIndex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.MotorDriverRxIndex)
}
MotorDriverRxIndex::MotorDriverRxIndex(const MotorDriverRxIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_motordriverrx()) {
    motordriverrx_ = new ::GRPCECat::MotorDriverRx(*from.motordriverrx_);
  } else {
    motordriverrx_ = nullptr;
  }
  slaveidx_ = from.slaveidx_;
  // @@protoc_insertion_point(copy_constructor:GRPCECat.MotorDriverRxIndex)
}

void MotorDriverRxIndex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MotorDriverRxIndex_EtherCATCommgRPCServer_2eproto.base);
  ::memset(&motordriverrx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slaveidx_) -
      reinterpret_cast<char*>(&motordriverrx_)) + sizeof(slaveidx_));
}

MotorDriverRxIndex::~MotorDriverRxIndex() {
  // @@protoc_insertion_point(destructor:GRPCECat.MotorDriverRxIndex)
  SharedDtor();
}

void MotorDriverRxIndex::SharedDtor() {
  if (this != internal_default_instance()) delete motordriverrx_;
}

void MotorDriverRxIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotorDriverRxIndex& MotorDriverRxIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotorDriverRxIndex_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void MotorDriverRxIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.MotorDriverRxIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && motordriverrx_ != nullptr) {
    delete motordriverrx_;
  }
  motordriverrx_ = nullptr;
  slaveidx_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotorDriverRxIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 slaveIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          slaveidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GRPCECat.MotorDriverRx motorDriverRx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_motordriverrx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotorDriverRxIndex::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.MotorDriverRxIndex)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 slaveIdx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slaveidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GRPCECat.MotorDriverRx motorDriverRx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_motordriverrx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.MotorDriverRxIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.MotorDriverRxIndex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotorDriverRxIndex::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.MotorDriverRxIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slaveIdx = 1;
  if (this->slaveidx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->slaveidx(), output);
  }

  // .GRPCECat.MotorDriverRx motorDriverRx = 2;
  if (this->has_motordriverrx()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::motordriverrx(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.MotorDriverRxIndex)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotorDriverRxIndex::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.MotorDriverRxIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slaveIdx = 1;
  if (this->slaveidx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->slaveidx(), target);
  }

  // .GRPCECat.MotorDriverRx motorDriverRx = 2;
  if (this->has_motordriverrx()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::motordriverrx(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.MotorDriverRxIndex)
  return target;
}

size_t MotorDriverRxIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.MotorDriverRxIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GRPCECat.MotorDriverRx motorDriverRx = 2;
  if (this->has_motordriverrx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motordriverrx_);
  }

  // uint32 slaveIdx = 1;
  if (this->slaveidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->slaveidx());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotorDriverRxIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.MotorDriverRxIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const MotorDriverRxIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotorDriverRxIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.MotorDriverRxIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.MotorDriverRxIndex)
    MergeFrom(*source);
  }
}

void MotorDriverRxIndex::MergeFrom(const MotorDriverRxIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.MotorDriverRxIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_motordriverrx()) {
    mutable_motordriverrx()->::GRPCECat::MotorDriverRx::MergeFrom(from.motordriverrx());
  }
  if (from.slaveidx() != 0) {
    set_slaveidx(from.slaveidx());
  }
}

void MotorDriverRxIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.MotorDriverRxIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorDriverRxIndex::CopyFrom(const MotorDriverRxIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.MotorDriverRxIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorDriverRxIndex::IsInitialized() const {
  return true;
}

void MotorDriverRxIndex::Swap(MotorDriverRxIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorDriverRxIndex::InternalSwap(MotorDriverRxIndex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(motordriverrx_, other->motordriverrx_);
  swap(slaveidx_, other->slaveidx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorDriverRxIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServoParam::InitAsDefaultInstance() {
}
class ServoParam::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServoParam::kSlaveIdxFieldNumber;
const int ServoParam::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServoParam::ServoParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.ServoParam)
}
ServoParam::ServoParam(const ServoParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slaveidx_, &from.slaveidx_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&slaveidx_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.ServoParam)
}

void ServoParam::SharedCtor() {
  ::memset(&slaveidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&slaveidx_)) + sizeof(val_));
}

ServoParam::~ServoParam() {
  // @@protoc_insertion_point(destructor:GRPCECat.ServoParam)
  SharedDtor();
}

void ServoParam::SharedDtor() {
}

void ServoParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServoParam& ServoParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServoParam_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void ServoParam::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.ServoParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&slaveidx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&slaveidx_)) + sizeof(val_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServoParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 slaveIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          slaveidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServoParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.ServoParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 slaveIdx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slaveidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 val = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.ServoParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.ServoParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServoParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.ServoParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slaveIdx = 1;
  if (this->slaveidx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->slaveidx(), output);
  }

  // int32 val = 2;
  if (this->val() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.ServoParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* ServoParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.ServoParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slaveIdx = 1;
  if (this->slaveidx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->slaveidx(), target);
  }

  // int32 val = 2;
  if (this->val() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.ServoParam)
  return target;
}

size_t ServoParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.ServoParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 slaveIdx = 1;
  if (this->slaveidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->slaveidx());
  }

  // int32 val = 2;
  if (this->val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->val());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServoParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.ServoParam)
  GOOGLE_DCHECK_NE(&from, this);
  const ServoParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServoParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.ServoParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.ServoParam)
    MergeFrom(*source);
  }
}

void ServoParam::MergeFrom(const ServoParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.ServoParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slaveidx() != 0) {
    set_slaveidx(from.slaveidx());
  }
  if (from.val() != 0) {
    set_val(from.val());
  }
}

void ServoParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.ServoParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServoParam::CopyFrom(const ServoParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.ServoParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServoParam::IsInitialized() const {
  return true;
}

void ServoParam::Swap(ServoParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServoParam::InternalSwap(ServoParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(slaveidx_, other->slaveidx_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServoParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FTsensorTx::InitAsDefaultInstance() {
}
class FTsensorTx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FTsensorTx::kFxFieldNumber;
const int FTsensorTx::kFyFieldNumber;
const int FTsensorTx::kFzFieldNumber;
const int FTsensorTx::kTxFieldNumber;
const int FTsensorTx::kTyFieldNumber;
const int FTsensorTx::kTzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FTsensorTx::FTsensorTx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.FTsensorTx)
}
FTsensorTx::FTsensorTx(const FTsensorTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&tz_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(tz_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.FTsensorTx)
}

void FTsensorTx::SharedCtor() {
  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tz_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(tz_));
}

FTsensorTx::~FTsensorTx() {
  // @@protoc_insertion_point(destructor:GRPCECat.FTsensorTx)
  SharedDtor();
}

void FTsensorTx::SharedDtor() {
}

void FTsensorTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FTsensorTx& FTsensorTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FTsensorTx_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void FTsensorTx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.FTsensorTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tz_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(tz_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FTsensorTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FTsensorTx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.FTsensorTx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fz = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tx = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ty = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tz = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.FTsensorTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.FTsensorTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FTsensorTx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.FTsensorTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fx = 1;
  if (this->fx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->fx(), output);
  }

  // int32 fy = 2;
  if (this->fy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->fy(), output);
  }

  // int32 fz = 3;
  if (this->fz() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->fz(), output);
  }

  // int32 tx = 4;
  if (this->tx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->tx(), output);
  }

  // int32 ty = 5;
  if (this->ty() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->ty(), output);
  }

  // int32 tz = 6;
  if (this->tz() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->tz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.FTsensorTx)
}

::PROTOBUF_NAMESPACE_ID::uint8* FTsensorTx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.FTsensorTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fx = 1;
  if (this->fx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->fx(), target);
  }

  // int32 fy = 2;
  if (this->fy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->fy(), target);
  }

  // int32 fz = 3;
  if (this->fz() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->fz(), target);
  }

  // int32 tx = 4;
  if (this->tx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->tx(), target);
  }

  // int32 ty = 5;
  if (this->ty() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->ty(), target);
  }

  // int32 tz = 6;
  if (this->tz() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->tz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.FTsensorTx)
  return target;
}

size_t FTsensorTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.FTsensorTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fx = 1;
  if (this->fx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fx());
  }

  // int32 fy = 2;
  if (this->fy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fy());
  }

  // int32 fz = 3;
  if (this->fz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fz());
  }

  // int32 tx = 4;
  if (this->tx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->tx());
  }

  // int32 ty = 5;
  if (this->ty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ty());
  }

  // int32 tz = 6;
  if (this->tz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->tz());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FTsensorTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.FTsensorTx)
  GOOGLE_DCHECK_NE(&from, this);
  const FTsensorTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FTsensorTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.FTsensorTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.FTsensorTx)
    MergeFrom(*source);
  }
}

void FTsensorTx::MergeFrom(const FTsensorTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.FTsensorTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fx() != 0) {
    set_fx(from.fx());
  }
  if (from.fy() != 0) {
    set_fy(from.fy());
  }
  if (from.fz() != 0) {
    set_fz(from.fz());
  }
  if (from.tx() != 0) {
    set_tx(from.tx());
  }
  if (from.ty() != 0) {
    set_ty(from.ty());
  }
  if (from.tz() != 0) {
    set_tz(from.tz());
  }
}

void FTsensorTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.FTsensorTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FTsensorTx::CopyFrom(const FTsensorTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.FTsensorTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FTsensorTx::IsInitialized() const {
  return true;
}

void FTsensorTx::Swap(FTsensorTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FTsensorTx::InternalSwap(FTsensorTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fx_, other->fx_);
  swap(fy_, other->fy_);
  swap(fz_, other->fz_);
  swap(tx_, other->tx_);
  swap(ty_, other->ty_);
  swap(tz_, other->tz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FTsensorTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IOBoardTx::InitAsDefaultInstance() {
  ::GRPCECat::_IOBoardTx_default_instance_._instance.get_mutable()->ft_sensor_ = const_cast< ::GRPCECat::FTsensorTx*>(
      ::GRPCECat::FTsensorTx::internal_default_instance());
}
class IOBoardTx::HasBitSetters {
 public:
  static const ::GRPCECat::FTsensorTx& ft_sensor(const IOBoardTx* msg);
};

const ::GRPCECat::FTsensorTx&
IOBoardTx::HasBitSetters::ft_sensor(const IOBoardTx* msg) {
  return *msg->ft_sensor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IOBoardTx::kDi5VFieldNumber;
const int IOBoardTx::kDi1FieldNumber;
const int IOBoardTx::kDi2FieldNumber;
const int IOBoardTx::kAi1FieldNumber;
const int IOBoardTx::kAi2FieldNumber;
const int IOBoardTx::kFtSensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IOBoardTx::IOBoardTx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.IOBoardTx)
}
IOBoardTx::IOBoardTx(const IOBoardTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ft_sensor()) {
    ft_sensor_ = new ::GRPCECat::FTsensorTx(*from.ft_sensor_);
  } else {
    ft_sensor_ = nullptr;
  }
  ::memcpy(&di_5v_, &from.di_5v_,
    static_cast<size_t>(reinterpret_cast<char*>(&ai2_) -
    reinterpret_cast<char*>(&di_5v_)) + sizeof(ai2_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.IOBoardTx)
}

void IOBoardTx::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IOBoardTx_EtherCATCommgRPCServer_2eproto.base);
  ::memset(&ft_sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ai2_) -
      reinterpret_cast<char*>(&ft_sensor_)) + sizeof(ai2_));
}

IOBoardTx::~IOBoardTx() {
  // @@protoc_insertion_point(destructor:GRPCECat.IOBoardTx)
  SharedDtor();
}

void IOBoardTx::SharedDtor() {
  if (this != internal_default_instance()) delete ft_sensor_;
}

void IOBoardTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IOBoardTx& IOBoardTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IOBoardTx_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void IOBoardTx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.IOBoardTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ft_sensor_ != nullptr) {
    delete ft_sensor_;
  }
  ft_sensor_ = nullptr;
  ::memset(&di_5v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ai2_) -
      reinterpret_cast<char*>(&di_5v_)) + sizeof(ai2_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IOBoardTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 di_5v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          di_5v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 di1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          di1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 di2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          di2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ai1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ai1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ai2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ai2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GRPCECat.FTsensorTx ft_sensor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ft_sensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IOBoardTx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.IOBoardTx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 di_5v = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &di_5v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 di1 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &di1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 di2 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &di2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ai1 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ai1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ai2 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ai2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GRPCECat.FTsensorTx ft_sensor = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ft_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.IOBoardTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.IOBoardTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IOBoardTx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.IOBoardTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 di_5v = 1;
  if (this->di_5v() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->di_5v(), output);
  }

  // uint32 di1 = 2;
  if (this->di1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->di1(), output);
  }

  // uint32 di2 = 3;
  if (this->di2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->di2(), output);
  }

  // uint32 ai1 = 4;
  if (this->ai1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->ai1(), output);
  }

  // uint32 ai2 = 5;
  if (this->ai2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->ai2(), output);
  }

  // .GRPCECat.FTsensorTx ft_sensor = 6;
  if (this->has_ft_sensor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::ft_sensor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.IOBoardTx)
}

::PROTOBUF_NAMESPACE_ID::uint8* IOBoardTx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.IOBoardTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 di_5v = 1;
  if (this->di_5v() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->di_5v(), target);
  }

  // uint32 di1 = 2;
  if (this->di1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->di1(), target);
  }

  // uint32 di2 = 3;
  if (this->di2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->di2(), target);
  }

  // uint32 ai1 = 4;
  if (this->ai1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->ai1(), target);
  }

  // uint32 ai2 = 5;
  if (this->ai2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->ai2(), target);
  }

  // .GRPCECat.FTsensorTx ft_sensor = 6;
  if (this->has_ft_sensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::ft_sensor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.IOBoardTx)
  return target;
}

size_t IOBoardTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.IOBoardTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GRPCECat.FTsensorTx ft_sensor = 6;
  if (this->has_ft_sensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ft_sensor_);
  }

  // uint32 di_5v = 1;
  if (this->di_5v() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->di_5v());
  }

  // uint32 di1 = 2;
  if (this->di1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->di1());
  }

  // uint32 di2 = 3;
  if (this->di2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->di2());
  }

  // uint32 ai1 = 4;
  if (this->ai1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ai1());
  }

  // uint32 ai2 = 5;
  if (this->ai2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ai2());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOBoardTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.IOBoardTx)
  GOOGLE_DCHECK_NE(&from, this);
  const IOBoardTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IOBoardTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.IOBoardTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.IOBoardTx)
    MergeFrom(*source);
  }
}

void IOBoardTx::MergeFrom(const IOBoardTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.IOBoardTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ft_sensor()) {
    mutable_ft_sensor()->::GRPCECat::FTsensorTx::MergeFrom(from.ft_sensor());
  }
  if (from.di_5v() != 0) {
    set_di_5v(from.di_5v());
  }
  if (from.di1() != 0) {
    set_di1(from.di1());
  }
  if (from.di2() != 0) {
    set_di2(from.di2());
  }
  if (from.ai1() != 0) {
    set_ai1(from.ai1());
  }
  if (from.ai2() != 0) {
    set_ai2(from.ai2());
  }
}

void IOBoardTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.IOBoardTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOBoardTx::CopyFrom(const IOBoardTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.IOBoardTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOBoardTx::IsInitialized() const {
  return true;
}

void IOBoardTx::Swap(IOBoardTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IOBoardTx::InternalSwap(IOBoardTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ft_sensor_, other->ft_sensor_);
  swap(di_5v_, other->di_5v_);
  swap(di1_, other->di1_);
  swap(di2_, other->di2_);
  swap(ai1_, other->ai1_);
  swap(ai2_, other->ai2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IOBoardTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IOBoardRx::InitAsDefaultInstance() {
}
class IOBoardRx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IOBoardRx::kDo5VFieldNumber;
const int IOBoardRx::kDo1FieldNumber;
const int IOBoardRx::kDo2FieldNumber;
const int IOBoardRx::kAo1FieldNumber;
const int IOBoardRx::kAo2FieldNumber;
const int IOBoardRx::kFtParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IOBoardRx::IOBoardRx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.IOBoardRx)
}
IOBoardRx::IOBoardRx(const IOBoardRx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&do_5v_, &from.do_5v_,
    static_cast<size_t>(reinterpret_cast<char*>(&ft_param_) -
    reinterpret_cast<char*>(&do_5v_)) + sizeof(ft_param_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.IOBoardRx)
}

void IOBoardRx::SharedCtor() {
  ::memset(&do_5v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ft_param_) -
      reinterpret_cast<char*>(&do_5v_)) + sizeof(ft_param_));
}

IOBoardRx::~IOBoardRx() {
  // @@protoc_insertion_point(destructor:GRPCECat.IOBoardRx)
  SharedDtor();
}

void IOBoardRx::SharedDtor() {
}

void IOBoardRx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IOBoardRx& IOBoardRx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IOBoardRx_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void IOBoardRx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.IOBoardRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&do_5v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ft_param_) -
      reinterpret_cast<char*>(&do_5v_)) + sizeof(ft_param_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IOBoardRx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 do_5v = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          do_5v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 do1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          do1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 do2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          do2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ao1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ao1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ao2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ao2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ft_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ft_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IOBoardRx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.IOBoardRx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 do_5v = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &do_5v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 do1 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &do1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 do2 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &do2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ao1 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ao1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ao2 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ao2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ft_param = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ft_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.IOBoardRx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.IOBoardRx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IOBoardRx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.IOBoardRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 do_5v = 1;
  if (this->do_5v() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->do_5v(), output);
  }

  // uint32 do1 = 2;
  if (this->do1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->do1(), output);
  }

  // uint32 do2 = 3;
  if (this->do2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->do2(), output);
  }

  // uint32 ao1 = 4;
  if (this->ao1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->ao1(), output);
  }

  // uint32 ao2 = 5;
  if (this->ao2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->ao2(), output);
  }

  // uint32 ft_param = 6;
  if (this->ft_param() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->ft_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.IOBoardRx)
}

::PROTOBUF_NAMESPACE_ID::uint8* IOBoardRx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.IOBoardRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 do_5v = 1;
  if (this->do_5v() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->do_5v(), target);
  }

  // uint32 do1 = 2;
  if (this->do1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->do1(), target);
  }

  // uint32 do2 = 3;
  if (this->do2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->do2(), target);
  }

  // uint32 ao1 = 4;
  if (this->ao1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->ao1(), target);
  }

  // uint32 ao2 = 5;
  if (this->ao2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->ao2(), target);
  }

  // uint32 ft_param = 6;
  if (this->ft_param() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->ft_param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.IOBoardRx)
  return target;
}

size_t IOBoardRx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.IOBoardRx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 do_5v = 1;
  if (this->do_5v() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->do_5v());
  }

  // uint32 do1 = 2;
  if (this->do1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->do1());
  }

  // uint32 do2 = 3;
  if (this->do2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->do2());
  }

  // uint32 ao1 = 4;
  if (this->ao1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ao1());
  }

  // uint32 ao2 = 5;
  if (this->ao2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ao2());
  }

  // uint32 ft_param = 6;
  if (this->ft_param() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ft_param());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOBoardRx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.IOBoardRx)
  GOOGLE_DCHECK_NE(&from, this);
  const IOBoardRx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IOBoardRx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.IOBoardRx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.IOBoardRx)
    MergeFrom(*source);
  }
}

void IOBoardRx::MergeFrom(const IOBoardRx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.IOBoardRx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.do_5v() != 0) {
    set_do_5v(from.do_5v());
  }
  if (from.do1() != 0) {
    set_do1(from.do1());
  }
  if (from.do2() != 0) {
    set_do2(from.do2());
  }
  if (from.ao1() != 0) {
    set_ao1(from.ao1());
  }
  if (from.ao2() != 0) {
    set_ao2(from.ao2());
  }
  if (from.ft_param() != 0) {
    set_ft_param(from.ft_param());
  }
}

void IOBoardRx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.IOBoardRx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOBoardRx::CopyFrom(const IOBoardRx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.IOBoardRx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOBoardRx::IsInitialized() const {
  return true;
}

void IOBoardRx::Swap(IOBoardRx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IOBoardRx::InternalSwap(IOBoardRx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(do_5v_, other->do_5v_);
  swap(do1_, other->do1_);
  swap(do2_, other->do2_);
  swap(ao1_, other->ao1_);
  swap(ao2_, other->ao2_);
  swap(ft_param_, other->ft_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IOBoardRx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndtoolTx::InitAsDefaultInstance() {
}
class EndtoolTx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndtoolTx::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndtoolTx::EndtoolTx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.EndtoolTx)
}
EndtoolTx::EndtoolTx(const EndtoolTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:GRPCECat.EndtoolTx)
}

void EndtoolTx::SharedCtor() {
  status_ = 0;
}

EndtoolTx::~EndtoolTx() {
  // @@protoc_insertion_point(destructor:GRPCECat.EndtoolTx)
  SharedDtor();
}

void EndtoolTx::SharedDtor() {
}

void EndtoolTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndtoolTx& EndtoolTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndtoolTx_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void EndtoolTx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.EndtoolTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EndtoolTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EndtoolTx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.EndtoolTx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.EndtoolTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.EndtoolTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EndtoolTx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.EndtoolTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.EndtoolTx)
}

::PROTOBUF_NAMESPACE_ID::uint8* EndtoolTx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.EndtoolTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.EndtoolTx)
  return target;
}

size_t EndtoolTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.EndtoolTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndtoolTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.EndtoolTx)
  GOOGLE_DCHECK_NE(&from, this);
  const EndtoolTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndtoolTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.EndtoolTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.EndtoolTx)
    MergeFrom(*source);
  }
}

void EndtoolTx::MergeFrom(const EndtoolTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.EndtoolTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void EndtoolTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.EndtoolTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndtoolTx::CopyFrom(const EndtoolTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.EndtoolTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndtoolTx::IsInitialized() const {
  return true;
}

void EndtoolTx::Swap(EndtoolTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndtoolTx::InternalSwap(EndtoolTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndtoolTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndtoolRx::InitAsDefaultInstance() {
}
class EndtoolRx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndtoolRx::kEqcFieldNumber;
const int EndtoolRx::kGripperFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndtoolRx::EndtoolRx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.EndtoolRx)
}
EndtoolRx::EndtoolRx(const EndtoolRx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eqc_, &from.eqc_,
    static_cast<size_t>(reinterpret_cast<char*>(&gripper_) -
    reinterpret_cast<char*>(&eqc_)) + sizeof(gripper_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.EndtoolRx)
}

void EndtoolRx::SharedCtor() {
  ::memset(&eqc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gripper_) -
      reinterpret_cast<char*>(&eqc_)) + sizeof(gripper_));
}

EndtoolRx::~EndtoolRx() {
  // @@protoc_insertion_point(destructor:GRPCECat.EndtoolRx)
  SharedDtor();
}

void EndtoolRx::SharedDtor() {
}

void EndtoolRx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndtoolRx& EndtoolRx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndtoolRx_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void EndtoolRx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.EndtoolRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&eqc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gripper_) -
      reinterpret_cast<char*>(&eqc_)) + sizeof(gripper_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EndtoolRx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 eqc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          eqc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gripper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gripper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EndtoolRx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.EndtoolRx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 eqc = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &eqc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gripper = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gripper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.EndtoolRx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.EndtoolRx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EndtoolRx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.EndtoolRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 eqc = 1;
  if (this->eqc() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->eqc(), output);
  }

  // int32 gripper = 2;
  if (this->gripper() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->gripper(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.EndtoolRx)
}

::PROTOBUF_NAMESPACE_ID::uint8* EndtoolRx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.EndtoolRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 eqc = 1;
  if (this->eqc() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->eqc(), target);
  }

  // int32 gripper = 2;
  if (this->gripper() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->gripper(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.EndtoolRx)
  return target;
}

size_t EndtoolRx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.EndtoolRx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 eqc = 1;
  if (this->eqc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->eqc());
  }

  // int32 gripper = 2;
  if (this->gripper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gripper());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndtoolRx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.EndtoolRx)
  GOOGLE_DCHECK_NE(&from, this);
  const EndtoolRx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndtoolRx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.EndtoolRx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.EndtoolRx)
    MergeFrom(*source);
  }
}

void EndtoolRx::MergeFrom(const EndtoolRx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.EndtoolRx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.eqc() != 0) {
    set_eqc(from.eqc());
  }
  if (from.gripper() != 0) {
    set_gripper(from.gripper());
  }
}

void EndtoolRx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.EndtoolRx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndtoolRx::CopyFrom(const EndtoolRx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.EndtoolRx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndtoolRx::IsInitialized() const {
  return true;
}

void EndtoolRx::Swap(EndtoolRx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndtoolRx::InternalSwap(EndtoolRx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(eqc_, other->eqc_);
  swap(gripper_, other->gripper_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndtoolRx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndtoolRevCDTTx::InitAsDefaultInstance() {
}
class EndtoolRevCDTTx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndtoolRevCDTTx::kStatusFieldNumber;
const int EndtoolRevCDTTx::kDockingStatusFieldNumber;
const int EndtoolRevCDTTx::kDockingButtonFieldNumber;
const int EndtoolRevCDTTx::kDockingDist1FieldNumber;
const int EndtoolRevCDTTx::kDockingDist2FieldNumber;
const int EndtoolRevCDTTx::kDockingDist3FieldNumber;
const int EndtoolRevCDTTx::kDockingDist4FieldNumber;
const int EndtoolRevCDTTx::kDockingDist5FieldNumber;
const int EndtoolRevCDTTx::kDockingDist6FieldNumber;
const int EndtoolRevCDTTx::kDockingDist7FieldNumber;
const int EndtoolRevCDTTx::kDockingDist8FieldNumber;
const int EndtoolRevCDTTx::kDirectStatusFieldNumber;
const int EndtoolRevCDTTx::kDirectButtonFieldNumber;
const int EndtoolRevCDTTx::kDirectEncoderFieldNumber;
const int EndtoolRevCDTTx::kDirectJoystic1XFieldNumber;
const int EndtoolRevCDTTx::kDirectJoystic1YFieldNumber;
const int EndtoolRevCDTTx::kDirectJoystic2XFieldNumber;
const int EndtoolRevCDTTx::kDirectJoystic2YFieldNumber;
const int EndtoolRevCDTTx::kFtStatusFieldNumber;
const int EndtoolRevCDTTx::kFtButtonFieldNumber;
const int EndtoolRevCDTTx::kFtFxFieldNumber;
const int EndtoolRevCDTTx::kFtFyFieldNumber;
const int EndtoolRevCDTTx::kFtFzFieldNumber;
const int EndtoolRevCDTTx::kFtTxFieldNumber;
const int EndtoolRevCDTTx::kFtTyFieldNumber;
const int EndtoolRevCDTTx::kFtTzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndtoolRevCDTTx::EndtoolRevCDTTx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.EndtoolRevCDTTx)
}
EndtoolRevCDTTx::EndtoolRevCDTTx(const EndtoolRevCDTTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&ft_tz_) -
    reinterpret_cast<char*>(&status_)) + sizeof(ft_tz_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.EndtoolRevCDTTx)
}

void EndtoolRevCDTTx::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ft_tz_) -
      reinterpret_cast<char*>(&status_)) + sizeof(ft_tz_));
}

EndtoolRevCDTTx::~EndtoolRevCDTTx() {
  // @@protoc_insertion_point(destructor:GRPCECat.EndtoolRevCDTTx)
  SharedDtor();
}

void EndtoolRevCDTTx::SharedDtor() {
}

void EndtoolRevCDTTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndtoolRevCDTTx& EndtoolRevCDTTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndtoolRevCDTTx_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void EndtoolRevCDTTx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.EndtoolRevCDTTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ft_tz_) -
      reinterpret_cast<char*>(&status_)) + sizeof(ft_tz_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EndtoolRevCDTTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 docking_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          docking_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 docking_button = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          docking_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 docking_dist1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          docking_dist1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 docking_dist2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          docking_dist2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 docking_dist3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          docking_dist3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 docking_dist4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          docking_dist4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 docking_dist5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          docking_dist5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 docking_dist6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          docking_dist6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 docking_dist7 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          docking_dist7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 docking_dist8 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          docking_dist8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direct_status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          direct_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direct_button = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          direct_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direct_encoder = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          direct_encoder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direct_joystic1x = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          direct_joystic1x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direct_joystic1y = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          direct_joystic1y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direct_joystic2x = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          direct_joystic2x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 direct_joystic2y = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          direct_joystic2y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ft_status = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ft_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ft_button = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ft_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ft_fx = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ft_fx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ft_fy = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ft_fy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ft_fz = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ft_fz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ft_tx = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ft_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ft_ty = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ft_ty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ft_tz = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ft_tz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EndtoolRevCDTTx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.EndtoolRevCDTTx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 docking_status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &docking_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 docking_button = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &docking_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 docking_dist1 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &docking_dist1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 docking_dist2 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &docking_dist2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 docking_dist3 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &docking_dist3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 docking_dist4 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &docking_dist4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 docking_dist5 = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &docking_dist5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 docking_dist6 = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &docking_dist6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 docking_dist7 = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &docking_dist7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 docking_dist8 = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &docking_dist8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 direct_status = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &direct_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 direct_button = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &direct_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 direct_encoder = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &direct_encoder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 direct_joystic1x = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &direct_joystic1x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 direct_joystic1y = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &direct_joystic1y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 direct_joystic2x = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &direct_joystic2x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 direct_joystic2y = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &direct_joystic2y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ft_status = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ft_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ft_button = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ft_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ft_fx = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ft_fx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ft_fy = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ft_fy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ft_fz = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ft_fz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ft_tx = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ft_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ft_ty = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ft_ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ft_tz = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ft_tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.EndtoolRevCDTTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.EndtoolRevCDTTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EndtoolRevCDTTx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.EndtoolRevCDTTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // int32 docking_status = 2;
  if (this->docking_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->docking_status(), output);
  }

  // int32 docking_button = 3;
  if (this->docking_button() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->docking_button(), output);
  }

  // int32 docking_dist1 = 4;
  if (this->docking_dist1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->docking_dist1(), output);
  }

  // int32 docking_dist2 = 5;
  if (this->docking_dist2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->docking_dist2(), output);
  }

  // int32 docking_dist3 = 6;
  if (this->docking_dist3() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->docking_dist3(), output);
  }

  // int32 docking_dist4 = 7;
  if (this->docking_dist4() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->docking_dist4(), output);
  }

  // int32 docking_dist5 = 8;
  if (this->docking_dist5() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->docking_dist5(), output);
  }

  // int32 docking_dist6 = 9;
  if (this->docking_dist6() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->docking_dist6(), output);
  }

  // int32 docking_dist7 = 10;
  if (this->docking_dist7() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->docking_dist7(), output);
  }

  // int32 docking_dist8 = 11;
  if (this->docking_dist8() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->docking_dist8(), output);
  }

  // int32 direct_status = 12;
  if (this->direct_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->direct_status(), output);
  }

  // int32 direct_button = 13;
  if (this->direct_button() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->direct_button(), output);
  }

  // int32 direct_encoder = 14;
  if (this->direct_encoder() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->direct_encoder(), output);
  }

  // int32 direct_joystic1x = 15;
  if (this->direct_joystic1x() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->direct_joystic1x(), output);
  }

  // int32 direct_joystic1y = 16;
  if (this->direct_joystic1y() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->direct_joystic1y(), output);
  }

  // int32 direct_joystic2x = 17;
  if (this->direct_joystic2x() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->direct_joystic2x(), output);
  }

  // int32 direct_joystic2y = 18;
  if (this->direct_joystic2y() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->direct_joystic2y(), output);
  }

  // int32 ft_status = 19;
  if (this->ft_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(19, this->ft_status(), output);
  }

  // int32 ft_button = 20;
  if (this->ft_button() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->ft_button(), output);
  }

  // int32 ft_fx = 21;
  if (this->ft_fx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->ft_fx(), output);
  }

  // int32 ft_fy = 22;
  if (this->ft_fy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(22, this->ft_fy(), output);
  }

  // int32 ft_fz = 23;
  if (this->ft_fz() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(23, this->ft_fz(), output);
  }

  // int32 ft_tx = 24;
  if (this->ft_tx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(24, this->ft_tx(), output);
  }

  // int32 ft_ty = 25;
  if (this->ft_ty() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(25, this->ft_ty(), output);
  }

  // int32 ft_tz = 26;
  if (this->ft_tz() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(26, this->ft_tz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.EndtoolRevCDTTx)
}

::PROTOBUF_NAMESPACE_ID::uint8* EndtoolRevCDTTx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.EndtoolRevCDTTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // int32 docking_status = 2;
  if (this->docking_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->docking_status(), target);
  }

  // int32 docking_button = 3;
  if (this->docking_button() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->docking_button(), target);
  }

  // int32 docking_dist1 = 4;
  if (this->docking_dist1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->docking_dist1(), target);
  }

  // int32 docking_dist2 = 5;
  if (this->docking_dist2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->docking_dist2(), target);
  }

  // int32 docking_dist3 = 6;
  if (this->docking_dist3() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->docking_dist3(), target);
  }

  // int32 docking_dist4 = 7;
  if (this->docking_dist4() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->docking_dist4(), target);
  }

  // int32 docking_dist5 = 8;
  if (this->docking_dist5() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->docking_dist5(), target);
  }

  // int32 docking_dist6 = 9;
  if (this->docking_dist6() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->docking_dist6(), target);
  }

  // int32 docking_dist7 = 10;
  if (this->docking_dist7() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->docking_dist7(), target);
  }

  // int32 docking_dist8 = 11;
  if (this->docking_dist8() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->docking_dist8(), target);
  }

  // int32 direct_status = 12;
  if (this->direct_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->direct_status(), target);
  }

  // int32 direct_button = 13;
  if (this->direct_button() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->direct_button(), target);
  }

  // int32 direct_encoder = 14;
  if (this->direct_encoder() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->direct_encoder(), target);
  }

  // int32 direct_joystic1x = 15;
  if (this->direct_joystic1x() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->direct_joystic1x(), target);
  }

  // int32 direct_joystic1y = 16;
  if (this->direct_joystic1y() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->direct_joystic1y(), target);
  }

  // int32 direct_joystic2x = 17;
  if (this->direct_joystic2x() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->direct_joystic2x(), target);
  }

  // int32 direct_joystic2y = 18;
  if (this->direct_joystic2y() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->direct_joystic2y(), target);
  }

  // int32 ft_status = 19;
  if (this->ft_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->ft_status(), target);
  }

  // int32 ft_button = 20;
  if (this->ft_button() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->ft_button(), target);
  }

  // int32 ft_fx = 21;
  if (this->ft_fx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->ft_fx(), target);
  }

  // int32 ft_fy = 22;
  if (this->ft_fy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->ft_fy(), target);
  }

  // int32 ft_fz = 23;
  if (this->ft_fz() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->ft_fz(), target);
  }

  // int32 ft_tx = 24;
  if (this->ft_tx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->ft_tx(), target);
  }

  // int32 ft_ty = 25;
  if (this->ft_ty() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->ft_ty(), target);
  }

  // int32 ft_tz = 26;
  if (this->ft_tz() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->ft_tz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.EndtoolRevCDTTx)
  return target;
}

size_t EndtoolRevCDTTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.EndtoolRevCDTTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 docking_status = 2;
  if (this->docking_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->docking_status());
  }

  // int32 docking_button = 3;
  if (this->docking_button() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->docking_button());
  }

  // int32 docking_dist1 = 4;
  if (this->docking_dist1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->docking_dist1());
  }

  // int32 docking_dist2 = 5;
  if (this->docking_dist2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->docking_dist2());
  }

  // int32 docking_dist3 = 6;
  if (this->docking_dist3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->docking_dist3());
  }

  // int32 docking_dist4 = 7;
  if (this->docking_dist4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->docking_dist4());
  }

  // int32 docking_dist5 = 8;
  if (this->docking_dist5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->docking_dist5());
  }

  // int32 docking_dist6 = 9;
  if (this->docking_dist6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->docking_dist6());
  }

  // int32 docking_dist7 = 10;
  if (this->docking_dist7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->docking_dist7());
  }

  // int32 docking_dist8 = 11;
  if (this->docking_dist8() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->docking_dist8());
  }

  // int32 direct_status = 12;
  if (this->direct_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->direct_status());
  }

  // int32 direct_button = 13;
  if (this->direct_button() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->direct_button());
  }

  // int32 direct_encoder = 14;
  if (this->direct_encoder() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->direct_encoder());
  }

  // int32 direct_joystic1x = 15;
  if (this->direct_joystic1x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->direct_joystic1x());
  }

  // int32 direct_joystic1y = 16;
  if (this->direct_joystic1y() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->direct_joystic1y());
  }

  // int32 direct_joystic2x = 17;
  if (this->direct_joystic2x() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->direct_joystic2x());
  }

  // int32 direct_joystic2y = 18;
  if (this->direct_joystic2y() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->direct_joystic2y());
  }

  // int32 ft_status = 19;
  if (this->ft_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ft_status());
  }

  // int32 ft_button = 20;
  if (this->ft_button() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ft_button());
  }

  // int32 ft_fx = 21;
  if (this->ft_fx() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ft_fx());
  }

  // int32 ft_fy = 22;
  if (this->ft_fy() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ft_fy());
  }

  // int32 ft_fz = 23;
  if (this->ft_fz() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ft_fz());
  }

  // int32 ft_tx = 24;
  if (this->ft_tx() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ft_tx());
  }

  // int32 ft_ty = 25;
  if (this->ft_ty() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ft_ty());
  }

  // int32 ft_tz = 26;
  if (this->ft_tz() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ft_tz());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndtoolRevCDTTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.EndtoolRevCDTTx)
  GOOGLE_DCHECK_NE(&from, this);
  const EndtoolRevCDTTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndtoolRevCDTTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.EndtoolRevCDTTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.EndtoolRevCDTTx)
    MergeFrom(*source);
  }
}

void EndtoolRevCDTTx::MergeFrom(const EndtoolRevCDTTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.EndtoolRevCDTTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.docking_status() != 0) {
    set_docking_status(from.docking_status());
  }
  if (from.docking_button() != 0) {
    set_docking_button(from.docking_button());
  }
  if (from.docking_dist1() != 0) {
    set_docking_dist1(from.docking_dist1());
  }
  if (from.docking_dist2() != 0) {
    set_docking_dist2(from.docking_dist2());
  }
  if (from.docking_dist3() != 0) {
    set_docking_dist3(from.docking_dist3());
  }
  if (from.docking_dist4() != 0) {
    set_docking_dist4(from.docking_dist4());
  }
  if (from.docking_dist5() != 0) {
    set_docking_dist5(from.docking_dist5());
  }
  if (from.docking_dist6() != 0) {
    set_docking_dist6(from.docking_dist6());
  }
  if (from.docking_dist7() != 0) {
    set_docking_dist7(from.docking_dist7());
  }
  if (from.docking_dist8() != 0) {
    set_docking_dist8(from.docking_dist8());
  }
  if (from.direct_status() != 0) {
    set_direct_status(from.direct_status());
  }
  if (from.direct_button() != 0) {
    set_direct_button(from.direct_button());
  }
  if (from.direct_encoder() != 0) {
    set_direct_encoder(from.direct_encoder());
  }
  if (from.direct_joystic1x() != 0) {
    set_direct_joystic1x(from.direct_joystic1x());
  }
  if (from.direct_joystic1y() != 0) {
    set_direct_joystic1y(from.direct_joystic1y());
  }
  if (from.direct_joystic2x() != 0) {
    set_direct_joystic2x(from.direct_joystic2x());
  }
  if (from.direct_joystic2y() != 0) {
    set_direct_joystic2y(from.direct_joystic2y());
  }
  if (from.ft_status() != 0) {
    set_ft_status(from.ft_status());
  }
  if (from.ft_button() != 0) {
    set_ft_button(from.ft_button());
  }
  if (from.ft_fx() != 0) {
    set_ft_fx(from.ft_fx());
  }
  if (from.ft_fy() != 0) {
    set_ft_fy(from.ft_fy());
  }
  if (from.ft_fz() != 0) {
    set_ft_fz(from.ft_fz());
  }
  if (from.ft_tx() != 0) {
    set_ft_tx(from.ft_tx());
  }
  if (from.ft_ty() != 0) {
    set_ft_ty(from.ft_ty());
  }
  if (from.ft_tz() != 0) {
    set_ft_tz(from.ft_tz());
  }
}

void EndtoolRevCDTTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.EndtoolRevCDTTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndtoolRevCDTTx::CopyFrom(const EndtoolRevCDTTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.EndtoolRevCDTTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndtoolRevCDTTx::IsInitialized() const {
  return true;
}

void EndtoolRevCDTTx::Swap(EndtoolRevCDTTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndtoolRevCDTTx::InternalSwap(EndtoolRevCDTTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(docking_status_, other->docking_status_);
  swap(docking_button_, other->docking_button_);
  swap(docking_dist1_, other->docking_dist1_);
  swap(docking_dist2_, other->docking_dist2_);
  swap(docking_dist3_, other->docking_dist3_);
  swap(docking_dist4_, other->docking_dist4_);
  swap(docking_dist5_, other->docking_dist5_);
  swap(docking_dist6_, other->docking_dist6_);
  swap(docking_dist7_, other->docking_dist7_);
  swap(docking_dist8_, other->docking_dist8_);
  swap(direct_status_, other->direct_status_);
  swap(direct_button_, other->direct_button_);
  swap(direct_encoder_, other->direct_encoder_);
  swap(direct_joystic1x_, other->direct_joystic1x_);
  swap(direct_joystic1y_, other->direct_joystic1y_);
  swap(direct_joystic2x_, other->direct_joystic2x_);
  swap(direct_joystic2y_, other->direct_joystic2y_);
  swap(ft_status_, other->ft_status_);
  swap(ft_button_, other->ft_button_);
  swap(ft_fx_, other->ft_fx_);
  swap(ft_fy_, other->ft_fy_);
  swap(ft_fz_, other->ft_fz_);
  swap(ft_tx_, other->ft_tx_);
  swap(ft_ty_, other->ft_ty_);
  swap(ft_tz_, other->ft_tz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndtoolRevCDTTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DIList::InitAsDefaultInstance() {
}
class DIList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DIList::kIdxFieldNumber;
const int DIList::kDiListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DIList::DIList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.DIList)
}
DIList::DIList(const DIList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      di_list_(from.di_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:GRPCECat.DIList)
}

void DIList::SharedCtor() {
  idx_ = 0;
}

DIList::~DIList() {
  // @@protoc_insertion_point(destructor:GRPCECat.DIList)
  SharedDtor();
}

void DIList::SharedDtor() {
}

void DIList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DIList& DIList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DIList_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void DIList::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.DIList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  di_list_.Clear();
  idx_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DIList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 di_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_di_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_di_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DIList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.DIList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 di_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_di_list())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_di_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.DIList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.DIList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DIList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.DIList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // repeated int32 di_list = 2;
  if (this->di_list_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_di_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->di_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->di_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.DIList)
}

::PROTOBUF_NAMESPACE_ID::uint8* DIList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.DIList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // repeated int32 di_list = 2;
  if (this->di_list_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _di_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->di_list_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.DIList)
  return target;
}

size_t DIList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.DIList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 di_list = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->di_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _di_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DIList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.DIList)
  GOOGLE_DCHECK_NE(&from, this);
  const DIList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DIList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.DIList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.DIList)
    MergeFrom(*source);
  }
}

void DIList::MergeFrom(const DIList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.DIList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  di_list_.MergeFrom(from.di_list_);
  if (from.idx() != 0) {
    set_idx(from.idx());
  }
}

void DIList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.DIList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DIList::CopyFrom(const DIList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.DIList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DIList::IsInitialized() const {
  return true;
}

void DIList::Swap(DIList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DIList::InternalSwap(DIList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  di_list_.InternalSwap(&other->di_list_);
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DIList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DOList::InitAsDefaultInstance() {
}
class DOList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DOList::kIdxFieldNumber;
const int DOList::kDoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DOList::DOList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.DOList)
}
DOList::DOList(const DOList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      do_list_(from.do_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:GRPCECat.DOList)
}

void DOList::SharedCtor() {
  idx_ = 0;
}

DOList::~DOList() {
  // @@protoc_insertion_point(destructor:GRPCECat.DOList)
  SharedDtor();
}

void DOList::SharedDtor() {
}

void DOList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DOList& DOList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DOList_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void DOList::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.DOList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  do_list_.Clear();
  idx_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DOList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 do_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_do_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_do_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DOList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.DOList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 do_list = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_do_list())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_do_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.DOList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.DOList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DOList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.DOList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // repeated int32 do_list = 2;
  if (this->do_list_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_do_list_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->do_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->do_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.DOList)
}

::PROTOBUF_NAMESPACE_ID::uint8* DOList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.DOList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // repeated int32 do_list = 2;
  if (this->do_list_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _do_list_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->do_list_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.DOList)
  return target;
}

size_t DOList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.DOList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 do_list = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->do_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _do_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DOList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.DOList)
  GOOGLE_DCHECK_NE(&from, this);
  const DOList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DOList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.DOList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.DOList)
    MergeFrom(*source);
  }
}

void DOList::MergeFrom(const DOList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.DOList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  do_list_.MergeFrom(from.do_list_);
  if (from.idx() != 0) {
    set_idx(from.idx());
  }
}

void DOList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.DOList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DOList::CopyFrom(const DOList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.DOList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DOList::IsInitialized() const {
  return true;
}

void DOList::Swap(DOList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DOList::InternalSwap(DOList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  do_list_.InternalSwap(&other->do_list_);
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DOList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotusFTTx::InitAsDefaultInstance() {
}
class RobotusFTTx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotusFTTx::kFxFieldNumber;
const int RobotusFTTx::kFyFieldNumber;
const int RobotusFTTx::kFzFieldNumber;
const int RobotusFTTx::kTxFieldNumber;
const int RobotusFTTx::kTyFieldNumber;
const int RobotusFTTx::kTzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotusFTTx::RobotusFTTx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.RobotusFTTx)
}
RobotusFTTx::RobotusFTTx(const RobotusFTTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&tz_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(tz_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.RobotusFTTx)
}

void RobotusFTTx::SharedCtor() {
  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tz_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(tz_));
}

RobotusFTTx::~RobotusFTTx() {
  // @@protoc_insertion_point(destructor:GRPCECat.RobotusFTTx)
  SharedDtor();
}

void RobotusFTTx::SharedDtor() {
}

void RobotusFTTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotusFTTx& RobotusFTTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotusFTTx_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void RobotusFTTx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.RobotusFTTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tz_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(tz_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RobotusFTTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float fx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          fz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          tx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float tz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          tz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RobotusFTTx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.RobotusFTTx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float fx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fz = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tx = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ty = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float tz = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.RobotusFTTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.RobotusFTTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RobotusFTTx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.RobotusFTTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fx = 1;
  if (!(this->fx() <= 0 && this->fx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->fx(), output);
  }

  // float fy = 2;
  if (!(this->fy() <= 0 && this->fy() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->fy(), output);
  }

  // float fz = 3;
  if (!(this->fz() <= 0 && this->fz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->fz(), output);
  }

  // float tx = 4;
  if (!(this->tx() <= 0 && this->tx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->tx(), output);
  }

  // float ty = 5;
  if (!(this->ty() <= 0 && this->ty() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->ty(), output);
  }

  // float tz = 6;
  if (!(this->tz() <= 0 && this->tz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->tz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.RobotusFTTx)
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotusFTTx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.RobotusFTTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fx = 1;
  if (!(this->fx() <= 0 && this->fx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->fx(), target);
  }

  // float fy = 2;
  if (!(this->fy() <= 0 && this->fy() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->fy(), target);
  }

  // float fz = 3;
  if (!(this->fz() <= 0 && this->fz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->fz(), target);
  }

  // float tx = 4;
  if (!(this->tx() <= 0 && this->tx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->tx(), target);
  }

  // float ty = 5;
  if (!(this->ty() <= 0 && this->ty() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->ty(), target);
  }

  // float tz = 6;
  if (!(this->tz() <= 0 && this->tz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->tz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.RobotusFTTx)
  return target;
}

size_t RobotusFTTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.RobotusFTTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fx = 1;
  if (!(this->fx() <= 0 && this->fx() >= 0)) {
    total_size += 1 + 4;
  }

  // float fy = 2;
  if (!(this->fy() <= 0 && this->fy() >= 0)) {
    total_size += 1 + 4;
  }

  // float fz = 3;
  if (!(this->fz() <= 0 && this->fz() >= 0)) {
    total_size += 1 + 4;
  }

  // float tx = 4;
  if (!(this->tx() <= 0 && this->tx() >= 0)) {
    total_size += 1 + 4;
  }

  // float ty = 5;
  if (!(this->ty() <= 0 && this->ty() >= 0)) {
    total_size += 1 + 4;
  }

  // float tz = 6;
  if (!(this->tz() <= 0 && this->tz() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotusFTTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.RobotusFTTx)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotusFTTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotusFTTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.RobotusFTTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.RobotusFTTx)
    MergeFrom(*source);
  }
}

void RobotusFTTx::MergeFrom(const RobotusFTTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.RobotusFTTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.fx() <= 0 && from.fx() >= 0)) {
    set_fx(from.fx());
  }
  if (!(from.fy() <= 0 && from.fy() >= 0)) {
    set_fy(from.fy());
  }
  if (!(from.fz() <= 0 && from.fz() >= 0)) {
    set_fz(from.fz());
  }
  if (!(from.tx() <= 0 && from.tx() >= 0)) {
    set_tx(from.tx());
  }
  if (!(from.ty() <= 0 && from.ty() >= 0)) {
    set_ty(from.ty());
  }
  if (!(from.tz() <= 0 && from.tz() >= 0)) {
    set_tz(from.tz());
  }
}

void RobotusFTTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.RobotusFTTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotusFTTx::CopyFrom(const RobotusFTTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.RobotusFTTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotusFTTx::IsInitialized() const {
  return true;
}

void RobotusFTTx::Swap(RobotusFTTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotusFTTx::InternalSwap(RobotusFTTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fx_, other->fx_);
  swap(fy_, other->fy_);
  swap(fz_, other->fz_);
  swap(tx_, other->tx_);
  swap(ty_, other->ty_);
  swap(tz_, other->tz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotusFTTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetPos::InitAsDefaultInstance() {
}
class TargetPos::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetPos::kIdxFieldNumber;
const int TargetPos::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetPos::TargetPos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.TargetPos)
}
TargetPos::TargetPos(const TargetPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.TargetPos)
}

void TargetPos::SharedCtor() {
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(pos_));
}

TargetPos::~TargetPos() {
  // @@protoc_insertion_point(destructor:GRPCECat.TargetPos)
  SharedDtor();
}

void TargetPos::SharedDtor() {
}

void TargetPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetPos& TargetPos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetPos_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void TargetPos::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.TargetPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(pos_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TargetPos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TargetPos::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.TargetPos)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.TargetPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.TargetPos)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TargetPos::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.TargetPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // float pos = 2;
  if (!(this->pos() <= 0 && this->pos() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.TargetPos)
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetPos::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.TargetPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // float pos = 2;
  if (!(this->pos() <= 0 && this->pos() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->pos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.TargetPos)
  return target;
}

size_t TargetPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.TargetPos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  // float pos = 2;
  if (!(this->pos() <= 0 && this->pos() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetPos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.TargetPos)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetPos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetPos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.TargetPos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.TargetPos)
    MergeFrom(*source);
  }
}

void TargetPos::MergeFrom(const TargetPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.TargetPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idx() != 0) {
    set_idx(from.idx());
  }
  if (!(from.pos() <= 0 && from.pos() >= 0)) {
    set_pos(from.pos());
  }
}

void TargetPos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.TargetPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetPos::CopyFrom(const TargetPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.TargetPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetPos::IsInitialized() const {
  return true;
}

void TargetPos::Swap(TargetPos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetPos::InternalSwap(TargetPos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(idx_, other->idx_);
  swap(pos_, other->pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetPos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntVal::InitAsDefaultInstance() {
}
class IntVal::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntVal::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntVal::IntVal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.IntVal)
}
IntVal::IntVal(const IntVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:GRPCECat.IntVal)
}

void IntVal::SharedCtor() {
  val_ = 0;
}

IntVal::~IntVal() {
  // @@protoc_insertion_point(destructor:GRPCECat.IntVal)
  SharedDtor();
}

void IntVal::SharedDtor() {
}

void IntVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntVal& IntVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntVal_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void IntVal::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.IntVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntVal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.IntVal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.IntVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.IntVal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntVal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.IntVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 val = 1;
  if (this->val() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.IntVal)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntVal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.IntVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 val = 1;
  if (this->val() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.IntVal)
  return target;
}

size_t IntVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.IntVal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 val = 1;
  if (this->val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->val());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.IntVal)
  GOOGLE_DCHECK_NE(&from, this);
  const IntVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.IntVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.IntVal)
    MergeFrom(*source);
  }
}

void IntVal::MergeFrom(const IntVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.IntVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.val() != 0) {
    set_val(from.val());
  }
}

void IntVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.IntVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntVal::CopyFrom(const IntVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.IntVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntVal::IsInitialized() const {
  return true;
}

void IntVal::Swap(IntVal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntVal::InternalSwap(IntVal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntVals::InitAsDefaultInstance() {
}
class IntVals::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntVals::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntVals::IntVals()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.IntVals)
}
IntVals::IntVals(const IntVals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      val_(from.val_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GRPCECat.IntVals)
}

void IntVals::SharedCtor() {
}

IntVals::~IntVals() {
  // @@protoc_insertion_point(destructor:GRPCECat.IntVals)
  SharedDtor();
}

void IntVals::SharedDtor() {
}

void IntVals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntVals& IntVals::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntVals_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void IntVals::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.IntVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntVals::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntVals::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.IntVals)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_val())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.IntVals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.IntVals)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntVals::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.IntVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 val = 1;
  if (this->val_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->val_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->val(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.IntVals)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntVals::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.IntVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 val = 1;
  if (this->val_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _val_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->val_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.IntVals)
  return target;
}

size_t IntVals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.IntVals)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 val = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntVals::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.IntVals)
  GOOGLE_DCHECK_NE(&from, this);
  const IntVals* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntVals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.IntVals)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.IntVals)
    MergeFrom(*source);
  }
}

void IntVals::MergeFrom(const IntVals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.IntVals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
}

void IntVals::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.IntVals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntVals::CopyFrom(const IntVals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.IntVals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntVals::IsInitialized() const {
  return true;
}

void IntVals::Swap(IntVals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntVals::InternalSwap(IntVals* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  val_.InternalSwap(&other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntVals::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloatVal::InitAsDefaultInstance() {
}
class FloatVal::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatVal::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatVal::FloatVal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.FloatVal)
}
FloatVal::FloatVal(const FloatVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:GRPCECat.FloatVal)
}

void FloatVal::SharedCtor() {
  val_ = 0;
}

FloatVal::~FloatVal() {
  // @@protoc_insertion_point(destructor:GRPCECat.FloatVal)
  SharedDtor();
}

void FloatVal::SharedDtor() {
}

void FloatVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatVal& FloatVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatVal_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void FloatVal::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.FloatVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FloatVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FloatVal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.FloatVal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.FloatVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.FloatVal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FloatVal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.FloatVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.FloatVal)
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatVal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.FloatVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.FloatVal)
  return target;
}

size_t FloatVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.FloatVal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.FloatVal)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.FloatVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.FloatVal)
    MergeFrom(*source);
  }
}

void FloatVal::MergeFrom(const FloatVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.FloatVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.val() <= 0 && from.val() >= 0)) {
    set_val(from.val());
  }
}

void FloatVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.FloatVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatVal::CopyFrom(const FloatVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.FloatVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVal::IsInitialized() const {
  return true;
}

void FloatVal::Swap(FloatVal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatVal::InternalSwap(FloatVal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloatVals::InitAsDefaultInstance() {
}
class FloatVals::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatVals::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatVals::FloatVals()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.FloatVals)
}
FloatVals::FloatVals(const FloatVals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      val_(from.val_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GRPCECat.FloatVals)
}

void FloatVals::SharedCtor() {
}

FloatVals::~FloatVals() {
  // @@protoc_insertion_point(destructor:GRPCECat.FloatVals)
  SharedDtor();
}

void FloatVals::SharedDtor() {
}

void FloatVals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatVals& FloatVals::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatVals_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void FloatVals::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.FloatVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FloatVals::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FloatVals::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.FloatVals)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_val())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.FloatVals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.FloatVals)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FloatVals::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.FloatVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float val = 1;
  if (this->val_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->val().data(), this->val_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.FloatVals)
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatVals::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.FloatVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float val = 1;
  if (this->val_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _val_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->val_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.FloatVals)
  return target;
}

size_t FloatVals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.FloatVals)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float val = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatVals::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.FloatVals)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatVals* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatVals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.FloatVals)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.FloatVals)
    MergeFrom(*source);
  }
}

void FloatVals::MergeFrom(const FloatVals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.FloatVals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
}

void FloatVals::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.FloatVals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatVals::CopyFrom(const FloatVals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.FloatVals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVals::IsInitialized() const {
  return true;
}

void FloatVals::Swap(FloatVals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatVals::InternalSwap(FloatVals* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  val_.InternalSwap(&other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatVals::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StringVal::InitAsDefaultInstance() {
}
class StringVal::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StringVal::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StringVal::StringVal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.StringVal)
}
StringVal::StringVal(const StringVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.val().size() > 0) {
    val_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  // @@protoc_insertion_point(copy_constructor:GRPCECat.StringVal)
}

void StringVal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringVal_EtherCATCommgRPCServer_2eproto.base);
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringVal::~StringVal() {
  // @@protoc_insertion_point(destructor:GRPCECat.StringVal)
  SharedDtor();
}

void StringVal::SharedDtor() {
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringVal& StringVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringVal_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void StringVal::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.StringVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_val(), ptr, ctx, "GRPCECat.StringVal.val");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringVal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.StringVal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->val().data(), static_cast<int>(this->val().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "GRPCECat.StringVal.val"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.StringVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.StringVal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringVal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.StringVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string val = 1;
  if (this->val().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->val().data(), static_cast<int>(this->val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GRPCECat.StringVal.val");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.StringVal)
}

::PROTOBUF_NAMESPACE_ID::uint8* StringVal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.StringVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string val = 1;
  if (this->val().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->val().data(), static_cast<int>(this->val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GRPCECat.StringVal.val");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.StringVal)
  return target;
}

size_t StringVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.StringVal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string val = 1;
  if (this->val().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->val());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.StringVal)
  GOOGLE_DCHECK_NE(&from, this);
  const StringVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.StringVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.StringVal)
    MergeFrom(*source);
  }
}

void StringVal::MergeFrom(const StringVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.StringVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.val().size() > 0) {

    val_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
}

void StringVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.StringVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringVal::CopyFrom(const StringVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.StringVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringVal::IsInitialized() const {
  return true;
}

void StringVal::Swap(StringVal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringVal::InternalSwap(StringVal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  val_.Swap(&other->val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoubleVals::InitAsDefaultInstance() {
}
class DoubleVals::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleVals::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleVals::DoubleVals()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.DoubleVals)
}
DoubleVals::DoubleVals(const DoubleVals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      val_(from.val_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GRPCECat.DoubleVals)
}

void DoubleVals::SharedCtor() {
}

DoubleVals::~DoubleVals() {
  // @@protoc_insertion_point(destructor:GRPCECat.DoubleVals)
  SharedDtor();
}

void DoubleVals::SharedDtor() {
}

void DoubleVals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleVals& DoubleVals::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleVals_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void DoubleVals::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.DoubleVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoubleVals::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          add_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoubleVals::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.DoubleVals)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_val())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.DoubleVals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.DoubleVals)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoubleVals::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.DoubleVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double val = 1;
  if (this->val_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->val().data(), this->val_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.DoubleVals)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleVals::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.DoubleVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double val = 1;
  if (this->val_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _val_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->val_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.DoubleVals)
  return target;
}

size_t DoubleVals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.DoubleVals)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double val = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleVals::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.DoubleVals)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleVals* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleVals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.DoubleVals)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.DoubleVals)
    MergeFrom(*source);
  }
}

void DoubleVals::MergeFrom(const DoubleVals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.DoubleVals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
}

void DoubleVals::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.DoubleVals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleVals::CopyFrom(const DoubleVals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.DoubleVals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleVals::IsInitialized() const {
  return true;
}

void DoubleVals::Swap(DoubleVals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleVals::InternalSwap(DoubleVals* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  val_.InternalSwap(&other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleVals::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VelAccBoundary::InitAsDefaultInstance() {
}
class VelAccBoundary::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VelAccBoundary::kIdxFieldNumber;
const int VelAccBoundary::kVmaxFieldNumber;
const int VelAccBoundary::kAmaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VelAccBoundary::VelAccBoundary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCECat.VelAccBoundary)
}
VelAccBoundary::VelAccBoundary(const VelAccBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&amax_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(amax_));
  // @@protoc_insertion_point(copy_constructor:GRPCECat.VelAccBoundary)
}

void VelAccBoundary::SharedCtor() {
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amax_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(amax_));
}

VelAccBoundary::~VelAccBoundary() {
  // @@protoc_insertion_point(destructor:GRPCECat.VelAccBoundary)
  SharedDtor();
}

void VelAccBoundary::SharedDtor() {
}

void VelAccBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VelAccBoundary& VelAccBoundary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VelAccBoundary_EtherCATCommgRPCServer_2eproto.base);
  return *internal_default_instance();
}


void VelAccBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCECat.VelAccBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amax_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(amax_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VelAccBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float vmax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          vmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float amax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          amax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VelAccBoundary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCECat.VelAccBoundary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vmax = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float amax = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCECat.VelAccBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCECat.VelAccBoundary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VelAccBoundary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCECat.VelAccBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // float vmax = 2;
  if (!(this->vmax() <= 0 && this->vmax() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->vmax(), output);
  }

  // float amax = 3;
  if (!(this->amax() <= 0 && this->amax() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->amax(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCECat.VelAccBoundary)
}

::PROTOBUF_NAMESPACE_ID::uint8* VelAccBoundary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCECat.VelAccBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // float vmax = 2;
  if (!(this->vmax() <= 0 && this->vmax() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->vmax(), target);
  }

  // float amax = 3;
  if (!(this->amax() <= 0 && this->amax() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->amax(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCECat.VelAccBoundary)
  return target;
}

size_t VelAccBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCECat.VelAccBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  // float vmax = 2;
  if (!(this->vmax() <= 0 && this->vmax() >= 0)) {
    total_size += 1 + 4;
  }

  // float amax = 3;
  if (!(this->amax() <= 0 && this->amax() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelAccBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCECat.VelAccBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const VelAccBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelAccBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCECat.VelAccBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCECat.VelAccBoundary)
    MergeFrom(*source);
  }
}

void VelAccBoundary::MergeFrom(const VelAccBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCECat.VelAccBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idx() != 0) {
    set_idx(from.idx());
  }
  if (!(from.vmax() <= 0 && from.vmax() >= 0)) {
    set_vmax(from.vmax());
  }
  if (!(from.amax() <= 0 && from.amax() >= 0)) {
    set_amax(from.amax());
  }
}

void VelAccBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCECat.VelAccBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelAccBoundary::CopyFrom(const VelAccBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCECat.VelAccBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelAccBoundary::IsInitialized() const {
  return true;
}

void VelAccBoundary::Swap(VelAccBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VelAccBoundary::InternalSwap(VelAccBoundary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(idx_, other->idx_);
  swap(vmax_, other->vmax_);
  swap(amax_, other->amax_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VelAccBoundary::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GRPCECat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GRPCECat::Empty* Arena::CreateMaybeMessage< ::GRPCECat::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::ServoIndex* Arena::CreateMaybeMessage< ::GRPCECat::ServoIndex >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::ServoIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::MotorDriverTx* Arena::CreateMaybeMessage< ::GRPCECat::MotorDriverTx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::MotorDriverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::MotorDriverRx* Arena::CreateMaybeMessage< ::GRPCECat::MotorDriverRx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::MotorDriverRx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::PanasonicDriverTx* Arena::CreateMaybeMessage< ::GRPCECat::PanasonicDriverTx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::PanasonicDriverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::PanasonicDriverRx* Arena::CreateMaybeMessage< ::GRPCECat::PanasonicDriverRx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::PanasonicDriverRx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::MotorDriverTxIndex* Arena::CreateMaybeMessage< ::GRPCECat::MotorDriverTxIndex >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::MotorDriverTxIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::MotorDriverRxIndex* Arena::CreateMaybeMessage< ::GRPCECat::MotorDriverRxIndex >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::MotorDriverRxIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::ServoParam* Arena::CreateMaybeMessage< ::GRPCECat::ServoParam >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::ServoParam >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::FTsensorTx* Arena::CreateMaybeMessage< ::GRPCECat::FTsensorTx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::FTsensorTx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::IOBoardTx* Arena::CreateMaybeMessage< ::GRPCECat::IOBoardTx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::IOBoardTx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::IOBoardRx* Arena::CreateMaybeMessage< ::GRPCECat::IOBoardRx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::IOBoardRx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::EndtoolTx* Arena::CreateMaybeMessage< ::GRPCECat::EndtoolTx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::EndtoolTx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::EndtoolRx* Arena::CreateMaybeMessage< ::GRPCECat::EndtoolRx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::EndtoolRx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::EndtoolRevCDTTx* Arena::CreateMaybeMessage< ::GRPCECat::EndtoolRevCDTTx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::EndtoolRevCDTTx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::DIList* Arena::CreateMaybeMessage< ::GRPCECat::DIList >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::DIList >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::DOList* Arena::CreateMaybeMessage< ::GRPCECat::DOList >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::DOList >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::RobotusFTTx* Arena::CreateMaybeMessage< ::GRPCECat::RobotusFTTx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::RobotusFTTx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::TargetPos* Arena::CreateMaybeMessage< ::GRPCECat::TargetPos >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::TargetPos >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::IntVal* Arena::CreateMaybeMessage< ::GRPCECat::IntVal >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::IntVal >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::IntVals* Arena::CreateMaybeMessage< ::GRPCECat::IntVals >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::IntVals >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::FloatVal* Arena::CreateMaybeMessage< ::GRPCECat::FloatVal >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::FloatVal >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::FloatVals* Arena::CreateMaybeMessage< ::GRPCECat::FloatVals >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::FloatVals >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::StringVal* Arena::CreateMaybeMessage< ::GRPCECat::StringVal >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::StringVal >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::DoubleVals* Arena::CreateMaybeMessage< ::GRPCECat::DoubleVals >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::DoubleVals >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCECat::VelAccBoundary* Arena::CreateMaybeMessage< ::GRPCECat::VelAccBoundary >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCECat::VelAccBoundary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
