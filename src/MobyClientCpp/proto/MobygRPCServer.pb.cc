// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MobygRPCServer.proto

#include "MobygRPCServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_MobygRPCServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotorDriverRx_MobygRPCServer_2eproto;
namespace GRPCMoby {
class EmptyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class JsonParamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JsonParam> _instance;
} _JsonParam_default_instance_;
class MotorDriverTxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotorDriverTx> _instance;
} _MotorDriverTx_default_instance_;
class MotorDriverRxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotorDriverRx> _instance;
} _MotorDriverRx_default_instance_;
class MotorDriverRxsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotorDriverRxs> _instance;
} _MotorDriverRxs_default_instance_;
class MobyStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MobyState> _instance;
} _MobyState_default_instance_;
class MobyErrorStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MobyErrorState> _instance;
} _MobyErrorState_default_instance_;
class MobyPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MobyPose> _instance;
} _MobyPose_default_instance_;
class IMUDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMUData> _instance;
} _IMUData_default_instance_;
class MobyVelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MobyVel> _instance;
} _MobyVel_default_instance_;
class SwerveDoublesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwerveDoubles> _instance;
} _SwerveDoubles_default_instance_;
class TargetVelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TargetVel> _instance;
} _TargetVel_default_instance_;
class ZeroCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZeroCount> _instance;
} _ZeroCount_default_instance_;
class IRDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IRData> _instance;
} _IRData_default_instance_;
class BMSDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMSData> _instance;
} _BMSData_default_instance_;
class GBoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GBool> _instance;
} _GBool_default_instance_;
class GIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GInt> _instance;
} _GInt_default_instance_;
class GFloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GFloat> _instance;
} _GFloat_default_instance_;
class GStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GString> _instance;
} _GString_default_instance_;
class BoolValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoolVal> _instance;
} _BoolVal_default_instance_;
class IntValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntVal> _instance;
} _IntVal_default_instance_;
class IntValsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntVals> _instance;
} _IntVals_default_instance_;
class FloatValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatVal> _instance;
} _FloatVal_default_instance_;
class FloatValsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatVals> _instance;
} _FloatVals_default_instance_;
class DoubleValDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleVal> _instance;
} _DoubleVal_default_instance_;
class DoubleValsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleVals> _instance;
} _DoubleVals_default_instance_;
class RotationGainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RotationGain> _instance;
} _RotationGain_default_instance_;
class VelAccBoundaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VelAccBoundary> _instance;
} _VelAccBoundary_default_instance_;
}  // namespace GRPCMoby
static void InitDefaultsscc_info_BMSData_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_BMSData_default_instance_;
    new (ptr) ::GRPCMoby::BMSData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::BMSData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMSData_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BMSData_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_BoolVal_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_BoolVal_default_instance_;
    new (ptr) ::GRPCMoby::BoolVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::BoolVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolVal_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BoolVal_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_DoubleVal_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_DoubleVal_default_instance_;
    new (ptr) ::GRPCMoby::DoubleVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::DoubleVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleVal_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DoubleVal_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_DoubleVals_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_DoubleVals_default_instance_;
    new (ptr) ::GRPCMoby::DoubleVals();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::DoubleVals::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleVals_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DoubleVals_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_Empty_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_Empty_default_instance_;
    new (ptr) ::GRPCMoby::Empty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::Empty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Empty_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_FloatVal_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_FloatVal_default_instance_;
    new (ptr) ::GRPCMoby::FloatVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::FloatVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVal_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FloatVal_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_FloatVals_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_FloatVals_default_instance_;
    new (ptr) ::GRPCMoby::FloatVals();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::FloatVals::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVals_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FloatVals_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_GBool_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_GBool_default_instance_;
    new (ptr) ::GRPCMoby::GBool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::GBool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GBool_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GBool_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_GFloat_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_GFloat_default_instance_;
    new (ptr) ::GRPCMoby::GFloat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::GFloat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GFloat_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GFloat_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_GInt_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_GInt_default_instance_;
    new (ptr) ::GRPCMoby::GInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::GInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GInt_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GInt_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_GString_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_GString_default_instance_;
    new (ptr) ::GRPCMoby::GString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::GString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GString_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GString_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_IMUData_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_IMUData_default_instance_;
    new (ptr) ::GRPCMoby::IMUData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::IMUData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMUData_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IMUData_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_IRData_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_IRData_default_instance_;
    new (ptr) ::GRPCMoby::IRData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::IRData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IRData_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IRData_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_IntVal_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_IntVal_default_instance_;
    new (ptr) ::GRPCMoby::IntVal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::IntVal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntVal_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IntVal_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_IntVals_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_IntVals_default_instance_;
    new (ptr) ::GRPCMoby::IntVals();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::IntVals::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntVals_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IntVals_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_JsonParam_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_JsonParam_default_instance_;
    new (ptr) ::GRPCMoby::JsonParam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::JsonParam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JsonParam_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_JsonParam_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_MobyErrorState_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_MobyErrorState_default_instance_;
    new (ptr) ::GRPCMoby::MobyErrorState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::MobyErrorState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MobyErrorState_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MobyErrorState_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_MobyPose_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_MobyPose_default_instance_;
    new (ptr) ::GRPCMoby::MobyPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::MobyPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MobyPose_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MobyPose_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_MobyState_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_MobyState_default_instance_;
    new (ptr) ::GRPCMoby::MobyState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::MobyState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MobyState_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MobyState_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_MobyVel_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_MobyVel_default_instance_;
    new (ptr) ::GRPCMoby::MobyVel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::MobyVel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MobyVel_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MobyVel_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_MotorDriverRx_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_MotorDriverRx_default_instance_;
    new (ptr) ::GRPCMoby::MotorDriverRx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::MotorDriverRx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotorDriverRx_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MotorDriverRx_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_MotorDriverRxs_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_MotorDriverRxs_default_instance_;
    new (ptr) ::GRPCMoby::MotorDriverRxs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::MotorDriverRxs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MotorDriverRxs_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MotorDriverRxs_MobygRPCServer_2eproto}, {
      &scc_info_MotorDriverRx_MobygRPCServer_2eproto.base,}};

static void InitDefaultsscc_info_MotorDriverTx_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_MotorDriverTx_default_instance_;
    new (ptr) ::GRPCMoby::MotorDriverTx();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::MotorDriverTx::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotorDriverTx_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MotorDriverTx_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_RotationGain_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_RotationGain_default_instance_;
    new (ptr) ::GRPCMoby::RotationGain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::RotationGain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RotationGain_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RotationGain_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_SwerveDoubles_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_SwerveDoubles_default_instance_;
    new (ptr) ::GRPCMoby::SwerveDoubles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::SwerveDoubles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwerveDoubles_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SwerveDoubles_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_TargetVel_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_TargetVel_default_instance_;
    new (ptr) ::GRPCMoby::TargetVel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::TargetVel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TargetVel_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TargetVel_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_VelAccBoundary_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_VelAccBoundary_default_instance_;
    new (ptr) ::GRPCMoby::VelAccBoundary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::VelAccBoundary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelAccBoundary_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VelAccBoundary_MobygRPCServer_2eproto}, {}};

static void InitDefaultsscc_info_ZeroCount_MobygRPCServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::GRPCMoby::_ZeroCount_default_instance_;
    new (ptr) ::GRPCMoby::ZeroCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GRPCMoby::ZeroCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ZeroCount_MobygRPCServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ZeroCount_MobygRPCServer_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MobygRPCServer_2eproto[28];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MobygRPCServer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MobygRPCServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MobygRPCServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::JsonParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::JsonParam, idx_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::JsonParam, json_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverTx, statusword_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverTx, modeopdisp_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverTx, actualposition_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverTx, actualvelocity_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverTx, actualtorque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverRx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverRx, controlword_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverRx, modeop_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverRx, targetposition_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverRx, targetvelocity_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverRx, targettorque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverRxs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MotorDriverRxs, motordriverrx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, isready_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, ismoving_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, ismovefinished_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, isemgpushed_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, iserrorstate_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, ishomepose_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, isrotationzero_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, isresetting_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, isimuavailable_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, iscollided_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, isprogramrunning_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyState, isprogrampause_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyErrorState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyErrorState, errorstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyPose, px_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyPose, py_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyPose, pw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IMUData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IMUData, anglex_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IMUData, angley_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IMUData, anglez_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IMUData, anglevelx_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IMUData, anglevely_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IMUData, anglevelz_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IMUData, linaccx_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IMUData, linaccy_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IMUData, linaccz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyVel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyVel, vx_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyVel, vy_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::MobyVel, vw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::SwerveDoubles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::SwerveDoubles, fl_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::SwerveDoubles, fr_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::SwerveDoubles, bl_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::SwerveDoubles, br_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::TargetVel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::TargetVel, vx_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::TargetVel, vy_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::TargetVel, vw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::ZeroCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::ZeroCount, fl_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::ZeroCount, fr_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::ZeroCount, bl_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::ZeroCount, br_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IRData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IRData, ir_front1_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IRData, ir_front2_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IRData, ir_left1_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IRData, ir_left2_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IRData, ir_left3_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IRData, ir_rear_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IRData, ir_right1_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IRData, ir_right2_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IRData, ir_right3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::BMSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::BMSData, bms_status_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::BMSData, pack_volt_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::BMSData, battery_volt_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::BMSData, pack_current1_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::BMSData, pack_current2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::GBool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::GBool, idx_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::GBool, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::GInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::GInt, idx_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::GInt, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::GFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::GFloat, idx_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::GFloat, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::GString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::GString, idx_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::GString, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::BoolVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::BoolVal, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IntVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IntVal, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IntVals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::IntVals, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::FloatVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::FloatVal, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::FloatVals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::FloatVals, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::DoubleVal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::DoubleVal, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::DoubleVals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::DoubleVals, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::RotationGain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::RotationGain, idx_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::RotationGain, k_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::RotationGain, kv_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::RotationGain, kp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::VelAccBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::VelAccBoundary, idx_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::VelAccBoundary, vmax_),
  PROTOBUF_FIELD_OFFSET(::GRPCMoby::VelAccBoundary, amax_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::GRPCMoby::Empty)},
  { 5, -1, sizeof(::GRPCMoby::JsonParam)},
  { 12, -1, sizeof(::GRPCMoby::MotorDriverTx)},
  { 22, -1, sizeof(::GRPCMoby::MotorDriverRx)},
  { 32, -1, sizeof(::GRPCMoby::MotorDriverRxs)},
  { 38, -1, sizeof(::GRPCMoby::MobyState)},
  { 55, -1, sizeof(::GRPCMoby::MobyErrorState)},
  { 61, -1, sizeof(::GRPCMoby::MobyPose)},
  { 69, -1, sizeof(::GRPCMoby::IMUData)},
  { 83, -1, sizeof(::GRPCMoby::MobyVel)},
  { 91, -1, sizeof(::GRPCMoby::SwerveDoubles)},
  { 100, -1, sizeof(::GRPCMoby::TargetVel)},
  { 108, -1, sizeof(::GRPCMoby::ZeroCount)},
  { 117, -1, sizeof(::GRPCMoby::IRData)},
  { 131, -1, sizeof(::GRPCMoby::BMSData)},
  { 141, -1, sizeof(::GRPCMoby::GBool)},
  { 148, -1, sizeof(::GRPCMoby::GInt)},
  { 155, -1, sizeof(::GRPCMoby::GFloat)},
  { 162, -1, sizeof(::GRPCMoby::GString)},
  { 169, -1, sizeof(::GRPCMoby::BoolVal)},
  { 175, -1, sizeof(::GRPCMoby::IntVal)},
  { 181, -1, sizeof(::GRPCMoby::IntVals)},
  { 187, -1, sizeof(::GRPCMoby::FloatVal)},
  { 193, -1, sizeof(::GRPCMoby::FloatVals)},
  { 199, -1, sizeof(::GRPCMoby::DoubleVal)},
  { 205, -1, sizeof(::GRPCMoby::DoubleVals)},
  { 211, -1, sizeof(::GRPCMoby::RotationGain)},
  { 220, -1, sizeof(::GRPCMoby::VelAccBoundary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_JsonParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_MotorDriverTx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_MotorDriverRx_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_MotorDriverRxs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_MobyState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_MobyErrorState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_MobyPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_IMUData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_MobyVel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_SwerveDoubles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_TargetVel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_ZeroCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_IRData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_BMSData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_GBool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_GInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_GFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_GString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_BoolVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_IntVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_IntVals_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_FloatVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_FloatVals_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_DoubleVal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_DoubleVals_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_RotationGain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::GRPCMoby::_VelAccBoundary_default_instance_),
};

const char descriptor_table_protodef_MobygRPCServer_2eproto[] =
  "\n\024MobygRPCServer.proto\022\010GRPCMoby\"\007\n\005Empt"
  "y\"*\n\tJsonParam\022\013\n\003idx\030\001 \001(\005\022\020\n\010json_str\030"
  "\002 \001(\t\"}\n\rMotorDriverTx\022\022\n\nstatusWord\030\001 \001"
  "(\r\022\022\n\nmodeOpDisp\030\002 \001(\005\022\026\n\016actualPosition"
  "\030\003 \001(\005\022\026\n\016actualVelocity\030\004 \001(\005\022\024\n\014actual"
  "Torque\030\005 \001(\005\"z\n\rMotorDriverRx\022\023\n\013control"
  "Word\030\001 \001(\r\022\016\n\006modeOp\030\002 \001(\005\022\026\n\016targetPosi"
  "tion\030\003 \001(\005\022\026\n\016targetVelocity\030\004 \001(\005\022\024\n\014ta"
  "rgetTorque\030\005 \001(\005\"@\n\016MotorDriverRxs\022.\n\rmo"
  "torDriverRx\030\001 \003(\0132\027.GRPCMoby.MotorDriver"
  "Rx\"\220\002\n\tMobyState\022\017\n\007isReady\030\001 \001(\010\022\020\n\010isM"
  "oving\030\002 \001(\010\022\026\n\016isMoveFinished\030\003 \001(\010\022\023\n\013i"
  "sEmgPushed\030\004 \001(\010\022\024\n\014isErrorState\030\005 \001(\010\022\022"
  "\n\nisHomePose\030\006 \001(\010\022\026\n\016isRotationZero\030\007 \001"
  "(\010\022\023\n\013isResetting\030\010 \001(\010\022\026\n\016isIMUAvailabl"
  "e\030\t \001(\010\022\022\n\nisCollided\030\n \001(\010\022\030\n\020isProgram"
  "Running\030\013 \001(\010\022\026\n\016isProgramPause\030\014 \001(\010\"$\n"
  "\016MobyErrorState\022\022\n\nerrorState\030\001 \001(\005\".\n\010M"
  "obyPose\022\n\n\002px\030\001 \001(\001\022\n\n\002py\030\002 \001(\001\022\n\n\002pw\030\003 "
  "\001(\001\"\245\001\n\007IMUData\022\016\n\006angleX\030\001 \001(\001\022\016\n\006angle"
  "Y\030\002 \001(\001\022\016\n\006angleZ\030\003 \001(\001\022\021\n\tangleVelX\030\004 \001"
  "(\001\022\021\n\tangleVelY\030\005 \001(\001\022\021\n\tangleVelZ\030\006 \001(\001"
  "\022\017\n\007linAccX\030\007 \001(\001\022\017\n\007linAccY\030\010 \001(\001\022\017\n\007li"
  "nAccZ\030\t \001(\001\"-\n\007MobyVel\022\n\n\002vx\030\001 \001(\001\022\n\n\002vy"
  "\030\002 \001(\001\022\n\n\002vw\030\003 \001(\001\"\?\n\rSwerveDoubles\022\n\n\002f"
  "l\030\001 \001(\001\022\n\n\002fr\030\002 \001(\001\022\n\n\002bl\030\003 \001(\001\022\n\n\002br\030\004 "
  "\001(\001\"/\n\tTargetVel\022\n\n\002vx\030\001 \001(\001\022\n\n\002vy\030\002 \001(\001"
  "\022\n\n\002vw\030\003 \001(\001\";\n\tZeroCount\022\n\n\002fl\030\001 \001(\005\022\n\n"
  "\002fr\030\002 \001(\005\022\n\n\002bl\030\003 \001(\005\022\n\n\002br\030\004 \001(\005\"\256\001\n\006IR"
  "Data\022\021\n\tir_front1\030\001 \001(\005\022\021\n\tir_front2\030\002 \001"
  "(\005\022\020\n\010ir_left1\030\003 \001(\005\022\020\n\010ir_left2\030\004 \001(\005\022\020"
  "\n\010ir_left3\030\005 \001(\005\022\017\n\007ir_rear\030\006 \001(\005\022\021\n\tir_"
  "right1\030\007 \001(\005\022\021\n\tir_right2\030\010 \001(\005\022\021\n\tir_ri"
  "ght3\030\t \001(\005\"t\n\007BMSData\022\022\n\nbms_status\030\001 \003("
  "\005\022\021\n\tpack_volt\030\002 \003(\005\022\024\n\014battery_volt\030\003 \003"
  "(\005\022\025\n\rpack_current1\030\004 \003(\005\022\025\n\rpack_curren"
  "t2\030\005 \003(\005\"!\n\005GBool\022\013\n\003idx\030\001 \001(\005\022\013\n\003val\030\002 "
  "\001(\010\" \n\004GInt\022\013\n\003idx\030\001 \001(\005\022\013\n\003val\030\002 \001(\005\"\"\n"
  "\006GFloat\022\013\n\003idx\030\001 \001(\005\022\013\n\003val\030\002 \001(\002\"#\n\007GSt"
  "ring\022\013\n\003idx\030\001 \001(\005\022\013\n\003val\030\002 \001(\t\"\026\n\007BoolVa"
  "l\022\013\n\003val\030\001 \001(\010\"\025\n\006IntVal\022\013\n\003val\030\001 \001(\005\"\026\n"
  "\007IntVals\022\013\n\003val\030\001 \003(\005\"\027\n\010FloatVal\022\013\n\003val"
  "\030\001 \001(\002\"\030\n\tFloatVals\022\013\n\003val\030\001 \003(\002\"\030\n\tDoub"
  "leVal\022\013\n\003val\030\001 \001(\001\"\031\n\nDoubleVals\022\013\n\003val\030"
  "\001 \003(\001\">\n\014RotationGain\022\013\n\003idx\030\001 \001(\005\022\t\n\001k\030"
  "\002 \001(\001\022\n\n\002kv\030\003 \001(\001\022\n\n\002kp\030\004 \001(\001\"9\n\016VelAccB"
  "oundary\022\013\n\003idx\030\001 \001(\005\022\014\n\004vmax\030\002 \001(\002\022\014\n\004am"
  "ax\030\003 \001(\0022\307\017\n\014GRPCMobyTask\022<\n\rGetMobyTxDa"
  "ta\022\020.GRPCMoby.IntVal\032\027.GRPCMoby.MotorDri"
  "verTx\"\000\022<\n\rGetMobyRxData\022\020.GRPCMoby.IntV"
  "al\032\027.GRPCMoby.MotorDriverRx\"\000\0226\n\014GetMoby"
  "State\022\017.GRPCMoby.Empty\032\023.GRPCMoby.MobySt"
  "ate\"\000\022@\n\021GetMobyErrorState\022\017.GRPCMoby.Em"
  "pty\032\030.GRPCMoby.MobyErrorState\"\000\022-\n\007Recov"
  "er\022\017.GRPCMoby.Empty\032\017.GRPCMoby.Empty\"\000\0224"
  "\n\013GetMobyPose\022\017.GRPCMoby.Empty\032\022.GRPCMob"
  "y.MobyPose\"\000\0222\n\nGetMobyVel\022\017.GRPCMoby.Em"
  "pty\032\021.GRPCMoby.MobyVel\"\000\0223\n\rResetMobyPos"
  "e\022\017.GRPCMoby.Empty\032\017.GRPCMoby.Empty\"\000\022A\n"
  "\023GetRotationAngleDeg\022\017.GRPCMoby.Empty\032\027."
  "GRPCMoby.SwerveDoubles\"\000\022;\n\rGetDriveSpee"
  "d\022\017.GRPCMoby.Empty\032\027.GRPCMoby.SwerveDoub"
  "les\"\000\0226\n\014GetTargetVel\022\017.GRPCMoby.Empty\032\023"
  ".GRPCMoby.TargetVel\"\000\022>\n\024GetRotationZero"
  "Count\022\017.GRPCMoby.Empty\032\023.GRPCMoby.ZeroCo"
  "unt\"\000\022/\n\010GetCMode\022\017.GRPCMoby.Empty\032\020.GRP"
  "CMoby.IntVal\"\000\0226\n\013GetGyroData\022\017.GRPCMoby"
  ".Empty\032\024.GRPCMoby.DoubleVals\"\000\0225\n\017ResetG"
  "yroSensor\022\017.GRPCMoby.Empty\032\017.GRPCMoby.Em"
  "pty\"\000\0226\n\016UseGyroForOdom\022\021.GRPCMoby.BoolV"
  "al\032\017.GRPCMoby.Empty\"\000\0227\n\017GetGyroFullData"
  "\022\017.GRPCMoby.Empty\032\021.GRPCMoby.IMUData\"\000\0226"
  "\n\017GetIRSensorData\022\017.GRPCMoby.Empty\032\020.GRP"
  "CMoby.IRData\"\000\0222\n\nGetBMSData\022\017.GRPCMoby."
  "Empty\032\021.GRPCMoby.BMSData\"\000\0228\n\016SetStepCon"
  "trol\022\023.GRPCMoby.TargetVel\032\017.GRPCMoby.Emp"
  "ty\"\000\0220\n\nStopMotion\022\017.GRPCMoby.Empty\032\017.GR"
  "PCMoby.Empty\"\000\022A\n\023SetRotationAngleDeg\022\027."
  "GRPCMoby.SwerveDoubles\032\017.GRPCMoby.Empty\""
  "\000\0228\n\nDriveWheel\022\027.GRPCMoby.SwerveDoubles"
  "\032\017.GRPCMoby.Empty\"\000\022<\n\026SetZeroPosAsCurre"
  "ntPos\022\017.GRPCMoby.Empty\032\017.GRPCMoby.Empty\""
  "\000\022<\n\021SetRotationVelAcc\022\024.GRPCMoby.Double"
  "Vals\032\017.GRPCMoby.Empty\"\000\0229\n\016SetDriveAccDe"
  "c\022\024.GRPCMoby.DoubleVals\032\017.GRPCMoby.Empty"
  "\"\000\022A\n\031SetDriveInterpolatorOnOff\022\021.GRPCMo"
  "by.BoolVal\032\017.GRPCMoby.Empty\"\000\022G\n\034SetRota"
  "tionInterpolatorParam\022\024.GRPCMoby.DoubleV"
  "als\032\017.GRPCMoby.Empty\"\000\022=\n\025SetRotationTor"
  "queMode\022\021.GRPCMoby.BoolVal\032\017.GRPCMoby.Em"
  "pty\"\000\022<\n\017SetControlParam\022\026.GRPCMoby.Rota"
  "tionGain\032\017.GRPCMoby.Empty\"\000\0224\n\016StartRTLo"
  "gging\022\017.GRPCMoby.Empty\032\017.GRPCMoby.Empty\""
  "\000\0222\n\014EndRTLogging\022\017.GRPCMoby.Empty\032\017.GRP"
  "CMoby.Empty\"\000\0227\n\017SetLoggerBuffer\022\021.GRPCM"
  "oby.IntVals\032\017.GRPCMoby.Empty\"\000\0222\n\014RTLogg"
  "erSave\022\017.GRPCMoby.Empty\032\017.GRPCMoby.Empty"
  "\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MobygRPCServer_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MobygRPCServer_2eproto_sccs[28] = {
  &scc_info_BMSData_MobygRPCServer_2eproto.base,
  &scc_info_BoolVal_MobygRPCServer_2eproto.base,
  &scc_info_DoubleVal_MobygRPCServer_2eproto.base,
  &scc_info_DoubleVals_MobygRPCServer_2eproto.base,
  &scc_info_Empty_MobygRPCServer_2eproto.base,
  &scc_info_FloatVal_MobygRPCServer_2eproto.base,
  &scc_info_FloatVals_MobygRPCServer_2eproto.base,
  &scc_info_GBool_MobygRPCServer_2eproto.base,
  &scc_info_GFloat_MobygRPCServer_2eproto.base,
  &scc_info_GInt_MobygRPCServer_2eproto.base,
  &scc_info_GString_MobygRPCServer_2eproto.base,
  &scc_info_IMUData_MobygRPCServer_2eproto.base,
  &scc_info_IRData_MobygRPCServer_2eproto.base,
  &scc_info_IntVal_MobygRPCServer_2eproto.base,
  &scc_info_IntVals_MobygRPCServer_2eproto.base,
  &scc_info_JsonParam_MobygRPCServer_2eproto.base,
  &scc_info_MobyErrorState_MobygRPCServer_2eproto.base,
  &scc_info_MobyPose_MobygRPCServer_2eproto.base,
  &scc_info_MobyState_MobygRPCServer_2eproto.base,
  &scc_info_MobyVel_MobygRPCServer_2eproto.base,
  &scc_info_MotorDriverRx_MobygRPCServer_2eproto.base,
  &scc_info_MotorDriverRxs_MobygRPCServer_2eproto.base,
  &scc_info_MotorDriverTx_MobygRPCServer_2eproto.base,
  &scc_info_RotationGain_MobygRPCServer_2eproto.base,
  &scc_info_SwerveDoubles_MobygRPCServer_2eproto.base,
  &scc_info_TargetVel_MobygRPCServer_2eproto.base,
  &scc_info_VelAccBoundary_MobygRPCServer_2eproto.base,
  &scc_info_ZeroCount_MobygRPCServer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MobygRPCServer_2eproto_once;
static bool descriptor_table_MobygRPCServer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MobygRPCServer_2eproto = {
  &descriptor_table_MobygRPCServer_2eproto_initialized, descriptor_table_protodef_MobygRPCServer_2eproto, "MobygRPCServer.proto", 3890,
  &descriptor_table_MobygRPCServer_2eproto_once, descriptor_table_MobygRPCServer_2eproto_sccs, descriptor_table_MobygRPCServer_2eproto_deps, 28, 0,
  schemas, file_default_instances, TableStruct_MobygRPCServer_2eproto::offsets,
  file_level_metadata_MobygRPCServer_2eproto, 28, file_level_enum_descriptors_MobygRPCServer_2eproto, file_level_service_descriptors_MobygRPCServer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MobygRPCServer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MobygRPCServer_2eproto), true);
namespace GRPCMoby {

// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:GRPCMoby.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Empty_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Empty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.Empty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.Empty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Empty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.Empty)
}

::PROTOBUF_NAMESPACE_ID::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.Empty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JsonParam::InitAsDefaultInstance() {
}
class JsonParam::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JsonParam::kIdxFieldNumber;
const int JsonParam::kJsonStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JsonParam::JsonParam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.JsonParam)
}
JsonParam::JsonParam(const JsonParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.json_str().size() > 0) {
    json_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.json_str_);
  }
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.JsonParam)
}

void JsonParam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JsonParam_MobygRPCServer_2eproto.base);
  json_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idx_ = 0;
}

JsonParam::~JsonParam() {
  // @@protoc_insertion_point(destructor:GRPCMoby.JsonParam)
  SharedDtor();
}

void JsonParam::SharedDtor() {
  json_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JsonParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JsonParam& JsonParam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JsonParam_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void JsonParam::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.JsonParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  json_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idx_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* JsonParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string json_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_json_str(), ptr, ctx, "GRPCMoby.JsonParam.json_str");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool JsonParam::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.JsonParam)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string json_str = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_json_str()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->json_str().data(), static_cast<int>(this->json_str().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "GRPCMoby.JsonParam.json_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.JsonParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.JsonParam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void JsonParam::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.JsonParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // string json_str = 2;
  if (this->json_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->json_str().data(), static_cast<int>(this->json_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GRPCMoby.JsonParam.json_str");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->json_str(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.JsonParam)
}

::PROTOBUF_NAMESPACE_ID::uint8* JsonParam::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.JsonParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // string json_str = 2;
  if (this->json_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->json_str().data(), static_cast<int>(this->json_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GRPCMoby.JsonParam.json_str");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->json_str(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.JsonParam)
  return target;
}

size_t JsonParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.JsonParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string json_str = 2;
  if (this->json_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->json_str());
  }

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JsonParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.JsonParam)
  GOOGLE_DCHECK_NE(&from, this);
  const JsonParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JsonParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.JsonParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.JsonParam)
    MergeFrom(*source);
  }
}

void JsonParam::MergeFrom(const JsonParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.JsonParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.json_str().size() > 0) {

    json_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.json_str_);
  }
  if (from.idx() != 0) {
    set_idx(from.idx());
  }
}

void JsonParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.JsonParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JsonParam::CopyFrom(const JsonParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.JsonParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JsonParam::IsInitialized() const {
  return true;
}

void JsonParam::Swap(JsonParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JsonParam::InternalSwap(JsonParam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  json_str_.Swap(&other->json_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JsonParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotorDriverTx::InitAsDefaultInstance() {
}
class MotorDriverTx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotorDriverTx::kStatusWordFieldNumber;
const int MotorDriverTx::kModeOpDispFieldNumber;
const int MotorDriverTx::kActualPositionFieldNumber;
const int MotorDriverTx::kActualVelocityFieldNumber;
const int MotorDriverTx::kActualTorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorDriverTx::MotorDriverTx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.MotorDriverTx)
}
MotorDriverTx::MotorDriverTx(const MotorDriverTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&statusword_, &from.statusword_,
    static_cast<size_t>(reinterpret_cast<char*>(&actualtorque_) -
    reinterpret_cast<char*>(&statusword_)) + sizeof(actualtorque_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.MotorDriverTx)
}

void MotorDriverTx::SharedCtor() {
  ::memset(&statusword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actualtorque_) -
      reinterpret_cast<char*>(&statusword_)) + sizeof(actualtorque_));
}

MotorDriverTx::~MotorDriverTx() {
  // @@protoc_insertion_point(destructor:GRPCMoby.MotorDriverTx)
  SharedDtor();
}

void MotorDriverTx::SharedDtor() {
}

void MotorDriverTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotorDriverTx& MotorDriverTx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotorDriverTx_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void MotorDriverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.MotorDriverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&statusword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actualtorque_) -
      reinterpret_cast<char*>(&statusword_)) + sizeof(actualtorque_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotorDriverTx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 statusWord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          statusword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 modeOpDisp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          modeopdisp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actualPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          actualposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actualVelocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          actualvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 actualTorque = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          actualtorque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotorDriverTx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.MotorDriverTx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 statusWord = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statusword_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 modeOpDisp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeopdisp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actualPosition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actualVelocity = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 actualTorque = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &actualtorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.MotorDriverTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.MotorDriverTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotorDriverTx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.MotorDriverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->statusword() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->statusword(), output);
  }

  // int32 modeOpDisp = 2;
  if (this->modeopdisp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->modeopdisp(), output);
  }

  // int32 actualPosition = 3;
  if (this->actualposition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->actualposition(), output);
  }

  // int32 actualVelocity = 4;
  if (this->actualvelocity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->actualvelocity(), output);
  }

  // int32 actualTorque = 5;
  if (this->actualtorque() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->actualtorque(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.MotorDriverTx)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotorDriverTx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.MotorDriverTx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->statusword() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->statusword(), target);
  }

  // int32 modeOpDisp = 2;
  if (this->modeopdisp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->modeopdisp(), target);
  }

  // int32 actualPosition = 3;
  if (this->actualposition() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->actualposition(), target);
  }

  // int32 actualVelocity = 4;
  if (this->actualvelocity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->actualvelocity(), target);
  }

  // int32 actualTorque = 5;
  if (this->actualtorque() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->actualtorque(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.MotorDriverTx)
  return target;
}

size_t MotorDriverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.MotorDriverTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 statusWord = 1;
  if (this->statusword() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->statusword());
  }

  // int32 modeOpDisp = 2;
  if (this->modeopdisp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->modeopdisp());
  }

  // int32 actualPosition = 3;
  if (this->actualposition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->actualposition());
  }

  // int32 actualVelocity = 4;
  if (this->actualvelocity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->actualvelocity());
  }

  // int32 actualTorque = 5;
  if (this->actualtorque() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->actualtorque());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotorDriverTx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.MotorDriverTx)
  GOOGLE_DCHECK_NE(&from, this);
  const MotorDriverTx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotorDriverTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.MotorDriverTx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.MotorDriverTx)
    MergeFrom(*source);
  }
}

void MotorDriverTx::MergeFrom(const MotorDriverTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.MotorDriverTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.statusword() != 0) {
    set_statusword(from.statusword());
  }
  if (from.modeopdisp() != 0) {
    set_modeopdisp(from.modeopdisp());
  }
  if (from.actualposition() != 0) {
    set_actualposition(from.actualposition());
  }
  if (from.actualvelocity() != 0) {
    set_actualvelocity(from.actualvelocity());
  }
  if (from.actualtorque() != 0) {
    set_actualtorque(from.actualtorque());
  }
}

void MotorDriverTx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.MotorDriverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorDriverTx::CopyFrom(const MotorDriverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.MotorDriverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorDriverTx::IsInitialized() const {
  return true;
}

void MotorDriverTx::Swap(MotorDriverTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorDriverTx::InternalSwap(MotorDriverTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(statusword_, other->statusword_);
  swap(modeopdisp_, other->modeopdisp_);
  swap(actualposition_, other->actualposition_);
  swap(actualvelocity_, other->actualvelocity_);
  swap(actualtorque_, other->actualtorque_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorDriverTx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotorDriverRx::InitAsDefaultInstance() {
}
class MotorDriverRx::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotorDriverRx::kControlWordFieldNumber;
const int MotorDriverRx::kModeOpFieldNumber;
const int MotorDriverRx::kTargetPositionFieldNumber;
const int MotorDriverRx::kTargetVelocityFieldNumber;
const int MotorDriverRx::kTargetTorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorDriverRx::MotorDriverRx()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.MotorDriverRx)
}
MotorDriverRx::MotorDriverRx(const MotorDriverRx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controlword_, &from.controlword_,
    static_cast<size_t>(reinterpret_cast<char*>(&targettorque_) -
    reinterpret_cast<char*>(&controlword_)) + sizeof(targettorque_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.MotorDriverRx)
}

void MotorDriverRx::SharedCtor() {
  ::memset(&controlword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targettorque_) -
      reinterpret_cast<char*>(&controlword_)) + sizeof(targettorque_));
}

MotorDriverRx::~MotorDriverRx() {
  // @@protoc_insertion_point(destructor:GRPCMoby.MotorDriverRx)
  SharedDtor();
}

void MotorDriverRx::SharedDtor() {
}

void MotorDriverRx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotorDriverRx& MotorDriverRx::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotorDriverRx_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void MotorDriverRx::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.MotorDriverRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&controlword_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&targettorque_) -
      reinterpret_cast<char*>(&controlword_)) + sizeof(targettorque_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotorDriverRx::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 controlWord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          controlword_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 modeOp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          modeop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetPosition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          targetposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetVelocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          targetvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 targetTorque = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          targettorque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotorDriverRx::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.MotorDriverRx)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controlWord = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controlword_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 modeOp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 targetPosition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 targetVelocity = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 targetTorque = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &targettorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.MotorDriverRx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.MotorDriverRx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotorDriverRx::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.MotorDriverRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controlWord = 1;
  if (this->controlword() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->controlword(), output);
  }

  // int32 modeOp = 2;
  if (this->modeop() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->modeop(), output);
  }

  // int32 targetPosition = 3;
  if (this->targetposition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->targetposition(), output);
  }

  // int32 targetVelocity = 4;
  if (this->targetvelocity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->targetvelocity(), output);
  }

  // int32 targetTorque = 5;
  if (this->targettorque() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->targettorque(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.MotorDriverRx)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotorDriverRx::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.MotorDriverRx)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controlWord = 1;
  if (this->controlword() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->controlword(), target);
  }

  // int32 modeOp = 2;
  if (this->modeop() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->modeop(), target);
  }

  // int32 targetPosition = 3;
  if (this->targetposition() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->targetposition(), target);
  }

  // int32 targetVelocity = 4;
  if (this->targetvelocity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->targetvelocity(), target);
  }

  // int32 targetTorque = 5;
  if (this->targettorque() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->targettorque(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.MotorDriverRx)
  return target;
}

size_t MotorDriverRx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.MotorDriverRx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 controlWord = 1;
  if (this->controlword() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->controlword());
  }

  // int32 modeOp = 2;
  if (this->modeop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->modeop());
  }

  // int32 targetPosition = 3;
  if (this->targetposition() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->targetposition());
  }

  // int32 targetVelocity = 4;
  if (this->targetvelocity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->targetvelocity());
  }

  // int32 targetTorque = 5;
  if (this->targettorque() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->targettorque());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotorDriverRx::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.MotorDriverRx)
  GOOGLE_DCHECK_NE(&from, this);
  const MotorDriverRx* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotorDriverRx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.MotorDriverRx)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.MotorDriverRx)
    MergeFrom(*source);
  }
}

void MotorDriverRx::MergeFrom(const MotorDriverRx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.MotorDriverRx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.controlword() != 0) {
    set_controlword(from.controlword());
  }
  if (from.modeop() != 0) {
    set_modeop(from.modeop());
  }
  if (from.targetposition() != 0) {
    set_targetposition(from.targetposition());
  }
  if (from.targetvelocity() != 0) {
    set_targetvelocity(from.targetvelocity());
  }
  if (from.targettorque() != 0) {
    set_targettorque(from.targettorque());
  }
}

void MotorDriverRx::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.MotorDriverRx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorDriverRx::CopyFrom(const MotorDriverRx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.MotorDriverRx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorDriverRx::IsInitialized() const {
  return true;
}

void MotorDriverRx::Swap(MotorDriverRx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorDriverRx::InternalSwap(MotorDriverRx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(controlword_, other->controlword_);
  swap(modeop_, other->modeop_);
  swap(targetposition_, other->targetposition_);
  swap(targetvelocity_, other->targetvelocity_);
  swap(targettorque_, other->targettorque_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorDriverRx::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MotorDriverRxs::InitAsDefaultInstance() {
}
class MotorDriverRxs::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MotorDriverRxs::kMotorDriverRxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MotorDriverRxs::MotorDriverRxs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.MotorDriverRxs)
}
MotorDriverRxs::MotorDriverRxs(const MotorDriverRxs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      motordriverrx_(from.motordriverrx_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.MotorDriverRxs)
}

void MotorDriverRxs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MotorDriverRxs_MobygRPCServer_2eproto.base);
}

MotorDriverRxs::~MotorDriverRxs() {
  // @@protoc_insertion_point(destructor:GRPCMoby.MotorDriverRxs)
  SharedDtor();
}

void MotorDriverRxs::SharedDtor() {
}

void MotorDriverRxs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotorDriverRxs& MotorDriverRxs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotorDriverRxs_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void MotorDriverRxs::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.MotorDriverRxs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  motordriverrx_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MotorDriverRxs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GRPCMoby.MotorDriverRx motorDriverRx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_motordriverrx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MotorDriverRxs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.MotorDriverRxs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GRPCMoby.MotorDriverRx motorDriverRx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_motordriverrx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.MotorDriverRxs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.MotorDriverRxs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MotorDriverRxs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.MotorDriverRxs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GRPCMoby.MotorDriverRx motorDriverRx = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->motordriverrx_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->motordriverrx(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.MotorDriverRxs)
}

::PROTOBUF_NAMESPACE_ID::uint8* MotorDriverRxs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.MotorDriverRxs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GRPCMoby.MotorDriverRx motorDriverRx = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->motordriverrx_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->motordriverrx(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.MotorDriverRxs)
  return target;
}

size_t MotorDriverRxs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.MotorDriverRxs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GRPCMoby.MotorDriverRx motorDriverRx = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->motordriverrx_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->motordriverrx(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotorDriverRxs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.MotorDriverRxs)
  GOOGLE_DCHECK_NE(&from, this);
  const MotorDriverRxs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotorDriverRxs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.MotorDriverRxs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.MotorDriverRxs)
    MergeFrom(*source);
  }
}

void MotorDriverRxs::MergeFrom(const MotorDriverRxs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.MotorDriverRxs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  motordriverrx_.MergeFrom(from.motordriverrx_);
}

void MotorDriverRxs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.MotorDriverRxs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotorDriverRxs::CopyFrom(const MotorDriverRxs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.MotorDriverRxs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotorDriverRxs::IsInitialized() const {
  return true;
}

void MotorDriverRxs::Swap(MotorDriverRxs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MotorDriverRxs::InternalSwap(MotorDriverRxs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&motordriverrx_)->InternalSwap(CastToBase(&other->motordriverrx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotorDriverRxs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MobyState::InitAsDefaultInstance() {
}
class MobyState::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MobyState::kIsReadyFieldNumber;
const int MobyState::kIsMovingFieldNumber;
const int MobyState::kIsMoveFinishedFieldNumber;
const int MobyState::kIsEmgPushedFieldNumber;
const int MobyState::kIsErrorStateFieldNumber;
const int MobyState::kIsHomePoseFieldNumber;
const int MobyState::kIsRotationZeroFieldNumber;
const int MobyState::kIsResettingFieldNumber;
const int MobyState::kIsIMUAvailableFieldNumber;
const int MobyState::kIsCollidedFieldNumber;
const int MobyState::kIsProgramRunningFieldNumber;
const int MobyState::kIsProgramPauseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MobyState::MobyState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.MobyState)
}
MobyState::MobyState(const MobyState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&isready_, &from.isready_,
    static_cast<size_t>(reinterpret_cast<char*>(&isprogrampause_) -
    reinterpret_cast<char*>(&isready_)) + sizeof(isprogrampause_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.MobyState)
}

void MobyState::SharedCtor() {
  ::memset(&isready_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isprogrampause_) -
      reinterpret_cast<char*>(&isready_)) + sizeof(isprogrampause_));
}

MobyState::~MobyState() {
  // @@protoc_insertion_point(destructor:GRPCMoby.MobyState)
  SharedDtor();
}

void MobyState::SharedDtor() {
}

void MobyState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MobyState& MobyState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MobyState_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void MobyState::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.MobyState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&isready_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isprogrampause_) -
      reinterpret_cast<char*>(&isready_)) + sizeof(isprogrampause_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MobyState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isReady = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isMoving = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ismoving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isMoveFinished = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ismovefinished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isEmgPushed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          isemgpushed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isErrorState = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          iserrorstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isHomePose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ishomepose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isRotationZero = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          isrotationzero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isResetting = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          isresetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isIMUAvailable = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          isimuavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isCollided = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          iscollided_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isProgramRunning = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          isprogramrunning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isProgramPause = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          isprogrampause_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MobyState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.MobyState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isReady = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isMoving = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismoving_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isMoveFinished = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismovefinished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isEmgPushed = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isemgpushed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isErrorState = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iserrorstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isHomePose = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishomepose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isRotationZero = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrotationzero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isResetting = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isresetting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isIMUAvailable = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isimuavailable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isCollided = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscollided_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isProgramRunning = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprogramrunning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isProgramPause = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprogrampause_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.MobyState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.MobyState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MobyState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.MobyState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isReady = 1;
  if (this->isready() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->isready(), output);
  }

  // bool isMoving = 2;
  if (this->ismoving() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->ismoving(), output);
  }

  // bool isMoveFinished = 3;
  if (this->ismovefinished() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->ismovefinished(), output);
  }

  // bool isEmgPushed = 4;
  if (this->isemgpushed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->isemgpushed(), output);
  }

  // bool isErrorState = 5;
  if (this->iserrorstate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->iserrorstate(), output);
  }

  // bool isHomePose = 6;
  if (this->ishomepose() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->ishomepose(), output);
  }

  // bool isRotationZero = 7;
  if (this->isrotationzero() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->isrotationzero(), output);
  }

  // bool isResetting = 8;
  if (this->isresetting() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->isresetting(), output);
  }

  // bool isIMUAvailable = 9;
  if (this->isimuavailable() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->isimuavailable(), output);
  }

  // bool isCollided = 10;
  if (this->iscollided() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->iscollided(), output);
  }

  // bool isProgramRunning = 11;
  if (this->isprogramrunning() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->isprogramrunning(), output);
  }

  // bool isProgramPause = 12;
  if (this->isprogrampause() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->isprogrampause(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.MobyState)
}

::PROTOBUF_NAMESPACE_ID::uint8* MobyState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.MobyState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isReady = 1;
  if (this->isready() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->isready(), target);
  }

  // bool isMoving = 2;
  if (this->ismoving() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->ismoving(), target);
  }

  // bool isMoveFinished = 3;
  if (this->ismovefinished() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->ismovefinished(), target);
  }

  // bool isEmgPushed = 4;
  if (this->isemgpushed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->isemgpushed(), target);
  }

  // bool isErrorState = 5;
  if (this->iserrorstate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->iserrorstate(), target);
  }

  // bool isHomePose = 6;
  if (this->ishomepose() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->ishomepose(), target);
  }

  // bool isRotationZero = 7;
  if (this->isrotationzero() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->isrotationzero(), target);
  }

  // bool isResetting = 8;
  if (this->isresetting() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->isresetting(), target);
  }

  // bool isIMUAvailable = 9;
  if (this->isimuavailable() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->isimuavailable(), target);
  }

  // bool isCollided = 10;
  if (this->iscollided() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->iscollided(), target);
  }

  // bool isProgramRunning = 11;
  if (this->isprogramrunning() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->isprogramrunning(), target);
  }

  // bool isProgramPause = 12;
  if (this->isprogrampause() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->isprogrampause(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.MobyState)
  return target;
}

size_t MobyState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.MobyState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isReady = 1;
  if (this->isready() != 0) {
    total_size += 1 + 1;
  }

  // bool isMoving = 2;
  if (this->ismoving() != 0) {
    total_size += 1 + 1;
  }

  // bool isMoveFinished = 3;
  if (this->ismovefinished() != 0) {
    total_size += 1 + 1;
  }

  // bool isEmgPushed = 4;
  if (this->isemgpushed() != 0) {
    total_size += 1 + 1;
  }

  // bool isErrorState = 5;
  if (this->iserrorstate() != 0) {
    total_size += 1 + 1;
  }

  // bool isHomePose = 6;
  if (this->ishomepose() != 0) {
    total_size += 1 + 1;
  }

  // bool isRotationZero = 7;
  if (this->isrotationzero() != 0) {
    total_size += 1 + 1;
  }

  // bool isResetting = 8;
  if (this->isresetting() != 0) {
    total_size += 1 + 1;
  }

  // bool isIMUAvailable = 9;
  if (this->isimuavailable() != 0) {
    total_size += 1 + 1;
  }

  // bool isCollided = 10;
  if (this->iscollided() != 0) {
    total_size += 1 + 1;
  }

  // bool isProgramRunning = 11;
  if (this->isprogramrunning() != 0) {
    total_size += 1 + 1;
  }

  // bool isProgramPause = 12;
  if (this->isprogrampause() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MobyState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.MobyState)
  GOOGLE_DCHECK_NE(&from, this);
  const MobyState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MobyState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.MobyState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.MobyState)
    MergeFrom(*source);
  }
}

void MobyState::MergeFrom(const MobyState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.MobyState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isready() != 0) {
    set_isready(from.isready());
  }
  if (from.ismoving() != 0) {
    set_ismoving(from.ismoving());
  }
  if (from.ismovefinished() != 0) {
    set_ismovefinished(from.ismovefinished());
  }
  if (from.isemgpushed() != 0) {
    set_isemgpushed(from.isemgpushed());
  }
  if (from.iserrorstate() != 0) {
    set_iserrorstate(from.iserrorstate());
  }
  if (from.ishomepose() != 0) {
    set_ishomepose(from.ishomepose());
  }
  if (from.isrotationzero() != 0) {
    set_isrotationzero(from.isrotationzero());
  }
  if (from.isresetting() != 0) {
    set_isresetting(from.isresetting());
  }
  if (from.isimuavailable() != 0) {
    set_isimuavailable(from.isimuavailable());
  }
  if (from.iscollided() != 0) {
    set_iscollided(from.iscollided());
  }
  if (from.isprogramrunning() != 0) {
    set_isprogramrunning(from.isprogramrunning());
  }
  if (from.isprogrampause() != 0) {
    set_isprogrampause(from.isprogrampause());
  }
}

void MobyState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.MobyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobyState::CopyFrom(const MobyState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.MobyState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobyState::IsInitialized() const {
  return true;
}

void MobyState::Swap(MobyState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MobyState::InternalSwap(MobyState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(isready_, other->isready_);
  swap(ismoving_, other->ismoving_);
  swap(ismovefinished_, other->ismovefinished_);
  swap(isemgpushed_, other->isemgpushed_);
  swap(iserrorstate_, other->iserrorstate_);
  swap(ishomepose_, other->ishomepose_);
  swap(isrotationzero_, other->isrotationzero_);
  swap(isresetting_, other->isresetting_);
  swap(isimuavailable_, other->isimuavailable_);
  swap(iscollided_, other->iscollided_);
  swap(isprogramrunning_, other->isprogramrunning_);
  swap(isprogrampause_, other->isprogrampause_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MobyState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MobyErrorState::InitAsDefaultInstance() {
}
class MobyErrorState::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MobyErrorState::kErrorStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MobyErrorState::MobyErrorState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.MobyErrorState)
}
MobyErrorState::MobyErrorState(const MobyErrorState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errorstate_ = from.errorstate_;
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.MobyErrorState)
}

void MobyErrorState::SharedCtor() {
  errorstate_ = 0;
}

MobyErrorState::~MobyErrorState() {
  // @@protoc_insertion_point(destructor:GRPCMoby.MobyErrorState)
  SharedDtor();
}

void MobyErrorState::SharedDtor() {
}

void MobyErrorState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MobyErrorState& MobyErrorState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MobyErrorState_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void MobyErrorState::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.MobyErrorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorstate_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MobyErrorState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errorState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errorstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MobyErrorState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.MobyErrorState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 errorState = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.MobyErrorState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.MobyErrorState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MobyErrorState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.MobyErrorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errorState = 1;
  if (this->errorstate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->errorstate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.MobyErrorState)
}

::PROTOBUF_NAMESPACE_ID::uint8* MobyErrorState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.MobyErrorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errorState = 1;
  if (this->errorstate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->errorstate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.MobyErrorState)
  return target;
}

size_t MobyErrorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.MobyErrorState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 errorState = 1;
  if (this->errorstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->errorstate());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MobyErrorState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.MobyErrorState)
  GOOGLE_DCHECK_NE(&from, this);
  const MobyErrorState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MobyErrorState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.MobyErrorState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.MobyErrorState)
    MergeFrom(*source);
  }
}

void MobyErrorState::MergeFrom(const MobyErrorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.MobyErrorState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errorstate() != 0) {
    set_errorstate(from.errorstate());
  }
}

void MobyErrorState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.MobyErrorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobyErrorState::CopyFrom(const MobyErrorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.MobyErrorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobyErrorState::IsInitialized() const {
  return true;
}

void MobyErrorState::Swap(MobyErrorState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MobyErrorState::InternalSwap(MobyErrorState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(errorstate_, other->errorstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MobyErrorState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MobyPose::InitAsDefaultInstance() {
}
class MobyPose::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MobyPose::kPxFieldNumber;
const int MobyPose::kPyFieldNumber;
const int MobyPose::kPwFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MobyPose::MobyPose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.MobyPose)
}
MobyPose::MobyPose(const MobyPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&px_, &from.px_,
    static_cast<size_t>(reinterpret_cast<char*>(&pw_) -
    reinterpret_cast<char*>(&px_)) + sizeof(pw_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.MobyPose)
}

void MobyPose::SharedCtor() {
  ::memset(&px_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pw_) -
      reinterpret_cast<char*>(&px_)) + sizeof(pw_));
}

MobyPose::~MobyPose() {
  // @@protoc_insertion_point(destructor:GRPCMoby.MobyPose)
  SharedDtor();
}

void MobyPose::SharedDtor() {
}

void MobyPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MobyPose& MobyPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MobyPose_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void MobyPose::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.MobyPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&px_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pw_) -
      reinterpret_cast<char*>(&px_)) + sizeof(pw_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MobyPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double px = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double py = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          py_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          pw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MobyPose::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.MobyPose)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double px = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &px_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double py = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &py_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pw = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.MobyPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.MobyPose)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MobyPose::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.MobyPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double px = 1;
  if (!(this->px() <= 0 && this->px() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->px(), output);
  }

  // double py = 2;
  if (!(this->py() <= 0 && this->py() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->py(), output);
  }

  // double pw = 3;
  if (!(this->pw() <= 0 && this->pw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->pw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.MobyPose)
}

::PROTOBUF_NAMESPACE_ID::uint8* MobyPose::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.MobyPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double px = 1;
  if (!(this->px() <= 0 && this->px() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->px(), target);
  }

  // double py = 2;
  if (!(this->py() <= 0 && this->py() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->py(), target);
  }

  // double pw = 3;
  if (!(this->pw() <= 0 && this->pw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->pw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.MobyPose)
  return target;
}

size_t MobyPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.MobyPose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double px = 1;
  if (!(this->px() <= 0 && this->px() >= 0)) {
    total_size += 1 + 8;
  }

  // double py = 2;
  if (!(this->py() <= 0 && this->py() >= 0)) {
    total_size += 1 + 8;
  }

  // double pw = 3;
  if (!(this->pw() <= 0 && this->pw() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MobyPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.MobyPose)
  GOOGLE_DCHECK_NE(&from, this);
  const MobyPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MobyPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.MobyPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.MobyPose)
    MergeFrom(*source);
  }
}

void MobyPose::MergeFrom(const MobyPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.MobyPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.px() <= 0 && from.px() >= 0)) {
    set_px(from.px());
  }
  if (!(from.py() <= 0 && from.py() >= 0)) {
    set_py(from.py());
  }
  if (!(from.pw() <= 0 && from.pw() >= 0)) {
    set_pw(from.pw());
  }
}

void MobyPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.MobyPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobyPose::CopyFrom(const MobyPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.MobyPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobyPose::IsInitialized() const {
  return true;
}

void MobyPose::Swap(MobyPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MobyPose::InternalSwap(MobyPose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(px_, other->px_);
  swap(py_, other->py_);
  swap(pw_, other->pw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MobyPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IMUData::InitAsDefaultInstance() {
}
class IMUData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUData::kAngleXFieldNumber;
const int IMUData::kAngleYFieldNumber;
const int IMUData::kAngleZFieldNumber;
const int IMUData::kAngleVelXFieldNumber;
const int IMUData::kAngleVelYFieldNumber;
const int IMUData::kAngleVelZFieldNumber;
const int IMUData::kLinAccXFieldNumber;
const int IMUData::kLinAccYFieldNumber;
const int IMUData::kLinAccZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUData::IMUData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.IMUData)
}
IMUData::IMUData(const IMUData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&anglex_, &from.anglex_,
    static_cast<size_t>(reinterpret_cast<char*>(&linaccz_) -
    reinterpret_cast<char*>(&anglex_)) + sizeof(linaccz_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.IMUData)
}

void IMUData::SharedCtor() {
  ::memset(&anglex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linaccz_) -
      reinterpret_cast<char*>(&anglex_)) + sizeof(linaccz_));
}

IMUData::~IMUData() {
  // @@protoc_insertion_point(destructor:GRPCMoby.IMUData)
  SharedDtor();
}

void IMUData::SharedDtor() {
}

void IMUData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMUData& IMUData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMUData_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void IMUData::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.IMUData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&anglex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linaccz_) -
      reinterpret_cast<char*>(&anglex_)) + sizeof(linaccz_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IMUData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double angleX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          anglex_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angleY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          angley_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angleZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          anglez_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angleVelX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          anglevelx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angleVelY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          anglevely_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angleVelZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          anglevelz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double linAccX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          linaccx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double linAccY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          linaccy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double linAccZ = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          linaccz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IMUData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.IMUData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double angleX = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &anglex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angleY = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angley_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angleZ = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &anglez_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angleVelX = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &anglevelx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angleVelY = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &anglevely_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angleVelZ = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &anglevelz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double linAccX = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linaccx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double linAccY = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linaccy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double linAccZ = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linaccz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.IMUData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.IMUData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IMUData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.IMUData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double angleX = 1;
  if (!(this->anglex() <= 0 && this->anglex() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->anglex(), output);
  }

  // double angleY = 2;
  if (!(this->angley() <= 0 && this->angley() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->angley(), output);
  }

  // double angleZ = 3;
  if (!(this->anglez() <= 0 && this->anglez() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->anglez(), output);
  }

  // double angleVelX = 4;
  if (!(this->anglevelx() <= 0 && this->anglevelx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->anglevelx(), output);
  }

  // double angleVelY = 5;
  if (!(this->anglevely() <= 0 && this->anglevely() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->anglevely(), output);
  }

  // double angleVelZ = 6;
  if (!(this->anglevelz() <= 0 && this->anglevelz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->anglevelz(), output);
  }

  // double linAccX = 7;
  if (!(this->linaccx() <= 0 && this->linaccx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->linaccx(), output);
  }

  // double linAccY = 8;
  if (!(this->linaccy() <= 0 && this->linaccy() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->linaccy(), output);
  }

  // double linAccZ = 9;
  if (!(this->linaccz() <= 0 && this->linaccz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->linaccz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.IMUData)
}

::PROTOBUF_NAMESPACE_ID::uint8* IMUData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.IMUData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double angleX = 1;
  if (!(this->anglex() <= 0 && this->anglex() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->anglex(), target);
  }

  // double angleY = 2;
  if (!(this->angley() <= 0 && this->angley() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->angley(), target);
  }

  // double angleZ = 3;
  if (!(this->anglez() <= 0 && this->anglez() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->anglez(), target);
  }

  // double angleVelX = 4;
  if (!(this->anglevelx() <= 0 && this->anglevelx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->anglevelx(), target);
  }

  // double angleVelY = 5;
  if (!(this->anglevely() <= 0 && this->anglevely() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->anglevely(), target);
  }

  // double angleVelZ = 6;
  if (!(this->anglevelz() <= 0 && this->anglevelz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->anglevelz(), target);
  }

  // double linAccX = 7;
  if (!(this->linaccx() <= 0 && this->linaccx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->linaccx(), target);
  }

  // double linAccY = 8;
  if (!(this->linaccy() <= 0 && this->linaccy() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->linaccy(), target);
  }

  // double linAccZ = 9;
  if (!(this->linaccz() <= 0 && this->linaccz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->linaccz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.IMUData)
  return target;
}

size_t IMUData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.IMUData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double angleX = 1;
  if (!(this->anglex() <= 0 && this->anglex() >= 0)) {
    total_size += 1 + 8;
  }

  // double angleY = 2;
  if (!(this->angley() <= 0 && this->angley() >= 0)) {
    total_size += 1 + 8;
  }

  // double angleZ = 3;
  if (!(this->anglez() <= 0 && this->anglez() >= 0)) {
    total_size += 1 + 8;
  }

  // double angleVelX = 4;
  if (!(this->anglevelx() <= 0 && this->anglevelx() >= 0)) {
    total_size += 1 + 8;
  }

  // double angleVelY = 5;
  if (!(this->anglevely() <= 0 && this->anglevely() >= 0)) {
    total_size += 1 + 8;
  }

  // double angleVelZ = 6;
  if (!(this->anglevelz() <= 0 && this->anglevelz() >= 0)) {
    total_size += 1 + 8;
  }

  // double linAccX = 7;
  if (!(this->linaccx() <= 0 && this->linaccx() >= 0)) {
    total_size += 1 + 8;
  }

  // double linAccY = 8;
  if (!(this->linaccy() <= 0 && this->linaccy() >= 0)) {
    total_size += 1 + 8;
  }

  // double linAccZ = 9;
  if (!(this->linaccz() <= 0 && this->linaccz() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.IMUData)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IMUData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.IMUData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.IMUData)
    MergeFrom(*source);
  }
}

void IMUData::MergeFrom(const IMUData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.IMUData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.anglex() <= 0 && from.anglex() >= 0)) {
    set_anglex(from.anglex());
  }
  if (!(from.angley() <= 0 && from.angley() >= 0)) {
    set_angley(from.angley());
  }
  if (!(from.anglez() <= 0 && from.anglez() >= 0)) {
    set_anglez(from.anglez());
  }
  if (!(from.anglevelx() <= 0 && from.anglevelx() >= 0)) {
    set_anglevelx(from.anglevelx());
  }
  if (!(from.anglevely() <= 0 && from.anglevely() >= 0)) {
    set_anglevely(from.anglevely());
  }
  if (!(from.anglevelz() <= 0 && from.anglevelz() >= 0)) {
    set_anglevelz(from.anglevelz());
  }
  if (!(from.linaccx() <= 0 && from.linaccx() >= 0)) {
    set_linaccx(from.linaccx());
  }
  if (!(from.linaccy() <= 0 && from.linaccy() >= 0)) {
    set_linaccy(from.linaccy());
  }
  if (!(from.linaccz() <= 0 && from.linaccz() >= 0)) {
    set_linaccz(from.linaccz());
  }
}

void IMUData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.IMUData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUData::CopyFrom(const IMUData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.IMUData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUData::IsInitialized() const {
  return true;
}

void IMUData::Swap(IMUData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUData::InternalSwap(IMUData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(anglex_, other->anglex_);
  swap(angley_, other->angley_);
  swap(anglez_, other->anglez_);
  swap(anglevelx_, other->anglevelx_);
  swap(anglevely_, other->anglevely_);
  swap(anglevelz_, other->anglevelz_);
  swap(linaccx_, other->linaccx_);
  swap(linaccy_, other->linaccy_);
  swap(linaccz_, other->linaccz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MobyVel::InitAsDefaultInstance() {
}
class MobyVel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MobyVel::kVxFieldNumber;
const int MobyVel::kVyFieldNumber;
const int MobyVel::kVwFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MobyVel::MobyVel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.MobyVel)
}
MobyVel::MobyVel(const MobyVel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vx_, &from.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&vw_) -
    reinterpret_cast<char*>(&vx_)) + sizeof(vw_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.MobyVel)
}

void MobyVel::SharedCtor() {
  ::memset(&vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vw_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(vw_));
}

MobyVel::~MobyVel() {
  // @@protoc_insertion_point(destructor:GRPCMoby.MobyVel)
  SharedDtor();
}

void MobyVel::SharedDtor() {
}

void MobyVel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MobyVel& MobyVel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MobyVel_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void MobyVel::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.MobyVel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vw_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(vw_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MobyVel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double vx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          vw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MobyVel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.MobyVel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double vx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vw = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.MobyVel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.MobyVel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MobyVel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.MobyVel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double vx = 1;
  if (!(this->vx() <= 0 && this->vx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->vx(), output);
  }

  // double vy = 2;
  if (!(this->vy() <= 0 && this->vy() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->vy(), output);
  }

  // double vw = 3;
  if (!(this->vw() <= 0 && this->vw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->vw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.MobyVel)
}

::PROTOBUF_NAMESPACE_ID::uint8* MobyVel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.MobyVel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double vx = 1;
  if (!(this->vx() <= 0 && this->vx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->vx(), target);
  }

  // double vy = 2;
  if (!(this->vy() <= 0 && this->vy() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->vy(), target);
  }

  // double vw = 3;
  if (!(this->vw() <= 0 && this->vw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->vw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.MobyVel)
  return target;
}

size_t MobyVel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.MobyVel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double vx = 1;
  if (!(this->vx() <= 0 && this->vx() >= 0)) {
    total_size += 1 + 8;
  }

  // double vy = 2;
  if (!(this->vy() <= 0 && this->vy() >= 0)) {
    total_size += 1 + 8;
  }

  // double vw = 3;
  if (!(this->vw() <= 0 && this->vw() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MobyVel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.MobyVel)
  GOOGLE_DCHECK_NE(&from, this);
  const MobyVel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MobyVel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.MobyVel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.MobyVel)
    MergeFrom(*source);
  }
}

void MobyVel::MergeFrom(const MobyVel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.MobyVel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.vx() <= 0 && from.vx() >= 0)) {
    set_vx(from.vx());
  }
  if (!(from.vy() <= 0 && from.vy() >= 0)) {
    set_vy(from.vy());
  }
  if (!(from.vw() <= 0 && from.vw() >= 0)) {
    set_vw(from.vw());
  }
}

void MobyVel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.MobyVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobyVel::CopyFrom(const MobyVel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.MobyVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobyVel::IsInitialized() const {
  return true;
}

void MobyVel::Swap(MobyVel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MobyVel::InternalSwap(MobyVel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(vw_, other->vw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MobyVel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwerveDoubles::InitAsDefaultInstance() {
}
class SwerveDoubles::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwerveDoubles::kFlFieldNumber;
const int SwerveDoubles::kFrFieldNumber;
const int SwerveDoubles::kBlFieldNumber;
const int SwerveDoubles::kBrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwerveDoubles::SwerveDoubles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.SwerveDoubles)
}
SwerveDoubles::SwerveDoubles(const SwerveDoubles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fl_, &from.fl_,
    static_cast<size_t>(reinterpret_cast<char*>(&br_) -
    reinterpret_cast<char*>(&fl_)) + sizeof(br_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.SwerveDoubles)
}

void SwerveDoubles::SharedCtor() {
  ::memset(&fl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&br_) -
      reinterpret_cast<char*>(&fl_)) + sizeof(br_));
}

SwerveDoubles::~SwerveDoubles() {
  // @@protoc_insertion_point(destructor:GRPCMoby.SwerveDoubles)
  SharedDtor();
}

void SwerveDoubles::SharedDtor() {
}

void SwerveDoubles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwerveDoubles& SwerveDoubles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwerveDoubles_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void SwerveDoubles::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.SwerveDoubles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&br_) -
      reinterpret_cast<char*>(&fl_)) + sizeof(br_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SwerveDoubles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double fl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          fl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double fr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          fr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double bl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          bl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double br = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          br_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SwerveDoubles::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.SwerveDoubles)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double fl = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fr = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double bl = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double br = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &br_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.SwerveDoubles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.SwerveDoubles)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SwerveDoubles::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.SwerveDoubles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double fl = 1;
  if (!(this->fl() <= 0 && this->fl() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->fl(), output);
  }

  // double fr = 2;
  if (!(this->fr() <= 0 && this->fr() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->fr(), output);
  }

  // double bl = 3;
  if (!(this->bl() <= 0 && this->bl() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->bl(), output);
  }

  // double br = 4;
  if (!(this->br() <= 0 && this->br() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->br(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.SwerveDoubles)
}

::PROTOBUF_NAMESPACE_ID::uint8* SwerveDoubles::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.SwerveDoubles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double fl = 1;
  if (!(this->fl() <= 0 && this->fl() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->fl(), target);
  }

  // double fr = 2;
  if (!(this->fr() <= 0 && this->fr() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->fr(), target);
  }

  // double bl = 3;
  if (!(this->bl() <= 0 && this->bl() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->bl(), target);
  }

  // double br = 4;
  if (!(this->br() <= 0 && this->br() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->br(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.SwerveDoubles)
  return target;
}

size_t SwerveDoubles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.SwerveDoubles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double fl = 1;
  if (!(this->fl() <= 0 && this->fl() >= 0)) {
    total_size += 1 + 8;
  }

  // double fr = 2;
  if (!(this->fr() <= 0 && this->fr() >= 0)) {
    total_size += 1 + 8;
  }

  // double bl = 3;
  if (!(this->bl() <= 0 && this->bl() >= 0)) {
    total_size += 1 + 8;
  }

  // double br = 4;
  if (!(this->br() <= 0 && this->br() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwerveDoubles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.SwerveDoubles)
  GOOGLE_DCHECK_NE(&from, this);
  const SwerveDoubles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwerveDoubles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.SwerveDoubles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.SwerveDoubles)
    MergeFrom(*source);
  }
}

void SwerveDoubles::MergeFrom(const SwerveDoubles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.SwerveDoubles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.fl() <= 0 && from.fl() >= 0)) {
    set_fl(from.fl());
  }
  if (!(from.fr() <= 0 && from.fr() >= 0)) {
    set_fr(from.fr());
  }
  if (!(from.bl() <= 0 && from.bl() >= 0)) {
    set_bl(from.bl());
  }
  if (!(from.br() <= 0 && from.br() >= 0)) {
    set_br(from.br());
  }
}

void SwerveDoubles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.SwerveDoubles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwerveDoubles::CopyFrom(const SwerveDoubles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.SwerveDoubles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwerveDoubles::IsInitialized() const {
  return true;
}

void SwerveDoubles::Swap(SwerveDoubles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwerveDoubles::InternalSwap(SwerveDoubles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fl_, other->fl_);
  swap(fr_, other->fr_);
  swap(bl_, other->bl_);
  swap(br_, other->br_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwerveDoubles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TargetVel::InitAsDefaultInstance() {
}
class TargetVel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetVel::kVxFieldNumber;
const int TargetVel::kVyFieldNumber;
const int TargetVel::kVwFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetVel::TargetVel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.TargetVel)
}
TargetVel::TargetVel(const TargetVel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vx_, &from.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&vw_) -
    reinterpret_cast<char*>(&vx_)) + sizeof(vw_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.TargetVel)
}

void TargetVel::SharedCtor() {
  ::memset(&vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vw_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(vw_));
}

TargetVel::~TargetVel() {
  // @@protoc_insertion_point(destructor:GRPCMoby.TargetVel)
  SharedDtor();
}

void TargetVel::SharedDtor() {
}

void TargetVel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TargetVel& TargetVel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TargetVel_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void TargetVel::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.TargetVel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vw_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(vw_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TargetVel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double vx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          vw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TargetVel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.TargetVel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double vx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vw = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.TargetVel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.TargetVel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TargetVel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.TargetVel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double vx = 1;
  if (!(this->vx() <= 0 && this->vx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->vx(), output);
  }

  // double vy = 2;
  if (!(this->vy() <= 0 && this->vy() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->vy(), output);
  }

  // double vw = 3;
  if (!(this->vw() <= 0 && this->vw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->vw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.TargetVel)
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetVel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.TargetVel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double vx = 1;
  if (!(this->vx() <= 0 && this->vx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->vx(), target);
  }

  // double vy = 2;
  if (!(this->vy() <= 0 && this->vy() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->vy(), target);
  }

  // double vw = 3;
  if (!(this->vw() <= 0 && this->vw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->vw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.TargetVel)
  return target;
}

size_t TargetVel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.TargetVel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double vx = 1;
  if (!(this->vx() <= 0 && this->vx() >= 0)) {
    total_size += 1 + 8;
  }

  // double vy = 2;
  if (!(this->vy() <= 0 && this->vy() >= 0)) {
    total_size += 1 + 8;
  }

  // double vw = 3;
  if (!(this->vw() <= 0 && this->vw() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetVel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.TargetVel)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetVel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetVel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.TargetVel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.TargetVel)
    MergeFrom(*source);
  }
}

void TargetVel::MergeFrom(const TargetVel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.TargetVel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.vx() <= 0 && from.vx() >= 0)) {
    set_vx(from.vx());
  }
  if (!(from.vy() <= 0 && from.vy() >= 0)) {
    set_vy(from.vy());
  }
  if (!(from.vw() <= 0 && from.vw() >= 0)) {
    set_vw(from.vw());
  }
}

void TargetVel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.TargetVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetVel::CopyFrom(const TargetVel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.TargetVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetVel::IsInitialized() const {
  return true;
}

void TargetVel::Swap(TargetVel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetVel::InternalSwap(TargetVel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(vw_, other->vw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetVel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ZeroCount::InitAsDefaultInstance() {
}
class ZeroCount::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ZeroCount::kFlFieldNumber;
const int ZeroCount::kFrFieldNumber;
const int ZeroCount::kBlFieldNumber;
const int ZeroCount::kBrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ZeroCount::ZeroCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.ZeroCount)
}
ZeroCount::ZeroCount(const ZeroCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fl_, &from.fl_,
    static_cast<size_t>(reinterpret_cast<char*>(&br_) -
    reinterpret_cast<char*>(&fl_)) + sizeof(br_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.ZeroCount)
}

void ZeroCount::SharedCtor() {
  ::memset(&fl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&br_) -
      reinterpret_cast<char*>(&fl_)) + sizeof(br_));
}

ZeroCount::~ZeroCount() {
  // @@protoc_insertion_point(destructor:GRPCMoby.ZeroCount)
  SharedDtor();
}

void ZeroCount::SharedDtor() {
}

void ZeroCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZeroCount& ZeroCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZeroCount_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void ZeroCount::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.ZeroCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&br_) -
      reinterpret_cast<char*>(&fl_)) + sizeof(br_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ZeroCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 fl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 br = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          br_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ZeroCount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.ZeroCount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fl = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fr = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bl = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 br = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &br_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.ZeroCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.ZeroCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ZeroCount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.ZeroCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fl = 1;
  if (this->fl() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->fl(), output);
  }

  // int32 fr = 2;
  if (this->fr() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->fr(), output);
  }

  // int32 bl = 3;
  if (this->bl() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->bl(), output);
  }

  // int32 br = 4;
  if (this->br() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->br(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.ZeroCount)
}

::PROTOBUF_NAMESPACE_ID::uint8* ZeroCount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.ZeroCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fl = 1;
  if (this->fl() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->fl(), target);
  }

  // int32 fr = 2;
  if (this->fr() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->fr(), target);
  }

  // int32 bl = 3;
  if (this->bl() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->bl(), target);
  }

  // int32 br = 4;
  if (this->br() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->br(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.ZeroCount)
  return target;
}

size_t ZeroCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.ZeroCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 fl = 1;
  if (this->fl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fl());
  }

  // int32 fr = 2;
  if (this->fr() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fr());
  }

  // int32 bl = 3;
  if (this->bl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bl());
  }

  // int32 br = 4;
  if (this->br() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->br());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZeroCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.ZeroCount)
  GOOGLE_DCHECK_NE(&from, this);
  const ZeroCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZeroCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.ZeroCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.ZeroCount)
    MergeFrom(*source);
  }
}

void ZeroCount::MergeFrom(const ZeroCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.ZeroCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fl() != 0) {
    set_fl(from.fl());
  }
  if (from.fr() != 0) {
    set_fr(from.fr());
  }
  if (from.bl() != 0) {
    set_bl(from.bl());
  }
  if (from.br() != 0) {
    set_br(from.br());
  }
}

void ZeroCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.ZeroCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZeroCount::CopyFrom(const ZeroCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.ZeroCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZeroCount::IsInitialized() const {
  return true;
}

void ZeroCount::Swap(ZeroCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ZeroCount::InternalSwap(ZeroCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fl_, other->fl_);
  swap(fr_, other->fr_);
  swap(bl_, other->bl_);
  swap(br_, other->br_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZeroCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IRData::InitAsDefaultInstance() {
}
class IRData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IRData::kIrFront1FieldNumber;
const int IRData::kIrFront2FieldNumber;
const int IRData::kIrLeft1FieldNumber;
const int IRData::kIrLeft2FieldNumber;
const int IRData::kIrLeft3FieldNumber;
const int IRData::kIrRearFieldNumber;
const int IRData::kIrRight1FieldNumber;
const int IRData::kIrRight2FieldNumber;
const int IRData::kIrRight3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IRData::IRData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.IRData)
}
IRData::IRData(const IRData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ir_front1_, &from.ir_front1_,
    static_cast<size_t>(reinterpret_cast<char*>(&ir_right3_) -
    reinterpret_cast<char*>(&ir_front1_)) + sizeof(ir_right3_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.IRData)
}

void IRData::SharedCtor() {
  ::memset(&ir_front1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ir_right3_) -
      reinterpret_cast<char*>(&ir_front1_)) + sizeof(ir_right3_));
}

IRData::~IRData() {
  // @@protoc_insertion_point(destructor:GRPCMoby.IRData)
  SharedDtor();
}

void IRData::SharedDtor() {
}

void IRData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IRData& IRData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IRData_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void IRData::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.IRData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ir_front1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ir_right3_) -
      reinterpret_cast<char*>(&ir_front1_)) + sizeof(ir_right3_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IRData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ir_front1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ir_front1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ir_front2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ir_front2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ir_left1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ir_left1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ir_left2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ir_left2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ir_left3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ir_left3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ir_rear = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ir_rear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ir_right1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ir_right1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ir_right2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ir_right2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ir_right3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ir_right3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IRData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.IRData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ir_front1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ir_front1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ir_front2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ir_front2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ir_left1 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ir_left1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ir_left2 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ir_left2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ir_left3 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ir_left3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ir_rear = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ir_rear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ir_right1 = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ir_right1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ir_right2 = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ir_right2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ir_right3 = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ir_right3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.IRData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.IRData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IRData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.IRData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ir_front1 = 1;
  if (this->ir_front1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->ir_front1(), output);
  }

  // int32 ir_front2 = 2;
  if (this->ir_front2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->ir_front2(), output);
  }

  // int32 ir_left1 = 3;
  if (this->ir_left1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->ir_left1(), output);
  }

  // int32 ir_left2 = 4;
  if (this->ir_left2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->ir_left2(), output);
  }

  // int32 ir_left3 = 5;
  if (this->ir_left3() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->ir_left3(), output);
  }

  // int32 ir_rear = 6;
  if (this->ir_rear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->ir_rear(), output);
  }

  // int32 ir_right1 = 7;
  if (this->ir_right1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->ir_right1(), output);
  }

  // int32 ir_right2 = 8;
  if (this->ir_right2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->ir_right2(), output);
  }

  // int32 ir_right3 = 9;
  if (this->ir_right3() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->ir_right3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.IRData)
}

::PROTOBUF_NAMESPACE_ID::uint8* IRData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.IRData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ir_front1 = 1;
  if (this->ir_front1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->ir_front1(), target);
  }

  // int32 ir_front2 = 2;
  if (this->ir_front2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->ir_front2(), target);
  }

  // int32 ir_left1 = 3;
  if (this->ir_left1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->ir_left1(), target);
  }

  // int32 ir_left2 = 4;
  if (this->ir_left2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->ir_left2(), target);
  }

  // int32 ir_left3 = 5;
  if (this->ir_left3() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->ir_left3(), target);
  }

  // int32 ir_rear = 6;
  if (this->ir_rear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->ir_rear(), target);
  }

  // int32 ir_right1 = 7;
  if (this->ir_right1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->ir_right1(), target);
  }

  // int32 ir_right2 = 8;
  if (this->ir_right2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->ir_right2(), target);
  }

  // int32 ir_right3 = 9;
  if (this->ir_right3() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->ir_right3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.IRData)
  return target;
}

size_t IRData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.IRData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ir_front1 = 1;
  if (this->ir_front1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ir_front1());
  }

  // int32 ir_front2 = 2;
  if (this->ir_front2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ir_front2());
  }

  // int32 ir_left1 = 3;
  if (this->ir_left1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ir_left1());
  }

  // int32 ir_left2 = 4;
  if (this->ir_left2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ir_left2());
  }

  // int32 ir_left3 = 5;
  if (this->ir_left3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ir_left3());
  }

  // int32 ir_rear = 6;
  if (this->ir_rear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ir_rear());
  }

  // int32 ir_right1 = 7;
  if (this->ir_right1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ir_right1());
  }

  // int32 ir_right2 = 8;
  if (this->ir_right2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ir_right2());
  }

  // int32 ir_right3 = 9;
  if (this->ir_right3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ir_right3());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IRData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.IRData)
  GOOGLE_DCHECK_NE(&from, this);
  const IRData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IRData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.IRData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.IRData)
    MergeFrom(*source);
  }
}

void IRData::MergeFrom(const IRData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.IRData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ir_front1() != 0) {
    set_ir_front1(from.ir_front1());
  }
  if (from.ir_front2() != 0) {
    set_ir_front2(from.ir_front2());
  }
  if (from.ir_left1() != 0) {
    set_ir_left1(from.ir_left1());
  }
  if (from.ir_left2() != 0) {
    set_ir_left2(from.ir_left2());
  }
  if (from.ir_left3() != 0) {
    set_ir_left3(from.ir_left3());
  }
  if (from.ir_rear() != 0) {
    set_ir_rear(from.ir_rear());
  }
  if (from.ir_right1() != 0) {
    set_ir_right1(from.ir_right1());
  }
  if (from.ir_right2() != 0) {
    set_ir_right2(from.ir_right2());
  }
  if (from.ir_right3() != 0) {
    set_ir_right3(from.ir_right3());
  }
}

void IRData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.IRData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IRData::CopyFrom(const IRData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.IRData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IRData::IsInitialized() const {
  return true;
}

void IRData::Swap(IRData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IRData::InternalSwap(IRData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ir_front1_, other->ir_front1_);
  swap(ir_front2_, other->ir_front2_);
  swap(ir_left1_, other->ir_left1_);
  swap(ir_left2_, other->ir_left2_);
  swap(ir_left3_, other->ir_left3_);
  swap(ir_rear_, other->ir_rear_);
  swap(ir_right1_, other->ir_right1_);
  swap(ir_right2_, other->ir_right2_);
  swap(ir_right3_, other->ir_right3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IRData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BMSData::InitAsDefaultInstance() {
}
class BMSData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BMSData::kBmsStatusFieldNumber;
const int BMSData::kPackVoltFieldNumber;
const int BMSData::kBatteryVoltFieldNumber;
const int BMSData::kPackCurrent1FieldNumber;
const int BMSData::kPackCurrent2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BMSData::BMSData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.BMSData)
}
BMSData::BMSData(const BMSData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bms_status_(from.bms_status_),
      pack_volt_(from.pack_volt_),
      battery_volt_(from.battery_volt_),
      pack_current1_(from.pack_current1_),
      pack_current2_(from.pack_current2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.BMSData)
}

void BMSData::SharedCtor() {
}

BMSData::~BMSData() {
  // @@protoc_insertion_point(destructor:GRPCMoby.BMSData)
  SharedDtor();
}

void BMSData::SharedDtor() {
}

void BMSData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMSData& BMSData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMSData_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void BMSData::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.BMSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bms_status_.Clear();
  pack_volt_.Clear();
  battery_volt_.Clear();
  pack_current1_.Clear();
  pack_current2_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BMSData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 bms_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_bms_status(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_bms_status(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 pack_volt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_pack_volt(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_pack_volt(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 battery_volt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_battery_volt(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_battery_volt(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 pack_current1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_pack_current1(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_pack_current1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 pack_current2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_pack_current2(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          add_pack_current2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BMSData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.BMSData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 bms_status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bms_status())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_bms_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 pack_volt = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pack_volt())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_pack_volt())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 battery_volt = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_battery_volt())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_battery_volt())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 pack_current1 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pack_current1())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_pack_current1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 pack_current2 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pack_current2())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_pack_current2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.BMSData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.BMSData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BMSData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.BMSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bms_status = 1;
  if (this->bms_status_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bms_status_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->bms_status_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->bms_status(i), output);
  }

  // repeated int32 pack_volt = 2;
  if (this->pack_volt_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pack_volt_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->pack_volt_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->pack_volt(i), output);
  }

  // repeated int32 battery_volt = 3;
  if (this->battery_volt_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_battery_volt_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->battery_volt_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->battery_volt(i), output);
  }

  // repeated int32 pack_current1 = 4;
  if (this->pack_current1_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pack_current1_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->pack_current1_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->pack_current1(i), output);
  }

  // repeated int32 pack_current2 = 5;
  if (this->pack_current2_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pack_current2_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->pack_current2_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->pack_current2(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.BMSData)
}

::PROTOBUF_NAMESPACE_ID::uint8* BMSData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.BMSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bms_status = 1;
  if (this->bms_status_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _bms_status_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->bms_status_, target);
  }

  // repeated int32 pack_volt = 2;
  if (this->pack_volt_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pack_volt_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pack_volt_, target);
  }

  // repeated int32 battery_volt = 3;
  if (this->battery_volt_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _battery_volt_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->battery_volt_, target);
  }

  // repeated int32 pack_current1 = 4;
  if (this->pack_current1_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pack_current1_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pack_current1_, target);
  }

  // repeated int32 pack_current2 = 5;
  if (this->pack_current2_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _pack_current2_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->pack_current2_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.BMSData)
  return target;
}

size_t BMSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.BMSData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bms_status = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bms_status_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bms_status_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 pack_volt = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pack_volt_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pack_volt_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 battery_volt = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->battery_volt_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _battery_volt_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 pack_current1 = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pack_current1_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pack_current1_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 pack_current2 = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->pack_current2_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _pack_current2_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMSData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.BMSData)
  GOOGLE_DCHECK_NE(&from, this);
  const BMSData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMSData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.BMSData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.BMSData)
    MergeFrom(*source);
  }
}

void BMSData::MergeFrom(const BMSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.BMSData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bms_status_.MergeFrom(from.bms_status_);
  pack_volt_.MergeFrom(from.pack_volt_);
  battery_volt_.MergeFrom(from.battery_volt_);
  pack_current1_.MergeFrom(from.pack_current1_);
  pack_current2_.MergeFrom(from.pack_current2_);
}

void BMSData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.BMSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMSData::CopyFrom(const BMSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.BMSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMSData::IsInitialized() const {
  return true;
}

void BMSData::Swap(BMSData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BMSData::InternalSwap(BMSData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bms_status_.InternalSwap(&other->bms_status_);
  pack_volt_.InternalSwap(&other->pack_volt_);
  battery_volt_.InternalSwap(&other->battery_volt_);
  pack_current1_.InternalSwap(&other->pack_current1_);
  pack_current2_.InternalSwap(&other->pack_current2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMSData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GBool::InitAsDefaultInstance() {
}
class GBool::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GBool::kIdxFieldNumber;
const int GBool::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GBool::GBool()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.GBool)
}
GBool::GBool(const GBool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.GBool)
}

void GBool::SharedCtor() {
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(val_));
}

GBool::~GBool() {
  // @@protoc_insertion_point(destructor:GRPCMoby.GBool)
  SharedDtor();
}

void GBool::SharedDtor() {
}

void GBool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GBool& GBool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GBool_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void GBool::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.GBool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(val_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GBool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GBool::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.GBool)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool val = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.GBool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.GBool)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GBool::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.GBool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // bool val = 2;
  if (this->val() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.GBool)
}

::PROTOBUF_NAMESPACE_ID::uint8* GBool::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.GBool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // bool val = 2;
  if (this->val() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.GBool)
  return target;
}

size_t GBool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.GBool)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  // bool val = 2;
  if (this->val() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GBool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.GBool)
  GOOGLE_DCHECK_NE(&from, this);
  const GBool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GBool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.GBool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.GBool)
    MergeFrom(*source);
  }
}

void GBool::MergeFrom(const GBool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.GBool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idx() != 0) {
    set_idx(from.idx());
  }
  if (from.val() != 0) {
    set_val(from.val());
  }
}

void GBool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.GBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GBool::CopyFrom(const GBool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.GBool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GBool::IsInitialized() const {
  return true;
}

void GBool::Swap(GBool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GBool::InternalSwap(GBool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(idx_, other->idx_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GBool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GInt::InitAsDefaultInstance() {
}
class GInt::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GInt::kIdxFieldNumber;
const int GInt::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GInt::GInt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.GInt)
}
GInt::GInt(const GInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.GInt)
}

void GInt::SharedCtor() {
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(val_));
}

GInt::~GInt() {
  // @@protoc_insertion_point(destructor:GRPCMoby.GInt)
  SharedDtor();
}

void GInt::SharedDtor() {
}

void GInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GInt& GInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GInt_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void GInt::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.GInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(val_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GInt::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.GInt)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 val = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.GInt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.GInt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GInt::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.GInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // int32 val = 2;
  if (this->val() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.GInt)
}

::PROTOBUF_NAMESPACE_ID::uint8* GInt::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.GInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // int32 val = 2;
  if (this->val() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.GInt)
  return target;
}

size_t GInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.GInt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  // int32 val = 2;
  if (this->val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->val());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.GInt)
  GOOGLE_DCHECK_NE(&from, this);
  const GInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.GInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.GInt)
    MergeFrom(*source);
  }
}

void GInt::MergeFrom(const GInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.GInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idx() != 0) {
    set_idx(from.idx());
  }
  if (from.val() != 0) {
    set_val(from.val());
  }
}

void GInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.GInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GInt::CopyFrom(const GInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.GInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GInt::IsInitialized() const {
  return true;
}

void GInt::Swap(GInt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GInt::InternalSwap(GInt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(idx_, other->idx_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GFloat::InitAsDefaultInstance() {
}
class GFloat::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GFloat::kIdxFieldNumber;
const int GFloat::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GFloat::GFloat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.GFloat)
}
GFloat::GFloat(const GFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.GFloat)
}

void GFloat::SharedCtor() {
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(val_));
}

GFloat::~GFloat() {
  // @@protoc_insertion_point(destructor:GRPCMoby.GFloat)
  SharedDtor();
}

void GFloat::SharedDtor() {
}

void GFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GFloat& GFloat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GFloat_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void GFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.GFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(val_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GFloat::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.GFloat)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float val = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.GFloat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.GFloat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GFloat::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.GFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // float val = 2;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.GFloat)
}

::PROTOBUF_NAMESPACE_ID::uint8* GFloat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.GFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // float val = 2;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.GFloat)
  return target;
}

size_t GFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.GFloat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  // float val = 2;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.GFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const GFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.GFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.GFloat)
    MergeFrom(*source);
  }
}

void GFloat::MergeFrom(const GFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.GFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idx() != 0) {
    set_idx(from.idx());
  }
  if (!(from.val() <= 0 && from.val() >= 0)) {
    set_val(from.val());
  }
}

void GFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.GFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GFloat::CopyFrom(const GFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.GFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GFloat::IsInitialized() const {
  return true;
}

void GFloat::Swap(GFloat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GFloat::InternalSwap(GFloat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(idx_, other->idx_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GString::InitAsDefaultInstance() {
}
class GString::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GString::kIdxFieldNumber;
const int GString::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GString::GString()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.GString)
}
GString::GString(const GString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.val().size() > 0) {
    val_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.GString)
}

void GString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GString_MobygRPCServer_2eproto.base);
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idx_ = 0;
}

GString::~GString() {
  // @@protoc_insertion_point(destructor:GRPCMoby.GString)
  SharedDtor();
}

void GString::SharedDtor() {
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GString& GString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GString_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void GString::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.GString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idx_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_val(), ptr, ctx, "GRPCMoby.GString.val");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GString::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.GString)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string val = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->val().data(), static_cast<int>(this->val().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "GRPCMoby.GString.val"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.GString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.GString)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GString::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.GString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // string val = 2;
  if (this->val().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->val().data(), static_cast<int>(this->val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GRPCMoby.GString.val");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.GString)
}

::PROTOBUF_NAMESPACE_ID::uint8* GString::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.GString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // string val = 2;
  if (this->val().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->val().data(), static_cast<int>(this->val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GRPCMoby.GString.val");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.GString)
  return target;
}

size_t GString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.GString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string val = 2;
  if (this->val().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->val());
  }

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.GString)
  GOOGLE_DCHECK_NE(&from, this);
  const GString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.GString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.GString)
    MergeFrom(*source);
  }
}

void GString::MergeFrom(const GString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.GString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.val().size() > 0) {

    val_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  if (from.idx() != 0) {
    set_idx(from.idx());
  }
}

void GString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.GString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GString::CopyFrom(const GString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.GString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GString::IsInitialized() const {
  return true;
}

void GString::Swap(GString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GString::InternalSwap(GString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  val_.Swap(&other->val_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoolVal::InitAsDefaultInstance() {
}
class BoolVal::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolVal::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolVal::BoolVal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.BoolVal)
}
BoolVal::BoolVal(const BoolVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.BoolVal)
}

void BoolVal::SharedCtor() {
  val_ = false;
}

BoolVal::~BoolVal() {
  // @@protoc_insertion_point(destructor:GRPCMoby.BoolVal)
  SharedDtor();
}

void BoolVal::SharedDtor() {
}

void BoolVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoolVal& BoolVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoolVal_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void BoolVal::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.BoolVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoolVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoolVal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.BoolVal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.BoolVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.BoolVal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoolVal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.BoolVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool val = 1;
  if (this->val() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.BoolVal)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoolVal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.BoolVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool val = 1;
  if (this->val() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.BoolVal)
  return target;
}

size_t BoolVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.BoolVal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool val = 1;
  if (this->val() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoolVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.BoolVal)
  GOOGLE_DCHECK_NE(&from, this);
  const BoolVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoolVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.BoolVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.BoolVal)
    MergeFrom(*source);
  }
}

void BoolVal::MergeFrom(const BoolVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.BoolVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.val() != 0) {
    set_val(from.val());
  }
}

void BoolVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.BoolVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolVal::CopyFrom(const BoolVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.BoolVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolVal::IsInitialized() const {
  return true;
}

void BoolVal::Swap(BoolVal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolVal::InternalSwap(BoolVal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoolVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntVal::InitAsDefaultInstance() {
}
class IntVal::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntVal::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntVal::IntVal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.IntVal)
}
IntVal::IntVal(const IntVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.IntVal)
}

void IntVal::SharedCtor() {
  val_ = 0;
}

IntVal::~IntVal() {
  // @@protoc_insertion_point(destructor:GRPCMoby.IntVal)
  SharedDtor();
}

void IntVal::SharedDtor() {
}

void IntVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntVal& IntVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntVal_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void IntVal::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.IntVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntVal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.IntVal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.IntVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.IntVal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntVal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.IntVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 val = 1;
  if (this->val() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.IntVal)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntVal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.IntVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 val = 1;
  if (this->val() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.IntVal)
  return target;
}

size_t IntVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.IntVal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 val = 1;
  if (this->val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->val());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.IntVal)
  GOOGLE_DCHECK_NE(&from, this);
  const IntVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.IntVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.IntVal)
    MergeFrom(*source);
  }
}

void IntVal::MergeFrom(const IntVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.IntVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.val() != 0) {
    set_val(from.val());
  }
}

void IntVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.IntVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntVal::CopyFrom(const IntVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.IntVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntVal::IsInitialized() const {
  return true;
}

void IntVal::Swap(IntVal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntVal::InternalSwap(IntVal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntVals::InitAsDefaultInstance() {
}
class IntVals::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IntVals::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IntVals::IntVals()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.IntVals)
}
IntVals::IntVals(const IntVals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      val_(from.val_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.IntVals)
}

void IntVals::SharedCtor() {
}

IntVals::~IntVals() {
  // @@protoc_insertion_point(destructor:GRPCMoby.IntVals)
  SharedDtor();
}

void IntVals::SharedDtor() {
}

void IntVals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntVals& IntVals::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntVals_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void IntVals::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.IntVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntVals::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntVals::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.IntVals)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_val())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.IntVals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.IntVals)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntVals::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.IntVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 val = 1;
  if (this->val_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->val_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->val(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.IntVals)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntVals::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.IntVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 val = 1;
  if (this->val_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _val_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->val_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.IntVals)
  return target;
}

size_t IntVals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.IntVals)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 val = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntVals::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.IntVals)
  GOOGLE_DCHECK_NE(&from, this);
  const IntVals* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntVals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.IntVals)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.IntVals)
    MergeFrom(*source);
  }
}

void IntVals::MergeFrom(const IntVals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.IntVals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
}

void IntVals::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.IntVals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntVals::CopyFrom(const IntVals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.IntVals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntVals::IsInitialized() const {
  return true;
}

void IntVals::Swap(IntVals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IntVals::InternalSwap(IntVals* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  val_.InternalSwap(&other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntVals::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloatVal::InitAsDefaultInstance() {
}
class FloatVal::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatVal::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatVal::FloatVal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.FloatVal)
}
FloatVal::FloatVal(const FloatVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.FloatVal)
}

void FloatVal::SharedCtor() {
  val_ = 0;
}

FloatVal::~FloatVal() {
  // @@protoc_insertion_point(destructor:GRPCMoby.FloatVal)
  SharedDtor();
}

void FloatVal::SharedDtor() {
}

void FloatVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatVal& FloatVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatVal_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void FloatVal::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.FloatVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FloatVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FloatVal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.FloatVal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.FloatVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.FloatVal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FloatVal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.FloatVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.FloatVal)
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatVal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.FloatVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.FloatVal)
  return target;
}

size_t FloatVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.FloatVal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.FloatVal)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.FloatVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.FloatVal)
    MergeFrom(*source);
  }
}

void FloatVal::MergeFrom(const FloatVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.FloatVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.val() <= 0 && from.val() >= 0)) {
    set_val(from.val());
  }
}

void FloatVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.FloatVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatVal::CopyFrom(const FloatVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.FloatVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVal::IsInitialized() const {
  return true;
}

void FloatVal::Swap(FloatVal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatVal::InternalSwap(FloatVal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloatVals::InitAsDefaultInstance() {
}
class FloatVals::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatVals::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatVals::FloatVals()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.FloatVals)
}
FloatVals::FloatVals(const FloatVals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      val_(from.val_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.FloatVals)
}

void FloatVals::SharedCtor() {
}

FloatVals::~FloatVals() {
  // @@protoc_insertion_point(destructor:GRPCMoby.FloatVals)
  SharedDtor();
}

void FloatVals::SharedDtor() {
}

void FloatVals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatVals& FloatVals::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatVals_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void FloatVals::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.FloatVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FloatVals::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FloatVals::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.FloatVals)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_val())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.FloatVals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.FloatVals)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FloatVals::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.FloatVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float val = 1;
  if (this->val_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->val().data(), this->val_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.FloatVals)
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatVals::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.FloatVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float val = 1;
  if (this->val_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _val_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->val_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.FloatVals)
  return target;
}

size_t FloatVals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.FloatVals)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float val = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatVals::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.FloatVals)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatVals* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatVals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.FloatVals)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.FloatVals)
    MergeFrom(*source);
  }
}

void FloatVals::MergeFrom(const FloatVals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.FloatVals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
}

void FloatVals::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.FloatVals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatVals::CopyFrom(const FloatVals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.FloatVals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVals::IsInitialized() const {
  return true;
}

void FloatVals::Swap(FloatVals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatVals::InternalSwap(FloatVals* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  val_.InternalSwap(&other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatVals::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoubleVal::InitAsDefaultInstance() {
}
class DoubleVal::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleVal::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleVal::DoubleVal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.DoubleVal)
}
DoubleVal::DoubleVal(const DoubleVal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_ = from.val_;
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.DoubleVal)
}

void DoubleVal::SharedCtor() {
  val_ = 0;
}

DoubleVal::~DoubleVal() {
  // @@protoc_insertion_point(destructor:GRPCMoby.DoubleVal)
  SharedDtor();
}

void DoubleVal::SharedDtor() {
}

void DoubleVal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleVal& DoubleVal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleVal_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void DoubleVal::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.DoubleVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoubleVal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoubleVal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.DoubleVal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &val_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.DoubleVal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.DoubleVal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoubleVal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.DoubleVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->val(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.DoubleVal)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleVal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.DoubleVal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->val(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.DoubleVal)
  return target;
}

size_t DoubleVal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.DoubleVal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double val = 1;
  if (!(this->val() <= 0 && this->val() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleVal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.DoubleVal)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleVal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleVal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.DoubleVal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.DoubleVal)
    MergeFrom(*source);
  }
}

void DoubleVal::MergeFrom(const DoubleVal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.DoubleVal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.val() <= 0 && from.val() >= 0)) {
    set_val(from.val());
  }
}

void DoubleVal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.DoubleVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleVal::CopyFrom(const DoubleVal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.DoubleVal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleVal::IsInitialized() const {
  return true;
}

void DoubleVal::Swap(DoubleVal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleVal::InternalSwap(DoubleVal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(val_, other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleVal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoubleVals::InitAsDefaultInstance() {
}
class DoubleVals::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DoubleVals::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DoubleVals::DoubleVals()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.DoubleVals)
}
DoubleVals::DoubleVals(const DoubleVals& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      val_(from.val_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.DoubleVals)
}

void DoubleVals::SharedCtor() {
}

DoubleVals::~DoubleVals() {
  // @@protoc_insertion_point(destructor:GRPCMoby.DoubleVals)
  SharedDtor();
}

void DoubleVals::SharedDtor() {
}

void DoubleVals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleVals& DoubleVals::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleVals_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void DoubleVals::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.DoubleVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DoubleVals::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          add_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DoubleVals::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.DoubleVals)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double val = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_val())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.DoubleVals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.DoubleVals)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DoubleVals::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.DoubleVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double val = 1;
  if (this->val_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->val().data(), this->val_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.DoubleVals)
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleVals::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.DoubleVals)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double val = 1;
  if (this->val_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _val_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->val_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.DoubleVals)
  return target;
}

size_t DoubleVals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.DoubleVals)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double val = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleVals::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.DoubleVals)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleVals* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleVals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.DoubleVals)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.DoubleVals)
    MergeFrom(*source);
  }
}

void DoubleVals::MergeFrom(const DoubleVals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.DoubleVals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
}

void DoubleVals::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.DoubleVals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleVals::CopyFrom(const DoubleVals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.DoubleVals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleVals::IsInitialized() const {
  return true;
}

void DoubleVals::Swap(DoubleVals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DoubleVals::InternalSwap(DoubleVals* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  val_.InternalSwap(&other->val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleVals::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RotationGain::InitAsDefaultInstance() {
}
class RotationGain::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotationGain::kIdxFieldNumber;
const int RotationGain::kKFieldNumber;
const int RotationGain::kKvFieldNumber;
const int RotationGain::kKpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotationGain::RotationGain()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.RotationGain)
}
RotationGain::RotationGain(const RotationGain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&k_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.RotationGain)
}

void RotationGain::SharedCtor() {
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&k_)) + sizeof(idx_));
}

RotationGain::~RotationGain() {
  // @@protoc_insertion_point(destructor:GRPCMoby.RotationGain)
  SharedDtor();
}

void RotationGain::SharedDtor() {
}

void RotationGain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RotationGain& RotationGain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RotationGain_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void RotationGain::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.RotationGain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&k_)) + sizeof(idx_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RotationGain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double kv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          kv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double kp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          kp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RotationGain::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.RotationGain)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double k = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double kv = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double kp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.RotationGain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.RotationGain)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RotationGain::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.RotationGain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // double k = 2;
  if (!(this->k() <= 0 && this->k() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->k(), output);
  }

  // double kv = 3;
  if (!(this->kv() <= 0 && this->kv() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->kv(), output);
  }

  // double kp = 4;
  if (!(this->kp() <= 0 && this->kp() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->kp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.RotationGain)
}

::PROTOBUF_NAMESPACE_ID::uint8* RotationGain::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.RotationGain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // double k = 2;
  if (!(this->k() <= 0 && this->k() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->k(), target);
  }

  // double kv = 3;
  if (!(this->kv() <= 0 && this->kv() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->kv(), target);
  }

  // double kp = 4;
  if (!(this->kp() <= 0 && this->kp() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->kp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.RotationGain)
  return target;
}

size_t RotationGain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.RotationGain)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double k = 2;
  if (!(this->k() <= 0 && this->k() >= 0)) {
    total_size += 1 + 8;
  }

  // double kv = 3;
  if (!(this->kv() <= 0 && this->kv() >= 0)) {
    total_size += 1 + 8;
  }

  // double kp = 4;
  if (!(this->kp() <= 0 && this->kp() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationGain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.RotationGain)
  GOOGLE_DCHECK_NE(&from, this);
  const RotationGain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RotationGain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.RotationGain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.RotationGain)
    MergeFrom(*source);
  }
}

void RotationGain::MergeFrom(const RotationGain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.RotationGain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.k() <= 0 && from.k() >= 0)) {
    set_k(from.k());
  }
  if (!(from.kv() <= 0 && from.kv() >= 0)) {
    set_kv(from.kv());
  }
  if (!(from.kp() <= 0 && from.kp() >= 0)) {
    set_kp(from.kp());
  }
  if (from.idx() != 0) {
    set_idx(from.idx());
  }
}

void RotationGain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.RotationGain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationGain::CopyFrom(const RotationGain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.RotationGain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationGain::IsInitialized() const {
  return true;
}

void RotationGain::Swap(RotationGain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RotationGain::InternalSwap(RotationGain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(k_, other->k_);
  swap(kv_, other->kv_);
  swap(kp_, other->kp_);
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RotationGain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VelAccBoundary::InitAsDefaultInstance() {
}
class VelAccBoundary::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VelAccBoundary::kIdxFieldNumber;
const int VelAccBoundary::kVmaxFieldNumber;
const int VelAccBoundary::kAmaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VelAccBoundary::VelAccBoundary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GRPCMoby.VelAccBoundary)
}
VelAccBoundary::VelAccBoundary(const VelAccBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&amax_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(amax_));
  // @@protoc_insertion_point(copy_constructor:GRPCMoby.VelAccBoundary)
}

void VelAccBoundary::SharedCtor() {
  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amax_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(amax_));
}

VelAccBoundary::~VelAccBoundary() {
  // @@protoc_insertion_point(destructor:GRPCMoby.VelAccBoundary)
  SharedDtor();
}

void VelAccBoundary::SharedDtor() {
}

void VelAccBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VelAccBoundary& VelAccBoundary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VelAccBoundary_MobygRPCServer_2eproto.base);
  return *internal_default_instance();
}


void VelAccBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:GRPCMoby.VelAccBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amax_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(amax_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VelAccBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float vmax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          vmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float amax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          amax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VelAccBoundary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GRPCMoby.VelAccBoundary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float vmax = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float amax = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GRPCMoby.VelAccBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GRPCMoby.VelAccBoundary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VelAccBoundary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GRPCMoby.VelAccBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // float vmax = 2;
  if (!(this->vmax() <= 0 && this->vmax() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->vmax(), output);
  }

  // float amax = 3;
  if (!(this->amax() <= 0 && this->amax() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->amax(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GRPCMoby.VelAccBoundary)
}

::PROTOBUF_NAMESPACE_ID::uint8* VelAccBoundary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GRPCMoby.VelAccBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // float vmax = 2;
  if (!(this->vmax() <= 0 && this->vmax() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->vmax(), target);
  }

  // float amax = 3;
  if (!(this->amax() <= 0 && this->amax() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->amax(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GRPCMoby.VelAccBoundary)
  return target;
}

size_t VelAccBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GRPCMoby.VelAccBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 idx = 1;
  if (this->idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idx());
  }

  // float vmax = 2;
  if (!(this->vmax() <= 0 && this->vmax() >= 0)) {
    total_size += 1 + 4;
  }

  // float amax = 3;
  if (!(this->amax() <= 0 && this->amax() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelAccBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GRPCMoby.VelAccBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const VelAccBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelAccBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GRPCMoby.VelAccBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GRPCMoby.VelAccBoundary)
    MergeFrom(*source);
  }
}

void VelAccBoundary::MergeFrom(const VelAccBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GRPCMoby.VelAccBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idx() != 0) {
    set_idx(from.idx());
  }
  if (!(from.vmax() <= 0 && from.vmax() >= 0)) {
    set_vmax(from.vmax());
  }
  if (!(from.amax() <= 0 && from.amax() >= 0)) {
    set_amax(from.amax());
  }
}

void VelAccBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GRPCMoby.VelAccBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelAccBoundary::CopyFrom(const VelAccBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GRPCMoby.VelAccBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelAccBoundary::IsInitialized() const {
  return true;
}

void VelAccBoundary::Swap(VelAccBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VelAccBoundary::InternalSwap(VelAccBoundary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(idx_, other->idx_);
  swap(vmax_, other->vmax_);
  swap(amax_, other->amax_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VelAccBoundary::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GRPCMoby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GRPCMoby::Empty* Arena::CreateMaybeMessage< ::GRPCMoby::Empty >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::JsonParam* Arena::CreateMaybeMessage< ::GRPCMoby::JsonParam >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::JsonParam >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::MotorDriverTx* Arena::CreateMaybeMessage< ::GRPCMoby::MotorDriverTx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::MotorDriverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::MotorDriverRx* Arena::CreateMaybeMessage< ::GRPCMoby::MotorDriverRx >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::MotorDriverRx >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::MotorDriverRxs* Arena::CreateMaybeMessage< ::GRPCMoby::MotorDriverRxs >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::MotorDriverRxs >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::MobyState* Arena::CreateMaybeMessage< ::GRPCMoby::MobyState >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::MobyState >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::MobyErrorState* Arena::CreateMaybeMessage< ::GRPCMoby::MobyErrorState >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::MobyErrorState >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::MobyPose* Arena::CreateMaybeMessage< ::GRPCMoby::MobyPose >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::MobyPose >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::IMUData* Arena::CreateMaybeMessage< ::GRPCMoby::IMUData >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::IMUData >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::MobyVel* Arena::CreateMaybeMessage< ::GRPCMoby::MobyVel >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::MobyVel >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::SwerveDoubles* Arena::CreateMaybeMessage< ::GRPCMoby::SwerveDoubles >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::SwerveDoubles >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::TargetVel* Arena::CreateMaybeMessage< ::GRPCMoby::TargetVel >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::TargetVel >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::ZeroCount* Arena::CreateMaybeMessage< ::GRPCMoby::ZeroCount >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::ZeroCount >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::IRData* Arena::CreateMaybeMessage< ::GRPCMoby::IRData >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::IRData >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::BMSData* Arena::CreateMaybeMessage< ::GRPCMoby::BMSData >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::BMSData >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::GBool* Arena::CreateMaybeMessage< ::GRPCMoby::GBool >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::GBool >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::GInt* Arena::CreateMaybeMessage< ::GRPCMoby::GInt >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::GInt >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::GFloat* Arena::CreateMaybeMessage< ::GRPCMoby::GFloat >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::GFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::GString* Arena::CreateMaybeMessage< ::GRPCMoby::GString >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::GString >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::BoolVal* Arena::CreateMaybeMessage< ::GRPCMoby::BoolVal >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::BoolVal >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::IntVal* Arena::CreateMaybeMessage< ::GRPCMoby::IntVal >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::IntVal >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::IntVals* Arena::CreateMaybeMessage< ::GRPCMoby::IntVals >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::IntVals >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::FloatVal* Arena::CreateMaybeMessage< ::GRPCMoby::FloatVal >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::FloatVal >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::FloatVals* Arena::CreateMaybeMessage< ::GRPCMoby::FloatVals >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::FloatVals >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::DoubleVal* Arena::CreateMaybeMessage< ::GRPCMoby::DoubleVal >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::DoubleVal >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::DoubleVals* Arena::CreateMaybeMessage< ::GRPCMoby::DoubleVals >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::DoubleVals >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::RotationGain* Arena::CreateMaybeMessage< ::GRPCMoby::RotationGain >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::RotationGain >(arena);
}
template<> PROTOBUF_NOINLINE ::GRPCMoby::VelAccBoundary* Arena::CreateMaybeMessage< ::GRPCMoby::VelAccBoundary >(Arena* arena) {
  return Arena::CreateInternal< ::GRPCMoby::VelAccBoundary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
