// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: EtherCATCommgRPCServer.proto
#ifndef GRPC_EtherCATCommgRPCServer_2eproto__INCLUDED
#define GRPC_EtherCATCommgRPCServer_2eproto__INCLUDED

#include "EtherCATCommgRPCServer.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace GRPCECat {

class GRPCECatTask final {
 public:
  static constexpr char const* service_full_name() {
    return "GRPCECat.GRPCECatTask";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Master and slave status
    virtual ::grpc::Status GetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> AsyncGetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(AsyncGetMasterStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> PrepareAsyncGetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(PrepareAsyncGetMasterStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVals* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVals>> AsyncGetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVals>>(AsyncGetSlaveStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVals>> PrepareAsyncGetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVals>>(PrepareAsyncGetSlaveStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> AsyncGetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(AsyncGetRxDomainStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> PrepareAsyncGetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(PrepareAsyncGetRxDomainStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> AsyncGetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(AsyncGetTxDomainStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> PrepareAsyncGetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(PrepareAsyncGetTxDomainStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status IsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVals* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVals>> AsyncIsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVals>>(AsyncIsSystemReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVals>> PrepareAsyncIsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVals>>(PrepareAsyncIsSystemReadyRaw(context, request, cq));
    }
    virtual ::grpc::Status SetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::GRPCECat::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> AsyncSetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(AsyncSetServoOnOffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> PrepareAsyncSetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(PrepareAsyncSetServoOnOffRaw(context, request, cq));
    }
    // Read and Write PDOs (Motor Driver)
    virtual ::grpc::Status SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::GRPCECat::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> AsyncSetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(AsyncSetRxPDOMotorDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> PrepareAsyncSetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(PrepareAsyncSetRxPDOMotorDriverRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::MotorDriverRx* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::MotorDriverRx>> AsyncGetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::MotorDriverRx>>(AsyncGetRxPDOMotorDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::MotorDriverRx>> PrepareAsyncGetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::MotorDriverRx>>(PrepareAsyncGetRxPDOMotorDriverRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::MotorDriverTx* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::MotorDriverTx>> AsyncGetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::MotorDriverTx>>(AsyncGetTxPDOMotorDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::MotorDriverTx>> PrepareAsyncGetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::MotorDriverTx>>(PrepareAsyncGetTxPDOMotorDriverRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> AsyncGetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(AsyncGetMotorDriverDIsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> PrepareAsyncGetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(PrepareAsyncGetMotorDriverDIsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> AsyncGetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(AsyncGetErrorCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> PrepareAsyncGetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(PrepareAsyncGetErrorCodeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> AsyncGetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(AsyncGetMaxTorqueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> PrepareAsyncGetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(PrepareAsyncGetMaxTorqueRaw(context, request, cq));
    }
    virtual ::grpc::Status SetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> AsyncSetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(AsyncSetMaxTorqueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> PrepareAsyncSetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(PrepareAsyncSetMaxTorqueRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> AsyncGetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(AsyncGetMaxMotorSpeedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> PrepareAsyncGetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(PrepareAsyncGetMaxMotorSpeedRaw(context, request, cq));
    }
    virtual ::grpc::Status SetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> AsyncSetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(AsyncSetMaxMotorSpeedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> PrepareAsyncSetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(PrepareAsyncSetMaxMotorSpeedRaw(context, request, cq));
    }
    // Read and Write PDOs (Neuromeka IO board)
    virtual ::grpc::Status SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::GRPCECat::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> AsyncSetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(AsyncSetNRMKIOBoardOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> PrepareAsyncSetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(PrepareAsyncSetNRMKIOBoardOutputRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IOBoardTx* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IOBoardTx>> AsyncGetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IOBoardTx>>(AsyncGetNRMKIOBoardInputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IOBoardTx>> PrepareAsyncGetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IOBoardTx>>(PrepareAsyncGetNRMKIOBoardInputRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IOBoardRx* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IOBoardRx>> AsyncGetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IOBoardRx>>(AsyncGetNRMKIOBoardOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IOBoardRx>> PrepareAsyncGetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IOBoardRx>>(PrepareAsyncGetNRMKIOBoardOutputRaw(context, request, cq));
    }
    // Read and Write PDOs (Neuromeka Endtool)
    virtual ::grpc::Status SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::GRPCECat::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> AsyncSetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(AsyncSetNRMKEndtoolOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> PrepareAsyncSetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(PrepareAsyncSetNRMKEndtoolOutputRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::EndtoolTx* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::EndtoolTx>> AsyncGetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::EndtoolTx>>(AsyncGetNRMKEndtoolInputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::EndtoolTx>> PrepareAsyncGetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::EndtoolTx>>(PrepareAsyncGetNRMKEndtoolInputRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::EndtoolRevCDTTx* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::EndtoolRevCDTTx>> AsyncGetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::EndtoolRevCDTTx>>(AsyncGetNRMKEndtoolRevCDTInputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::EndtoolRevCDTTx>> PrepareAsyncGetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::EndtoolRevCDTTx>>(PrepareAsyncGetNRMKEndtoolRevCDTInputRaw(context, request, cq));
    }
    // Read and Write PDOs (Beckhoff)
    virtual ::grpc::Status SetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::GRPCECat::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> AsyncSetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(AsyncSetDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> PrepareAsyncSetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(PrepareAsyncSetDORaw(context, request, cq));
    }
    virtual ::grpc::Status GetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::DIList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::DIList>> AsyncGetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::DIList>>(AsyncGetDIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::DIList>> PrepareAsyncGetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::DIList>>(PrepareAsyncGetDIRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::DOList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::DOList>> AsyncGetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::DOList>>(AsyncGetDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::DOList>> PrepareAsyncGetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::DOList>>(PrepareAsyncGetDORaw(context, request, cq));
    }
    // Read and Write PDOs (Robotus FT sensor)
    virtual ::grpc::Status GetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::RobotusFTTx* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::RobotusFTTx>> AsyncGetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::RobotusFTTx>>(AsyncGetRobotusFTSensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::RobotusFTTx>> PrepareAsyncGetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::RobotusFTTx>>(PrepareAsyncGetRobotusFTSensorRaw(context, request, cq));
    }
    // Motor drive control
    virtual ::grpc::Status ResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> AsyncResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(AsyncResetWelconDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> PrepareAsyncResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(PrepareAsyncResetWelconDriverRaw(context, request, cq));
    }
    // Read and Write SDOs
    virtual ::grpc::Status GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> AsyncGetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(AsyncGetCOREErrorCodeSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> PrepareAsyncGetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(PrepareAsyncGetCOREErrorCodeSDORaw(context, request, cq));
    }
    virtual ::grpc::Status GetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::FloatVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>> AsyncGetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>>(AsyncGetCORETemperature1SDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>> PrepareAsyncGetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>>(PrepareAsyncGetCORETemperature1SDORaw(context, request, cq));
    }
    virtual ::grpc::Status GetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::FloatVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>> AsyncGetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>>(AsyncGetCORETemperature2SDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>> PrepareAsyncGetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>>(PrepareAsyncGetCORETemperature2SDORaw(context, request, cq));
    }
    virtual ::grpc::Status GetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::FloatVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>> AsyncGetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>>(AsyncGetCORETemperature3SDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>> PrepareAsyncGetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>>(PrepareAsyncGetCORETemperature3SDORaw(context, request, cq));
    }
    virtual ::grpc::Status GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::StringVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::StringVal>> AsyncGetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::StringVal>>(AsyncGetNRMKFWVersionSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::StringVal>> PrepareAsyncGetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::StringVal>>(PrepareAsyncGetNRMKFWVersionSDORaw(context, request, cq));
    }
    virtual ::grpc::Status GetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> AsyncGetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(AsyncGetMaxTorqueSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> PrepareAsyncGetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(PrepareAsyncGetMaxTorqueSDORaw(context, request, cq));
    }
    virtual ::grpc::Status GetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> AsyncGetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(AsyncGetProfileVelocitySDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> PrepareAsyncGetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(PrepareAsyncGetProfileVelocitySDORaw(context, request, cq));
    }
    virtual ::grpc::Status GetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> AsyncGetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(AsyncGetProfileAccSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> PrepareAsyncGetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(PrepareAsyncGetProfileAccSDORaw(context, request, cq));
    }
    virtual ::grpc::Status GetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> AsyncGetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(AsyncGetProfileDecSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>> PrepareAsyncGetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>>(PrepareAsyncGetProfileDecSDORaw(context, request, cq));
    }
    virtual ::grpc::Status SetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> AsyncSetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(AsyncSetMaxTorqueSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> PrepareAsyncSetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(PrepareAsyncSetMaxTorqueSDORaw(context, request, cq));
    }
    virtual ::grpc::Status SetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> AsyncSetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(AsyncSetProfileVelocitySDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> PrepareAsyncSetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(PrepareAsyncSetProfileVelocitySDORaw(context, request, cq));
    }
    virtual ::grpc::Status SetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> AsyncSetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(AsyncSetProfileAccSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> PrepareAsyncSetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(PrepareAsyncSetProfileAccSDORaw(context, request, cq));
    }
    virtual ::grpc::Status SetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> AsyncSetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(AsyncSetProfileDecSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>> PrepareAsyncSetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>>(PrepareAsyncSetProfileDecSDORaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Master and slave status
      virtual void GetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMasterStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMasterStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSlaveStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVals* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetSlaveStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRxDomainStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRxDomainStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTxDomainStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetTxDomainStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void IsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsSystemReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVals* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void IsSystemReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetServoOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetServoOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Read and Write PDOs (Motor Driver)
      virtual void SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverRx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::MotorDriverRx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::MotorDriverRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverTx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::MotorDriverTx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::MotorDriverTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMotorDriverDIs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMotorDriverDIs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetErrorCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetErrorCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMaxTorque(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMaxTorque(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMaxTorque(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetMaxTorque(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMaxMotorSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMaxMotorSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMaxMotorSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetMaxMotorSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Read and Write PDOs (Neuromeka IO board)
      virtual void SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardTx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IOBoardTx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IOBoardTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardRx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IOBoardRx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IOBoardRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Read and Write PDOs (Neuromeka Endtool)
      virtual void SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolTx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::EndtoolTx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::EndtoolTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolRevCDTTx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::EndtoolRevCDTTx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolRevCDTTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::EndtoolRevCDTTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Read and Write PDOs (Beckhoff)
      virtual void SetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DIList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::DIList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DIList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::DIList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DOList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::DOList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DOList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::DOList* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Read and Write PDOs (Robotus FT sensor)
      virtual void GetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::RobotusFTTx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRobotusFTSensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::RobotusFTTx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::RobotusFTTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetRobotusFTSensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::RobotusFTTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Motor drive control
      virtual void ResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetWelconDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ResetWelconDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Read and Write SDOs
      virtual void GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCORETemperature1SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetCORETemperature1SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCORETemperature2SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetCORETemperature2SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCORETemperature3SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetCORETemperature3SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::StringVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::StringVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::StringVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::StringVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMaxTorqueSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetMaxTorqueSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProfileVelocitySDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetProfileVelocitySDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProfileAccSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetProfileAccSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProfileDecSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetProfileDecSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMaxTorqueSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetMaxTorqueSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetProfileVelocitySDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetProfileVelocitySDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetProfileAccSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetProfileAccSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetProfileDecSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SetProfileDecSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* AsyncGetMasterStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* PrepareAsyncGetMasterStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVals>* AsyncGetSlaveStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVals>* PrepareAsyncGetSlaveStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* AsyncGetRxDomainStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* PrepareAsyncGetRxDomainStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* AsyncGetTxDomainStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* PrepareAsyncGetTxDomainStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVals>* AsyncIsSystemReadyRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVals>* PrepareAsyncIsSystemReadyRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* AsyncSetServoOnOffRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* PrepareAsyncSetServoOnOffRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* AsyncSetRxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* PrepareAsyncSetRxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::MotorDriverRx>* AsyncGetRxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::MotorDriverRx>* PrepareAsyncGetRxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::MotorDriverTx>* AsyncGetTxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::MotorDriverTx>* PrepareAsyncGetTxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* AsyncGetMotorDriverDIsRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* PrepareAsyncGetMotorDriverDIsRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* AsyncGetErrorCodeRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* PrepareAsyncGetErrorCodeRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* AsyncGetMaxTorqueRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* PrepareAsyncGetMaxTorqueRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* AsyncSetMaxTorqueRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* PrepareAsyncSetMaxTorqueRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* AsyncGetMaxMotorSpeedRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* PrepareAsyncGetMaxMotorSpeedRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* AsyncSetMaxMotorSpeedRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* PrepareAsyncSetMaxMotorSpeedRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* AsyncSetNRMKIOBoardOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* PrepareAsyncSetNRMKIOBoardOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IOBoardTx>* AsyncGetNRMKIOBoardInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IOBoardTx>* PrepareAsyncGetNRMKIOBoardInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IOBoardRx>* AsyncGetNRMKIOBoardOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IOBoardRx>* PrepareAsyncGetNRMKIOBoardOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* AsyncSetNRMKEndtoolOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* PrepareAsyncSetNRMKEndtoolOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::EndtoolTx>* AsyncGetNRMKEndtoolInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::EndtoolTx>* PrepareAsyncGetNRMKEndtoolInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::EndtoolRevCDTTx>* AsyncGetNRMKEndtoolRevCDTInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::EndtoolRevCDTTx>* PrepareAsyncGetNRMKEndtoolRevCDTInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* AsyncSetDORaw(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* PrepareAsyncSetDORaw(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::DIList>* AsyncGetDIRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::DIList>* PrepareAsyncGetDIRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::DOList>* AsyncGetDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::DOList>* PrepareAsyncGetDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::RobotusFTTx>* AsyncGetRobotusFTSensorRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::RobotusFTTx>* PrepareAsyncGetRobotusFTSensorRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* AsyncResetWelconDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* PrepareAsyncResetWelconDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* AsyncGetCOREErrorCodeSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* PrepareAsyncGetCOREErrorCodeSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>* AsyncGetCORETemperature1SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>* PrepareAsyncGetCORETemperature1SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>* AsyncGetCORETemperature2SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>* PrepareAsyncGetCORETemperature2SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>* AsyncGetCORETemperature3SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::FloatVal>* PrepareAsyncGetCORETemperature3SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::StringVal>* AsyncGetNRMKFWVersionSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::StringVal>* PrepareAsyncGetNRMKFWVersionSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* AsyncGetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* PrepareAsyncGetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* AsyncGetProfileVelocitySDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* PrepareAsyncGetProfileVelocitySDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* AsyncGetProfileAccSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* PrepareAsyncGetProfileAccSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* AsyncGetProfileDecSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::IntVal>* PrepareAsyncGetProfileDecSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* AsyncSetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* PrepareAsyncSetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* AsyncSetProfileVelocitySDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* PrepareAsyncSetProfileVelocitySDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* AsyncSetProfileAccSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* PrepareAsyncSetProfileAccSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* AsyncSetProfileDecSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GRPCECat::Empty>* PrepareAsyncSetProfileDecSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> AsyncGetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(AsyncGetMasterStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> PrepareAsyncGetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(PrepareAsyncGetMasterStatusRaw(context, request, cq));
    }
    ::grpc::Status GetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVals* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>> AsyncGetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>>(AsyncGetSlaveStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>> PrepareAsyncGetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>>(PrepareAsyncGetSlaveStatusRaw(context, request, cq));
    }
    ::grpc::Status GetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> AsyncGetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(AsyncGetRxDomainStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> PrepareAsyncGetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(PrepareAsyncGetRxDomainStatusRaw(context, request, cq));
    }
    ::grpc::Status GetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> AsyncGetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(AsyncGetTxDomainStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> PrepareAsyncGetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(PrepareAsyncGetTxDomainStatusRaw(context, request, cq));
    }
    ::grpc::Status IsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IntVals* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>> AsyncIsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>>(AsyncIsSystemReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>> PrepareAsyncIsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>>(PrepareAsyncIsSystemReadyRaw(context, request, cq));
    }
    ::grpc::Status SetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::GRPCECat::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> AsyncSetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(AsyncSetServoOnOffRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> PrepareAsyncSetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(PrepareAsyncSetServoOnOffRaw(context, request, cq));
    }
    ::grpc::Status SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::GRPCECat::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> AsyncSetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(AsyncSetRxPDOMotorDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> PrepareAsyncSetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(PrepareAsyncSetRxPDOMotorDriverRaw(context, request, cq));
    }
    ::grpc::Status GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::MotorDriverRx* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverRx>> AsyncGetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverRx>>(AsyncGetRxPDOMotorDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverRx>> PrepareAsyncGetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverRx>>(PrepareAsyncGetRxPDOMotorDriverRaw(context, request, cq));
    }
    ::grpc::Status GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::MotorDriverTx* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverTx>> AsyncGetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverTx>>(AsyncGetTxPDOMotorDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverTx>> PrepareAsyncGetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverTx>>(PrepareAsyncGetTxPDOMotorDriverRaw(context, request, cq));
    }
    ::grpc::Status GetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> AsyncGetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(AsyncGetMotorDriverDIsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> PrepareAsyncGetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(PrepareAsyncGetMotorDriverDIsRaw(context, request, cq));
    }
    ::grpc::Status GetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> AsyncGetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(AsyncGetErrorCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> PrepareAsyncGetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(PrepareAsyncGetErrorCodeRaw(context, request, cq));
    }
    ::grpc::Status GetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> AsyncGetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(AsyncGetMaxTorqueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> PrepareAsyncGetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(PrepareAsyncGetMaxTorqueRaw(context, request, cq));
    }
    ::grpc::Status SetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> AsyncSetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(AsyncSetMaxTorqueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> PrepareAsyncSetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(PrepareAsyncSetMaxTorqueRaw(context, request, cq));
    }
    ::grpc::Status GetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> AsyncGetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(AsyncGetMaxMotorSpeedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> PrepareAsyncGetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(PrepareAsyncGetMaxMotorSpeedRaw(context, request, cq));
    }
    ::grpc::Status SetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> AsyncSetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(AsyncSetMaxMotorSpeedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> PrepareAsyncSetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(PrepareAsyncSetMaxMotorSpeedRaw(context, request, cq));
    }
    ::grpc::Status SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::GRPCECat::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> AsyncSetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(AsyncSetNRMKIOBoardOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> PrepareAsyncSetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(PrepareAsyncSetNRMKIOBoardOutputRaw(context, request, cq));
    }
    ::grpc::Status GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IOBoardTx* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardTx>> AsyncGetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardTx>>(AsyncGetNRMKIOBoardInputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardTx>> PrepareAsyncGetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardTx>>(PrepareAsyncGetNRMKIOBoardInputRaw(context, request, cq));
    }
    ::grpc::Status GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::IOBoardRx* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardRx>> AsyncGetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardRx>>(AsyncGetNRMKIOBoardOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardRx>> PrepareAsyncGetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardRx>>(PrepareAsyncGetNRMKIOBoardOutputRaw(context, request, cq));
    }
    ::grpc::Status SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::GRPCECat::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> AsyncSetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(AsyncSetNRMKEndtoolOutputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> PrepareAsyncSetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(PrepareAsyncSetNRMKEndtoolOutputRaw(context, request, cq));
    }
    ::grpc::Status GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::EndtoolTx* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolTx>> AsyncGetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolTx>>(AsyncGetNRMKEndtoolInputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolTx>> PrepareAsyncGetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolTx>>(PrepareAsyncGetNRMKEndtoolInputRaw(context, request, cq));
    }
    ::grpc::Status GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::GRPCECat::EndtoolRevCDTTx* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolRevCDTTx>> AsyncGetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolRevCDTTx>>(AsyncGetNRMKEndtoolRevCDTInputRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolRevCDTTx>> PrepareAsyncGetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolRevCDTTx>>(PrepareAsyncGetNRMKEndtoolRevCDTInputRaw(context, request, cq));
    }
    ::grpc::Status SetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::GRPCECat::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> AsyncSetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(AsyncSetDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> PrepareAsyncSetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(PrepareAsyncSetDORaw(context, request, cq));
    }
    ::grpc::Status GetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::DIList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::DIList>> AsyncGetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::DIList>>(AsyncGetDIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::DIList>> PrepareAsyncGetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::DIList>>(PrepareAsyncGetDIRaw(context, request, cq));
    }
    ::grpc::Status GetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::DOList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::DOList>> AsyncGetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::DOList>>(AsyncGetDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::DOList>> PrepareAsyncGetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::DOList>>(PrepareAsyncGetDORaw(context, request, cq));
    }
    ::grpc::Status GetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::RobotusFTTx* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::RobotusFTTx>> AsyncGetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::RobotusFTTx>>(AsyncGetRobotusFTSensorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::RobotusFTTx>> PrepareAsyncGetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::RobotusFTTx>>(PrepareAsyncGetRobotusFTSensorRaw(context, request, cq));
    }
    ::grpc::Status ResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> AsyncResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(AsyncResetWelconDriverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> PrepareAsyncResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(PrepareAsyncResetWelconDriverRaw(context, request, cq));
    }
    ::grpc::Status GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> AsyncGetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(AsyncGetCOREErrorCodeSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> PrepareAsyncGetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(PrepareAsyncGetCOREErrorCodeSDORaw(context, request, cq));
    }
    ::grpc::Status GetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::FloatVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>> AsyncGetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>>(AsyncGetCORETemperature1SDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>> PrepareAsyncGetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>>(PrepareAsyncGetCORETemperature1SDORaw(context, request, cq));
    }
    ::grpc::Status GetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::FloatVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>> AsyncGetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>>(AsyncGetCORETemperature2SDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>> PrepareAsyncGetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>>(PrepareAsyncGetCORETemperature2SDORaw(context, request, cq));
    }
    ::grpc::Status GetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::FloatVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>> AsyncGetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>>(AsyncGetCORETemperature3SDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>> PrepareAsyncGetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>>(PrepareAsyncGetCORETemperature3SDORaw(context, request, cq));
    }
    ::grpc::Status GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::StringVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::StringVal>> AsyncGetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::StringVal>>(AsyncGetNRMKFWVersionSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::StringVal>> PrepareAsyncGetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::StringVal>>(PrepareAsyncGetNRMKFWVersionSDORaw(context, request, cq));
    }
    ::grpc::Status GetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> AsyncGetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(AsyncGetMaxTorqueSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> PrepareAsyncGetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(PrepareAsyncGetMaxTorqueSDORaw(context, request, cq));
    }
    ::grpc::Status GetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> AsyncGetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(AsyncGetProfileVelocitySDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> PrepareAsyncGetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(PrepareAsyncGetProfileVelocitySDORaw(context, request, cq));
    }
    ::grpc::Status GetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> AsyncGetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(AsyncGetProfileAccSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> PrepareAsyncGetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(PrepareAsyncGetProfileAccSDORaw(context, request, cq));
    }
    ::grpc::Status GetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::GRPCECat::IntVal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> AsyncGetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(AsyncGetProfileDecSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>> PrepareAsyncGetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>>(PrepareAsyncGetProfileDecSDORaw(context, request, cq));
    }
    ::grpc::Status SetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> AsyncSetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(AsyncSetMaxTorqueSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> PrepareAsyncSetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(PrepareAsyncSetMaxTorqueSDORaw(context, request, cq));
    }
    ::grpc::Status SetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> AsyncSetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(AsyncSetProfileVelocitySDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> PrepareAsyncSetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(PrepareAsyncSetProfileVelocitySDORaw(context, request, cq));
    }
    ::grpc::Status SetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> AsyncSetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(AsyncSetProfileAccSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> PrepareAsyncSetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(PrepareAsyncSetProfileAccSDORaw(context, request, cq));
    }
    ::grpc::Status SetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::GRPCECat::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> AsyncSetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(AsyncSetProfileDecSDORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>> PrepareAsyncSetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>>(PrepareAsyncSetProfileDecSDORaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetMasterStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetMasterStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMasterStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response, std::function<void(::grpc::Status)>) override;
      void GetSlaveStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVals* response, std::function<void(::grpc::Status)>) override;
      void GetSlaveStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetSlaveStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetRxDomainStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetRxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRxDomainStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetTxDomainStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetTxDomainStatus(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTxDomainStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void IsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response, std::function<void(::grpc::Status)>) override;
      void IsSystemReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVals* response, std::function<void(::grpc::Status)>) override;
      void IsSystemReady(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void IsSystemReady(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVals* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetServoOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetServoOnOff(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetServoOnOff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetRxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverRx* response, std::function<void(::grpc::Status)>) override;
      void GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::MotorDriverRx* response, std::function<void(::grpc::Status)>) override;
      void GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::MotorDriverRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverTx* response, std::function<void(::grpc::Status)>) override;
      void GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::MotorDriverTx* response, std::function<void(::grpc::Status)>) override;
      void GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetTxPDOMotorDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::MotorDriverTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetMotorDriverDIs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetMotorDriverDIs(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMotorDriverDIs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetErrorCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetErrorCode(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetErrorCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetMaxTorque(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMaxTorque(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetMaxTorque(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetMaxTorque(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetMaxTorque(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetMaxMotorSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMaxMotorSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetMaxMotorSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetMaxMotorSpeed(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetMaxMotorSpeed(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardTx* response, std::function<void(::grpc::Status)>) override;
      void GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IOBoardTx* response, std::function<void(::grpc::Status)>) override;
      void GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNRMKIOBoardInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IOBoardTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardRx* response, std::function<void(::grpc::Status)>) override;
      void GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IOBoardRx* response, std::function<void(::grpc::Status)>) override;
      void GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNRMKIOBoardOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IOBoardRx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetNRMKEndtoolOutput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolTx* response, std::function<void(::grpc::Status)>) override;
      void GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::EndtoolTx* response, std::function<void(::grpc::Status)>) override;
      void GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNRMKEndtoolInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::EndtoolTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolRevCDTTx* response, std::function<void(::grpc::Status)>) override;
      void GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::EndtoolRevCDTTx* response, std::function<void(::grpc::Status)>) override;
      void GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolRevCDTTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNRMKEndtoolRevCDTInput(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::EndtoolRevCDTTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetDO(::grpc::ClientContext* context, const ::GRPCECat::DOList* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DIList* response, std::function<void(::grpc::Status)>) override;
      void GetDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::DIList* response, std::function<void(::grpc::Status)>) override;
      void GetDI(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DIList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetDI(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::DIList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DOList* response, std::function<void(::grpc::Status)>) override;
      void GetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::DOList* response, std::function<void(::grpc::Status)>) override;
      void GetDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DOList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::DOList* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::RobotusFTTx* response, std::function<void(::grpc::Status)>) override;
      void GetRobotusFTSensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::RobotusFTTx* response, std::function<void(::grpc::Status)>) override;
      void GetRobotusFTSensor(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::RobotusFTTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetRobotusFTSensor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::RobotusFTTx* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void ResetWelconDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void ResetWelconDriver(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ResetWelconDriver(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetCOREErrorCodeSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)>) override;
      void GetCORETemperature1SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)>) override;
      void GetCORETemperature1SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetCORETemperature1SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)>) override;
      void GetCORETemperature2SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)>) override;
      void GetCORETemperature2SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetCORETemperature2SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)>) override;
      void GetCORETemperature3SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, std::function<void(::grpc::Status)>) override;
      void GetCORETemperature3SDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetCORETemperature3SDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::FloatVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::StringVal* response, std::function<void(::grpc::Status)>) override;
      void GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::StringVal* response, std::function<void(::grpc::Status)>) override;
      void GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::StringVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetNRMKFWVersionSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::StringVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetMaxTorqueSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetMaxTorqueSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetProfileVelocitySDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetProfileVelocitySDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetProfileAccSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetProfileAccSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetProfileDecSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, std::function<void(::grpc::Status)>) override;
      void GetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetProfileDecSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::IntVal* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetMaxTorqueSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetMaxTorqueSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetMaxTorqueSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetProfileVelocitySDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetProfileVelocitySDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetProfileVelocitySDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetProfileAccSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetProfileAccSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetProfileAccSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetProfileDecSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetProfileDecSDO(::grpc::ClientContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SetProfileDecSDO(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GRPCECat::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* AsyncGetMasterStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* PrepareAsyncGetMasterStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>* AsyncGetSlaveStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>* PrepareAsyncGetSlaveStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* AsyncGetRxDomainStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* PrepareAsyncGetRxDomainStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* AsyncGetTxDomainStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* PrepareAsyncGetTxDomainStatusRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>* AsyncIsSystemReadyRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVals>* PrepareAsyncIsSystemReadyRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* AsyncSetServoOnOffRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* PrepareAsyncSetServoOnOffRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoIndex& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* AsyncSetRxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* PrepareAsyncSetRxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::MotorDriverRxIndex& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverRx>* AsyncGetRxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverRx>* PrepareAsyncGetRxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverTx>* AsyncGetTxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::MotorDriverTx>* PrepareAsyncGetTxPDOMotorDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* AsyncGetMotorDriverDIsRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* PrepareAsyncGetMotorDriverDIsRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* AsyncGetErrorCodeRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* PrepareAsyncGetErrorCodeRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* AsyncGetMaxTorqueRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* PrepareAsyncGetMaxTorqueRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* AsyncSetMaxTorqueRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* PrepareAsyncSetMaxTorqueRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* AsyncGetMaxMotorSpeedRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* PrepareAsyncGetMaxMotorSpeedRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* AsyncSetMaxMotorSpeedRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* PrepareAsyncSetMaxMotorSpeedRaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* AsyncSetNRMKIOBoardOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* PrepareAsyncSetNRMKIOBoardOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::IOBoardRx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardTx>* AsyncGetNRMKIOBoardInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardTx>* PrepareAsyncGetNRMKIOBoardInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardRx>* AsyncGetNRMKIOBoardOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IOBoardRx>* PrepareAsyncGetNRMKIOBoardOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* AsyncSetNRMKEndtoolOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* PrepareAsyncSetNRMKEndtoolOutputRaw(::grpc::ClientContext* context, const ::GRPCECat::EndtoolRx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolTx>* AsyncGetNRMKEndtoolInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolTx>* PrepareAsyncGetNRMKEndtoolInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolRevCDTTx>* AsyncGetNRMKEndtoolRevCDTInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::EndtoolRevCDTTx>* PrepareAsyncGetNRMKEndtoolRevCDTInputRaw(::grpc::ClientContext* context, const ::GRPCECat::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* AsyncSetDORaw(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* PrepareAsyncSetDORaw(::grpc::ClientContext* context, const ::GRPCECat::DOList& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::DIList>* AsyncGetDIRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::DIList>* PrepareAsyncGetDIRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::DOList>* AsyncGetDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::DOList>* PrepareAsyncGetDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::RobotusFTTx>* AsyncGetRobotusFTSensorRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::RobotusFTTx>* PrepareAsyncGetRobotusFTSensorRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* AsyncResetWelconDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* PrepareAsyncResetWelconDriverRaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* AsyncGetCOREErrorCodeSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* PrepareAsyncGetCOREErrorCodeSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>* AsyncGetCORETemperature1SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>* PrepareAsyncGetCORETemperature1SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>* AsyncGetCORETemperature2SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>* PrepareAsyncGetCORETemperature2SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>* AsyncGetCORETemperature3SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::FloatVal>* PrepareAsyncGetCORETemperature3SDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::StringVal>* AsyncGetNRMKFWVersionSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::StringVal>* PrepareAsyncGetNRMKFWVersionSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* AsyncGetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* PrepareAsyncGetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* AsyncGetProfileVelocitySDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* PrepareAsyncGetProfileVelocitySDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* AsyncGetProfileAccSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* PrepareAsyncGetProfileAccSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* AsyncGetProfileDecSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::IntVal>* PrepareAsyncGetProfileDecSDORaw(::grpc::ClientContext* context, const ::GRPCECat::IntVal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* AsyncSetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* PrepareAsyncSetMaxTorqueSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* AsyncSetProfileVelocitySDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* PrepareAsyncSetProfileVelocitySDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* AsyncSetProfileAccSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* PrepareAsyncSetProfileAccSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* AsyncSetProfileDecSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GRPCECat::Empty>* PrepareAsyncSetProfileDecSDORaw(::grpc::ClientContext* context, const ::GRPCECat::ServoParam& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMasterStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSlaveStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRxDomainStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTxDomainStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_IsSystemReady_;
    const ::grpc::internal::RpcMethod rpcmethod_SetServoOnOff_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRxPDOMotorDriver_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRxPDOMotorDriver_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTxPDOMotorDriver_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMotorDriverDIs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetErrorCode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMaxTorque_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMaxTorque_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMaxMotorSpeed_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMaxMotorSpeed_;
    const ::grpc::internal::RpcMethod rpcmethod_SetNRMKIOBoardOutput_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNRMKIOBoardInput_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNRMKIOBoardOutput_;
    const ::grpc::internal::RpcMethod rpcmethod_SetNRMKEndtoolOutput_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNRMKEndtoolInput_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNRMKEndtoolRevCDTInput_;
    const ::grpc::internal::RpcMethod rpcmethod_SetDO_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDI_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDO_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRobotusFTSensor_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetWelconDriver_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCOREErrorCodeSDO_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCORETemperature1SDO_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCORETemperature2SDO_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCORETemperature3SDO_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNRMKFWVersionSDO_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMaxTorqueSDO_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProfileVelocitySDO_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProfileAccSDO_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProfileDecSDO_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMaxTorqueSDO_;
    const ::grpc::internal::RpcMethod rpcmethod_SetProfileVelocitySDO_;
    const ::grpc::internal::RpcMethod rpcmethod_SetProfileAccSDO_;
    const ::grpc::internal::RpcMethod rpcmethod_SetProfileDecSDO_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Master and slave status
    virtual ::grpc::Status GetMasterStatus(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response);
    virtual ::grpc::Status GetSlaveStatus(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response);
    virtual ::grpc::Status GetRxDomainStatus(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response);
    virtual ::grpc::Status GetTxDomainStatus(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVal* response);
    virtual ::grpc::Status IsSystemReady(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IntVals* response);
    virtual ::grpc::Status SetServoOnOff(::grpc::ServerContext* context, const ::GRPCECat::ServoIndex* request, ::GRPCECat::Empty* response);
    // Read and Write PDOs (Motor Driver)
    virtual ::grpc::Status SetRxPDOMotorDriver(::grpc::ServerContext* context, const ::GRPCECat::MotorDriverRxIndex* request, ::GRPCECat::Empty* response);
    virtual ::grpc::Status GetRxPDOMotorDriver(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverRx* response);
    virtual ::grpc::Status GetTxPDOMotorDriver(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::MotorDriverTx* response);
    virtual ::grpc::Status GetMotorDriverDIs(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response);
    virtual ::grpc::Status GetErrorCode(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response);
    virtual ::grpc::Status GetMaxTorque(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response);
    virtual ::grpc::Status SetMaxTorque(::grpc::ServerContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response);
    virtual ::grpc::Status GetMaxMotorSpeed(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response);
    virtual ::grpc::Status SetMaxMotorSpeed(::grpc::ServerContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response);
    // Read and Write PDOs (Neuromeka IO board)
    virtual ::grpc::Status SetNRMKIOBoardOutput(::grpc::ServerContext* context, const ::GRPCECat::IOBoardRx* request, ::GRPCECat::Empty* response);
    virtual ::grpc::Status GetNRMKIOBoardInput(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardTx* response);
    virtual ::grpc::Status GetNRMKIOBoardOutput(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::IOBoardRx* response);
    // Read and Write PDOs (Neuromeka Endtool)
    virtual ::grpc::Status SetNRMKEndtoolOutput(::grpc::ServerContext* context, const ::GRPCECat::EndtoolRx* request, ::GRPCECat::Empty* response);
    virtual ::grpc::Status GetNRMKEndtoolInput(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolTx* response);
    virtual ::grpc::Status GetNRMKEndtoolRevCDTInput(::grpc::ServerContext* context, const ::GRPCECat::Empty* request, ::GRPCECat::EndtoolRevCDTTx* response);
    // Read and Write PDOs (Beckhoff)
    virtual ::grpc::Status SetDO(::grpc::ServerContext* context, const ::GRPCECat::DOList* request, ::GRPCECat::Empty* response);
    virtual ::grpc::Status GetDI(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DIList* response);
    virtual ::grpc::Status GetDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::DOList* response);
    // Read and Write PDOs (Robotus FT sensor)
    virtual ::grpc::Status GetRobotusFTSensor(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::RobotusFTTx* response);
    // Motor drive control
    virtual ::grpc::Status ResetWelconDriver(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::Empty* response);
    // Read and Write SDOs
    virtual ::grpc::Status GetCOREErrorCodeSDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response);
    virtual ::grpc::Status GetCORETemperature1SDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response);
    virtual ::grpc::Status GetCORETemperature2SDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response);
    virtual ::grpc::Status GetCORETemperature3SDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::FloatVal* response);
    virtual ::grpc::Status GetNRMKFWVersionSDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::StringVal* response);
    virtual ::grpc::Status GetMaxTorqueSDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response);
    virtual ::grpc::Status GetProfileVelocitySDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response);
    virtual ::grpc::Status GetProfileAccSDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response);
    virtual ::grpc::Status GetProfileDecSDO(::grpc::ServerContext* context, const ::GRPCECat::IntVal* request, ::GRPCECat::IntVal* response);
    virtual ::grpc::Status SetMaxTorqueSDO(::grpc::ServerContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response);
    virtual ::grpc::Status SetProfileVelocitySDO(::grpc::ServerContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response);
    virtual ::grpc::Status SetProfileAccSDO(::grpc::ServerContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response);
    virtual ::grpc::Status SetProfileDecSDO(::grpc::ServerContext* context, const ::GRPCECat::ServoParam* request, ::GRPCECat::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMasterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMasterStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetMasterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMasterStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMasterStatus(::grpc::ServerContext* context, ::GRPCECat::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSlaveStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSlaveStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSlaveStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlaveStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSlaveStatus(::grpc::ServerContext* context, ::GRPCECat::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVals>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRxDomainStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRxDomainStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetRxDomainStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRxDomainStatus(::grpc::ServerContext* context, ::GRPCECat::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTxDomainStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTxDomainStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTxDomainStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxDomainStatus(::grpc::ServerContext* context, ::GRPCECat::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsSystemReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsSystemReady() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_IsSystemReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSystemReady(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsSystemReady(::grpc::ServerContext* context, ::GRPCECat::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVals>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetServoOnOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetServoOnOff() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetServoOnOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServoOnOff(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoIndex* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetServoOnOff(::grpc::ServerContext* context, ::GRPCECat::ServoIndex* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetRxPDOMotorDriver() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetRxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::MotorDriverRxIndex* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRxPDOMotorDriver(::grpc::ServerContext* context, ::GRPCECat::MotorDriverRxIndex* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRxPDOMotorDriver() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetRxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverRx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRxPDOMotorDriver(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::MotorDriverRx>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTxPDOMotorDriver() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetTxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxPDOMotorDriver(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::MotorDriverTx>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMotorDriverDIs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMotorDriverDIs() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetMotorDriverDIs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorDriverDIs(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMotorDriverDIs(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetErrorCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetErrorCode() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetErrorCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetErrorCode(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetErrorCode(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMaxTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMaxTorque() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetMaxTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMaxTorque(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMaxTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMaxTorque() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SetMaxTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMaxTorque(::grpc::ServerContext* context, ::GRPCECat::ServoParam* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMaxMotorSpeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMaxMotorSpeed() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetMaxMotorSpeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMaxMotorSpeed(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMaxMotorSpeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMaxMotorSpeed() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_SetMaxMotorSpeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMaxMotorSpeed(::grpc::ServerContext* context, ::GRPCECat::ServoParam* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetNRMKIOBoardOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetNRMKIOBoardOutput() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_SetNRMKIOBoardOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::IOBoardRx* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNRMKIOBoardOutput(::grpc::ServerContext* context, ::GRPCECat::IOBoardRx* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNRMKIOBoardInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNRMKIOBoardInput() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetNRMKIOBoardInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKIOBoardInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNRMKIOBoardInput(::grpc::ServerContext* context, ::GRPCECat::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IOBoardTx>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNRMKIOBoardOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNRMKIOBoardOutput() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetNRMKIOBoardOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardRx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNRMKIOBoardOutput(::grpc::ServerContext* context, ::GRPCECat::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IOBoardRx>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetNRMKEndtoolOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetNRMKEndtoolOutput() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_SetNRMKEndtoolOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNRMKEndtoolOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::EndtoolRx* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNRMKEndtoolOutput(::grpc::ServerContext* context, ::GRPCECat::EndtoolRx* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNRMKEndtoolInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNRMKEndtoolInput() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_GetNRMKEndtoolInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKEndtoolInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNRMKEndtoolInput(::grpc::ServerContext* context, ::GRPCECat::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::EndtoolTx>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNRMKEndtoolRevCDTInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNRMKEndtoolRevCDTInput() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_GetNRMKEndtoolRevCDTInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKEndtoolRevCDTInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolRevCDTTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNRMKEndtoolRevCDTInput(::grpc::ServerContext* context, ::GRPCECat::Empty* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::EndtoolRevCDTTx>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetDO() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_SetDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::DOList* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDO(::grpc::ServerContext* context, ::GRPCECat::DOList* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDI() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_GetDI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDI(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DIList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDI(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::DIList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDO() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_GetDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DOList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDO(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::DOList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRobotusFTSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRobotusFTSensor() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_GetRobotusFTSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotusFTSensor(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::RobotusFTTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRobotusFTSensor(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::RobotusFTTx>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetWelconDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetWelconDriver() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_ResetWelconDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetWelconDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetWelconDriver(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCOREErrorCodeSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCOREErrorCodeSDO() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_GetCOREErrorCodeSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCOREErrorCodeSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCOREErrorCodeSDO(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCORETemperature1SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCORETemperature1SDO() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_GetCORETemperature1SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature1SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCORETemperature1SDO(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::FloatVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCORETemperature2SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCORETemperature2SDO() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_GetCORETemperature2SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature2SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCORETemperature2SDO(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::FloatVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCORETemperature3SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCORETemperature3SDO() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_GetCORETemperature3SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature3SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCORETemperature3SDO(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::FloatVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNRMKFWVersionSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNRMKFWVersionSDO() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_GetNRMKFWVersionSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKFWVersionSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::StringVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNRMKFWVersionSDO(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::StringVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMaxTorqueSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMaxTorqueSDO() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_GetMaxTorqueSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMaxTorqueSDO(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProfileVelocitySDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProfileVelocitySDO() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_GetProfileVelocitySDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProfileVelocitySDO(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProfileAccSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProfileAccSDO() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_GetProfileAccSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProfileAccSDO(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProfileDecSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProfileDecSDO() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_GetProfileDecSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProfileDecSDO(::grpc::ServerContext* context, ::GRPCECat::IntVal* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::IntVal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMaxTorqueSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMaxTorqueSDO() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_SetMaxTorqueSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMaxTorqueSDO(::grpc::ServerContext* context, ::GRPCECat::ServoParam* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetProfileVelocitySDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetProfileVelocitySDO() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_SetProfileVelocitySDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetProfileVelocitySDO(::grpc::ServerContext* context, ::GRPCECat::ServoParam* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetProfileAccSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetProfileAccSDO() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_SetProfileAccSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetProfileAccSDO(::grpc::ServerContext* context, ::GRPCECat::ServoParam* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetProfileDecSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetProfileDecSDO() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_SetProfileDecSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetProfileDecSDO(::grpc::ServerContext* context, ::GRPCECat::ServoParam* request, ::grpc::ServerAsyncResponseWriter< ::GRPCECat::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMasterStatus<WithAsyncMethod_GetSlaveStatus<WithAsyncMethod_GetRxDomainStatus<WithAsyncMethod_GetTxDomainStatus<WithAsyncMethod_IsSystemReady<WithAsyncMethod_SetServoOnOff<WithAsyncMethod_SetRxPDOMotorDriver<WithAsyncMethod_GetRxPDOMotorDriver<WithAsyncMethod_GetTxPDOMotorDriver<WithAsyncMethod_GetMotorDriverDIs<WithAsyncMethod_GetErrorCode<WithAsyncMethod_GetMaxTorque<WithAsyncMethod_SetMaxTorque<WithAsyncMethod_GetMaxMotorSpeed<WithAsyncMethod_SetMaxMotorSpeed<WithAsyncMethod_SetNRMKIOBoardOutput<WithAsyncMethod_GetNRMKIOBoardInput<WithAsyncMethod_GetNRMKIOBoardOutput<WithAsyncMethod_SetNRMKEndtoolOutput<WithAsyncMethod_GetNRMKEndtoolInput<WithAsyncMethod_GetNRMKEndtoolRevCDTInput<WithAsyncMethod_SetDO<WithAsyncMethod_GetDI<WithAsyncMethod_GetDO<WithAsyncMethod_GetRobotusFTSensor<WithAsyncMethod_ResetWelconDriver<WithAsyncMethod_GetCOREErrorCodeSDO<WithAsyncMethod_GetCORETemperature1SDO<WithAsyncMethod_GetCORETemperature2SDO<WithAsyncMethod_GetCORETemperature3SDO<WithAsyncMethod_GetNRMKFWVersionSDO<WithAsyncMethod_GetMaxTorqueSDO<WithAsyncMethod_GetProfileVelocitySDO<WithAsyncMethod_GetProfileAccSDO<WithAsyncMethod_GetProfileDecSDO<WithAsyncMethod_SetMaxTorqueSDO<WithAsyncMethod_SetProfileVelocitySDO<WithAsyncMethod_SetProfileAccSDO<WithAsyncMethod_SetProfileDecSDO<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMasterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMasterStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::Empty* request,
                 ::GRPCECat::IntVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetMasterStatus(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetMasterStatus(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::Empty, ::GRPCECat::IntVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVal>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMasterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMasterStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMasterStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSlaveStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSlaveStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVals>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::Empty* request,
                 ::GRPCECat::IntVals* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetSlaveStatus(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetSlaveStatus(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::Empty, ::GRPCECat::IntVals>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVals>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSlaveStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlaveStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSlaveStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRxDomainStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRxDomainStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::Empty* request,
                 ::GRPCECat::IntVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetRxDomainStatus(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetRxDomainStatus(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::Empty, ::GRPCECat::IntVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVal>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRxDomainStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTxDomainStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTxDomainStatus() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::Empty* request,
                 ::GRPCECat::IntVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetTxDomainStatus(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetTxDomainStatus(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::Empty, ::GRPCECat::IntVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVal>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTxDomainStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IsSystemReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IsSystemReady() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVals>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::Empty* request,
                 ::GRPCECat::IntVals* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->IsSystemReady(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_IsSystemReady(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::Empty, ::GRPCECat::IntVals>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVals>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IsSystemReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSystemReady(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IsSystemReady(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetServoOnOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetServoOnOff() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoIndex, ::GRPCECat::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::ServoIndex* request,
                 ::GRPCECat::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetServoOnOff(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetServoOnOff(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::ServoIndex, ::GRPCECat::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoIndex, ::GRPCECat::Empty>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetServoOnOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServoOnOff(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoIndex* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetServoOnOff(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoIndex* /*request*/, ::GRPCECat::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetRxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetRxPDOMotorDriver() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::MotorDriverRxIndex, ::GRPCECat::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::MotorDriverRxIndex* request,
                 ::GRPCECat::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetRxPDOMotorDriver(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetRxPDOMotorDriver(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::MotorDriverRxIndex, ::GRPCECat::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::MotorDriverRxIndex, ::GRPCECat::Empty>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetRxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::MotorDriverRxIndex* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::MotorDriverRxIndex* /*request*/, ::GRPCECat::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRxPDOMotorDriver() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::MotorDriverRx>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::MotorDriverRx* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetRxPDOMotorDriver(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetRxPDOMotorDriver(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::MotorDriverRx>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::MotorDriverRx>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverRx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverRx* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTxPDOMotorDriver() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::MotorDriverTx>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::MotorDriverTx* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetTxPDOMotorDriver(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetTxPDOMotorDriver(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::MotorDriverTx>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::MotorDriverTx>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverTx* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMotorDriverDIs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMotorDriverDIs() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::IntVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetMotorDriverDIs(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetMotorDriverDIs(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::IntVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>*>(
          ::grpc::Service::experimental().GetHandler(9))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMotorDriverDIs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorDriverDIs(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMotorDriverDIs(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetErrorCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetErrorCode() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::IntVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetErrorCode(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetErrorCode(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::IntVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>*>(
          ::grpc::Service::experimental().GetHandler(10))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetErrorCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetErrorCode(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetErrorCode(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMaxTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMaxTorque() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::IntVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetMaxTorque(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetMaxTorque(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::IntVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>*>(
          ::grpc::Service::experimental().GetHandler(11))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMaxTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetMaxTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetMaxTorque() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::ServoParam* request,
                 ::GRPCECat::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetMaxTorque(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetMaxTorque(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::ServoParam, ::GRPCECat::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>*>(
          ::grpc::Service::experimental().GetHandler(12))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetMaxTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMaxMotorSpeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMaxMotorSpeed() {
      ::grpc::Service::experimental().MarkMethodCallback(13,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::IntVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetMaxMotorSpeed(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetMaxMotorSpeed(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::IntVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>*>(
          ::grpc::Service::experimental().GetHandler(13))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMaxMotorSpeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetMaxMotorSpeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetMaxMotorSpeed() {
      ::grpc::Service::experimental().MarkMethodCallback(14,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::ServoParam* request,
                 ::GRPCECat::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetMaxMotorSpeed(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetMaxMotorSpeed(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::ServoParam, ::GRPCECat::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>*>(
          ::grpc::Service::experimental().GetHandler(14))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetMaxMotorSpeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetNRMKIOBoardOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetNRMKIOBoardOutput() {
      ::grpc::Service::experimental().MarkMethodCallback(15,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IOBoardRx, ::GRPCECat::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IOBoardRx* request,
                 ::GRPCECat::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetNRMKIOBoardOutput(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetNRMKIOBoardOutput(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IOBoardRx, ::GRPCECat::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IOBoardRx, ::GRPCECat::Empty>*>(
          ::grpc::Service::experimental().GetHandler(15))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetNRMKIOBoardOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::IOBoardRx* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::IOBoardRx* /*request*/, ::GRPCECat::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNRMKIOBoardInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNRMKIOBoardInput() {
      ::grpc::Service::experimental().MarkMethodCallback(16,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IOBoardTx>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::Empty* request,
                 ::GRPCECat::IOBoardTx* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetNRMKIOBoardInput(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetNRMKIOBoardInput(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::Empty, ::GRPCECat::IOBoardTx>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IOBoardTx>*>(
          ::grpc::Service::experimental().GetHandler(16))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNRMKIOBoardInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKIOBoardInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNRMKIOBoardInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardTx* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNRMKIOBoardOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNRMKIOBoardOutput() {
      ::grpc::Service::experimental().MarkMethodCallback(17,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IOBoardRx>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::Empty* request,
                 ::GRPCECat::IOBoardRx* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetNRMKIOBoardOutput(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetNRMKIOBoardOutput(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::Empty, ::GRPCECat::IOBoardRx>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IOBoardRx>*>(
          ::grpc::Service::experimental().GetHandler(17))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNRMKIOBoardOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardRx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardRx* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetNRMKEndtoolOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetNRMKEndtoolOutput() {
      ::grpc::Service::experimental().MarkMethodCallback(18,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::EndtoolRx, ::GRPCECat::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::EndtoolRx* request,
                 ::GRPCECat::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetNRMKEndtoolOutput(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetNRMKEndtoolOutput(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::EndtoolRx, ::GRPCECat::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::EndtoolRx, ::GRPCECat::Empty>*>(
          ::grpc::Service::experimental().GetHandler(18))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetNRMKEndtoolOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNRMKEndtoolOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::EndtoolRx* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetNRMKEndtoolOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::EndtoolRx* /*request*/, ::GRPCECat::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNRMKEndtoolInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNRMKEndtoolInput() {
      ::grpc::Service::experimental().MarkMethodCallback(19,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::EndtoolTx>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::Empty* request,
                 ::GRPCECat::EndtoolTx* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetNRMKEndtoolInput(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetNRMKEndtoolInput(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::Empty, ::GRPCECat::EndtoolTx>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::EndtoolTx>*>(
          ::grpc::Service::experimental().GetHandler(19))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNRMKEndtoolInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKEndtoolInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNRMKEndtoolInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolTx* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNRMKEndtoolRevCDTInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNRMKEndtoolRevCDTInput() {
      ::grpc::Service::experimental().MarkMethodCallback(20,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::EndtoolRevCDTTx>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::Empty* request,
                 ::GRPCECat::EndtoolRevCDTTx* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetNRMKEndtoolRevCDTInput(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetNRMKEndtoolRevCDTInput(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::Empty, ::GRPCECat::EndtoolRevCDTTx>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::EndtoolRevCDTTx>*>(
          ::grpc::Service::experimental().GetHandler(20))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNRMKEndtoolRevCDTInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKEndtoolRevCDTInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolRevCDTTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNRMKEndtoolRevCDTInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolRevCDTTx* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetDO() {
      ::grpc::Service::experimental().MarkMethodCallback(21,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::DOList, ::GRPCECat::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::DOList* request,
                 ::GRPCECat::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::DOList, ::GRPCECat::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::DOList, ::GRPCECat::Empty>*>(
          ::grpc::Service::experimental().GetHandler(21))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::DOList* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::DOList* /*request*/, ::GRPCECat::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDI() {
      ::grpc::Service::experimental().MarkMethodCallback(22,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::DIList>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::DIList* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetDI(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetDI(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::DIList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::DIList>*>(
          ::grpc::Service::experimental().GetHandler(22))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDI(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DIList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDI(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DIList* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetDO() {
      ::grpc::Service::experimental().MarkMethodCallback(23,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::DOList>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::DOList* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::DOList>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::DOList>*>(
          ::grpc::Service::experimental().GetHandler(23))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DOList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DOList* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRobotusFTSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRobotusFTSensor() {
      ::grpc::Service::experimental().MarkMethodCallback(24,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::RobotusFTTx>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::RobotusFTTx* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetRobotusFTSensor(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetRobotusFTSensor(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::RobotusFTTx>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::RobotusFTTx>*>(
          ::grpc::Service::experimental().GetHandler(24))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRobotusFTSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotusFTSensor(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::RobotusFTTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRobotusFTSensor(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::RobotusFTTx* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResetWelconDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ResetWelconDriver() {
      ::grpc::Service::experimental().MarkMethodCallback(25,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ResetWelconDriver(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ResetWelconDriver(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::Empty>*>(
          ::grpc::Service::experimental().GetHandler(25))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ResetWelconDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetWelconDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetWelconDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCOREErrorCodeSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCOREErrorCodeSDO() {
      ::grpc::Service::experimental().MarkMethodCallback(26,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::IntVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetCOREErrorCodeSDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetCOREErrorCodeSDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::IntVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>*>(
          ::grpc::Service::experimental().GetHandler(26))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCOREErrorCodeSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCOREErrorCodeSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetCOREErrorCodeSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCORETemperature1SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCORETemperature1SDO() {
      ::grpc::Service::experimental().MarkMethodCallback(27,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::FloatVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::FloatVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetCORETemperature1SDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetCORETemperature1SDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::FloatVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::FloatVal>*>(
          ::grpc::Service::experimental().GetHandler(27))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCORETemperature1SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature1SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetCORETemperature1SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCORETemperature2SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCORETemperature2SDO() {
      ::grpc::Service::experimental().MarkMethodCallback(28,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::FloatVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::FloatVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetCORETemperature2SDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetCORETemperature2SDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::FloatVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::FloatVal>*>(
          ::grpc::Service::experimental().GetHandler(28))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCORETemperature2SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature2SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetCORETemperature2SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCORETemperature3SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCORETemperature3SDO() {
      ::grpc::Service::experimental().MarkMethodCallback(29,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::FloatVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::FloatVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetCORETemperature3SDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetCORETemperature3SDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::FloatVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::FloatVal>*>(
          ::grpc::Service::experimental().GetHandler(29))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCORETemperature3SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature3SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetCORETemperature3SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNRMKFWVersionSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNRMKFWVersionSDO() {
      ::grpc::Service::experimental().MarkMethodCallback(30,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::StringVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::StringVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetNRMKFWVersionSDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetNRMKFWVersionSDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::StringVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::StringVal>*>(
          ::grpc::Service::experimental().GetHandler(30))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNRMKFWVersionSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKFWVersionSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::StringVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNRMKFWVersionSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::StringVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMaxTorqueSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMaxTorqueSDO() {
      ::grpc::Service::experimental().MarkMethodCallback(31,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::IntVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetMaxTorqueSDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetMaxTorqueSDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::IntVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>*>(
          ::grpc::Service::experimental().GetHandler(31))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMaxTorqueSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetProfileVelocitySDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetProfileVelocitySDO() {
      ::grpc::Service::experimental().MarkMethodCallback(32,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::IntVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetProfileVelocitySDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetProfileVelocitySDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::IntVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>*>(
          ::grpc::Service::experimental().GetHandler(32))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetProfileVelocitySDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetProfileAccSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetProfileAccSDO() {
      ::grpc::Service::experimental().MarkMethodCallback(33,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::IntVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetProfileAccSDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetProfileAccSDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::IntVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>*>(
          ::grpc::Service::experimental().GetHandler(33))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetProfileAccSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetProfileDecSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetProfileDecSDO() {
      ::grpc::Service::experimental().MarkMethodCallback(34,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::IntVal* request,
                 ::GRPCECat::IntVal* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetProfileDecSDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetProfileDecSDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::IntVal, ::GRPCECat::IntVal>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>*>(
          ::grpc::Service::experimental().GetHandler(34))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetProfileDecSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetMaxTorqueSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetMaxTorqueSDO() {
      ::grpc::Service::experimental().MarkMethodCallback(35,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::ServoParam* request,
                 ::GRPCECat::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetMaxTorqueSDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetMaxTorqueSDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::ServoParam, ::GRPCECat::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>*>(
          ::grpc::Service::experimental().GetHandler(35))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetMaxTorqueSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetProfileVelocitySDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetProfileVelocitySDO() {
      ::grpc::Service::experimental().MarkMethodCallback(36,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::ServoParam* request,
                 ::GRPCECat::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetProfileVelocitySDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetProfileVelocitySDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::ServoParam, ::GRPCECat::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>*>(
          ::grpc::Service::experimental().GetHandler(36))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetProfileVelocitySDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetProfileAccSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetProfileAccSDO() {
      ::grpc::Service::experimental().MarkMethodCallback(37,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::ServoParam* request,
                 ::GRPCECat::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetProfileAccSDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetProfileAccSDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::ServoParam, ::GRPCECat::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>*>(
          ::grpc::Service::experimental().GetHandler(37))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetProfileAccSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetProfileDecSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetProfileDecSDO() {
      ::grpc::Service::experimental().MarkMethodCallback(38,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::GRPCECat::ServoParam* request,
                 ::GRPCECat::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SetProfileDecSDO(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_SetProfileDecSDO(
        ::grpc::experimental::MessageAllocator< ::GRPCECat::ServoParam, ::GRPCECat::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>*>(
          ::grpc::Service::experimental().GetHandler(38))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetProfileDecSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetMasterStatus<ExperimentalWithCallbackMethod_GetSlaveStatus<ExperimentalWithCallbackMethod_GetRxDomainStatus<ExperimentalWithCallbackMethod_GetTxDomainStatus<ExperimentalWithCallbackMethod_IsSystemReady<ExperimentalWithCallbackMethod_SetServoOnOff<ExperimentalWithCallbackMethod_SetRxPDOMotorDriver<ExperimentalWithCallbackMethod_GetRxPDOMotorDriver<ExperimentalWithCallbackMethod_GetTxPDOMotorDriver<ExperimentalWithCallbackMethod_GetMotorDriverDIs<ExperimentalWithCallbackMethod_GetErrorCode<ExperimentalWithCallbackMethod_GetMaxTorque<ExperimentalWithCallbackMethod_SetMaxTorque<ExperimentalWithCallbackMethod_GetMaxMotorSpeed<ExperimentalWithCallbackMethod_SetMaxMotorSpeed<ExperimentalWithCallbackMethod_SetNRMKIOBoardOutput<ExperimentalWithCallbackMethod_GetNRMKIOBoardInput<ExperimentalWithCallbackMethod_GetNRMKIOBoardOutput<ExperimentalWithCallbackMethod_SetNRMKEndtoolOutput<ExperimentalWithCallbackMethod_GetNRMKEndtoolInput<ExperimentalWithCallbackMethod_GetNRMKEndtoolRevCDTInput<ExperimentalWithCallbackMethod_SetDO<ExperimentalWithCallbackMethod_GetDI<ExperimentalWithCallbackMethod_GetDO<ExperimentalWithCallbackMethod_GetRobotusFTSensor<ExperimentalWithCallbackMethod_ResetWelconDriver<ExperimentalWithCallbackMethod_GetCOREErrorCodeSDO<ExperimentalWithCallbackMethod_GetCORETemperature1SDO<ExperimentalWithCallbackMethod_GetCORETemperature2SDO<ExperimentalWithCallbackMethod_GetCORETemperature3SDO<ExperimentalWithCallbackMethod_GetNRMKFWVersionSDO<ExperimentalWithCallbackMethod_GetMaxTorqueSDO<ExperimentalWithCallbackMethod_GetProfileVelocitySDO<ExperimentalWithCallbackMethod_GetProfileAccSDO<ExperimentalWithCallbackMethod_GetProfileDecSDO<ExperimentalWithCallbackMethod_SetMaxTorqueSDO<ExperimentalWithCallbackMethod_SetProfileVelocitySDO<ExperimentalWithCallbackMethod_SetProfileAccSDO<ExperimentalWithCallbackMethod_SetProfileDecSDO<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetMasterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMasterStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetMasterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMasterStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSlaveStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSlaveStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSlaveStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlaveStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRxDomainStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRxDomainStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetRxDomainStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTxDomainStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTxDomainStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTxDomainStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsSystemReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsSystemReady() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_IsSystemReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSystemReady(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetServoOnOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetServoOnOff() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetServoOnOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServoOnOff(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoIndex* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetRxPDOMotorDriver() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetRxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::MotorDriverRxIndex* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRxPDOMotorDriver() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetRxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverRx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTxPDOMotorDriver() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetTxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMotorDriverDIs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMotorDriverDIs() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetMotorDriverDIs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorDriverDIs(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetErrorCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetErrorCode() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetErrorCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetErrorCode(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMaxTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMaxTorque() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetMaxTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMaxTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMaxTorque() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SetMaxTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMaxMotorSpeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMaxMotorSpeed() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetMaxMotorSpeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMaxMotorSpeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMaxMotorSpeed() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_SetMaxMotorSpeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetNRMKIOBoardOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetNRMKIOBoardOutput() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_SetNRMKIOBoardOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::IOBoardRx* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNRMKIOBoardInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNRMKIOBoardInput() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetNRMKIOBoardInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKIOBoardInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNRMKIOBoardOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNRMKIOBoardOutput() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetNRMKIOBoardOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardRx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetNRMKEndtoolOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetNRMKEndtoolOutput() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_SetNRMKEndtoolOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNRMKEndtoolOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::EndtoolRx* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNRMKEndtoolInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNRMKEndtoolInput() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_GetNRMKEndtoolInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKEndtoolInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNRMKEndtoolRevCDTInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNRMKEndtoolRevCDTInput() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_GetNRMKEndtoolRevCDTInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKEndtoolRevCDTInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolRevCDTTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetDO() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_SetDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::DOList* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDI() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_GetDI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDI(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DIList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDO() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_GetDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DOList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRobotusFTSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRobotusFTSensor() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_GetRobotusFTSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotusFTSensor(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::RobotusFTTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetWelconDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetWelconDriver() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_ResetWelconDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetWelconDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCOREErrorCodeSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCOREErrorCodeSDO() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_GetCOREErrorCodeSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCOREErrorCodeSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCORETemperature1SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCORETemperature1SDO() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_GetCORETemperature1SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature1SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCORETemperature2SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCORETemperature2SDO() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_GetCORETemperature2SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature2SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCORETemperature3SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCORETemperature3SDO() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_GetCORETemperature3SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature3SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNRMKFWVersionSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNRMKFWVersionSDO() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_GetNRMKFWVersionSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKFWVersionSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::StringVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMaxTorqueSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMaxTorqueSDO() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_GetMaxTorqueSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProfileVelocitySDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProfileVelocitySDO() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_GetProfileVelocitySDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProfileAccSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProfileAccSDO() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_GetProfileAccSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProfileDecSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProfileDecSDO() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_GetProfileDecSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMaxTorqueSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMaxTorqueSDO() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_SetMaxTorqueSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetProfileVelocitySDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetProfileVelocitySDO() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_SetProfileVelocitySDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetProfileAccSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetProfileAccSDO() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_SetProfileAccSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetProfileDecSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetProfileDecSDO() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_SetProfileDecSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMasterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMasterStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetMasterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMasterStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMasterStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSlaveStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSlaveStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSlaveStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlaveStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSlaveStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRxDomainStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRxDomainStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetRxDomainStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRxDomainStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTxDomainStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTxDomainStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetTxDomainStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxDomainStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsSystemReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsSystemReady() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_IsSystemReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSystemReady(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsSystemReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetServoOnOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetServoOnOff() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetServoOnOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServoOnOff(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoIndex* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetServoOnOff(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetRxPDOMotorDriver() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SetRxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::MotorDriverRxIndex* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRxPDOMotorDriver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRxPDOMotorDriver() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetRxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverRx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRxPDOMotorDriver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTxPDOMotorDriver() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetTxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxPDOMotorDriver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMotorDriverDIs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMotorDriverDIs() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetMotorDriverDIs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorDriverDIs(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMotorDriverDIs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetErrorCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetErrorCode() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetErrorCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetErrorCode(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetErrorCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMaxTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMaxTorque() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetMaxTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMaxTorque(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMaxTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMaxTorque() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_SetMaxTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMaxTorque(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMaxMotorSpeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMaxMotorSpeed() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetMaxMotorSpeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMaxMotorSpeed(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMaxMotorSpeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMaxMotorSpeed() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_SetMaxMotorSpeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMaxMotorSpeed(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetNRMKIOBoardOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetNRMKIOBoardOutput() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_SetNRMKIOBoardOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::IOBoardRx* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNRMKIOBoardOutput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNRMKIOBoardInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNRMKIOBoardInput() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetNRMKIOBoardInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKIOBoardInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNRMKIOBoardInput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNRMKIOBoardOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNRMKIOBoardOutput() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetNRMKIOBoardOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardRx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNRMKIOBoardOutput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetNRMKEndtoolOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetNRMKEndtoolOutput() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_SetNRMKEndtoolOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNRMKEndtoolOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::EndtoolRx* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNRMKEndtoolOutput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNRMKEndtoolInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNRMKEndtoolInput() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_GetNRMKEndtoolInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKEndtoolInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNRMKEndtoolInput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNRMKEndtoolRevCDTInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNRMKEndtoolRevCDTInput() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_GetNRMKEndtoolRevCDTInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKEndtoolRevCDTInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolRevCDTTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNRMKEndtoolRevCDTInput(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetDO() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_SetDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::DOList* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDI() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_GetDI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDI(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DIList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDO() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_GetDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DOList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRobotusFTSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRobotusFTSensor() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_GetRobotusFTSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotusFTSensor(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::RobotusFTTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRobotusFTSensor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetWelconDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetWelconDriver() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_ResetWelconDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetWelconDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetWelconDriver(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCOREErrorCodeSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCOREErrorCodeSDO() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_GetCOREErrorCodeSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCOREErrorCodeSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCOREErrorCodeSDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCORETemperature1SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCORETemperature1SDO() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_GetCORETemperature1SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature1SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCORETemperature1SDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCORETemperature2SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCORETemperature2SDO() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_GetCORETemperature2SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature2SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCORETemperature2SDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCORETemperature3SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCORETemperature3SDO() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_GetCORETemperature3SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature3SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCORETemperature3SDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNRMKFWVersionSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNRMKFWVersionSDO() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_GetNRMKFWVersionSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKFWVersionSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::StringVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNRMKFWVersionSDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMaxTorqueSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMaxTorqueSDO() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_GetMaxTorqueSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMaxTorqueSDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProfileVelocitySDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProfileVelocitySDO() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_GetProfileVelocitySDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProfileVelocitySDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProfileAccSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProfileAccSDO() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_GetProfileAccSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProfileAccSDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProfileDecSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProfileDecSDO() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_GetProfileDecSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProfileDecSDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMaxTorqueSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMaxTorqueSDO() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_SetMaxTorqueSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMaxTorqueSDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetProfileVelocitySDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetProfileVelocitySDO() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_SetProfileVelocitySDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetProfileVelocitySDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetProfileAccSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetProfileAccSDO() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_SetProfileAccSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetProfileAccSDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetProfileDecSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetProfileDecSDO() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_SetProfileDecSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetProfileDecSDO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMasterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMasterStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetMasterStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMasterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMasterStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMasterStatus(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSlaveStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSlaveStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetSlaveStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSlaveStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSlaveStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetSlaveStatus(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRxDomainStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRxDomainStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetRxDomainStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRxDomainStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRxDomainStatus(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTxDomainStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTxDomainStatus() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetTxDomainStatus(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTxDomainStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTxDomainStatus(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IsSystemReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IsSystemReady() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->IsSystemReady(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_IsSystemReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsSystemReady(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void IsSystemReady(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetServoOnOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetServoOnOff() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetServoOnOff(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetServoOnOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetServoOnOff(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoIndex* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetServoOnOff(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetRxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetRxPDOMotorDriver() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetRxPDOMotorDriver(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetRxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::MotorDriverRxIndex* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRxPDOMotorDriver() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetRxPDOMotorDriver(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverRx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTxPDOMotorDriver() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetTxPDOMotorDriver(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetTxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMotorDriverDIs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMotorDriverDIs() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetMotorDriverDIs(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMotorDriverDIs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMotorDriverDIs(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMotorDriverDIs(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetErrorCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetErrorCode() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetErrorCode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetErrorCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetErrorCode(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetErrorCode(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMaxTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMaxTorque() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetMaxTorque(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMaxTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMaxTorque(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetMaxTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetMaxTorque() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetMaxTorque(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetMaxTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetMaxTorque(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMaxMotorSpeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMaxMotorSpeed() {
      ::grpc::Service::experimental().MarkMethodRawCallback(13,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetMaxMotorSpeed(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMaxMotorSpeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetMaxMotorSpeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetMaxMotorSpeed() {
      ::grpc::Service::experimental().MarkMethodRawCallback(14,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetMaxMotorSpeed(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetMaxMotorSpeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetNRMKIOBoardOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetNRMKIOBoardOutput() {
      ::grpc::Service::experimental().MarkMethodRawCallback(15,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetNRMKIOBoardOutput(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetNRMKIOBoardOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::IOBoardRx* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNRMKIOBoardInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNRMKIOBoardInput() {
      ::grpc::Service::experimental().MarkMethodRawCallback(16,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetNRMKIOBoardInput(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNRMKIOBoardInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKIOBoardInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNRMKIOBoardInput(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNRMKIOBoardOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNRMKIOBoardOutput() {
      ::grpc::Service::experimental().MarkMethodRawCallback(17,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetNRMKIOBoardOutput(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNRMKIOBoardOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardRx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetNRMKEndtoolOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetNRMKEndtoolOutput() {
      ::grpc::Service::experimental().MarkMethodRawCallback(18,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetNRMKEndtoolOutput(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetNRMKEndtoolOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNRMKEndtoolOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::EndtoolRx* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetNRMKEndtoolOutput(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNRMKEndtoolInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNRMKEndtoolInput() {
      ::grpc::Service::experimental().MarkMethodRawCallback(19,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetNRMKEndtoolInput(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNRMKEndtoolInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKEndtoolInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNRMKEndtoolInput(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNRMKEndtoolRevCDTInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNRMKEndtoolRevCDTInput() {
      ::grpc::Service::experimental().MarkMethodRawCallback(20,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetNRMKEndtoolRevCDTInput(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNRMKEndtoolRevCDTInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKEndtoolRevCDTInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolRevCDTTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNRMKEndtoolRevCDTInput(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(21,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::DOList* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDI() {
      ::grpc::Service::experimental().MarkMethodRawCallback(22,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetDI(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDI(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DIList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDI(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(23,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DOList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRobotusFTSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRobotusFTSensor() {
      ::grpc::Service::experimental().MarkMethodRawCallback(24,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetRobotusFTSensor(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRobotusFTSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotusFTSensor(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::RobotusFTTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetRobotusFTSensor(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResetWelconDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ResetWelconDriver() {
      ::grpc::Service::experimental().MarkMethodRawCallback(25,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ResetWelconDriver(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ResetWelconDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetWelconDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ResetWelconDriver(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCOREErrorCodeSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCOREErrorCodeSDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(26,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetCOREErrorCodeSDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCOREErrorCodeSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCOREErrorCodeSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetCOREErrorCodeSDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCORETemperature1SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCORETemperature1SDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(27,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetCORETemperature1SDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCORETemperature1SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature1SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetCORETemperature1SDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCORETemperature2SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCORETemperature2SDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(28,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetCORETemperature2SDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCORETemperature2SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature2SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetCORETemperature2SDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCORETemperature3SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCORETemperature3SDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(29,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetCORETemperature3SDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCORETemperature3SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCORETemperature3SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetCORETemperature3SDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNRMKFWVersionSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNRMKFWVersionSDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(30,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetNRMKFWVersionSDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNRMKFWVersionSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNRMKFWVersionSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::StringVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetNRMKFWVersionSDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMaxTorqueSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMaxTorqueSDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(31,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetMaxTorqueSDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMaxTorqueSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetProfileVelocitySDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetProfileVelocitySDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(32,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetProfileVelocitySDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetProfileVelocitySDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetProfileAccSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetProfileAccSDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(33,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetProfileAccSDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetProfileAccSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetProfileDecSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetProfileDecSDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(34,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetProfileDecSDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetProfileDecSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetMaxTorqueSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetMaxTorqueSDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(35,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetMaxTorqueSDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetMaxTorqueSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetProfileVelocitySDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetProfileVelocitySDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(36,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetProfileVelocitySDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetProfileVelocitySDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetProfileAccSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetProfileAccSDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(37,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetProfileAccSDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetProfileAccSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetProfileDecSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetProfileDecSDO() {
      ::grpc::Service::experimental().MarkMethodRawCallback(38,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SetProfileDecSDO(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SetProfileDecSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMasterStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMasterStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVal>(std::bind(&WithStreamedUnaryMethod_GetMasterStatus<BaseClass>::StreamedGetMasterStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMasterStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMasterStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMasterStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::Empty,::GRPCECat::IntVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSlaveStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSlaveStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVals>(std::bind(&WithStreamedUnaryMethod_GetSlaveStatus<BaseClass>::StreamedGetSlaveStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSlaveStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSlaveStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSlaveStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::Empty,::GRPCECat::IntVals>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRxDomainStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRxDomainStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVal>(std::bind(&WithStreamedUnaryMethod_GetRxDomainStatus<BaseClass>::StreamedGetRxDomainStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRxDomainStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRxDomainStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::Empty,::GRPCECat::IntVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTxDomainStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTxDomainStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVal>(std::bind(&WithStreamedUnaryMethod_GetTxDomainStatus<BaseClass>::StreamedGetTxDomainStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTxDomainStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTxDomainStatus(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTxDomainStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::Empty,::GRPCECat::IntVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsSystemReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsSystemReady() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IntVals>(std::bind(&WithStreamedUnaryMethod_IsSystemReady<BaseClass>::StreamedIsSystemReady, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IsSystemReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsSystemReady(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IntVals* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsSystemReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::Empty,::GRPCECat::IntVals>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetServoOnOff : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetServoOnOff() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::ServoIndex, ::GRPCECat::Empty>(std::bind(&WithStreamedUnaryMethod_SetServoOnOff<BaseClass>::StreamedSetServoOnOff, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetServoOnOff() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetServoOnOff(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoIndex* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetServoOnOff(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::ServoIndex,::GRPCECat::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetRxPDOMotorDriver() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::MotorDriverRxIndex, ::GRPCECat::Empty>(std::bind(&WithStreamedUnaryMethod_SetRxPDOMotorDriver<BaseClass>::StreamedSetRxPDOMotorDriver, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetRxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::MotorDriverRxIndex* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRxPDOMotorDriver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::MotorDriverRxIndex,::GRPCECat::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRxPDOMotorDriver() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::MotorDriverRx>(std::bind(&WithStreamedUnaryMethod_GetRxPDOMotorDriver<BaseClass>::StreamedGetRxPDOMotorDriver, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverRx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRxPDOMotorDriver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::MotorDriverRx>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTxPDOMotorDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTxPDOMotorDriver() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::MotorDriverTx>(std::bind(&WithStreamedUnaryMethod_GetTxPDOMotorDriver<BaseClass>::StreamedGetTxPDOMotorDriver, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTxPDOMotorDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTxPDOMotorDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::MotorDriverTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTxPDOMotorDriver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::MotorDriverTx>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMotorDriverDIs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMotorDriverDIs() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(std::bind(&WithStreamedUnaryMethod_GetMotorDriverDIs<BaseClass>::StreamedGetMotorDriverDIs, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMotorDriverDIs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMotorDriverDIs(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMotorDriverDIs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::IntVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetErrorCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetErrorCode() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(std::bind(&WithStreamedUnaryMethod_GetErrorCode<BaseClass>::StreamedGetErrorCode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetErrorCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetErrorCode(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetErrorCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::IntVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMaxTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMaxTorque() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(std::bind(&WithStreamedUnaryMethod_GetMaxTorque<BaseClass>::StreamedGetMaxTorque, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMaxTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMaxTorque(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::IntVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMaxTorque : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMaxTorque() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>(std::bind(&WithStreamedUnaryMethod_SetMaxTorque<BaseClass>::StreamedSetMaxTorque, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetMaxTorque() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMaxTorque(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMaxTorque(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::ServoParam,::GRPCECat::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMaxMotorSpeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMaxMotorSpeed() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(std::bind(&WithStreamedUnaryMethod_GetMaxMotorSpeed<BaseClass>::StreamedGetMaxMotorSpeed, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMaxMotorSpeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMaxMotorSpeed(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::IntVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMaxMotorSpeed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMaxMotorSpeed() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>(std::bind(&WithStreamedUnaryMethod_SetMaxMotorSpeed<BaseClass>::StreamedSetMaxMotorSpeed, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetMaxMotorSpeed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMaxMotorSpeed(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMaxMotorSpeed(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::ServoParam,::GRPCECat::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetNRMKIOBoardOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetNRMKIOBoardOutput() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IOBoardRx, ::GRPCECat::Empty>(std::bind(&WithStreamedUnaryMethod_SetNRMKIOBoardOutput<BaseClass>::StreamedSetNRMKIOBoardOutput, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetNRMKIOBoardOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::IOBoardRx* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetNRMKIOBoardOutput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IOBoardRx,::GRPCECat::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNRMKIOBoardInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNRMKIOBoardInput() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IOBoardTx>(std::bind(&WithStreamedUnaryMethod_GetNRMKIOBoardInput<BaseClass>::StreamedGetNRMKIOBoardInput, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNRMKIOBoardInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNRMKIOBoardInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNRMKIOBoardInput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::Empty,::GRPCECat::IOBoardTx>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNRMKIOBoardOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNRMKIOBoardOutput() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::IOBoardRx>(std::bind(&WithStreamedUnaryMethod_GetNRMKIOBoardOutput<BaseClass>::StreamedGetNRMKIOBoardOutput, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNRMKIOBoardOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNRMKIOBoardOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::IOBoardRx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNRMKIOBoardOutput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::Empty,::GRPCECat::IOBoardRx>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetNRMKEndtoolOutput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetNRMKEndtoolOutput() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::EndtoolRx, ::GRPCECat::Empty>(std::bind(&WithStreamedUnaryMethod_SetNRMKEndtoolOutput<BaseClass>::StreamedSetNRMKEndtoolOutput, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetNRMKEndtoolOutput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetNRMKEndtoolOutput(::grpc::ServerContext* /*context*/, const ::GRPCECat::EndtoolRx* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetNRMKEndtoolOutput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::EndtoolRx,::GRPCECat::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNRMKEndtoolInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNRMKEndtoolInput() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::EndtoolTx>(std::bind(&WithStreamedUnaryMethod_GetNRMKEndtoolInput<BaseClass>::StreamedGetNRMKEndtoolInput, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNRMKEndtoolInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNRMKEndtoolInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNRMKEndtoolInput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::Empty,::GRPCECat::EndtoolTx>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNRMKEndtoolRevCDTInput : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNRMKEndtoolRevCDTInput() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::Empty, ::GRPCECat::EndtoolRevCDTTx>(std::bind(&WithStreamedUnaryMethod_GetNRMKEndtoolRevCDTInput<BaseClass>::StreamedGetNRMKEndtoolRevCDTInput, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNRMKEndtoolRevCDTInput() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNRMKEndtoolRevCDTInput(::grpc::ServerContext* /*context*/, const ::GRPCECat::Empty* /*request*/, ::GRPCECat::EndtoolRevCDTTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNRMKEndtoolRevCDTInput(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::Empty,::GRPCECat::EndtoolRevCDTTx>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetDO() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::DOList, ::GRPCECat::Empty>(std::bind(&WithStreamedUnaryMethod_SetDO<BaseClass>::StreamedSetDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::DOList* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::DOList,::GRPCECat::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDI() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::DIList>(std::bind(&WithStreamedUnaryMethod_GetDI<BaseClass>::StreamedGetDI, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDI(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DIList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::DIList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDO() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::DOList>(std::bind(&WithStreamedUnaryMethod_GetDO<BaseClass>::StreamedGetDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::DOList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::DOList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRobotusFTSensor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRobotusFTSensor() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::RobotusFTTx>(std::bind(&WithStreamedUnaryMethod_GetRobotusFTSensor<BaseClass>::StreamedGetRobotusFTSensor, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRobotusFTSensor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRobotusFTSensor(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::RobotusFTTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRobotusFTSensor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::RobotusFTTx>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetWelconDriver : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetWelconDriver() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::Empty>(std::bind(&WithStreamedUnaryMethod_ResetWelconDriver<BaseClass>::StreamedResetWelconDriver, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResetWelconDriver() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetWelconDriver(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetWelconDriver(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCOREErrorCodeSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCOREErrorCodeSDO() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(std::bind(&WithStreamedUnaryMethod_GetCOREErrorCodeSDO<BaseClass>::StreamedGetCOREErrorCodeSDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCOREErrorCodeSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCOREErrorCodeSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCOREErrorCodeSDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::IntVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCORETemperature1SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCORETemperature1SDO() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::FloatVal>(std::bind(&WithStreamedUnaryMethod_GetCORETemperature1SDO<BaseClass>::StreamedGetCORETemperature1SDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCORETemperature1SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCORETemperature1SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCORETemperature1SDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::FloatVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCORETemperature2SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCORETemperature2SDO() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::FloatVal>(std::bind(&WithStreamedUnaryMethod_GetCORETemperature2SDO<BaseClass>::StreamedGetCORETemperature2SDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCORETemperature2SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCORETemperature2SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCORETemperature2SDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::FloatVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCORETemperature3SDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCORETemperature3SDO() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::FloatVal>(std::bind(&WithStreamedUnaryMethod_GetCORETemperature3SDO<BaseClass>::StreamedGetCORETemperature3SDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCORETemperature3SDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCORETemperature3SDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::FloatVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCORETemperature3SDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::FloatVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNRMKFWVersionSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNRMKFWVersionSDO() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::StringVal>(std::bind(&WithStreamedUnaryMethod_GetNRMKFWVersionSDO<BaseClass>::StreamedGetNRMKFWVersionSDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetNRMKFWVersionSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNRMKFWVersionSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::StringVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNRMKFWVersionSDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::StringVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMaxTorqueSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMaxTorqueSDO() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(std::bind(&WithStreamedUnaryMethod_GetMaxTorqueSDO<BaseClass>::StreamedGetMaxTorqueSDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMaxTorqueSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMaxTorqueSDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::IntVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProfileVelocitySDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProfileVelocitySDO() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(std::bind(&WithStreamedUnaryMethod_GetProfileVelocitySDO<BaseClass>::StreamedGetProfileVelocitySDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetProfileVelocitySDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProfileVelocitySDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::IntVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProfileAccSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProfileAccSDO() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(std::bind(&WithStreamedUnaryMethod_GetProfileAccSDO<BaseClass>::StreamedGetProfileAccSDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetProfileAccSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProfileAccSDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::IntVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProfileDecSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProfileDecSDO() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::IntVal, ::GRPCECat::IntVal>(std::bind(&WithStreamedUnaryMethod_GetProfileDecSDO<BaseClass>::StreamedGetProfileDecSDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetProfileDecSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::IntVal* /*request*/, ::GRPCECat::IntVal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProfileDecSDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::IntVal,::GRPCECat::IntVal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMaxTorqueSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMaxTorqueSDO() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>(std::bind(&WithStreamedUnaryMethod_SetMaxTorqueSDO<BaseClass>::StreamedSetMaxTorqueSDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetMaxTorqueSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMaxTorqueSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMaxTorqueSDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::ServoParam,::GRPCECat::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetProfileVelocitySDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetProfileVelocitySDO() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>(std::bind(&WithStreamedUnaryMethod_SetProfileVelocitySDO<BaseClass>::StreamedSetProfileVelocitySDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetProfileVelocitySDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetProfileVelocitySDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetProfileVelocitySDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::ServoParam,::GRPCECat::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetProfileAccSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetProfileAccSDO() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>(std::bind(&WithStreamedUnaryMethod_SetProfileAccSDO<BaseClass>::StreamedSetProfileAccSDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetProfileAccSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetProfileAccSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetProfileAccSDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::ServoParam,::GRPCECat::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetProfileDecSDO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetProfileDecSDO() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler< ::GRPCECat::ServoParam, ::GRPCECat::Empty>(std::bind(&WithStreamedUnaryMethod_SetProfileDecSDO<BaseClass>::StreamedSetProfileDecSDO, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetProfileDecSDO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetProfileDecSDO(::grpc::ServerContext* /*context*/, const ::GRPCECat::ServoParam* /*request*/, ::GRPCECat::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetProfileDecSDO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GRPCECat::ServoParam,::GRPCECat::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMasterStatus<WithStreamedUnaryMethod_GetSlaveStatus<WithStreamedUnaryMethod_GetRxDomainStatus<WithStreamedUnaryMethod_GetTxDomainStatus<WithStreamedUnaryMethod_IsSystemReady<WithStreamedUnaryMethod_SetServoOnOff<WithStreamedUnaryMethod_SetRxPDOMotorDriver<WithStreamedUnaryMethod_GetRxPDOMotorDriver<WithStreamedUnaryMethod_GetTxPDOMotorDriver<WithStreamedUnaryMethod_GetMotorDriverDIs<WithStreamedUnaryMethod_GetErrorCode<WithStreamedUnaryMethod_GetMaxTorque<WithStreamedUnaryMethod_SetMaxTorque<WithStreamedUnaryMethod_GetMaxMotorSpeed<WithStreamedUnaryMethod_SetMaxMotorSpeed<WithStreamedUnaryMethod_SetNRMKIOBoardOutput<WithStreamedUnaryMethod_GetNRMKIOBoardInput<WithStreamedUnaryMethod_GetNRMKIOBoardOutput<WithStreamedUnaryMethod_SetNRMKEndtoolOutput<WithStreamedUnaryMethod_GetNRMKEndtoolInput<WithStreamedUnaryMethod_GetNRMKEndtoolRevCDTInput<WithStreamedUnaryMethod_SetDO<WithStreamedUnaryMethod_GetDI<WithStreamedUnaryMethod_GetDO<WithStreamedUnaryMethod_GetRobotusFTSensor<WithStreamedUnaryMethod_ResetWelconDriver<WithStreamedUnaryMethod_GetCOREErrorCodeSDO<WithStreamedUnaryMethod_GetCORETemperature1SDO<WithStreamedUnaryMethod_GetCORETemperature2SDO<WithStreamedUnaryMethod_GetCORETemperature3SDO<WithStreamedUnaryMethod_GetNRMKFWVersionSDO<WithStreamedUnaryMethod_GetMaxTorqueSDO<WithStreamedUnaryMethod_GetProfileVelocitySDO<WithStreamedUnaryMethod_GetProfileAccSDO<WithStreamedUnaryMethod_GetProfileDecSDO<WithStreamedUnaryMethod_SetMaxTorqueSDO<WithStreamedUnaryMethod_SetProfileVelocitySDO<WithStreamedUnaryMethod_SetProfileAccSDO<WithStreamedUnaryMethod_SetProfileDecSDO<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMasterStatus<WithStreamedUnaryMethod_GetSlaveStatus<WithStreamedUnaryMethod_GetRxDomainStatus<WithStreamedUnaryMethod_GetTxDomainStatus<WithStreamedUnaryMethod_IsSystemReady<WithStreamedUnaryMethod_SetServoOnOff<WithStreamedUnaryMethod_SetRxPDOMotorDriver<WithStreamedUnaryMethod_GetRxPDOMotorDriver<WithStreamedUnaryMethod_GetTxPDOMotorDriver<WithStreamedUnaryMethod_GetMotorDriverDIs<WithStreamedUnaryMethod_GetErrorCode<WithStreamedUnaryMethod_GetMaxTorque<WithStreamedUnaryMethod_SetMaxTorque<WithStreamedUnaryMethod_GetMaxMotorSpeed<WithStreamedUnaryMethod_SetMaxMotorSpeed<WithStreamedUnaryMethod_SetNRMKIOBoardOutput<WithStreamedUnaryMethod_GetNRMKIOBoardInput<WithStreamedUnaryMethod_GetNRMKIOBoardOutput<WithStreamedUnaryMethod_SetNRMKEndtoolOutput<WithStreamedUnaryMethod_GetNRMKEndtoolInput<WithStreamedUnaryMethod_GetNRMKEndtoolRevCDTInput<WithStreamedUnaryMethod_SetDO<WithStreamedUnaryMethod_GetDI<WithStreamedUnaryMethod_GetDO<WithStreamedUnaryMethod_GetRobotusFTSensor<WithStreamedUnaryMethod_ResetWelconDriver<WithStreamedUnaryMethod_GetCOREErrorCodeSDO<WithStreamedUnaryMethod_GetCORETemperature1SDO<WithStreamedUnaryMethod_GetCORETemperature2SDO<WithStreamedUnaryMethod_GetCORETemperature3SDO<WithStreamedUnaryMethod_GetNRMKFWVersionSDO<WithStreamedUnaryMethod_GetMaxTorqueSDO<WithStreamedUnaryMethod_GetProfileVelocitySDO<WithStreamedUnaryMethod_GetProfileAccSDO<WithStreamedUnaryMethod_GetProfileDecSDO<WithStreamedUnaryMethod_SetMaxTorqueSDO<WithStreamedUnaryMethod_SetProfileVelocitySDO<WithStreamedUnaryMethod_SetProfileAccSDO<WithStreamedUnaryMethod_SetProfileDecSDO<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace GRPCECat


#endif  // GRPC_EtherCATCommgRPCServer_2eproto__INCLUDED
